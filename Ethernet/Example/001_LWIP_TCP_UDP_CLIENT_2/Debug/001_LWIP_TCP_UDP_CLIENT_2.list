
001_LWIP_TCP_UDP_CLIENT_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015298  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003334  08015428  08015428  00025428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801875c  0801875c  0002875c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018764  08018764  00028764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018768  08018768  00028768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  0801876c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000aad8  20000080  080187ec  00030080  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  2000ab58  080187ec  0003ab58  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003e8b6  00000000  00000000  000300a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000071ae  00000000  00000000  0006e95f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001e10  00000000  00000000  00075b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001c20  00000000  00000000  00077920  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015713  00000000  00000000  00079540  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000099e7  00000000  00000000  0008ec53  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0009863a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000811c  00000000  00000000  000986b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015410 	.word	0x08015410

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08015410 	.word	0x08015410

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460e      	mov	r6, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9d08      	ldr	r5, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d150      	bne.n	80002b2 <__udivmoddi4+0xb2>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96c      	bls.n	80002f0 <__udivmoddi4+0xf0>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f60e 	lsl.w	r6, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c06 	orr.w	ip, ip, r6
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	0c3a      	lsrs	r2, r7, #16
 800023a:	fbbc f9f2 	udiv	r9, ip, r2
 800023e:	b2bb      	uxth	r3, r7
 8000240:	fb02 cc19 	mls	ip, r2, r9, ip
 8000244:	fb09 fa03 	mul.w	sl, r9, r3
 8000248:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800024c:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000250:	45b2      	cmp	sl, r6
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x6a>
 8000254:	19f6      	adds	r6, r6, r7
 8000256:	f109 31ff 	add.w	r1, r9, #4294967295
 800025a:	f080 8125 	bcs.w	80004a8 <__udivmoddi4+0x2a8>
 800025e:	45b2      	cmp	sl, r6
 8000260:	f240 8122 	bls.w	80004a8 <__udivmoddi4+0x2a8>
 8000264:	f1a9 0902 	sub.w	r9, r9, #2
 8000268:	443e      	add	r6, r7
 800026a:	eba6 060a 	sub.w	r6, r6, sl
 800026e:	fbb6 f0f2 	udiv	r0, r6, r2
 8000272:	fb02 6610 	mls	r6, r2, r0, r6
 8000276:	fb00 f303 	mul.w	r3, r0, r3
 800027a:	b2a4      	uxth	r4, r4
 800027c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000280:	42a3      	cmp	r3, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 810b 	bcs.w	80004a4 <__udivmoddi4+0x2a4>
 800028e:	42a3      	cmp	r3, r4
 8000290:	f240 8108 	bls.w	80004a4 <__udivmoddi4+0x2a4>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	2100      	movs	r1, #0
 800029a:	1ae4      	subs	r4, r4, r3
 800029c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80002a0:	2d00      	cmp	r5, #0
 80002a2:	d062      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a4:	2300      	movs	r3, #0
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	602c      	str	r4, [r5, #0]
 80002ac:	606b      	str	r3, [r5, #4]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d907      	bls.n	80002c6 <__udivmoddi4+0xc6>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	d055      	beq.n	8000366 <__udivmoddi4+0x166>
 80002ba:	2100      	movs	r1, #0
 80002bc:	e885 0041 	stmia.w	r5, {r0, r6}
 80002c0:	4608      	mov	r0, r1
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	f040 808f 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d0:	42b3      	cmp	r3, r6
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xda>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80fc 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb66 0603 	sbc.w	r6, r6, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	46b4      	mov	ip, r6
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d040      	beq.n	800036a <__udivmoddi4+0x16a>
 80002e8:	e885 1010 	stmia.w	r5, {r4, ip}
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	b912      	cbnz	r2, 80002f8 <__udivmoddi4+0xf8>
 80002f2:	2701      	movs	r7, #1
 80002f4:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f8:	fab7 fe87 	clz	lr, r7
 80002fc:	f1be 0f00 	cmp.w	lr, #0
 8000300:	d135      	bne.n	800036e <__udivmoddi4+0x16e>
 8000302:	2101      	movs	r1, #1
 8000304:	1bf6      	subs	r6, r6, r7
 8000306:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800030a:	fa1f f887 	uxth.w	r8, r7
 800030e:	fbb6 f2fc 	udiv	r2, r6, ip
 8000312:	fb0c 6612 	mls	r6, ip, r2, r6
 8000316:	fb08 f002 	mul.w	r0, r8, r2
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000320:	42b0      	cmp	r0, r6
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19f6      	adds	r6, r6, r7
 8000326:	f102 33ff 	add.w	r3, r2, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42b0      	cmp	r0, r6
 800032e:	f200 80d2 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000332:	461a      	mov	r2, r3
 8000334:	1a36      	subs	r6, r6, r0
 8000336:	fbb6 f0fc 	udiv	r0, r6, ip
 800033a:	fb0c 6610 	mls	r6, ip, r0, r6
 800033e:	fb08 f800 	mul.w	r8, r8, r0
 8000342:	b2a3      	uxth	r3, r4
 8000344:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b9 	bhi.w	80004cc <__udivmoddi4+0x2cc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000364:	e79c      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000366:	4629      	mov	r1, r5
 8000368:	4628      	mov	r0, r5
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	f1ce 0320 	rsb	r3, lr, #32
 8000376:	fa26 f203 	lsr.w	r2, r6, r3
 800037a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800037e:	fbb2 f1fc 	udiv	r1, r2, ip
 8000382:	fa1f f887 	uxth.w	r8, r7
 8000386:	fb0c 2211 	mls	r2, ip, r1, r2
 800038a:	fa06 f60e 	lsl.w	r6, r6, lr
 800038e:	fa20 f303 	lsr.w	r3, r0, r3
 8000392:	fb01 f908 	mul.w	r9, r1, r8
 8000396:	4333      	orrs	r3, r6
 8000398:	0c1e      	lsrs	r6, r3, #16
 800039a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800039e:	45b1      	cmp	r9, r6
 80003a0:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a4:	d909      	bls.n	80003ba <__udivmoddi4+0x1ba>
 80003a6:	19f6      	adds	r6, r6, r7
 80003a8:	f101 32ff 	add.w	r2, r1, #4294967295
 80003ac:	f080 808c 	bcs.w	80004c8 <__udivmoddi4+0x2c8>
 80003b0:	45b1      	cmp	r9, r6
 80003b2:	f240 8089 	bls.w	80004c8 <__udivmoddi4+0x2c8>
 80003b6:	3902      	subs	r1, #2
 80003b8:	443e      	add	r6, r7
 80003ba:	eba6 0609 	sub.w	r6, r6, r9
 80003be:	fbb6 f0fc 	udiv	r0, r6, ip
 80003c2:	fb0c 6210 	mls	r2, ip, r0, r6
 80003c6:	fb00 f908 	mul.w	r9, r0, r8
 80003ca:	b29e      	uxth	r6, r3
 80003cc:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80003d0:	45b1      	cmp	r9, r6
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1e4>
 80003d4:	19f6      	adds	r6, r6, r7
 80003d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003da:	d271      	bcs.n	80004c0 <__udivmoddi4+0x2c0>
 80003dc:	45b1      	cmp	r9, r6
 80003de:	d96f      	bls.n	80004c0 <__udivmoddi4+0x2c0>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443e      	add	r6, r7
 80003e4:	eba6 0609 	sub.w	r6, r6, r9
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	ea48 0303 	orr.w	r3, r8, r3
 80003fc:	fa26 f407 	lsr.w	r4, r6, r7
 8000400:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000404:	fbb4 f9fe 	udiv	r9, r4, lr
 8000408:	fa1f fc83 	uxth.w	ip, r3
 800040c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000410:	408e      	lsls	r6, r1
 8000412:	fa20 f807 	lsr.w	r8, r0, r7
 8000416:	fb09 fa0c 	mul.w	sl, r9, ip
 800041a:	ea48 0806 	orr.w	r8, r8, r6
 800041e:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000422:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000426:	45a2      	cmp	sl, r4
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 f601 	lsl.w	r6, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18e4      	adds	r4, r4, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d244      	bcs.n	80004c4 <__udivmoddi4+0x2c4>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d942      	bls.n	80004c4 <__udivmoddi4+0x2c4>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441c      	add	r4, r3
 8000444:	eba4 040a 	sub.w	r4, r4, sl
 8000448:	fbb4 f0fe 	udiv	r0, r4, lr
 800044c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000450:	fb00 fc0c 	mul.w	ip, r0, ip
 8000454:	fa1f f888 	uxth.w	r8, r8
 8000458:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800045c:	45a4      	cmp	ip, r4
 800045e:	d907      	bls.n	8000470 <__udivmoddi4+0x270>
 8000460:	18e4      	adds	r4, r4, r3
 8000462:	f100 3eff 	add.w	lr, r0, #4294967295
 8000466:	d229      	bcs.n	80004bc <__udivmoddi4+0x2bc>
 8000468:	45a4      	cmp	ip, r4
 800046a:	d927      	bls.n	80004bc <__udivmoddi4+0x2bc>
 800046c:	3802      	subs	r0, #2
 800046e:	441c      	add	r4, r3
 8000470:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000474:	fba0 8902 	umull	r8, r9, r0, r2
 8000478:	eba4 0c0c 	sub.w	ip, r4, ip
 800047c:	45cc      	cmp	ip, r9
 800047e:	46c2      	mov	sl, r8
 8000480:	46ce      	mov	lr, r9
 8000482:	d315      	bcc.n	80004b0 <__udivmoddi4+0x2b0>
 8000484:	d012      	beq.n	80004ac <__udivmoddi4+0x2ac>
 8000486:	b155      	cbz	r5, 800049e <__udivmoddi4+0x29e>
 8000488:	ebb6 030a 	subs.w	r3, r6, sl
 800048c:	eb6c 060e 	sbc.w	r6, ip, lr
 8000490:	fa06 f707 	lsl.w	r7, r6, r7
 8000494:	40cb      	lsrs	r3, r1
 8000496:	431f      	orrs	r7, r3
 8000498:	40ce      	lsrs	r6, r1
 800049a:	602f      	str	r7, [r5, #0]
 800049c:	606e      	str	r6, [r5, #4]
 800049e:	2100      	movs	r1, #0
 80004a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6f7      	b.n	8000298 <__udivmoddi4+0x98>
 80004a8:	4689      	mov	r9, r1
 80004aa:	e6de      	b.n	800026a <__udivmoddi4+0x6a>
 80004ac:	4546      	cmp	r6, r8
 80004ae:	d2ea      	bcs.n	8000486 <__udivmoddi4+0x286>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 0e03 	sbc.w	lr, r9, r3
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7e4      	b.n	8000486 <__udivmoddi4+0x286>
 80004bc:	4670      	mov	r0, lr
 80004be:	e7d7      	b.n	8000470 <__udivmoddi4+0x270>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e78f      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7bd      	b.n	8000444 <__udivmoddi4+0x244>
 80004c8:	4611      	mov	r1, r2
 80004ca:	e776      	b.n	80003ba <__udivmoddi4+0x1ba>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e744      	b.n	800035c <__udivmoddi4+0x15c>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004d6:	3a02      	subs	r2, #2
 80004d8:	443e      	add	r6, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a06      	ldr	r2, [pc, #24]	; (8000508 <vApplicationGetIdleTaskMemory+0x28>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a05      	ldr	r2, [pc, #20]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	2000009c 	.word	0x2000009c
 800050c:	200000f0 	.word	0x200000f0

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fb49 	bl	8000bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f81b 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f85f 	bl	80005e0 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 1024);
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <main+0x3c>)
 8000524:	1d3c      	adds	r4, r7, #4
 8000526:	461d      	mov	r5, r3
 8000528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000530:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f003 fcbf 	bl	8003ebc <osThreadCreate>
 800053e:	4602      	mov	r2, r0
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <main+0x40>)
 8000542:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f003 fca3 	bl	8003e8e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x38>
 800054a:	bf00      	nop
 800054c:	08015434 	.word	0x08015434
 8000550:	20004238 	.word	0x20004238

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b092      	sub	sp, #72	; 0x48
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f013 fd80 	bl	8014068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000576:	2301      	movs	r3, #1
 8000578:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057a:	2301      	movs	r3, #1
 800057c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000586:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 800058c:	23f0      	movs	r3, #240	; 0xf0
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000594:	2304      	movs	r3, #4
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0318 	add.w	r3, r7, #24
 800059c:	4618      	mov	r0, r3
 800059e:	f001 ffb9 	bl	8002514 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005a8:	f000 f974 	bl	8000894 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2103      	movs	r1, #3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 f9f3 	bl	80029b4 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005d4:	f000 f95e 	bl	8000894 <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3748      	adds	r7, #72	; 0x48
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	4a39      	ldr	r2, [pc, #228]	; (80006e0 <MX_GPIO_Init+0x100>)
 80005fc:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <MX_GPIO_Init+0x100>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	4a32      	ldr	r2, [pc, #200]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <MX_GPIO_Init+0x100>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4a2b      	ldr	r2, [pc, #172]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4a24      	ldr	r2, [pc, #144]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_GPIO_Init+0x100>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4a1d      	ldr	r2, [pc, #116]	; (80006e0 <MX_GPIO_Init+0x100>)
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <MX_GPIO_Init+0x100>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f244 0181 	movw	r1, #16513	; 0x4081
 8000688:	4816      	ldr	r0, [pc, #88]	; (80006e4 <MX_GPIO_Init+0x104>)
 800068a:	f001 ff08 	bl	800249e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800068e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000694:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4810      	ldr	r0, [pc, #64]	; (80006e8 <MX_GPIO_Init+0x108>)
 80006a6:	f001 fd45 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80006aa:	f244 0381 	movw	r3, #16513	; 0x4081
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	4808      	ldr	r0, [pc, #32]	; (80006e4 <MX_GPIO_Init+0x104>)
 80006c4:	f001 fd36 	bl	8002134 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2105      	movs	r1, #5
 80006cc:	2028      	movs	r0, #40	; 0x28
 80006ce:	f000 fb80 	bl	8000dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006d2:	2028      	movs	r0, #40	; 0x28
 80006d4:	f000 fb99 	bl	8000e0a <HAL_NVIC_EnableIRQ>

}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	; 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020400 	.word	0x40020400
 80006e8:	40020800 	.word	0x40020800

080006ec <tcp_client_task>:

/* USER CODE BEGIN 4 */
void tcp_client_task(void){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

	struct sockaddr_in their_addr;
	their_addr.sin_addr.s_addr = inet_addr("192.168.0.10");
 80006f2:	484f      	ldr	r0, [pc, #316]	; (8000830 <tcp_client_task+0x144>)
 80006f4:	f00a fedc 	bl	800b4b0 <ipaddr_addr>
 80006f8:	4603      	mov	r3, r0
 80006fa:	607b      	str	r3, [r7, #4]
	their_addr.sin_family = AF_INET;
 80006fc:	2302      	movs	r3, #2
 80006fe:	707b      	strb	r3, [r7, #1]
	their_addr.sin_port = htons(PORT);
 8000700:	f241 3088 	movw	r0, #5000	; 0x1388
 8000704:	f009 fb40 	bl	8009d88 <lwip_htons>
 8000708:	4603      	mov	r3, r0
 800070a:	807b      	strh	r3, [r7, #2]

	while(1){

		if((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1){
 800070c:	2200      	movs	r2, #0
 800070e:	2101      	movs	r1, #1
 8000710:	2002      	movs	r0, #2
 8000712:	f009 f865 	bl	80097e0 <lwip_socket>
 8000716:	4602      	mov	r2, r0
 8000718:	4b46      	ldr	r3, [pc, #280]	; (8000834 <tcp_client_task+0x148>)
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	4b45      	ldr	r3, [pc, #276]	; (8000834 <tcp_client_task+0x148>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000724:	d103      	bne.n	800072e <tcp_client_task+0x42>
	        perror("socket");
 8000726:	4844      	ldr	r0, [pc, #272]	; (8000838 <tcp_client_task+0x14c>)
 8000728:	f013 fccc 	bl	80140c4 <perror>
	        break;
 800072c:	e07b      	b.n	8000826 <tcp_client_task+0x13a>
		}

		if(connect(sock,(struct sockaddr *)&their_addr, sizeof(struct sockaddr)) == -1){
 800072e:	4b41      	ldr	r3, [pc, #260]	; (8000834 <tcp_client_task+0x148>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4639      	mov	r1, r7
 8000734:	2210      	movs	r2, #16
 8000736:	4618      	mov	r0, r3
 8000738:	f008 fce0 	bl	80090fc <lwip_connect>
 800073c:	4603      	mov	r3, r0
 800073e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000742:	d103      	bne.n	800074c <tcp_client_task+0x60>
	        perror("socket");
 8000744:	483c      	ldr	r0, [pc, #240]	; (8000838 <tcp_client_task+0x14c>)
 8000746:	f013 fcbd 	bl	80140c4 <perror>
	        break;
 800074a:	e06c      	b.n	8000826 <tcp_client_task+0x13a>
		}

		while(1){

			if(send(sock, &result, sizeof(result), 0) == -1){
 800074c:	4b39      	ldr	r3, [pc, #228]	; (8000834 <tcp_client_task+0x148>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	2300      	movs	r3, #0
 8000752:	2201      	movs	r2, #1
 8000754:	4939      	ldr	r1, [pc, #228]	; (800083c <tcp_client_task+0x150>)
 8000756:	f008 ff2b 	bl	80095b0 <lwip_send>
 800075a:	4603      	mov	r3, r0
 800075c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000760:	d103      	bne.n	800076a <tcp_client_task+0x7e>
				perror("send");
 8000762:	4837      	ldr	r0, [pc, #220]	; (8000840 <tcp_client_task+0x154>)
 8000764:	f013 fcae 	bl	80140c4 <perror>
				continue;
 8000768:	e05c      	b.n	8000824 <tcp_client_task+0x138>
			}

			if((bytes = recv(sock, &buffer, sizeof(buffer), 0)) == -1){
 800076a:	4b32      	ldr	r3, [pc, #200]	; (8000834 <tcp_client_task+0x148>)
 800076c:	6818      	ldr	r0, [r3, #0]
 800076e:	2300      	movs	r3, #0
 8000770:	2201      	movs	r2, #1
 8000772:	4934      	ldr	r1, [pc, #208]	; (8000844 <tcp_client_task+0x158>)
 8000774:	f008 ff06 	bl	8009584 <lwip_recv>
 8000778:	4602      	mov	r2, r0
 800077a:	4b33      	ldr	r3, [pc, #204]	; (8000848 <tcp_client_task+0x15c>)
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	4b32      	ldr	r3, [pc, #200]	; (8000848 <tcp_client_task+0x15c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000786:	d103      	bne.n	8000790 <tcp_client_task+0xa4>
				perror("receive");
 8000788:	4830      	ldr	r0, [pc, #192]	; (800084c <tcp_client_task+0x160>)
 800078a:	f013 fc9b 	bl	80140c4 <perror>
				continue;
 800078e:	e049      	b.n	8000824 <tcp_client_task+0x138>
			}

			if((int)buffer%3 == 1){
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <tcp_client_task+0x158>)
 8000792:	781a      	ldrb	r2, [r3, #0]
 8000794:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <tcp_client_task+0x164>)
 8000796:	fba3 1302 	umull	r1, r3, r3, r2
 800079a:	0859      	lsrs	r1, r3, #1
 800079c:	460b      	mov	r3, r1
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	440b      	add	r3, r1
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d10b      	bne.n	80007c2 <tcp_client_task+0xd6>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2101      	movs	r1, #1
 80007ae:	4829      	ldr	r0, [pc, #164]	; (8000854 <tcp_client_task+0x168>)
 80007b0:	f001 fe75 	bl	800249e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_14, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007ba:	4826      	ldr	r0, [pc, #152]	; (8000854 <tcp_client_task+0x168>)
 80007bc:	f001 fe6f 	bl	800249e <HAL_GPIO_WritePin>
 80007c0:	e7c4      	b.n	800074c <tcp_client_task+0x60>
			}
			else if((int)buffer%3 == 2){
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <tcp_client_task+0x158>)
 80007c4:	781a      	ldrb	r2, [r3, #0]
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <tcp_client_task+0x164>)
 80007c8:	fba3 1302 	umull	r1, r3, r3, r2
 80007cc:	0859      	lsrs	r1, r3, #1
 80007ce:	460b      	mov	r3, r1
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	440b      	add	r3, r1
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d10b      	bne.n	80007f4 <tcp_client_task+0x108>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	481c      	ldr	r0, [pc, #112]	; (8000854 <tcp_client_task+0x168>)
 80007e2:	f001 fe5c 	bl	800249e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_14, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f244 0101 	movw	r1, #16385	; 0x4001
 80007ec:	4819      	ldr	r0, [pc, #100]	; (8000854 <tcp_client_task+0x168>)
 80007ee:	f001 fe56 	bl	800249e <HAL_GPIO_WritePin>
 80007f2:	e7ab      	b.n	800074c <tcp_client_task+0x60>
			}
			else if((int)buffer%3 == 0){
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <tcp_client_task+0x158>)
 80007f6:	781a      	ldrb	r2, [r3, #0]
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <tcp_client_task+0x164>)
 80007fa:	fba3 1302 	umull	r1, r3, r3, r2
 80007fe:	0859      	lsrs	r1, r3, #1
 8000800:	460b      	mov	r3, r1
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	440b      	add	r3, r1
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b00      	cmp	r3, #0
 800080c:	d19e      	bne.n	800074c <tcp_client_task+0x60>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000814:	480f      	ldr	r0, [pc, #60]	; (8000854 <tcp_client_task+0x168>)
 8000816:	f001 fe42 	bl	800249e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2181      	movs	r1, #129	; 0x81
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <tcp_client_task+0x168>)
 8000820:	f001 fe3d 	bl	800249e <HAL_GPIO_WritePin>
			if(send(sock, &result, sizeof(result), 0) == -1){
 8000824:	e792      	b.n	800074c <tcp_client_task+0x60>
			}

		}
		close(sock);
	}
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	08015450 	.word	0x08015450
 8000834:	2000423c 	.word	0x2000423c
 8000838:	08015460 	.word	0x08015460
 800083c:	20004250 	.word	0x20004250
 8000840:	08015468 	.word	0x08015468
 8000844:	20004244 	.word	0x20004244
 8000848:	20004240 	.word	0x20004240
 800084c:	08015470 	.word	0x08015470
 8000850:	aaaaaaab 	.word	0xaaaaaaab
 8000854:	40020400 	.word	0x40020400

08000858 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000860:	f002 fd6a 	bl	8003338 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcp_client_task();
 8000864:	f7ff ff42 	bl	80006ec <tcp_client_task>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f003 fb73 	bl	8003f54 <osDelay>
 800086e:	e7fb      	b.n	8000868 <StartDefaultTask+0x10>

08000870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d101      	bne.n	8000886 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000882:	f000 f9b5 	bl	8000bf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40010000 	.word	0x40010000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089a:	e7fe      	b.n	800089a <Error_Handler+0x6>

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <HAL_MspInit+0x54>)
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <HAL_MspInit+0x54>)
 80008aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_MspInit+0x54>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <HAL_MspInit+0x54>)
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_MspInit+0x54>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_MspInit+0x54>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	210f      	movs	r1, #15
 80008de:	f06f 0001 	mvn.w	r0, #1
 80008e2:	f000 fa76 	bl	8000dd2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	2019      	movs	r0, #25
 800090a:	f000 fa62 	bl	8000dd2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800090e:	2019      	movs	r0, #25
 8000910:	f000 fa7b 	bl	8000e0a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4a1f      	ldr	r2, [pc, #124]	; (8000998 <HAL_InitTick+0xa4>)
 800091a:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <HAL_InitTick+0xa4>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	6453      	str	r3, [r2, #68]	; 0x44
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <HAL_InitTick+0xa4>)
 8000926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000930:	f107 0210 	add.w	r2, r7, #16
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f002 fa2a 	bl	8002d94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000940:	f002 fa06 	bl	8002d50 <HAL_RCC_GetPCLK2Freq>
 8000944:	4603      	mov	r3, r0
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800094a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094c:	4a13      	ldr	r2, [pc, #76]	; (800099c <HAL_InitTick+0xa8>)
 800094e:	fba2 2303 	umull	r2, r3, r2, r3
 8000952:	0c9b      	lsrs	r3, r3, #18
 8000954:	3b01      	subs	r3, #1
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_InitTick+0xac>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <HAL_InitTick+0xb0>)
 800095c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_InitTick+0xac>)
 8000960:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000964:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_InitTick+0xac>)
 8000968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800096a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_InitTick+0xac>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_InitTick+0xac>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000978:	4809      	ldr	r0, [pc, #36]	; (80009a0 <HAL_InitTick+0xac>)
 800097a:	f002 fa3b 	bl	8002df4 <HAL_TIM_Base_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d104      	bne.n	800098e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000984:	4806      	ldr	r0, [pc, #24]	; (80009a0 <HAL_InitTick+0xac>)
 8000986:	f002 fa8d 	bl	8002ea4 <HAL_TIM_Base_Start_IT>
 800098a:	4603      	mov	r3, r0
 800098c:	e000      	b.n	8000990 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	3730      	adds	r7, #48	; 0x30
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	431bde83 	.word	0x431bde83
 80009a0:	20004254 	.word	0x20004254
 80009a4:	40010000 	.word	0x40010000

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <NMI_Handler+0x4>

080009ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <MemManage_Handler+0x4>

080009ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
	...

080009d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009da:	f002 fad1 	bl	8002f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20004254 	.word	0x20004254

080009e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009f2:	f001 fd6d 	bl	80024d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80009f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fa:	4814      	ldr	r0, [pc, #80]	; (8000a4c <EXTI15_10_IRQHandler+0x64>)
 80009fc:	f001 fd38 	bl	8002470 <HAL_GPIO_ReadPin>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d01e      	beq.n	8000a44 <EXTI15_10_IRQHandler+0x5c>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 8000a06:	bf00      	nop
 8000a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0c:	480f      	ldr	r0, [pc, #60]	; (8000a4c <EXTI15_10_IRQHandler+0x64>)
 8000a0e:	f001 fd2f 	bl	8002470 <HAL_GPIO_ReadPin>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f7      	bne.n	8000a08 <EXTI15_10_IRQHandler+0x20>
	  for(int i=0;i<1500000;i++);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	e002      	b.n	8000a24 <EXTI15_10_IRQHandler+0x3c>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	3301      	adds	r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <EXTI15_10_IRQHandler+0x68>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	ddf8      	ble.n	8000a1e <EXTI15_10_IRQHandler+0x36>
	  count++;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <EXTI15_10_IRQHandler+0x6c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3301      	adds	r3, #1
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <EXTI15_10_IRQHandler+0x6c>)
 8000a34:	6013      	str	r3, [r2, #0]
	  result = '0' + count;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <EXTI15_10_IRQHandler+0x6c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	3330      	adds	r3, #48	; 0x30
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <EXTI15_10_IRQHandler+0x70>)
 8000a42:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40020800 	.word	0x40020800
 8000a50:	0016e35f 	.word	0x0016e35f
 8000a54:	2000424c 	.word	0x2000424c
 8000a58:	20004250 	.word	0x20004250

08000a5c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <ETH_IRQHandler+0x10>)
 8000a62:	f000 fdb4 	bl	80015ce <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20005bc4 	.word	0x20005bc4

08000a70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e00a      	b.n	8000a98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a82:	68bc      	ldr	r4, [r7, #8]
 8000a84:	1c63      	adds	r3, r4, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	f3af 8000 	nop.w
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf0      	blt.n	8000a82 <_read+0x12>
	}

return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	371c      	adds	r7, #28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd90      	pop	{r4, r7, pc}

08000aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e009      	b.n	8000ad0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf1      	blt.n	8000abc <_write+0x12>
	}
	return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <_sbrk+0x50>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d102      	bne.n	8000afa <_sbrk+0x16>
		heap_end = &end;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <_sbrk+0x50>)
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <_sbrk+0x54>)
 8000af8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <_sbrk+0x50>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <_sbrk+0x50>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4413      	add	r3, r2
 8000b08:	466a      	mov	r2, sp
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d905      	bls.n	8000b1a <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <_sbrk+0x58>)
 8000b10:	220c      	movs	r2, #12
 8000b12:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	e006      	b.n	8000b28 <_sbrk+0x44>
	}

	heap_end += incr;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <_sbrk+0x50>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <_sbrk+0x50>)
 8000b24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200002f0 	.word	0x200002f0
 8000b38:	2000ab58 	.word	0x2000ab58
 8000b3c:	2000ab50 	.word	0x2000ab50

08000b40 <_close>:

int _close(int file)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	return -1;
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b66:	605a      	str	r2, [r3, #4]
	return 0;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <_isatty>:

int _isatty(int file)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	return 1;
 8000b7c:	2301      	movs	r3, #1
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
	return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_Init+0x40>)
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_Init+0x40>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bbc:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <HAL_Init+0x40>)
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_Init+0x40>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc8:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_Init+0x40>)
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_Init+0x40>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f8f1 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bda:	200f      	movs	r0, #15
 8000bdc:	f7ff fe8a 	bl	80008f4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000be0:	f7ff fe5c 	bl	800089c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023c00 	.word	0x40023c00

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_IncTick+0x1c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x20>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a03      	ldr	r2, [pc, #12]	; (8000c10 <HAL_IncTick+0x20>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	2000429c 	.word	0x2000429c

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b02      	ldr	r3, [pc, #8]	; (8000c24 <HAL_GetTick+0x10>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	2000429c 	.word	0x2000429c

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff fff0 	bl	8000c14 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c40:	d005      	beq.n	8000c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_Delay+0x40>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c4e:	bf00      	nop
 8000c50:	f7ff ffe0 	bl	8000c14 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad2      	subs	r2, r2, r3
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d3f7      	bcc.n	8000c50 <HAL_Delay+0x28>
  {
  }
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000008 	.word	0x20000008

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_EnableIRQ+0x34>)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	095b      	lsrs	r3, r3, #5
 8000cea:	79fa      	ldrb	r2, [r7, #7]
 8000cec:	f002 021f 	and.w	r2, r2, #31
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	490d      	ldr	r1, [pc, #52]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	683a      	ldr	r2, [r7, #0]
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	4909      	ldr	r1, [pc, #36]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	2201      	movs	r2, #1
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	1e5a      	subs	r2, r3, #1
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da2:	2101      	movs	r1, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	1e59      	subs	r1, r3, #1
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff51 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de4:	f7ff ff66 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff ffb4 	bl	8000d5c <NVIC_EncodePriority>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff83 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff59 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000e38:	4ba3      	ldr	r3, [pc, #652]	; (80010c8 <HAL_ETH_Init+0x2a0>)
 8000e3a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e175      	b.n	800113a <HAL_ETH_Init+0x312>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d106      	bne.n	8000e68 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f002 fbc4 	bl	80035f0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	4a97      	ldr	r2, [pc, #604]	; (80010cc <HAL_ETH_Init+0x2a4>)
 8000e6e:	4b97      	ldr	r3, [pc, #604]	; (80010cc <HAL_ETH_Init+0x2a4>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e76:	6453      	str	r3, [r2, #68]	; 0x44
 8000e78:	4b94      	ldr	r3, [pc, #592]	; (80010cc <HAL_ETH_Init+0x2a4>)
 8000e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000e84:	4a92      	ldr	r2, [pc, #584]	; (80010d0 <HAL_ETH_Init+0x2a8>)
 8000e86:	4b92      	ldr	r3, [pc, #584]	; (80010d0 <HAL_ETH_Init+0x2a8>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e8e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000e90:	498f      	ldr	r1, [pc, #572]	; (80010d0 <HAL_ETH_Init+0x2a8>)
 8000e92:	4b8f      	ldr	r3, [pc, #572]	; (80010d0 <HAL_ETH_Init+0x2a8>)
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a1b      	ldr	r3, [r3, #32]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000eaa:	6812      	ldr	r2, [r2, #0]
 8000eac:	f042 0201 	orr.w	r2, r2, #1
 8000eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eb4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eb6:	f7ff fead 	bl	8000c14 <HAL_GetTick>
 8000eba:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000ebc:	e011      	b.n	8000ee2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8000ebe:	f7ff fea9 	bl	8000c14 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ecc:	d909      	bls.n	8000ee2 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e12b      	b.n	800113a <HAL_ETH_Init+0x312>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1e4      	bne.n	8000ebe <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f023 031c 	bic.w	r3, r3, #28
 8000f02:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000f04:	f001 ff1a 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8000f08:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	4a71      	ldr	r2, [pc, #452]	; (80010d4 <HAL_ETH_Init+0x2ac>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d908      	bls.n	8000f24 <HAL_ETH_Init+0xfc>
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	4a70      	ldr	r2, [pc, #448]	; (80010d8 <HAL_ETH_Init+0x2b0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d804      	bhi.n	8000f24 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e01a      	b.n	8000f5a <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	4a6c      	ldr	r2, [pc, #432]	; (80010d8 <HAL_ETH_Init+0x2b0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d908      	bls.n	8000f3e <HAL_ETH_Init+0x116>
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	4a6b      	ldr	r2, [pc, #428]	; (80010dc <HAL_ETH_Init+0x2b4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d804      	bhi.n	8000f3e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f043 030c 	orr.w	r3, r3, #12
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	e00d      	b.n	8000f5a <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	4a66      	ldr	r2, [pc, #408]	; (80010dc <HAL_ETH_Init+0x2b4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d903      	bls.n	8000f4e <HAL_ETH_Init+0x126>
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	4a65      	ldr	r2, [pc, #404]	; (80010e0 <HAL_ETH_Init+0x2b8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d904      	bls.n	8000f58 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	e000      	b.n	8000f5a <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000f58:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000f62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f66:	2100      	movs	r1, #0
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f000 fc11 	bl	8001790 <HAL_ETH_WritePHYRegister>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00b      	beq.n	8000f8c <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000f78:	6939      	ldr	r1, [r7, #16]
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 fdc4 	bl	8001b08 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e0d6      	b.n	800113a <HAL_ETH_Init+0x312>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000f8c:	20ff      	movs	r0, #255	; 0xff
 8000f8e:	f7ff fe4b 	bl	8000c28 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 80a4 	beq.w	80010e4 <HAL_ETH_Init+0x2bc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000f9c:	f7ff fe3a 	bl	8000c14 <HAL_GetTick>
 8000fa0:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	2101      	movs	r1, #1
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 fb88 	bl	80016c0 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8000fb0:	f7ff fe30 	bl	8000c14 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d90f      	bls.n	8000fe2 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000fc6:	6939      	ldr	r1, [r7, #16]
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 fd9d 	bl	8001b08 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e0ab      	b.n	800113a <HAL_ETH_Init+0x312>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0da      	beq.n	8000fa2 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000fec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fbcc 	bl	8001790 <HAL_ETH_WritePHYRegister>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00b      	beq.n	8001016 <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001002:	6939      	ldr	r1, [r7, #16]
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 fd7f 	bl	8001b08 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e091      	b.n	800113a <HAL_ETH_Init+0x312>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8001016:	f7ff fdfd 	bl	8000c14 <HAL_GetTick>
 800101a:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	461a      	mov	r2, r3
 8001022:	2101      	movs	r1, #1
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 fb4b 	bl	80016c0 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800102a:	f7ff fdf3 	bl	8000c14 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	f241 3288 	movw	r2, #5000	; 0x1388
 8001038:	4293      	cmp	r3, r2
 800103a:	d90f      	bls.n	800105c <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001040:	6939      	ldr	r1, [r7, #16]
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 fd60 	bl	8001b08 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e06e      	b.n	800113a <HAL_ETH_Init+0x312>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0320 	and.w	r3, r3, #32
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0da      	beq.n	800101c <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	461a      	mov	r2, r3
 800106c:	2110      	movs	r1, #16
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 fb26 	bl	80016c0 <HAL_ETH_ReadPHYRegister>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00b      	beq.n	8001092 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800107e:	6939      	ldr	r1, [r7, #16]
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 fd41 	bl	8001b08 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e053      	b.n	800113a <HAL_ETH_Init+0x312>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	d004      	beq.n	80010a6 <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	e002      	b.n	80010ac <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	e034      	b.n	8001128 <HAL_ETH_Init+0x300>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	e02f      	b.n	8001128 <HAL_ETH_Init+0x300>
 80010c8:	03938700 	.word	0x03938700
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40013800 	.word	0x40013800
 80010d4:	01312cff 	.word	0x01312cff
 80010d8:	02160ebf 	.word	0x02160ebf
 80010dc:	039386ff 	.word	0x039386ff
 80010e0:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	085b      	lsrs	r3, r3, #1
 80010f2:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	461a      	mov	r2, r3
 80010fa:	2100      	movs	r1, #0
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 fb47 	bl	8001790 <HAL_ETH_WritePHYRegister>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00b      	beq.n	8001120 <HAL_ETH_Init+0x2f8>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800110c:	6939      	ldr	r1, [r7, #16]
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 fcfa 	bl	8001b08 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e00c      	b.n	800113a <HAL_ETH_Init+0x312>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001120:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001124:	f7ff fd80 	bl	8000c28 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001128:	6939      	ldr	r1, [r7, #16]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fcec 	bl	8001b08 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3720      	adds	r7, #32
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop

08001144 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <HAL_ETH_DMATxDescListInit+0x20>
 8001160:	2302      	movs	r3, #2
 8001162:	e052      	b.n	800120a <HAL_ETH_DMATxDescListInit+0xc6>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2202      	movs	r2, #2
 8001170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	e030      	b.n	80011e2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	015b      	lsls	r3, r3, #5
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	4413      	add	r3, r2
 8001188:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001190:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001198:	fb02 f303 	mul.w	r3, r2, r3
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	461a      	mov	r2, r3
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d105      	bne.n	80011ba <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	1e5a      	subs	r2, r3, #1
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d908      	bls.n	80011d6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	015b      	lsls	r3, r3, #5
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	4413      	add	r3, r2
 80011ce:	461a      	mov	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	e002      	b.n	80011dc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d3ca      	bcc.n	8001180 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011f4:	3310      	adds	r3, #16
 80011f6:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <HAL_ETH_DMARxDescListInit+0x20>
 8001230:	2302      	movs	r3, #2
 8001232:	e056      	b.n	80012e2 <HAL_ETH_DMARxDescListInit+0xce>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2202      	movs	r2, #2
 8001240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	e034      	b.n	80012ba <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	015b      	lsls	r3, r3, #5
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	4413      	add	r3, r2
 8001258:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001260:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001268:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001270:	fb02 f303 	mul.w	r3, r2, r3
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	4413      	add	r3, r2
 8001278:	461a      	mov	r2, r3
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d105      	bne.n	8001292 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	1e5a      	subs	r2, r3, #1
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	429a      	cmp	r2, r3
 800129a:	d908      	bls.n	80012ae <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3301      	adds	r3, #1
 80012a0:	015b      	lsls	r3, r3, #5
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	4413      	add	r3, r2
 80012a6:	461a      	mov	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	e002      	b.n	80012b4 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d3c6      	bcc.n	8001250 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012cc:	330c      	adds	r3, #12
 80012ce:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	371c      	adds	r7, #28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001308:	2b01      	cmp	r3, #1
 800130a:	d101      	bne.n	8001310 <HAL_ETH_TransmitFrame+0x24>
 800130c:	2302      	movs	r3, #2
 800130e:	e0cd      	b.n	80014ac <HAL_ETH_TransmitFrame+0x1c0>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2202      	movs	r2, #2
 800131c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e0b8      	b.n	80014ac <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	da09      	bge.n	8001358 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2212      	movs	r2, #18
 8001348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e0a9      	b.n	80014ac <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800135e:	4293      	cmp	r3, r2
 8001360:	d915      	bls.n	800138e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	4a54      	ldr	r2, [pc, #336]	; (80014b8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	0a9b      	lsrs	r3, r3, #10
 800136c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	4b51      	ldr	r3, [pc, #324]	; (80014b8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001372:	fba3 1302 	umull	r1, r3, r3, r2
 8001376:	0a9b      	lsrs	r3, r3, #10
 8001378:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800137c:	fb01 f303 	mul.w	r3, r1, r3
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	e001      	b.n	8001392 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 800138e:	2301      	movs	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d11c      	bne.n	80013d2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80013a6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80013b2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013c2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	461a      	mov	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80013d0:	e04b      	b.n	800146a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	e044      	b.n	8001462 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013e6:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d107      	bne.n	80013fe <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013fc:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001406:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	1e5a      	subs	r2, r3, #1
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	429a      	cmp	r2, r3
 8001410:	d116      	bne.n	8001440 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001420:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	4a25      	ldr	r2, [pc, #148]	; (80014bc <HAL_ETH_TransmitFrame+0x1d0>)
 8001426:	fb02 f203 	mul.w	r2, r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	4413      	add	r3, r2
 800142e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001432:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800143e:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800144e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	461a      	mov	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	3301      	adds	r3, #1
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	429a      	cmp	r2, r3
 8001468:	d3b6      	bcc.n	80013d8 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001472:	3314      	adds	r3, #20
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00d      	beq.n	800149a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001486:	3314      	adds	r3, #20
 8001488:	2204      	movs	r2, #4
 800148a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001494:	3304      	adds	r3, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	371c      	adds	r7, #28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	ac02b00b 	.word	0xac02b00b
 80014bc:	fffffa0c 	.word	0xfffffa0c

080014c0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d101      	bne.n	80014da <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e074      	b.n	80015c4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2202      	movs	r2, #2
 80014e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80014ea:	e05a      	b.n	80015a2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3301      	adds	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]

    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */
    if ((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001500:	d10d      	bne.n	800151e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    {
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	461a      	mov	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
 800151c:	e041      	b.n	80015a2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10b      	bne.n	8001544 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	461a      	mov	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
 8001542:	e02e      	b.n	80015a2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    {
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155a:	2b01      	cmp	r3, #1
 800155c:	d103      	bne.n	8001566 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	0c1b      	lsrs	r3, r3, #16
 800156e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001572:	1f1a      	subs	r2, r3, #4
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	641a      	str	r2, [r3, #64]	; 0x40

      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	461a      	mov	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e010      	b.n	80015c4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db02      	blt.n	80015b2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d99c      	bls.n	80014ec <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015de:	3314      	adds	r3, #20
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e6:	2b40      	cmp	r3, #64	; 0x40
 80015e8:	d112      	bne.n	8001610 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f002 f8ce 	bl	800378c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f8:	3314      	adds	r3, #20
 80015fa:	2240      	movs	r2, #64	; 0x40
 80015fc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800160e:	e01b      	b.n	8001648 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001618:	3314      	adds	r3, #20
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b01      	cmp	r3, #1
 8001622:	d111      	bne.n	8001648 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f839 	bl	800169c <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001632:	3314      	adds	r3, #20
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001650:	3314      	adds	r3, #20
 8001652:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001656:	601a      	str	r2, [r3, #0]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001660:	3314      	adds	r3, #20
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800166c:	d112      	bne.n	8001694 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f81d 	bl	80016ae <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167c:	3314      	adds	r3, #20
 800167e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001682:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	460b      	mov	r3, r1
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b82      	cmp	r3, #130	; 0x82
 80016e0:	d101      	bne.n	80016e6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80016e2:	2302      	movs	r3, #2
 80016e4:	e050      	b.n	8001788 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2282      	movs	r2, #130	; 0x82
 80016ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f003 031c 	and.w	r3, r3, #28
 80016fc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8a1b      	ldrh	r3, [r3, #16]
 8001702:	02db      	lsls	r3, r3, #11
 8001704:	b29b      	uxth	r3, r3
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	4313      	orrs	r3, r2
 800170a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800170c:	897b      	ldrh	r3, [r7, #10]
 800170e:	019b      	lsls	r3, r3, #6
 8001710:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	4313      	orrs	r3, r2
 8001718:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f023 0302 	bic.w	r3, r3, #2
 8001720:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001732:	f7ff fa6f 	bl	8000c14 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001738:	e015      	b.n	8001766 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800173a:	f7ff fa6b 	bl	8000c14 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001748:	d309      	bcc.n	800175e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e014      	b.n	8001788 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1e4      	bne.n	800173a <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	b29b      	uxth	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	460b      	mov	r3, r1
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b42      	cmp	r3, #66	; 0x42
 80017b0:	d101      	bne.n	80017b6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80017b2:	2302      	movs	r3, #2
 80017b4:	e04e      	b.n	8001854 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2242      	movs	r2, #66	; 0x42
 80017ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 031c 	and.w	r3, r3, #28
 80017cc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8a1b      	ldrh	r3, [r3, #16]
 80017d2:	02db      	lsls	r3, r3, #11
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4313      	orrs	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80017dc:	897b      	ldrh	r3, [r7, #10]
 80017de:	019b      	lsls	r3, r3, #6
 80017e0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	b292      	uxth	r2, r2
 8001802:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800180c:	f7ff fa02 	bl	8000c14 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001812:	e015      	b.n	8001840 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001814:	f7ff f9fe 	bl	8000c14 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001822:	d309      	bcc.n	8001838 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e00d      	b.n	8001854 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1e4      	bne.n	8001814 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_ETH_Start+0x16>
 800186e:	2302      	movs	r3, #2
 8001870:	e01f      	b.n	80018b2 <HAL_ETH_Start+0x56>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2202      	movs	r2, #2
 800187e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fb3e 	bl	8001f04 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fb75 	bl	8001f78 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 fc08 	bl	80020a4 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 fba9 	bl	8001fec <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 fbd4 	bl	8002048 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_ETH_Stop+0x16>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e01f      	b.n	8001910 <HAL_ETH_Stop+0x56>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fb9a 	bl	800201a <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 fbc5 	bl	8002076 <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fb60 	bl	8001fb2 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fbd6 	bl	80020a4 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fb20 	bl	8001f3e <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_ETH_ConfigMAC+0x1c>
 8001930:	2302      	movs	r3, #2
 8001932:	e0e3      	b.n	8001afc <HAL_ETH_ConfigMAC+0x1e4>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2202      	movs	r2, #2
 8001940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80b0 	beq.w	8001aac <HAL_ETH_ConfigMAC+0x194>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4b6b      	ldr	r3, [pc, #428]	; (8001b04 <HAL_ETH_ConfigMAC+0x1ec>)
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001964:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 800196a:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8001970:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8001976:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 800197c:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8001982:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8001988:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 800198e:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8001994:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 800199a:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 80019a0:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 80019a6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019be:	2001      	movs	r0, #1
 80019c0:	f7ff f932 	bl	8000c28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80019d8:	4311      	orrs	r1, r2
                                          macconf->PassControlFrames |
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80019de:	4311      	orrs	r1, r2
                                          macconf->BroadcastFramesReception |
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
                                          macconf->PassControlFrames |
 80019e4:	4311      	orrs	r1, r2
                                          macconf->DestinationAddrFilter |
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 80019ea:	4311      	orrs	r1, r2
                                          macconf->PromiscuousMode |
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80019f0:	4311      	orrs	r1, r2
                                          macconf->MulticastFramesFilter |
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80019f6:	4311      	orrs	r1, r2
                                          macconf->UnicastFramesFilter);
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
                                          macconf->MulticastFramesFilter |
 80019fc:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80019fe:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f7ff f90d 	bl	8000c28 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a1e:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a28:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a40:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a46:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001a4c:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001a52:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8001a58:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001a5e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a76:	2001      	movs	r0, #1
 8001a78:	f7ff f8d6 	bl	8000c28 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	6f12      	ldr	r2, [r2, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001a90:	430a      	orrs	r2, r1
 8001a92:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f7ff f8c3 	bl	8000c28 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	61da      	str	r2, [r3, #28]
 8001aaa:	e01e      	b.n	8001aea <HAL_ETH_ConfigMAC+0x1d2>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001aba:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f7ff f8a3 	bl	8000c28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	ff20810f 	.word	0xff20810f

08001b08 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0b0      	sub	sp, #192	; 0xc0
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b24:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b2c:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d103      	bne.n	8001b56 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b52:	663b      	str	r3, [r7, #96]	; 0x60
 8001b54:	e001      	b.n	8001b5a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b5e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b64:	2300      	movs	r3, #0
 8001b66:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b74:	2340      	movs	r3, #64	; 0x40
 8001b76:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001bdc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001be0:	4bab      	ldr	r3, [pc, #684]	; (8001e90 <ETH_MACDMAConfig+0x388>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8001bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001bec:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8001bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8001bf0:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8001bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8001bf4:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8001bfa:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8001bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8001bfe:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8001c02:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8001c08:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8001c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8001c0c:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8001c0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8001c10:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8001c12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8001c14:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8001c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8001c18:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8001c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8001c1c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001c1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c22:	4313      	orrs	r3, r2
 8001c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c30:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f7fe fff3 	bl	8000c28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c4a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001c52:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001c54:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 8001c56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001c58:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception |
 8001c5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001c5e:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 8001c60:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8001c64:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 8001c66:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001c6a:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 8001c6c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001c70:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 8001c72:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 8001c76:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001c78:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c84:	2001      	movs	r0, #1
 8001c86:	f7fe ffcf 	bl	8000c28 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c92:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c9c:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001ca6:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cb6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cba:	4013      	ands	r3, r2
 8001cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001cc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cc4:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001cca:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001ccc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001cd0:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8001cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001cd6:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001cd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8001cdc:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8001cde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ce2:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001ce4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cf6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d02:	2001      	movs	r0, #1
 8001d04:	f7fe ff90 	bl	8000c28 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d10:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8001d1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7fe ff7b 	bl	8000c28 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d3a:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001d40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d44:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8001d4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d4e:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d60:	2304      	movs	r3, #4
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d90:	3318      	adds	r3, #24
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <ETH_MACDMAConfig+0x38c>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001da4:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8001da6:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001da8:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8001daa:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8001dac:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8001dae:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8001db0:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8001db2:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8001db4:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8001db6:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8001db8:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8001dba:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8001dbc:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8001dc0:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8001dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8001dc4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001dc6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd8:	3318      	adds	r3, #24
 8001dda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dde:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de8:	3318      	adds	r3, #24
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f7fe ff19 	bl	8000c28 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfe:	3318      	adds	r3, #24
 8001e00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e04:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 8001e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001e0e:	4311      	orrs	r1, r2
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 8001e12:	4311      	orrs	r1, r2
                                        dmainit.TxDMABurstLength |
 8001e14:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e16:	4311      	orrs	r1, r2
                                        dmainit.EnhancedDescriptorFormat |
 8001e18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 8001e1a:	4311      	orrs	r1, r2
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001e1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e1e:	0092      	lsls	r2, r2, #2
                                        dmainit.EnhancedDescriptorFormat |
 8001e20:	4311      	orrs	r1, r2
                                        dmainit.DMAArbitration |
 8001e22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001e24:	430a      	orrs	r2, r1
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001e26:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2e:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f7fe fef2 	bl	8000c28 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e50:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d10f      	bne.n	8001e7a <ETH_MACDMAConfig+0x372>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6819      	ldr	r1, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e66:	331c      	adds	r3, #28
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e72:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001e76:	331c      	adds	r3, #28
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2100      	movs	r1, #0
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f808 	bl	8001e98 <ETH_MACAddressConfig>
}
 8001e88:	bf00      	nop
 8001e8a:	37c0      	adds	r7, #192	; 0xc0
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	ff20810f 	.word	0xff20810f
 8001e94:	f8de3f23 	.word	0xf8de3f23

08001e98 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3305      	adds	r3, #5
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	3204      	adds	r2, #4
 8001eb0:	7812      	ldrb	r2, [r2, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <ETH_MACAddressConfig+0x64>)
 8001eba:	4413      	add	r3, r2
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3303      	adds	r3, #3
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	061a      	lsls	r2, r3, #24
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3302      	adds	r3, #2
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	041b      	lsls	r3, r3, #16
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	4313      	orrs	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	7812      	ldrb	r2, [r2, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <ETH_MACAddressConfig+0x68>)
 8001eea:	4413      	add	r3, r2
 8001eec:	461a      	mov	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	6013      	str	r3, [r2, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	40028040 	.word	0x40028040
 8001f00:	40028044 	.word	0x40028044

08001f04 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	f042 0208 	orr.w	r2, r2, #8
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f000 f8e5 	bl	80020f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	601a      	str	r2, [r3, #0]
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	f022 0208 	bic.w	r2, r2, #8
 8001f58:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f62:	2001      	movs	r0, #1
 8001f64:	f000 f8c8 	bl	80020f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	601a      	str	r2, [r3, #0]
}
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	f042 0204 	orr.w	r2, r2, #4
 8001f92:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f000 f8ab 	bl	80020f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	601a      	str	r2, [r3, #0]
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	f022 0204 	bic.w	r2, r2, #4
 8001fcc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f000 f88e 	bl	80020f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	601a      	str	r2, [r3, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6819      	ldr	r1, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002000:	3318      	adds	r3, #24
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002008:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800200c:	3318      	adds	r3, #24
 800200e:	601a      	str	r2, [r3, #0]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6819      	ldr	r1, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202e:	3318      	adds	r3, #24
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002036:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800203a:	3318      	adds	r3, #24
 800203c:	601a      	str	r2, [r3, #0]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6819      	ldr	r1, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800205c:	3318      	adds	r3, #24
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f043 0202 	orr.w	r2, r3, #2
 8002064:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002068:	3318      	adds	r3, #24
 800206a:	601a      	str	r2, [r3, #0]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6819      	ldr	r1, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208a:	3318      	adds	r3, #24
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0202 	bic.w	r2, r3, #2
 8002092:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002096:	3318      	adds	r3, #24
 8002098:	601a      	str	r2, [r3, #0]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6819      	ldr	r1, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020bc:	3318      	adds	r3, #24
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020c4:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80020c8:	3318      	adds	r3, #24
 80020ca:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d4:	3318      	adds	r3, #24
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80020da:	2001      	movs	r0, #1
 80020dc:	f000 f80c 	bl	80020f8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ea:	3318      	adds	r3, #24
 80020ec:	601a      	str	r2, [r3, #0]
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <ETH_Delay+0x34>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <ETH_Delay+0x38>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0a5b      	lsrs	r3, r3, #9
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002114:	bf00      	nop
  }
  while (Delay --);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1e5a      	subs	r2, r3, #1
 800211a:	60fa      	str	r2, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f9      	bne.n	8002114 <ETH_Delay+0x1c>
}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000000 	.word	0x20000000
 8002130:	10624dd3 	.word	0x10624dd3

08002134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002142:	e16f      	b.n	8002424 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	4013      	ands	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8161 	beq.w	800241e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b01      	cmp	r3, #1
 8002166:	d005      	beq.n	8002174 <HAL_GPIO_Init+0x40>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d130      	bne.n	80021d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021aa:	2201      	movs	r2, #1
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f003 0201 	and.w	r2, r3, #1
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d017      	beq.n	8002212 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d123      	bne.n	8002266 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	08da      	lsrs	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3208      	adds	r2, #8
 8002226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	220f      	movs	r2, #15
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0203 	and.w	r2, r3, #3
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80bb 	beq.w	800241e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	4a64      	ldr	r2, [pc, #400]	; (8002440 <HAL_GPIO_Init+0x30c>)
 80022ae:	4b64      	ldr	r3, [pc, #400]	; (8002440 <HAL_GPIO_Init+0x30c>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b6:	6453      	str	r3, [r2, #68]	; 0x44
 80022b8:	4b61      	ldr	r3, [pc, #388]	; (8002440 <HAL_GPIO_Init+0x30c>)
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022c4:	4a5f      	ldr	r2, [pc, #380]	; (8002444 <HAL_GPIO_Init+0x310>)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	3302      	adds	r3, #2
 80022cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	220f      	movs	r2, #15
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a57      	ldr	r2, [pc, #348]	; (8002448 <HAL_GPIO_Init+0x314>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d031      	beq.n	8002354 <HAL_GPIO_Init+0x220>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a56      	ldr	r2, [pc, #344]	; (800244c <HAL_GPIO_Init+0x318>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d02b      	beq.n	8002350 <HAL_GPIO_Init+0x21c>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a55      	ldr	r2, [pc, #340]	; (8002450 <HAL_GPIO_Init+0x31c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d025      	beq.n	800234c <HAL_GPIO_Init+0x218>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a54      	ldr	r2, [pc, #336]	; (8002454 <HAL_GPIO_Init+0x320>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d01f      	beq.n	8002348 <HAL_GPIO_Init+0x214>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a53      	ldr	r2, [pc, #332]	; (8002458 <HAL_GPIO_Init+0x324>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d019      	beq.n	8002344 <HAL_GPIO_Init+0x210>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a52      	ldr	r2, [pc, #328]	; (800245c <HAL_GPIO_Init+0x328>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d013      	beq.n	8002340 <HAL_GPIO_Init+0x20c>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a51      	ldr	r2, [pc, #324]	; (8002460 <HAL_GPIO_Init+0x32c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d00d      	beq.n	800233c <HAL_GPIO_Init+0x208>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a50      	ldr	r2, [pc, #320]	; (8002464 <HAL_GPIO_Init+0x330>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d007      	beq.n	8002338 <HAL_GPIO_Init+0x204>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a4f      	ldr	r2, [pc, #316]	; (8002468 <HAL_GPIO_Init+0x334>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d101      	bne.n	8002334 <HAL_GPIO_Init+0x200>
 8002330:	2308      	movs	r3, #8
 8002332:	e010      	b.n	8002356 <HAL_GPIO_Init+0x222>
 8002334:	2309      	movs	r3, #9
 8002336:	e00e      	b.n	8002356 <HAL_GPIO_Init+0x222>
 8002338:	2307      	movs	r3, #7
 800233a:	e00c      	b.n	8002356 <HAL_GPIO_Init+0x222>
 800233c:	2306      	movs	r3, #6
 800233e:	e00a      	b.n	8002356 <HAL_GPIO_Init+0x222>
 8002340:	2305      	movs	r3, #5
 8002342:	e008      	b.n	8002356 <HAL_GPIO_Init+0x222>
 8002344:	2304      	movs	r3, #4
 8002346:	e006      	b.n	8002356 <HAL_GPIO_Init+0x222>
 8002348:	2303      	movs	r3, #3
 800234a:	e004      	b.n	8002356 <HAL_GPIO_Init+0x222>
 800234c:	2302      	movs	r3, #2
 800234e:	e002      	b.n	8002356 <HAL_GPIO_Init+0x222>
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_GPIO_Init+0x222>
 8002354:	2300      	movs	r3, #0
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	f002 0203 	and.w	r2, r2, #3
 800235c:	0092      	lsls	r2, r2, #2
 800235e:	4093      	lsls	r3, r2
 8002360:	461a      	mov	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002368:	4936      	ldr	r1, [pc, #216]	; (8002444 <HAL_GPIO_Init+0x310>)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	3302      	adds	r3, #2
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_GPIO_Init+0x338>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	43db      	mvns	r3, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800239a:	4a34      	ldr	r2, [pc, #208]	; (800246c <HAL_GPIO_Init+0x338>)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023a0:	4b32      	ldr	r3, [pc, #200]	; (800246c <HAL_GPIO_Init+0x338>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023c4:	4a29      	ldr	r2, [pc, #164]	; (800246c <HAL_GPIO_Init+0x338>)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ca:	4b28      	ldr	r3, [pc, #160]	; (800246c <HAL_GPIO_Init+0x338>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023ee:	4a1f      	ldr	r2, [pc, #124]	; (800246c <HAL_GPIO_Init+0x338>)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f4:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_GPIO_Init+0x338>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002418:	4a14      	ldr	r2, [pc, #80]	; (800246c <HAL_GPIO_Init+0x338>)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3301      	adds	r3, #1
 8002422:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa22 f303 	lsr.w	r3, r2, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	f47f ae88 	bne.w	8002144 <HAL_GPIO_Init+0x10>
  }
}
 8002434:	bf00      	nop
 8002436:	371c      	adds	r7, #28
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	40013800 	.word	0x40013800
 8002448:	40020000 	.word	0x40020000
 800244c:	40020400 	.word	0x40020400
 8002450:	40020800 	.word	0x40020800
 8002454:	40020c00 	.word	0x40020c00
 8002458:	40021000 	.word	0x40021000
 800245c:	40021400 	.word	0x40021400
 8002460:	40021800 	.word	0x40021800
 8002464:	40021c00 	.word	0x40021c00
 8002468:	40022000 	.word	0x40022000
 800246c:	40013c00 	.word	0x40013c00

08002470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	887b      	ldrh	r3, [r7, #2]
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	e001      	b.n	8002492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002492:	7bfb      	ldrb	r3, [r7, #15]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	460b      	mov	r3, r1
 80024a8:	807b      	strh	r3, [r7, #2]
 80024aa:	4613      	mov	r3, r2
 80024ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024ae:	787b      	ldrb	r3, [r7, #1]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b4:	887a      	ldrh	r2, [r7, #2]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024ba:	e003      	b.n	80024c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024bc:	887b      	ldrh	r3, [r7, #2]
 80024be:	041a      	lsls	r2, r3, #16
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	619a      	str	r2, [r3, #24]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
	...

080024d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f806 	bl	8002500 <HAL_GPIO_EXTI_Callback>
  }
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40013c00 	.word	0x40013c00

08002500 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e237      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d050      	beq.n	80025d4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002532:	4ba3      	ldr	r3, [pc, #652]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b04      	cmp	r3, #4
 800253c:	d00c      	beq.n	8002558 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800253e:	4ba0      	ldr	r3, [pc, #640]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002546:	2b08      	cmp	r3, #8
 8002548:	d112      	bne.n	8002570 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254a:	4b9d      	ldr	r3, [pc, #628]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002556:	d10b      	bne.n	8002570 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	4b99      	ldr	r3, [pc, #612]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d036      	beq.n	80025d2 <HAL_RCC_OscConfig+0xbe>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d132      	bne.n	80025d2 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e212      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002570:	4a94      	ldr	r2, [pc, #592]	; (80027c4 <HAL_RCC_OscConfig+0x2b0>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	7013      	strb	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d013      	beq.n	80025aa <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7fe fb47 	bl	8000c14 <HAL_GetTick>
 8002586:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258a:	f7fe fb43 	bl	8000c14 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b64      	cmp	r3, #100	; 0x64
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e1fc      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259c:	4b88      	ldr	r3, [pc, #544]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x76>
 80025a8:	e014      	b.n	80025d4 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe fb33 	bl	8000c14 <HAL_GetTick>
 80025ae:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b2:	f7fe fb2f 	bl	8000c14 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b64      	cmp	r3, #100	; 0x64
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1e8      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c4:	4b7e      	ldr	r3, [pc, #504]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f0      	bne.n	80025b2 <HAL_RCC_OscConfig+0x9e>
 80025d0:	e000      	b.n	80025d4 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d077      	beq.n	80026d0 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e0:	4b77      	ldr	r3, [pc, #476]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00b      	beq.n	8002604 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ec:	4b74      	ldr	r3, [pc, #464]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d126      	bne.n	8002646 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f8:	4b71      	ldr	r3, [pc, #452]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d120      	bne.n	8002646 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002604:	4b6e      	ldr	r3, [pc, #440]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_OscConfig+0x108>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d001      	beq.n	800261c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e1bc      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	4868      	ldr	r0, [pc, #416]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 800261e:	4b68      	ldr	r3, [pc, #416]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	21f8      	movs	r1, #248	; 0xf8
 800262c:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	69b9      	ldr	r1, [r7, #24]
 8002630:	fa91 f1a1 	rbit	r1, r1
 8002634:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002636:	6979      	ldr	r1, [r7, #20]
 8002638:	fab1 f181 	clz	r1, r1
 800263c:	b2c9      	uxtb	r1, r1
 800263e:	408b      	lsls	r3, r1
 8002640:	4313      	orrs	r3, r2
 8002642:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002644:	e044      	b.n	80026d0 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d02a      	beq.n	80026a4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264e:	4b5e      	ldr	r3, [pc, #376]	; (80027c8 <HAL_RCC_OscConfig+0x2b4>)
 8002650:	2201      	movs	r2, #1
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7fe fade 	bl	8000c14 <HAL_GetTick>
 8002658:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265c:	f7fe fada 	bl	8000c14 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e193      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266e:	4b54      	ldr	r3, [pc, #336]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267a:	4851      	ldr	r0, [pc, #324]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	4b50      	ldr	r3, [pc, #320]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	21f8      	movs	r1, #248	; 0xf8
 800268a:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	6939      	ldr	r1, [r7, #16]
 800268e:	fa91 f1a1 	rbit	r1, r1
 8002692:	60f9      	str	r1, [r7, #12]
  return result;
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	fab1 f181 	clz	r1, r1
 800269a:	b2c9      	uxtb	r1, r1
 800269c:	408b      	lsls	r3, r1
 800269e:	4313      	orrs	r3, r2
 80026a0:	6003      	str	r3, [r0, #0]
 80026a2:	e015      	b.n	80026d0 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a4:	4b48      	ldr	r3, [pc, #288]	; (80027c8 <HAL_RCC_OscConfig+0x2b4>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7fe fab3 	bl	8000c14 <HAL_GetTick>
 80026ae:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b2:	f7fe faaf 	bl	8000c14 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e168      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c4:	4b3e      	ldr	r3, [pc, #248]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d030      	beq.n	800273e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d016      	beq.n	8002712 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e4:	4b39      	ldr	r3, [pc, #228]	; (80027cc <HAL_RCC_OscConfig+0x2b8>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ea:	f7fe fa93 	bl	8000c14 <HAL_GetTick>
 80026ee:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f2:	f7fe fa8f 	bl	8000c14 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e148      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002704:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 8002706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x1de>
 8002710:	e015      	b.n	800273e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002712:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <HAL_RCC_OscConfig+0x2b8>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002718:	f7fe fa7c 	bl	8000c14 <HAL_GetTick>
 800271c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002720:	f7fe fa78 	bl	8000c14 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e131      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002732:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 8002734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8088 	beq.w	800285c <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d110      	bne.n	8002780 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 8002764:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277a:	2301      	movs	r3, #1
 800277c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002780:	4a13      	ldr	r2, [pc, #76]	; (80027d0 <HAL_RCC_OscConfig+0x2bc>)
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_RCC_OscConfig+0x2bc>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_RCC_OscConfig+0x2bc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d123      	bne.n	80027e0 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002798:	4a0d      	ldr	r2, [pc, #52]	; (80027d0 <HAL_RCC_OscConfig+0x2bc>)
 800279a:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_RCC_OscConfig+0x2bc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a4:	f7fe fa36 	bl	8000c14 <HAL_GetTick>
 80027a8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027aa:	e013      	b.n	80027d4 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ac:	f7fe fa32 	bl	8000c14 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d90c      	bls.n	80027d4 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0eb      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40023802 	.word	0x40023802
 80027c8:	42470000 	.word	0x42470000
 80027cc:	42470e80 	.word	0x42470e80
 80027d0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	4b72      	ldr	r3, [pc, #456]	; (80029a0 <HAL_RCC_OscConfig+0x48c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0e5      	beq.n	80027ac <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	4a70      	ldr	r2, [pc, #448]	; (80029a4 <HAL_RCC_OscConfig+0x490>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	7013      	strb	r3, [r2, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d015      	beq.n	800281e <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f2:	f7fe fa0f 	bl	8000c14 <HAL_GetTick>
 80027f6:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7fe fa0b 	bl	8000c14 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	; 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0c2      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002810:	4b65      	ldr	r3, [pc, #404]	; (80029a8 <HAL_RCC_OscConfig+0x494>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ee      	beq.n	80027fa <HAL_RCC_OscConfig+0x2e6>
 800281c:	e014      	b.n	8002848 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7fe f9f9 	bl	8000c14 <HAL_GetTick>
 8002822:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002824:	e00a      	b.n	800283c <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7fe f9f5 	bl	8000c14 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	; 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e0ac      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283c:	4b5a      	ldr	r3, [pc, #360]	; (80029a8 <HAL_RCC_OscConfig+0x494>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ee      	bne.n	8002826 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002850:	4a55      	ldr	r2, [pc, #340]	; (80029a8 <HAL_RCC_OscConfig+0x494>)
 8002852:	4b55      	ldr	r3, [pc, #340]	; (80029a8 <HAL_RCC_OscConfig+0x494>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8097 	beq.w	8002994 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002866:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <HAL_RCC_OscConfig+0x494>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b08      	cmp	r3, #8
 8002870:	d061      	beq.n	8002936 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d146      	bne.n	8002908 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b4c      	ldr	r3, [pc, #304]	; (80029ac <HAL_RCC_OscConfig+0x498>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe f9c8 	bl	8000c14 <HAL_GetTick>
 8002884:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe f9c4 	bl	8000c14 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	; 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e07d      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <HAL_RCC_OscConfig+0x494>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a6:	4840      	ldr	r0, [pc, #256]	; (80029a8 <HAL_RCC_OscConfig+0x494>)
 80028a8:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <HAL_RCC_OscConfig+0x494>)
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <HAL_RCC_OscConfig+0x49c>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	69d1      	ldr	r1, [r2, #28]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6a12      	ldr	r2, [r2, #32]
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028be:	0192      	lsls	r2, r2, #6
 80028c0:	4311      	orrs	r1, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028c6:	0612      	lsls	r2, r2, #24
 80028c8:	4311      	orrs	r1, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80028ce:	0852      	lsrs	r2, r2, #1
 80028d0:	3a01      	subs	r2, #1
 80028d2:	0412      	lsls	r2, r2, #16
 80028d4:	430a      	orrs	r2, r1
 80028d6:	4313      	orrs	r3, r2
 80028d8:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028da:	4b34      	ldr	r3, [pc, #208]	; (80029ac <HAL_RCC_OscConfig+0x498>)
 80028dc:	2201      	movs	r2, #1
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe f998 	bl	8000c14 <HAL_GetTick>
 80028e4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe f994 	bl	8000c14 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e04d      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fa:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <HAL_RCC_OscConfig+0x494>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x3d4>
 8002906:	e045      	b.n	8002994 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002908:	4b28      	ldr	r3, [pc, #160]	; (80029ac <HAL_RCC_OscConfig+0x498>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7fe f981 	bl	8000c14 <HAL_GetTick>
 8002912:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002916:	f7fe f97d 	bl	8000c14 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b64      	cmp	r3, #100	; 0x64
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e036      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002928:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <HAL_RCC_OscConfig+0x494>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x402>
 8002934:	e02e      	b.n	8002994 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e029      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002942:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_RCC_OscConfig+0x494>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	429a      	cmp	r2, r3
 8002954:	d11c      	bne.n	8002990 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d115      	bne.n	8002990 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d10d      	bne.n	8002990 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d106      	bne.n	8002990 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3728      	adds	r7, #40	; 0x28
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40007000 	.word	0x40007000
 80029a4:	40023870 	.word	0x40023870
 80029a8:	40023800 	.word	0x40023800
 80029ac:	42470060 	.word	0x42470060
 80029b0:	f0bc8000 	.word	0xf0bc8000

080029b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0d2      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c8:	4b6b      	ldr	r3, [pc, #428]	; (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 020f 	and.w	r2, r3, #15
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d20c      	bcs.n	80029f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d6:	4b68      	ldr	r3, [pc, #416]	; (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b66      	ldr	r3, [pc, #408]	; (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 020f 	and.w	r2, r3, #15
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0be      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a08:	4a5c      	ldr	r2, [pc, #368]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a0a:	4b5c      	ldr	r3, [pc, #368]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002a20:	4a56      	ldr	r2, [pc, #344]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a22:	4b56      	ldr	r3, [pc, #344]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a2c:	4953      	ldr	r1, [pc, #332]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a2e:	4b53      	ldr	r3, [pc, #332]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d040      	beq.n	8002acc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	4b4a      	ldr	r3, [pc, #296]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d115      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e085      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6a:	4b44      	ldr	r3, [pc, #272]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e079      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7a:	4b40      	ldr	r3, [pc, #256]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e071      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8a:	493c      	ldr	r1, [pc, #240]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f023 0203 	bic.w	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a9c:	f7fe f8ba 	bl	8000c14 <HAL_GetTick>
 8002aa0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa4:	f7fe f8b6 	bl	8000c14 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e059      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 020c 	and.w	r2, r3, #12
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d1eb      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002acc:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 020f 	and.w	r2, r3, #15
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d90c      	bls.n	8002af4 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae2:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 020f 	and.w	r2, r3, #15
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e03c      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b00:	491e      	ldr	r1, [pc, #120]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b02:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b1e:	4917      	ldr	r1, [pc, #92]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b20:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002b32:	f000 f82b 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b36:	4601      	mov	r1, r0
 8002b38:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b40:	22f0      	movs	r2, #240	; 0xf0
 8002b42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	fa92 f2a2 	rbit	r2, r2
 8002b4a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	fab2 f282 	clz	r2, r2
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	40d3      	lsrs	r3, r2
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <HAL_RCC_ClockConfig+0x1cc>)
 8002b58:	5cd3      	ldrb	r3, [r2, r3]
 8002b5a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b5e:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x1d0>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_RCC_ClockConfig+0x1d4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fec4 	bl	80008f4 <HAL_InitTick>

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023c00 	.word	0x40023c00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	08017ea0 	.word	0x08017ea0
 8002b84:	20000000 	.word	0x20000000
 8002b88:	20000004 	.word	0x20000004

08002b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b90:	b08f      	sub	sp, #60	; 0x3c
 8002b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b98:	2300      	movs	r3, #0
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba4:	4b62      	ldr	r3, [pc, #392]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d007      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f040 80b2 	bne.w	8002d1e <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bba:	4b5e      	ldr	r3, [pc, #376]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8002bbe:	e0b1      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bc0:	4b5d      	ldr	r3, [pc, #372]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bc4:	e0ae      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc6:	4b5a      	ldr	r3, [pc, #360]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bd0:	4b57      	ldr	r3, [pc, #348]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d04e      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bdc:	4b54      	ldr	r3, [pc, #336]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	099b      	lsrs	r3, r3, #6
 8002be2:	f04f 0400 	mov.w	r4, #0
 8002be6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	ea01 0103 	and.w	r1, r1, r3
 8002bf2:	ea02 0204 	and.w	r2, r2, r4
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4614      	mov	r4, r2
 8002bfa:	0160      	lsls	r0, r4, #5
 8002bfc:	6278      	str	r0, [r7, #36]	; 0x24
 8002bfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c00:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002c04:	6278      	str	r0, [r7, #36]	; 0x24
 8002c06:	015b      	lsls	r3, r3, #5
 8002c08:	623b      	str	r3, [r7, #32]
 8002c0a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002c0e:	1a5b      	subs	r3, r3, r1
 8002c10:	eb64 0402 	sbc.w	r4, r4, r2
 8002c14:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002c18:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002c1c:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002c20:	ebb8 0803 	subs.w	r8, r8, r3
 8002c24:	eb69 0904 	sbc.w	r9, r9, r4
 8002c28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002c3a:	61bb      	str	r3, [r7, #24]
 8002c3c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002c40:	eb18 0801 	adds.w	r8, r8, r1
 8002c44:	eb49 0902 	adc.w	r9, r9, r2
 8002c48:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002c60:	4640      	mov	r0, r8
 8002c62:	4649      	mov	r1, r9
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	f04f 0400 	mov.w	r4, #0
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4623      	mov	r3, r4
 8002c6e:	f7fd faaf 	bl	80001d0 <__aeabi_uldivmod>
 8002c72:	4603      	mov	r3, r0
 8002c74:	460c      	mov	r4, r1
 8002c76:	637b      	str	r3, [r7, #52]	; 0x34
 8002c78:	e043      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	099b      	lsrs	r3, r3, #6
 8002c80:	f04f 0400 	mov.w	r4, #0
 8002c84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	ea01 0103 	and.w	r1, r1, r3
 8002c90:	ea02 0204 	and.w	r2, r2, r4
 8002c94:	460b      	mov	r3, r1
 8002c96:	4614      	mov	r4, r2
 8002c98:	0160      	lsls	r0, r4, #5
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	015b      	lsls	r3, r3, #5
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002cac:	1a5b      	subs	r3, r3, r1
 8002cae:	eb64 0402 	sbc.w	r4, r4, r2
 8002cb2:	01a6      	lsls	r6, r4, #6
 8002cb4:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002cb8:	019d      	lsls	r5, r3, #6
 8002cba:	1aed      	subs	r5, r5, r3
 8002cbc:	eb66 0604 	sbc.w	r6, r6, r4
 8002cc0:	00f3      	lsls	r3, r6, #3
 8002cc2:	607b      	str	r3, [r7, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	00eb      	lsls	r3, r5, #3
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002cd4:	186d      	adds	r5, r5, r1
 8002cd6:	eb46 0602 	adc.w	r6, r6, r2
 8002cda:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002cde:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8002ce2:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002ce6:	4655      	mov	r5, sl
 8002ce8:	465e      	mov	r6, fp
 8002cea:	4628      	mov	r0, r5
 8002cec:	4631      	mov	r1, r6
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	f04f 0400 	mov.w	r4, #0
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4623      	mov	r3, r4
 8002cf8:	f7fd fa6a 	bl	80001d0 <__aeabi_uldivmod>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	460c      	mov	r4, r1
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d02:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	0c1b      	lsrs	r3, r3, #16
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8002d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d1c:	e002      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d1e:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	373c      	adds	r7, #60	; 0x3c
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	007a1200 	.word	0x007a1200

08002d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d40:	4b02      	ldr	r3, [pc, #8]	; (8002d4c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	20000000 	.word	0x20000000

08002d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002d56:	f7ff fff1 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d5a:	4601      	mov	r1, r0
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002d64:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002d68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	fa92 f2a2 	rbit	r2, r2
 8002d70:	603a      	str	r2, [r7, #0]
  return result;
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	fab2 f282 	clz	r2, r2
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	40d3      	lsrs	r3, r2
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d7e:	5cd3      	ldrb	r3, [r2, r3]
 8002d80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	08017eb0 	.word	0x08017eb0

08002d94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	220f      	movs	r2, #15
 8002da2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_RCC_GetClockConfig+0x58>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0203 	and.w	r2, r3, #3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <HAL_RCC_GetClockConfig+0x58>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_RCC_GetClockConfig+0x58>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_RCC_GetClockConfig+0x58>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	08db      	lsrs	r3, r3, #3
 8002dce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_RCC_GetClockConfig+0x5c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 020f 	and.w	r2, r3, #15
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	601a      	str	r2, [r3, #0]
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40023c00 	.word	0x40023c00

08002df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e041      	b.n	8002e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f839 	bl	8002e92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3304      	adds	r3, #4
 8002e30:	4619      	mov	r1, r3
 8002e32:	4610      	mov	r0, r2
 8002e34:	f000 f9d0 	bl	80031d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d001      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e04e      	b.n	8002f5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	68d2      	ldr	r2, [r2, #12]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <HAL_TIM_Base_Start_IT+0xc0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d022      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x80>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee6:	d01d      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x80>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <HAL_TIM_Base_Start_IT+0xc4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d018      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x80>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <HAL_TIM_Base_Start_IT+0xc8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d013      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x80>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1b      	ldr	r2, [pc, #108]	; (8002f70 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00e      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x80>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1a      	ldr	r2, [pc, #104]	; (8002f74 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d009      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x80>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d004      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x80>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <HAL_TIM_Base_Start_IT+0xd8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d111      	bne.n	8002f48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d010      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	f042 0201 	orr.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f46:	e007      	b.n	8002f58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	40010000 	.word	0x40010000
 8002f68:	40000400 	.word	0x40000400
 8002f6c:	40000800 	.word	0x40000800
 8002f70:	40000c00 	.word	0x40000c00
 8002f74:	40010400 	.word	0x40010400
 8002f78:	40014000 	.word	0x40014000
 8002f7c:	40001800 	.word	0x40001800

08002f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d122      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d11b      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0202 	mvn.w	r2, #2
 8002fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f8ed 	bl	80031a2 <HAL_TIM_IC_CaptureCallback>
 8002fc8:	e005      	b.n	8002fd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8e0 	bl	8003190 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f8ef 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d122      	bne.n	8003030 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d11b      	bne.n	8003030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0204 	mvn.w	r2, #4
 8003000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2202      	movs	r2, #2
 8003006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f8c3 	bl	80031a2 <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f8b6 	bl	8003190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f8c5 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b08      	cmp	r3, #8
 800303c:	d122      	bne.n	8003084 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b08      	cmp	r3, #8
 800304a:	d11b      	bne.n	8003084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0208 	mvn.w	r2, #8
 8003054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2204      	movs	r2, #4
 800305a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f899 	bl	80031a2 <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f88c 	bl	8003190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f89b 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b10      	cmp	r3, #16
 8003090:	d122      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b10      	cmp	r3, #16
 800309e:	d11b      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0210 	mvn.w	r2, #16
 80030a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2208      	movs	r2, #8
 80030ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f86f 	bl	80031a2 <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f862 	bl	8003190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f871 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d10e      	bne.n	8003104 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0201 	mvn.w	r2, #1
 80030fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fd fbb6 	bl	8000870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	2b80      	cmp	r3, #128	; 0x80
 8003110:	d10e      	bne.n	8003130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311c:	2b80      	cmp	r3, #128	; 0x80
 800311e:	d107      	bne.n	8003130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8fb 	bl	8003326 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	d10e      	bne.n	800315c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	d107      	bne.n	800315c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f835 	bl	80031c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b20      	cmp	r3, #32
 8003168:	d10e      	bne.n	8003188 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b20      	cmp	r3, #32
 8003176:	d107      	bne.n	8003188 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0220 	mvn.w	r2, #32
 8003180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f8c6 	bl	8003314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a3f      	ldr	r2, [pc, #252]	; (80032e8 <TIM_Base_SetConfig+0x110>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d013      	beq.n	8003218 <TIM_Base_SetConfig+0x40>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f6:	d00f      	beq.n	8003218 <TIM_Base_SetConfig+0x40>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a3c      	ldr	r2, [pc, #240]	; (80032ec <TIM_Base_SetConfig+0x114>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00b      	beq.n	8003218 <TIM_Base_SetConfig+0x40>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a3b      	ldr	r2, [pc, #236]	; (80032f0 <TIM_Base_SetConfig+0x118>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d007      	beq.n	8003218 <TIM_Base_SetConfig+0x40>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a3a      	ldr	r2, [pc, #232]	; (80032f4 <TIM_Base_SetConfig+0x11c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d003      	beq.n	8003218 <TIM_Base_SetConfig+0x40>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a39      	ldr	r2, [pc, #228]	; (80032f8 <TIM_Base_SetConfig+0x120>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d108      	bne.n	800322a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a2e      	ldr	r2, [pc, #184]	; (80032e8 <TIM_Base_SetConfig+0x110>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d02b      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003238:	d027      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a2b      	ldr	r2, [pc, #172]	; (80032ec <TIM_Base_SetConfig+0x114>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d023      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a2a      	ldr	r2, [pc, #168]	; (80032f0 <TIM_Base_SetConfig+0x118>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d01f      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a29      	ldr	r2, [pc, #164]	; (80032f4 <TIM_Base_SetConfig+0x11c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01b      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a28      	ldr	r2, [pc, #160]	; (80032f8 <TIM_Base_SetConfig+0x120>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d017      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a27      	ldr	r2, [pc, #156]	; (80032fc <TIM_Base_SetConfig+0x124>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a26      	ldr	r2, [pc, #152]	; (8003300 <TIM_Base_SetConfig+0x128>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00f      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a25      	ldr	r2, [pc, #148]	; (8003304 <TIM_Base_SetConfig+0x12c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00b      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a24      	ldr	r2, [pc, #144]	; (8003308 <TIM_Base_SetConfig+0x130>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d007      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a23      	ldr	r2, [pc, #140]	; (800330c <TIM_Base_SetConfig+0x134>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d003      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a22      	ldr	r2, [pc, #136]	; (8003310 <TIM_Base_SetConfig+0x138>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d108      	bne.n	800329c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <TIM_Base_SetConfig+0x110>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_Base_SetConfig+0xf8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a0b      	ldr	r2, [pc, #44]	; (80032f8 <TIM_Base_SetConfig+0x120>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d103      	bne.n	80032d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	615a      	str	r2, [r3, #20]
}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	40010000 	.word	0x40010000
 80032ec:	40000400 	.word	0x40000400
 80032f0:	40000800 	.word	0x40000800
 80032f4:	40000c00 	.word	0x40000c00
 80032f8:	40010400 	.word	0x40010400
 80032fc:	40014000 	.word	0x40014000
 8003300:	40014400 	.word	0x40014400
 8003304:	40014800 	.word	0x40014800
 8003308:	40001800 	.word	0x40001800
 800330c:	40001c00 	.word	0x40001c00
 8003310:	40002000 	.word	0x40002000

08003314 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr

08003326 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003338:	b5b0      	push	{r4, r5, r7, lr}
 800333a:	b08e      	sub	sp, #56	; 0x38
 800333c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800333e:	4b9f      	ldr	r3, [pc, #636]	; (80035bc <MX_LWIP_Init+0x284>)
 8003340:	22c0      	movs	r2, #192	; 0xc0
 8003342:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003344:	4b9d      	ldr	r3, [pc, #628]	; (80035bc <MX_LWIP_Init+0x284>)
 8003346:	22a8      	movs	r2, #168	; 0xa8
 8003348:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800334a:	4b9c      	ldr	r3, [pc, #624]	; (80035bc <MX_LWIP_Init+0x284>)
 800334c:	2200      	movs	r2, #0
 800334e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 8003350:	4b9a      	ldr	r3, [pc, #616]	; (80035bc <MX_LWIP_Init+0x284>)
 8003352:	2214      	movs	r2, #20
 8003354:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003356:	4b9a      	ldr	r3, [pc, #616]	; (80035c0 <MX_LWIP_Init+0x288>)
 8003358:	22ff      	movs	r2, #255	; 0xff
 800335a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800335c:	4b98      	ldr	r3, [pc, #608]	; (80035c0 <MX_LWIP_Init+0x288>)
 800335e:	22ff      	movs	r2, #255	; 0xff
 8003360:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003362:	4b97      	ldr	r3, [pc, #604]	; (80035c0 <MX_LWIP_Init+0x288>)
 8003364:	22ff      	movs	r2, #255	; 0xff
 8003366:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003368:	4b95      	ldr	r3, [pc, #596]	; (80035c0 <MX_LWIP_Init+0x288>)
 800336a:	2200      	movs	r2, #0
 800336c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800336e:	4b95      	ldr	r3, [pc, #596]	; (80035c4 <MX_LWIP_Init+0x28c>)
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8003374:	4b93      	ldr	r3, [pc, #588]	; (80035c4 <MX_LWIP_Init+0x28c>)
 8003376:	2200      	movs	r2, #0
 8003378:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800337a:	4b92      	ldr	r3, [pc, #584]	; (80035c4 <MX_LWIP_Init+0x28c>)
 800337c:	2200      	movs	r2, #0
 800337e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003380:	4b90      	ldr	r3, [pc, #576]	; (80035c4 <MX_LWIP_Init+0x28c>)
 8003382:	2200      	movs	r2, #0
 8003384:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003386:	2100      	movs	r1, #0
 8003388:	2000      	movs	r0, #0
 800338a:	f006 fcb3 	bl	8009cf4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800338e:	4b8b      	ldr	r3, [pc, #556]	; (80035bc <MX_LWIP_Init+0x284>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	061a      	lsls	r2, r3, #24
 8003394:	4b89      	ldr	r3, [pc, #548]	; (80035bc <MX_LWIP_Init+0x284>)
 8003396:	785b      	ldrb	r3, [r3, #1]
 8003398:	041b      	lsls	r3, r3, #16
 800339a:	431a      	orrs	r2, r3
 800339c:	4b87      	ldr	r3, [pc, #540]	; (80035bc <MX_LWIP_Init+0x284>)
 800339e:	789b      	ldrb	r3, [r3, #2]
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	4313      	orrs	r3, r2
 80033a4:	4a85      	ldr	r2, [pc, #532]	; (80035bc <MX_LWIP_Init+0x284>)
 80033a6:	78d2      	ldrb	r2, [r2, #3]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	061a      	lsls	r2, r3, #24
 80033ac:	4b83      	ldr	r3, [pc, #524]	; (80035bc <MX_LWIP_Init+0x284>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	0619      	lsls	r1, r3, #24
 80033b2:	4b82      	ldr	r3, [pc, #520]	; (80035bc <MX_LWIP_Init+0x284>)
 80033b4:	785b      	ldrb	r3, [r3, #1]
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	4319      	orrs	r1, r3
 80033ba:	4b80      	ldr	r3, [pc, #512]	; (80035bc <MX_LWIP_Init+0x284>)
 80033bc:	789b      	ldrb	r3, [r3, #2]
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	430b      	orrs	r3, r1
 80033c2:	497e      	ldr	r1, [pc, #504]	; (80035bc <MX_LWIP_Init+0x284>)
 80033c4:	78c9      	ldrb	r1, [r1, #3]
 80033c6:	430b      	orrs	r3, r1
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033ce:	431a      	orrs	r2, r3
 80033d0:	4b7a      	ldr	r3, [pc, #488]	; (80035bc <MX_LWIP_Init+0x284>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	0619      	lsls	r1, r3, #24
 80033d6:	4b79      	ldr	r3, [pc, #484]	; (80035bc <MX_LWIP_Init+0x284>)
 80033d8:	785b      	ldrb	r3, [r3, #1]
 80033da:	041b      	lsls	r3, r3, #16
 80033dc:	4319      	orrs	r1, r3
 80033de:	4b77      	ldr	r3, [pc, #476]	; (80035bc <MX_LWIP_Init+0x284>)
 80033e0:	789b      	ldrb	r3, [r3, #2]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	430b      	orrs	r3, r1
 80033e6:	4975      	ldr	r1, [pc, #468]	; (80035bc <MX_LWIP_Init+0x284>)
 80033e8:	78c9      	ldrb	r1, [r1, #3]
 80033ea:	430b      	orrs	r3, r1
 80033ec:	0a1b      	lsrs	r3, r3, #8
 80033ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80033f2:	431a      	orrs	r2, r3
 80033f4:	4b71      	ldr	r3, [pc, #452]	; (80035bc <MX_LWIP_Init+0x284>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	0619      	lsls	r1, r3, #24
 80033fa:	4b70      	ldr	r3, [pc, #448]	; (80035bc <MX_LWIP_Init+0x284>)
 80033fc:	785b      	ldrb	r3, [r3, #1]
 80033fe:	041b      	lsls	r3, r3, #16
 8003400:	4319      	orrs	r1, r3
 8003402:	4b6e      	ldr	r3, [pc, #440]	; (80035bc <MX_LWIP_Init+0x284>)
 8003404:	789b      	ldrb	r3, [r3, #2]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	430b      	orrs	r3, r1
 800340a:	496c      	ldr	r1, [pc, #432]	; (80035bc <MX_LWIP_Init+0x284>)
 800340c:	78c9      	ldrb	r1, [r1, #3]
 800340e:	430b      	orrs	r3, r1
 8003410:	0e1b      	lsrs	r3, r3, #24
 8003412:	4313      	orrs	r3, r2
 8003414:	4a6c      	ldr	r2, [pc, #432]	; (80035c8 <MX_LWIP_Init+0x290>)
 8003416:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003418:	4b69      	ldr	r3, [pc, #420]	; (80035c0 <MX_LWIP_Init+0x288>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	061a      	lsls	r2, r3, #24
 800341e:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <MX_LWIP_Init+0x288>)
 8003420:	785b      	ldrb	r3, [r3, #1]
 8003422:	041b      	lsls	r3, r3, #16
 8003424:	431a      	orrs	r2, r3
 8003426:	4b66      	ldr	r3, [pc, #408]	; (80035c0 <MX_LWIP_Init+0x288>)
 8003428:	789b      	ldrb	r3, [r3, #2]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	4313      	orrs	r3, r2
 800342e:	4a64      	ldr	r2, [pc, #400]	; (80035c0 <MX_LWIP_Init+0x288>)
 8003430:	78d2      	ldrb	r2, [r2, #3]
 8003432:	4313      	orrs	r3, r2
 8003434:	061a      	lsls	r2, r3, #24
 8003436:	4b62      	ldr	r3, [pc, #392]	; (80035c0 <MX_LWIP_Init+0x288>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	0619      	lsls	r1, r3, #24
 800343c:	4b60      	ldr	r3, [pc, #384]	; (80035c0 <MX_LWIP_Init+0x288>)
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	041b      	lsls	r3, r3, #16
 8003442:	4319      	orrs	r1, r3
 8003444:	4b5e      	ldr	r3, [pc, #376]	; (80035c0 <MX_LWIP_Init+0x288>)
 8003446:	789b      	ldrb	r3, [r3, #2]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	430b      	orrs	r3, r1
 800344c:	495c      	ldr	r1, [pc, #368]	; (80035c0 <MX_LWIP_Init+0x288>)
 800344e:	78c9      	ldrb	r1, [r1, #3]
 8003450:	430b      	orrs	r3, r1
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003458:	431a      	orrs	r2, r3
 800345a:	4b59      	ldr	r3, [pc, #356]	; (80035c0 <MX_LWIP_Init+0x288>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	0619      	lsls	r1, r3, #24
 8003460:	4b57      	ldr	r3, [pc, #348]	; (80035c0 <MX_LWIP_Init+0x288>)
 8003462:	785b      	ldrb	r3, [r3, #1]
 8003464:	041b      	lsls	r3, r3, #16
 8003466:	4319      	orrs	r1, r3
 8003468:	4b55      	ldr	r3, [pc, #340]	; (80035c0 <MX_LWIP_Init+0x288>)
 800346a:	789b      	ldrb	r3, [r3, #2]
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	430b      	orrs	r3, r1
 8003470:	4953      	ldr	r1, [pc, #332]	; (80035c0 <MX_LWIP_Init+0x288>)
 8003472:	78c9      	ldrb	r1, [r1, #3]
 8003474:	430b      	orrs	r3, r1
 8003476:	0a1b      	lsrs	r3, r3, #8
 8003478:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800347c:	431a      	orrs	r2, r3
 800347e:	4b50      	ldr	r3, [pc, #320]	; (80035c0 <MX_LWIP_Init+0x288>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	0619      	lsls	r1, r3, #24
 8003484:	4b4e      	ldr	r3, [pc, #312]	; (80035c0 <MX_LWIP_Init+0x288>)
 8003486:	785b      	ldrb	r3, [r3, #1]
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	4319      	orrs	r1, r3
 800348c:	4b4c      	ldr	r3, [pc, #304]	; (80035c0 <MX_LWIP_Init+0x288>)
 800348e:	789b      	ldrb	r3, [r3, #2]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	430b      	orrs	r3, r1
 8003494:	494a      	ldr	r1, [pc, #296]	; (80035c0 <MX_LWIP_Init+0x288>)
 8003496:	78c9      	ldrb	r1, [r1, #3]
 8003498:	430b      	orrs	r3, r1
 800349a:	0e1b      	lsrs	r3, r3, #24
 800349c:	4313      	orrs	r3, r2
 800349e:	4a4b      	ldr	r2, [pc, #300]	; (80035cc <MX_LWIP_Init+0x294>)
 80034a0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80034a2:	4b48      	ldr	r3, [pc, #288]	; (80035c4 <MX_LWIP_Init+0x28c>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	061a      	lsls	r2, r3, #24
 80034a8:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <MX_LWIP_Init+0x28c>)
 80034aa:	785b      	ldrb	r3, [r3, #1]
 80034ac:	041b      	lsls	r3, r3, #16
 80034ae:	431a      	orrs	r2, r3
 80034b0:	4b44      	ldr	r3, [pc, #272]	; (80035c4 <MX_LWIP_Init+0x28c>)
 80034b2:	789b      	ldrb	r3, [r3, #2]
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	4313      	orrs	r3, r2
 80034b8:	4a42      	ldr	r2, [pc, #264]	; (80035c4 <MX_LWIP_Init+0x28c>)
 80034ba:	78d2      	ldrb	r2, [r2, #3]
 80034bc:	4313      	orrs	r3, r2
 80034be:	061a      	lsls	r2, r3, #24
 80034c0:	4b40      	ldr	r3, [pc, #256]	; (80035c4 <MX_LWIP_Init+0x28c>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	0619      	lsls	r1, r3, #24
 80034c6:	4b3f      	ldr	r3, [pc, #252]	; (80035c4 <MX_LWIP_Init+0x28c>)
 80034c8:	785b      	ldrb	r3, [r3, #1]
 80034ca:	041b      	lsls	r3, r3, #16
 80034cc:	4319      	orrs	r1, r3
 80034ce:	4b3d      	ldr	r3, [pc, #244]	; (80035c4 <MX_LWIP_Init+0x28c>)
 80034d0:	789b      	ldrb	r3, [r3, #2]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	430b      	orrs	r3, r1
 80034d6:	493b      	ldr	r1, [pc, #236]	; (80035c4 <MX_LWIP_Init+0x28c>)
 80034d8:	78c9      	ldrb	r1, [r1, #3]
 80034da:	430b      	orrs	r3, r1
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034e2:	431a      	orrs	r2, r3
 80034e4:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <MX_LWIP_Init+0x28c>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	0619      	lsls	r1, r3, #24
 80034ea:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <MX_LWIP_Init+0x28c>)
 80034ec:	785b      	ldrb	r3, [r3, #1]
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	4319      	orrs	r1, r3
 80034f2:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <MX_LWIP_Init+0x28c>)
 80034f4:	789b      	ldrb	r3, [r3, #2]
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	430b      	orrs	r3, r1
 80034fa:	4932      	ldr	r1, [pc, #200]	; (80035c4 <MX_LWIP_Init+0x28c>)
 80034fc:	78c9      	ldrb	r1, [r1, #3]
 80034fe:	430b      	orrs	r3, r1
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003506:	431a      	orrs	r2, r3
 8003508:	4b2e      	ldr	r3, [pc, #184]	; (80035c4 <MX_LWIP_Init+0x28c>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	0619      	lsls	r1, r3, #24
 800350e:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <MX_LWIP_Init+0x28c>)
 8003510:	785b      	ldrb	r3, [r3, #1]
 8003512:	041b      	lsls	r3, r3, #16
 8003514:	4319      	orrs	r1, r3
 8003516:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <MX_LWIP_Init+0x28c>)
 8003518:	789b      	ldrb	r3, [r3, #2]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	430b      	orrs	r3, r1
 800351e:	4929      	ldr	r1, [pc, #164]	; (80035c4 <MX_LWIP_Init+0x28c>)
 8003520:	78c9      	ldrb	r1, [r1, #3]
 8003522:	430b      	orrs	r3, r1
 8003524:	0e1b      	lsrs	r3, r3, #24
 8003526:	4313      	orrs	r3, r2
 8003528:	4a29      	ldr	r2, [pc, #164]	; (80035d0 <MX_LWIP_Init+0x298>)
 800352a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800352c:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <MX_LWIP_Init+0x29c>)
 800352e:	9302      	str	r3, [sp, #8]
 8003530:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <MX_LWIP_Init+0x2a0>)
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	2300      	movs	r3, #0
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	4b25      	ldr	r3, [pc, #148]	; (80035d0 <MX_LWIP_Init+0x298>)
 800353a:	4a24      	ldr	r2, [pc, #144]	; (80035cc <MX_LWIP_Init+0x294>)
 800353c:	4922      	ldr	r1, [pc, #136]	; (80035c8 <MX_LWIP_Init+0x290>)
 800353e:	4827      	ldr	r0, [pc, #156]	; (80035dc <MX_LWIP_Init+0x2a4>)
 8003540:	f009 fb04 	bl	800cb4c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003544:	4825      	ldr	r0, [pc, #148]	; (80035dc <MX_LWIP_Init+0x2a4>)
 8003546:	f009 fbe3 	bl	800cd10 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800354a:	4b24      	ldr	r3, [pc, #144]	; (80035dc <MX_LWIP_Init+0x2a4>)
 800354c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003558:	4820      	ldr	r0, [pc, #128]	; (80035dc <MX_LWIP_Init+0x2a4>)
 800355a:	f009 fbe7 	bl	800cd2c <netif_set_up>
 800355e:	e002      	b.n	8003566 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003560:	481e      	ldr	r0, [pc, #120]	; (80035dc <MX_LWIP_Init+0x2a4>)
 8003562:	f009 fc27 	bl	800cdb4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003566:	491e      	ldr	r1, [pc, #120]	; (80035e0 <MX_LWIP_Init+0x2a8>)
 8003568:	481c      	ldr	r0, [pc, #112]	; (80035dc <MX_LWIP_Init+0x2a4>)
 800356a:	f009 fc90 	bl	800ce8e <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800356e:	2300      	movs	r3, #0
 8003570:	623b      	str	r3, [r7, #32]
 8003572:	2300      	movs	r3, #0
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8003576:	f107 0320 	add.w	r3, r7, #32
 800357a:	2101      	movs	r1, #1
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fd99 	bl	80040b4 <osSemaphoreCreate>
 8003582:	4602      	mov	r2, r0
 8003584:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <MX_LWIP_Init+0x2ac>)
 8003586:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8003588:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <MX_LWIP_Init+0x2b0>)
 800358a:	4a14      	ldr	r2, [pc, #80]	; (80035dc <MX_LWIP_Init+0x2a4>)
 800358c:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800358e:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <MX_LWIP_Init+0x2ac>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <MX_LWIP_Init+0x2b0>)
 8003594:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <MX_LWIP_Init+0x2b4>)
 8003598:	1d3c      	adds	r4, r7, #4
 800359a:	461d      	mov	r5, r3
 800359c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800359e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 80035a8:	1d3b      	adds	r3, r7, #4
 80035aa:	490f      	ldr	r1, [pc, #60]	; (80035e8 <MX_LWIP_Init+0x2b0>)
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fc85 	bl	8003ebc <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80035b2:	bf00      	nop
 80035b4:	3728      	adds	r7, #40	; 0x28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bdb0      	pop	{r4, r5, r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200042e8 	.word	0x200042e8
 80035c0:	200042e4 	.word	0x200042e4
 80035c4:	200042a8 	.word	0x200042a8
 80035c8:	200042e0 	.word	0x200042e0
 80035cc:	200042ec 	.word	0x200042ec
 80035d0:	200042f0 	.word	0x200042f0
 80035d4:	08009bf1 	.word	0x08009bf1
 80035d8:	08003c5d 	.word	0x08003c5d
 80035dc:	200042ac 	.word	0x200042ac
 80035e0:	08003d3d 	.word	0x08003d3d
 80035e4:	200002f4 	.word	0x200002f4
 80035e8:	200042a0 	.word	0x200042a0
 80035ec:	08015480 	.word	0x08015480

080035f0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08e      	sub	sp, #56	; 0x38
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a59      	ldr	r2, [pc, #356]	; (8003774 <HAL_ETH_MspInit+0x184>)
 800360e:	4293      	cmp	r3, r2
 8003610:	f040 80ac 	bne.w	800376c <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003614:	2300      	movs	r3, #0
 8003616:	623b      	str	r3, [r7, #32]
 8003618:	4a57      	ldr	r2, [pc, #348]	; (8003778 <HAL_ETH_MspInit+0x188>)
 800361a:	4b57      	ldr	r3, [pc, #348]	; (8003778 <HAL_ETH_MspInit+0x188>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003622:	6313      	str	r3, [r2, #48]	; 0x30
 8003624:	4b54      	ldr	r3, [pc, #336]	; (8003778 <HAL_ETH_MspInit+0x188>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362c:	623b      	str	r3, [r7, #32]
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	2300      	movs	r3, #0
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	4a50      	ldr	r2, [pc, #320]	; (8003778 <HAL_ETH_MspInit+0x188>)
 8003636:	4b50      	ldr	r3, [pc, #320]	; (8003778 <HAL_ETH_MspInit+0x188>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800363e:	6313      	str	r3, [r2, #48]	; 0x30
 8003640:	4b4d      	ldr	r3, [pc, #308]	; (8003778 <HAL_ETH_MspInit+0x188>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	2300      	movs	r3, #0
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	4a49      	ldr	r2, [pc, #292]	; (8003778 <HAL_ETH_MspInit+0x188>)
 8003652:	4b49      	ldr	r3, [pc, #292]	; (8003778 <HAL_ETH_MspInit+0x188>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800365a:	6313      	str	r3, [r2, #48]	; 0x30
 800365c:	4b46      	ldr	r3, [pc, #280]	; (8003778 <HAL_ETH_MspInit+0x188>)
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	4a42      	ldr	r2, [pc, #264]	; (8003778 <HAL_ETH_MspInit+0x188>)
 800366e:	4b42      	ldr	r3, [pc, #264]	; (8003778 <HAL_ETH_MspInit+0x188>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	f043 0304 	orr.w	r3, r3, #4
 8003676:	6313      	str	r3, [r2, #48]	; 0x30
 8003678:	4b3f      	ldr	r3, [pc, #252]	; (8003778 <HAL_ETH_MspInit+0x188>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003684:	2300      	movs	r3, #0
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	4a3b      	ldr	r2, [pc, #236]	; (8003778 <HAL_ETH_MspInit+0x188>)
 800368a:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <HAL_ETH_MspInit+0x188>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6313      	str	r3, [r2, #48]	; 0x30
 8003694:	4b38      	ldr	r3, [pc, #224]	; (8003778 <HAL_ETH_MspInit+0x188>)
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	4a34      	ldr	r2, [pc, #208]	; (8003778 <HAL_ETH_MspInit+0x188>)
 80036a6:	4b34      	ldr	r3, [pc, #208]	; (8003778 <HAL_ETH_MspInit+0x188>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f043 0302 	orr.w	r3, r3, #2
 80036ae:	6313      	str	r3, [r2, #48]	; 0x30
 80036b0:	4b31      	ldr	r3, [pc, #196]	; (8003778 <HAL_ETH_MspInit+0x188>)
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80036bc:	2300      	movs	r3, #0
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	4a2d      	ldr	r2, [pc, #180]	; (8003778 <HAL_ETH_MspInit+0x188>)
 80036c2:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <HAL_ETH_MspInit+0x188>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ca:	6313      	str	r3, [r2, #48]	; 0x30
 80036cc:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <HAL_ETH_MspInit+0x188>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80036d8:	2332      	movs	r3, #50	; 0x32
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036dc:	2302      	movs	r3, #2
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e4:	2303      	movs	r3, #3
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036e8:	230b      	movs	r3, #11
 80036ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f0:	4619      	mov	r1, r3
 80036f2:	4822      	ldr	r0, [pc, #136]	; (800377c <HAL_ETH_MspInit+0x18c>)
 80036f4:	f7fe fd1e 	bl	8002134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80036f8:	2386      	movs	r3, #134	; 0x86
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fc:	2302      	movs	r3, #2
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003700:	2300      	movs	r3, #0
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003704:	2303      	movs	r3, #3
 8003706:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003708:	230b      	movs	r3, #11
 800370a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003710:	4619      	mov	r1, r3
 8003712:	481b      	ldr	r0, [pc, #108]	; (8003780 <HAL_ETH_MspInit+0x190>)
 8003714:	f7fe fd0e 	bl	8002134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371e:	2302      	movs	r3, #2
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003726:	2303      	movs	r3, #3
 8003728:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800372a:	230b      	movs	r3, #11
 800372c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003732:	4619      	mov	r1, r3
 8003734:	4813      	ldr	r0, [pc, #76]	; (8003784 <HAL_ETH_MspInit+0x194>)
 8003736:	f7fe fcfd 	bl	8002134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800373a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003740:	2302      	movs	r3, #2
 8003742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	2300      	movs	r3, #0
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003748:	2303      	movs	r3, #3
 800374a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800374c:	230b      	movs	r3, #11
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003754:	4619      	mov	r1, r3
 8003756:	480c      	ldr	r0, [pc, #48]	; (8003788 <HAL_ETH_MspInit+0x198>)
 8003758:	f7fe fcec 	bl	8002134 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800375c:	2200      	movs	r2, #0
 800375e:	2105      	movs	r1, #5
 8003760:	203d      	movs	r0, #61	; 0x3d
 8003762:	f7fd fb36 	bl	8000dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003766:	203d      	movs	r0, #61	; 0x3d
 8003768:	f7fd fb4f 	bl	8000e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800376c:	bf00      	nop
 800376e:	3738      	adds	r7, #56	; 0x38
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40028000 	.word	0x40028000
 8003778:	40023800 	.word	0x40023800
 800377c:	40020800 	.word	0x40020800
 8003780:	40020000 	.word	0x40020000
 8003784:	40020400 	.word	0x40020400
 8003788:	40021800 	.word	0x40021800

0800378c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <HAL_ETH_RxCpltCallback+0x1c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fd0d 	bl	80041b8 <osSemaphoreRelease>
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200002f8 	.word	0x200002f8

080037ac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80037ac:	b5b0      	push	{r4, r5, r7, lr}
 80037ae:	b090      	sub	sp, #64	; 0x40
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80037b8:	4b60      	ldr	r3, [pc, #384]	; (800393c <low_level_init+0x190>)
 80037ba:	4a61      	ldr	r2, [pc, #388]	; (8003940 <low_level_init+0x194>)
 80037bc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80037be:	4b5f      	ldr	r3, [pc, #380]	; (800393c <low_level_init+0x190>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80037c4:	4b5d      	ldr	r3, [pc, #372]	; (800393c <low_level_init+0x190>)
 80037c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037ca:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80037cc:	4b5b      	ldr	r3, [pc, #364]	; (800393c <low_level_init+0x190>)
 80037ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80037d4:	4b59      	ldr	r3, [pc, #356]	; (800393c <low_level_init+0x190>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80037da:	2300      	movs	r3, #0
 80037dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80037e0:	2380      	movs	r3, #128	; 0x80
 80037e2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80037e6:	23e1      	movs	r3, #225	; 0xe1
 80037e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80037f2:	2300      	movs	r3, #0
 80037f4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80037f8:	2300      	movs	r3, #0
 80037fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80037fe:	4a4f      	ldr	r2, [pc, #316]	; (800393c <low_level_init+0x190>)
 8003800:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003804:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8003806:	4b4d      	ldr	r3, [pc, #308]	; (800393c <low_level_init+0x190>)
 8003808:	2201      	movs	r2, #1
 800380a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800380c:	4b4b      	ldr	r3, [pc, #300]	; (800393c <low_level_init+0x190>)
 800380e:	2200      	movs	r2, #0
 8003810:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003812:	4b4a      	ldr	r3, [pc, #296]	; (800393c <low_level_init+0x190>)
 8003814:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003818:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800381a:	4848      	ldr	r0, [pc, #288]	; (800393c <low_level_init+0x190>)
 800381c:	f7fd fb04 	bl	8000e28 <HAL_ETH_Init>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8003826:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800382a:	2b00      	cmp	r3, #0
 800382c:	d108      	bne.n	8003840 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003834:	f043 0304 	orr.w	r3, r3, #4
 8003838:	b2da      	uxtb	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003840:	2304      	movs	r3, #4
 8003842:	4a40      	ldr	r2, [pc, #256]	; (8003944 <low_level_init+0x198>)
 8003844:	4940      	ldr	r1, [pc, #256]	; (8003948 <low_level_init+0x19c>)
 8003846:	483d      	ldr	r0, [pc, #244]	; (800393c <low_level_init+0x190>)
 8003848:	f7fd fc7c 	bl	8001144 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800384c:	2304      	movs	r3, #4
 800384e:	4a3f      	ldr	r2, [pc, #252]	; (800394c <low_level_init+0x1a0>)
 8003850:	493f      	ldr	r1, [pc, #252]	; (8003950 <low_level_init+0x1a4>)
 8003852:	483a      	ldr	r0, [pc, #232]	; (800393c <low_level_init+0x190>)
 8003854:	f7fd fcde 	bl	8001214 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2206      	movs	r2, #6
 800385c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003860:	4b36      	ldr	r3, [pc, #216]	; (800393c <low_level_init+0x190>)
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	781a      	ldrb	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800386c:	4b33      	ldr	r3, [pc, #204]	; (800393c <low_level_init+0x190>)
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	785a      	ldrb	r2, [r3, #1]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003878:	4b30      	ldr	r3, [pc, #192]	; (800393c <low_level_init+0x190>)
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	789a      	ldrb	r2, [r3, #2]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003884:	4b2d      	ldr	r3, [pc, #180]	; (800393c <low_level_init+0x190>)
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	78da      	ldrb	r2, [r3, #3]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003890:	4b2a      	ldr	r3, [pc, #168]	; (800393c <low_level_init+0x190>)
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	791a      	ldrb	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800389c:	4b27      	ldr	r3, [pc, #156]	; (800393c <low_level_init+0x190>)
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	795a      	ldrb	r2, [r3, #5]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80038ae:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80038b6:	f043 030a 	orr.w	r3, r3, #10
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80038c2:	2300      	movs	r3, #0
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c6:	2300      	movs	r3, #0
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80038ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038ce:	2101      	movs	r1, #1
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 fbef 	bl	80040b4 <osSemaphoreCreate>
 80038d6:	4602      	mov	r2, r0
 80038d8:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <low_level_init+0x1a8>)
 80038da:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80038dc:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <low_level_init+0x1ac>)
 80038de:	f107 040c 	add.w	r4, r7, #12
 80038e2:	461d      	mov	r5, r3
 80038e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80038f0:	f107 030c 	add.w	r3, r7, #12
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fae0 	bl	8003ebc <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80038fc:	480f      	ldr	r0, [pc, #60]	; (800393c <low_level_init+0x190>)
 80038fe:	f7fd ffad 	bl	800185c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003902:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003906:	461a      	mov	r2, r3
 8003908:	211d      	movs	r1, #29
 800390a:	480c      	ldr	r0, [pc, #48]	; (800393c <low_level_init+0x190>)
 800390c:	f7fd fed8 	bl	80016c0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003912:	f043 030b 	orr.w	r3, r3, #11
 8003916:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	461a      	mov	r2, r3
 800391c:	211d      	movs	r1, #29
 800391e:	4807      	ldr	r0, [pc, #28]	; (800393c <low_level_init+0x190>)
 8003920:	f7fd ff36 	bl	8001790 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003924:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003928:	461a      	mov	r2, r3
 800392a:	211d      	movs	r1, #29
 800392c:	4803      	ldr	r0, [pc, #12]	; (800393c <low_level_init+0x190>)
 800392e:	f7fd fec7 	bl	80016c0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003932:	bf00      	nop
 8003934:	3740      	adds	r7, #64	; 0x40
 8003936:	46bd      	mov	sp, r7
 8003938:	bdb0      	pop	{r4, r5, r7, pc}
 800393a:	bf00      	nop
 800393c:	20005bc4 	.word	0x20005bc4
 8003940:	40028000 	.word	0x40028000
 8003944:	20005c0c 	.word	0x20005c0c
 8003948:	200042f4 	.word	0x200042f4
 800394c:	20004374 	.word	0x20004374
 8003950:	20005b44 	.word	0x20005b44
 8003954:	200002f8 	.word	0x200002f8
 8003958:	080154a4 	.word	0x080154a4

0800395c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08a      	sub	sp, #40	; 0x28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003966:	4b4b      	ldr	r3, [pc, #300]	; (8003a94 <low_level_output+0x138>)
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800397e:	4b45      	ldr	r3, [pc, #276]	; (8003a94 <low_level_output+0x138>)
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	623b      	str	r3, [r7, #32]
 800398c:	e05a      	b.n	8003a44 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	da03      	bge.n	800399e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003996:	23f8      	movs	r3, #248	; 0xf8
 8003998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800399c:	e05c      	b.n	8003a58 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	895b      	ldrh	r3, [r3, #10]
 80039a2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80039a8:	e02f      	b.n	8003a0a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	18d0      	adds	r0, r2, r3
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	18d1      	adds	r1, r2, r3
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80039be:	3304      	adds	r3, #4
 80039c0:	461a      	mov	r2, r3
 80039c2:	f010 fb46 	bl	8014052 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	da03      	bge.n	80039dc <low_level_output+0x80>
        {
          errval = ERR_USE;
 80039d4:	23f8      	movs	r3, #248	; 0xf8
 80039d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80039da:	e03d      	b.n	8003a58 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4413      	add	r3, r2
 80039e8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80039ec:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80039f8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003a04:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d8c8      	bhi.n	80039aa <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	18d0      	adds	r0, r2, r3
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4413      	add	r3, r2
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f010 fb12 	bl	8014052 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4413      	add	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	623b      	str	r3, [r7, #32]
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1a1      	bne.n	800398e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003a4a:	6979      	ldr	r1, [r7, #20]
 8003a4c:	4811      	ldr	r0, [pc, #68]	; (8003a94 <low_level_output+0x138>)
 8003a4e:	f7fd fc4d 	bl	80012ec <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003a58:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <low_level_output+0x138>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a60:	3314      	adds	r3, #20
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00d      	beq.n	8003a88 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003a6c:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <low_level_output+0x138>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a74:	3314      	adds	r3, #20
 8003a76:	2220      	movs	r2, #32
 8003a78:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <low_level_output+0x138>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a82:	3304      	adds	r3, #4
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003a88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3728      	adds	r7, #40	; 0x28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20005bc4 	.word	0x20005bc4

08003a98 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08c      	sub	sp, #48	; 0x30
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003abc:	484e      	ldr	r0, [pc, #312]	; (8003bf8 <low_level_input+0x160>)
 8003abe:	f7fd fcff 	bl	80014c0 <HAL_ETH_GetReceivedFrame_IT>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <low_level_input+0x34>

    return NULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e091      	b.n	8003bf0 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003acc:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <low_level_input+0x160>)
 8003ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003ad2:	4b49      	ldr	r3, [pc, #292]	; (8003bf8 <low_level_input+0x160>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003ad8:	89fb      	ldrh	r3, [r7, #14]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d006      	beq.n	8003aec <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003ade:	89fb      	ldrh	r3, [r7, #14]
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	2004      	movs	r0, #4
 8003ae6:	f009 fa43 	bl	800cf70 <pbuf_alloc>
 8003aea:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d04b      	beq.n	8003b8a <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003af2:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <low_level_input+0x160>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b00:	e040      	b.n	8003b84 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	895b      	ldrh	r3, [r3, #10]
 8003b06:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003b0c:	e021      	b.n	8003b52 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	18d0      	adds	r0, r2, r3
 8003b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	18d1      	adds	r1, r2, r3
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003b22:	3304      	adds	r3, #4
 8003b24:	461a      	mov	r2, r3
 8003b26:	f010 fa94 	bl	8014052 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003b40:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003b4c:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	4413      	add	r3, r2
 8003b58:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d8d6      	bhi.n	8003b0e <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	18d0      	adds	r0, r2, r3
 8003b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4619      	mov	r1, r3
 8003b72:	f010 fa6e 	bl	8014052 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1bb      	bne.n	8003b02 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <low_level_input+0x160>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	e00b      	b.n	8003bae <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	3301      	adds	r3, #1
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <low_level_input+0x160>)
 8003bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d8ee      	bhi.n	8003b96 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <low_level_input+0x160>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003bbe:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <low_level_input+0x160>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc6:	3314      	adds	r3, #20
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00d      	beq.n	8003bee <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <low_level_input+0x160>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bda:	3314      	adds	r3, #20
 8003bdc:	2280      	movs	r2, #128	; 0x80
 8003bde:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <low_level_input+0x160>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be8:	3308      	adds	r3, #8
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3730      	adds	r7, #48	; 0x30
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20005bc4 	.word	0x20005bc4

08003bfc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003c08:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <ethernetif_input+0x58>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fa83 	bl	800411c <osSemaphoreWait>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f5      	bne.n	8003c08 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8003c1c:	480e      	ldr	r0, [pc, #56]	; (8003c58 <ethernetif_input+0x5c>)
 8003c1e:	f010 f95b 	bl	8013ed8 <sys_mutex_lock>
        p = low_level_input( netif );
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f7ff ff38 	bl	8003a98 <low_level_input>
 8003c28:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	68f9      	ldr	r1, [r7, #12]
 8003c36:	68b8      	ldr	r0, [r7, #8]
 8003c38:	4798      	blx	r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8003c40:	68b8      	ldr	r0, [r7, #8]
 8003c42:	f009 fd07 	bl	800d654 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8003c46:	4804      	ldr	r0, [pc, #16]	; (8003c58 <ethernetif_input+0x5c>)
 8003c48:	f010 f955 	bl	8013ef6 <sys_mutex_unlock>
      } while(p!=NULL);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e4      	bne.n	8003c1c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003c52:	e7d9      	b.n	8003c08 <ethernetif_input+0xc>
 8003c54:	200002f8 	.word	0x200002f8
 8003c58:	20007420 	.word	0x20007420

08003c5c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <ethernetif_init+0x1c>
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <ethernetif_init+0x48>)
 8003c6c:	f240 2235 	movw	r2, #565	; 0x235
 8003c70:	490d      	ldr	r1, [pc, #52]	; (8003ca8 <ethernetif_init+0x4c>)
 8003c72:	480e      	ldr	r0, [pc, #56]	; (8003cac <ethernetif_init+0x50>)
 8003c74:	f010 fa2e 	bl	80140d4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2273      	movs	r2, #115	; 0x73
 8003c7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2274      	movs	r2, #116	; 0x74
 8003c84:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a09      	ldr	r2, [pc, #36]	; (8003cb0 <ethernetif_init+0x54>)
 8003c8c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <ethernetif_init+0x58>)
 8003c92:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff fd89 	bl	80037ac <low_level_init>

  return ERR_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	080154c0 	.word	0x080154c0
 8003ca8:	080154dc 	.word	0x080154dc
 8003cac:	080154ec 	.word	0x080154ec
 8003cb0:	0800a63d 	.word	0x0800a63d
 8003cb4:	0800395d 	.word	0x0800395d

08003cb8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003cbc:	f7fc ffaa 	bl	8000c14 <HAL_GetTick>
 8003cc0:	4603      	mov	r3, r0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	bd80      	pop	{r7, pc}
	...

08003cc8 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003cd8:	f107 0308 	add.w	r3, r7, #8
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2101      	movs	r1, #1
 8003ce0:	4815      	ldr	r0, [pc, #84]	; (8003d38 <ethernetif_set_link+0x70>)
 8003ce2:	f7fd fced 	bl	80016c0 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d108      	bne.n	8003d10 <ethernetif_set_link+0x48>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f009 f875 	bl	800cdf8 <netif_set_link_up>
 8003d0e:	e00f      	b.n	8003d30 <ethernetif_set_link+0x68>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <ethernetif_set_link+0x68>
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <ethernetif_set_link+0x68>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f009 f88f 	bl	800ce4e <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8003d30:	20c8      	movs	r0, #200	; 0xc8
 8003d32:	f000 f90f 	bl	8003f54 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003d36:	e7cf      	b.n	8003cd8 <ethernetif_set_link+0x10>
 8003d38:	20005bc4 	.word	0x20005bc4

08003d3c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d05b      	beq.n	8003e12 <ethernetif_update_config+0xd6>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003d5a:	4b33      	ldr	r3, [pc, #204]	; (8003e28 <ethernetif_update_config+0xec>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d040      	beq.n	8003de4 <ethernetif_update_config+0xa8>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003d62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d66:	2100      	movs	r1, #0
 8003d68:	482f      	ldr	r0, [pc, #188]	; (8003e28 <ethernetif_update_config+0xec>)
 8003d6a:	f7fd fd11 	bl	8001790 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003d6e:	f7fc ff51 	bl	8000c14 <HAL_GetTick>
 8003d72:	4603      	mov	r3, r0
 8003d74:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003d76:	f107 0308 	add.w	r3, r7, #8
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	482a      	ldr	r0, [pc, #168]	; (8003e28 <ethernetif_update_config+0xec>)
 8003d80:	f7fd fc9e 	bl	80016c0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003d84:	f7fc ff46 	bl	8000c14 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d92:	d826      	bhi.n	8003de2 <ethernetif_update_config+0xa6>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0eb      	beq.n	8003d76 <ethernetif_update_config+0x3a>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003d9e:	f107 0308 	add.w	r3, r7, #8
 8003da2:	461a      	mov	r2, r3
 8003da4:	2110      	movs	r1, #16
 8003da6:	4820      	ldr	r0, [pc, #128]	; (8003e28 <ethernetif_update_config+0xec>)
 8003da8:	f7fd fc8a 	bl	80016c0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d004      	beq.n	8003dc0 <ethernetif_update_config+0x84>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003db6:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <ethernetif_update_config+0xec>)
 8003db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	e002      	b.n	8003dc6 <ethernetif_update_config+0x8a>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <ethernetif_update_config+0xec>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <ethernetif_update_config+0x9c>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003dd0:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <ethernetif_update_config+0xec>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]
 8003dd6:	e014      	b.n	8003e02 <ethernetif_update_config+0xc6>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003dd8:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <ethernetif_update_config+0xec>)
 8003dda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	e00f      	b.n	8003e02 <ethernetif_update_config+0xc6>
          goto error;
 8003de2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003de4:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <ethernetif_update_config+0xec>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	08db      	lsrs	r3, r3, #3
 8003dea:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003dec:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <ethernetif_update_config+0xec>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003df4:	4313      	orrs	r3, r2
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	480a      	ldr	r0, [pc, #40]	; (8003e28 <ethernetif_update_config+0xec>)
 8003dfe:	f7fd fcc7 	bl	8001790 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003e02:	2100      	movs	r1, #0
 8003e04:	4808      	ldr	r0, [pc, #32]	; (8003e28 <ethernetif_update_config+0xec>)
 8003e06:	f7fd fd87 	bl	8001918 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003e0a:	4807      	ldr	r0, [pc, #28]	; (8003e28 <ethernetif_update_config+0xec>)
 8003e0c:	f7fd fd26 	bl	800185c <HAL_ETH_Start>
 8003e10:	e002      	b.n	8003e18 <ethernetif_update_config+0xdc>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003e12:	4805      	ldr	r0, [pc, #20]	; (8003e28 <ethernetif_update_config+0xec>)
 8003e14:	f7fd fd51 	bl	80018ba <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f807 	bl	8003e2c <ethernetif_notify_conn_changed>
}
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20005bc4 	.word	0x20005bc4

08003e2c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr

08003e3e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	4603      	mov	r3, r0
 8003e46:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e50:	2b84      	cmp	r3, #132	; 0x84
 8003e52:	d005      	beq.n	8003e60 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3303      	adds	r3, #3
 8003e5e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e60:	68fb      	ldr	r3, [r7, #12]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e72:	f3ef 8305 	mrs	r3, IPSR
 8003e76:	607b      	str	r3, [r7, #4]
  return(result);
 8003e78:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bf14      	ite	ne
 8003e7e:	2301      	movne	r3, #1
 8003e80:	2300      	moveq	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e92:	f002 f8a3 	bl	8005fdc <vTaskStartScheduler>
  
  return osOK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003ea0:	f7ff ffe4 	bl	8003e6c <inHandlerMode>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003eaa:	f002 f9ad 	bl	8006208 <xTaskGetTickCountFromISR>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	e002      	b.n	8003eb8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003eb2:	f002 f99b 	bl	80061ec <xTaskGetTickCount>
 8003eb6:	4603      	mov	r3, r0
  }
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ebe:	b089      	sub	sp, #36	; 0x24
 8003ec0:	af04      	add	r7, sp, #16
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d020      	beq.n	8003f10 <osThreadCreate+0x54>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01c      	beq.n	8003f10 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685c      	ldr	r4, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681d      	ldr	r5, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691e      	ldr	r6, [r3, #16]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ffa8 	bl	8003e3e <makeFreeRtosPriority>
 8003eee:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ef8:	9202      	str	r2, [sp, #8]
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	9100      	str	r1, [sp, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	4632      	mov	r2, r6
 8003f02:	4629      	mov	r1, r5
 8003f04:	4620      	mov	r0, r4
 8003f06:	f001 feaf 	bl	8005c68 <xTaskCreateStatic>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	e01c      	b.n	8003f4a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685c      	ldr	r4, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f1c:	b29e      	uxth	r6, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff8a 	bl	8003e3e <makeFreeRtosPriority>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	f107 030c 	add.w	r3, r7, #12
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	9200      	str	r2, [sp, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	4632      	mov	r2, r6
 8003f38:	4629      	mov	r1, r5
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f001 feed 	bl	8005d1a <xTaskCreate>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d001      	beq.n	8003f4a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e000      	b.n	8003f4c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f54 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <osDelay+0x16>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	e000      	b.n	8003f6c <osDelay+0x18>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f002 f801 	bl	8005f74 <vTaskDelay>
  
  return osOK;
 8003f72:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d007      	beq.n	8003f9c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4619      	mov	r1, r3
 8003f92:	2001      	movs	r0, #1
 8003f94:	f001 f82a 	bl	8004fec <xQueueCreateMutexStatic>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	e003      	b.n	8003fa4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f001 f80d 	bl	8004fbc <xQueueCreateMutex>
 8003fa2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <osMutexWait+0x18>
    return osErrorParameter;
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	e03a      	b.n	800403a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fce:	d103      	bne.n	8003fd8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e009      	b.n	8003fec <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d006      	beq.n	8003fec <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <osMutexWait+0x40>
      ticks = 1;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003fec:	f7ff ff3e 	bl	8003e6c <inHandlerMode>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d017      	beq.n	8004026 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003ff6:	f107 0308 	add.w	r3, r7, #8
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f001 fc0c 	bl	800581c <xQueueReceiveFromISR>
 8004004:	4603      	mov	r3, r0
 8004006:	2b01      	cmp	r3, #1
 8004008:	d001      	beq.n	800400e <osMutexWait+0x62>
      return osErrorOS;
 800400a:	23ff      	movs	r3, #255	; 0xff
 800400c:	e015      	b.n	800403a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d011      	beq.n	8004038 <osMutexWait+0x8c>
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <osMutexWait+0x98>)
 8004016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	e008      	b.n	8004038 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004026:	68f9      	ldr	r1, [r7, #12]
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f001 faef 	bl	800560c <xQueueSemaphoreTake>
 800402e:	4603      	mov	r3, r0
 8004030:	2b01      	cmp	r3, #1
 8004032:	d001      	beq.n	8004038 <osMutexWait+0x8c>
    return osErrorOS;
 8004034:	23ff      	movs	r3, #255	; 0xff
 8004036:	e000      	b.n	800403a <osMutexWait+0x8e>
  }
  
  return osOK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	e000ed04 	.word	0xe000ed04

08004048 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004054:	2300      	movs	r3, #0
 8004056:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004058:	f7ff ff08 	bl	8003e6c <inHandlerMode>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d016      	beq.n	8004090 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004062:	f107 0308 	add.w	r3, r7, #8
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f001 f969 	bl	8005340 <xQueueGiveFromISR>
 800406e:	4603      	mov	r3, r0
 8004070:	2b01      	cmp	r3, #1
 8004072:	d001      	beq.n	8004078 <osMutexRelease+0x30>
      return osErrorOS;
 8004074:	23ff      	movs	r3, #255	; 0xff
 8004076:	e017      	b.n	80040a8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d013      	beq.n	80040a6 <osMutexRelease+0x5e>
 800407e:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <osMutexRelease+0x68>)
 8004080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	e00a      	b.n	80040a6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004090:	2300      	movs	r3, #0
 8004092:	2200      	movs	r2, #0
 8004094:	2100      	movs	r1, #0
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 ffc4 	bl	8005024 <xQueueGenericSend>
 800409c:	4603      	mov	r3, r0
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d001      	beq.n	80040a6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80040a2:	23ff      	movs	r3, #255	; 0xff
 80040a4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80040a6:	68fb      	ldr	r3, [r7, #12]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	e000ed04 	.word	0xe000ed04

080040b4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d010      	beq.n	80040e8 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d10b      	bne.n	80040e4 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	2303      	movs	r3, #3
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	2200      	movs	r2, #0
 80040d8:	2100      	movs	r1, #0
 80040da:	2001      	movs	r0, #1
 80040dc:	f000 fe86 	bl	8004dec <xQueueGenericCreateStatic>
 80040e0:	4603      	mov	r3, r0
 80040e2:	e016      	b.n	8004112 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	e014      	b.n	8004112 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d110      	bne.n	8004110 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80040ee:	2203      	movs	r2, #3
 80040f0:	2100      	movs	r1, #0
 80040f2:	2001      	movs	r0, #1
 80040f4:	f000 feec 	bl	8004ed0 <xQueueGenericCreate>
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <osSemaphoreCreate+0x58>
 8004100:	2300      	movs	r3, #0
 8004102:	2200      	movs	r2, #0
 8004104:	2100      	movs	r1, #0
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 ff8c 	bl	8005024 <xQueueGenericSend>
      return sema;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	e000      	b.n	8004112 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004110:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	e03a      	b.n	80041aa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d103      	bne.n	8004148 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004140:	f04f 33ff 	mov.w	r3, #4294967295
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	e009      	b.n	800415c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d006      	beq.n	800415c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <osSemaphoreWait+0x40>
      ticks = 1;
 8004158:	2301      	movs	r3, #1
 800415a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800415c:	f7ff fe86 	bl	8003e6c <inHandlerMode>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d017      	beq.n	8004196 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004166:	f107 0308 	add.w	r3, r7, #8
 800416a:	461a      	mov	r2, r3
 800416c:	2100      	movs	r1, #0
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f001 fb54 	bl	800581c <xQueueReceiveFromISR>
 8004174:	4603      	mov	r3, r0
 8004176:	2b01      	cmp	r3, #1
 8004178:	d001      	beq.n	800417e <osSemaphoreWait+0x62>
      return osErrorOS;
 800417a:	23ff      	movs	r3, #255	; 0xff
 800417c:	e015      	b.n	80041aa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d011      	beq.n	80041a8 <osSemaphoreWait+0x8c>
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <osSemaphoreWait+0x98>)
 8004186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	e008      	b.n	80041a8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004196:	68f9      	ldr	r1, [r7, #12]
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f001 fa37 	bl	800560c <xQueueSemaphoreTake>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d001      	beq.n	80041a8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80041a4:	23ff      	movs	r3, #255	; 0xff
 80041a6:	e000      	b.n	80041aa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	e000ed04 	.word	0xe000ed04

080041b8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80041c8:	f7ff fe50 	bl	8003e6c <inHandlerMode>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d016      	beq.n	8004200 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80041d2:	f107 0308 	add.w	r3, r7, #8
 80041d6:	4619      	mov	r1, r3
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f001 f8b1 	bl	8005340 <xQueueGiveFromISR>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d001      	beq.n	80041e8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80041e4:	23ff      	movs	r3, #255	; 0xff
 80041e6:	e017      	b.n	8004218 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d013      	beq.n	8004216 <osSemaphoreRelease+0x5e>
 80041ee:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <osSemaphoreRelease+0x68>)
 80041f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	e00a      	b.n	8004216 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004200:	2300      	movs	r3, #0
 8004202:	2200      	movs	r2, #0
 8004204:	2100      	movs	r1, #0
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 ff0c 	bl	8005024 <xQueueGenericSend>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	d001      	beq.n	8004216 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004212:	23ff      	movs	r3, #255	; 0xff
 8004214:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004216:	68fb      	ldr	r3, [r7, #12]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800422c:	f7ff fe1e 	bl	8003e6c <inHandlerMode>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004236:	2382      	movs	r3, #130	; 0x82
 8004238:	e003      	b.n	8004242 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f001 fba2 	bl	8005984 <vQueueDelete>

  return osOK; 
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800424a:	b590      	push	{r4, r7, lr}
 800424c:	b085      	sub	sp, #20
 800424e:	af02      	add	r7, sp, #8
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d012      	beq.n	8004282 <osMessageCreate+0x38>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00e      	beq.n	8004282 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6859      	ldr	r1, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68dc      	ldr	r4, [r3, #12]
 8004274:	2300      	movs	r3, #0
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	4623      	mov	r3, r4
 800427a:	f000 fdb7 	bl	8004dec <xQueueGenericCreateStatic>
 800427e:	4603      	mov	r3, r0
 8004280:	e008      	b.n	8004294 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	4619      	mov	r1, r3
 800428e:	f000 fe1f 	bl	8004ed0 <xQueueGenericCreate>
 8004292:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	bd90      	pop	{r4, r7, pc}

0800429c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <osMessagePut+0x1e>
    ticks = 1;
 80042b6:	2301      	movs	r3, #1
 80042b8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80042ba:	f7ff fdd7 	bl	8003e6c <inHandlerMode>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d018      	beq.n	80042f6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80042c4:	f107 0210 	add.w	r2, r7, #16
 80042c8:	f107 0108 	add.w	r1, r7, #8
 80042cc:	2300      	movs	r3, #0
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 ffa2 	bl	8005218 <xQueueGenericSendFromISR>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d001      	beq.n	80042de <osMessagePut+0x42>
      return osErrorOS;
 80042da:	23ff      	movs	r3, #255	; 0xff
 80042dc:	e018      	b.n	8004310 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d014      	beq.n	800430e <osMessagePut+0x72>
 80042e4:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <osMessagePut+0x7c>)
 80042e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	e00b      	b.n	800430e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80042f6:	f107 0108 	add.w	r1, r7, #8
 80042fa:	2300      	movs	r3, #0
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 fe90 	bl	8005024 <xQueueGenericSend>
 8004304:	4603      	mov	r3, r0
 8004306:	2b01      	cmp	r3, #1
 8004308:	d001      	beq.n	800430e <osMessagePut+0x72>
      return osErrorOS;
 800430a:	23ff      	movs	r3, #255	; 0xff
 800430c:	e000      	b.n	8004310 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	e000ed04 	.word	0xe000ed04

0800431c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800431c:	b590      	push	{r4, r7, lr}
 800431e:	b08b      	sub	sp, #44	; 0x2c
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10a      	bne.n	800434c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004336:	2380      	movs	r3, #128	; 0x80
 8004338:	617b      	str	r3, [r7, #20]
    return event;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	461c      	mov	r4, r3
 800433e:	f107 0314 	add.w	r3, r7, #20
 8004342:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004346:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800434a:	e054      	b.n	80043f6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800434c:	2300      	movs	r3, #0
 800434e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d103      	bne.n	8004364 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800435c:	f04f 33ff 	mov.w	r3, #4294967295
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
 8004362:	e009      	b.n	8004378 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d006      	beq.n	8004378 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <osMessageGet+0x5c>
      ticks = 1;
 8004374:	2301      	movs	r3, #1
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004378:	f7ff fd78 	bl	8003e6c <inHandlerMode>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d01c      	beq.n	80043bc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004382:	f107 0220 	add.w	r2, r7, #32
 8004386:	f107 0314 	add.w	r3, r7, #20
 800438a:	3304      	adds	r3, #4
 800438c:	4619      	mov	r1, r3
 800438e:	68b8      	ldr	r0, [r7, #8]
 8004390:	f001 fa44 	bl	800581c <xQueueReceiveFromISR>
 8004394:	4603      	mov	r3, r0
 8004396:	2b01      	cmp	r3, #1
 8004398:	d102      	bne.n	80043a0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800439a:	2310      	movs	r3, #16
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	e001      	b.n	80043a4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01d      	beq.n	80043e6 <osMessageGet+0xca>
 80043aa:	4b15      	ldr	r3, [pc, #84]	; (8004400 <osMessageGet+0xe4>)
 80043ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	e014      	b.n	80043e6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80043bc:	f107 0314 	add.w	r3, r7, #20
 80043c0:	3304      	adds	r3, #4
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	4619      	mov	r1, r3
 80043c6:	68b8      	ldr	r0, [r7, #8]
 80043c8:	f001 f844 	bl	8005454 <xQueueReceive>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d102      	bne.n	80043d8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80043d2:	2310      	movs	r3, #16
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e006      	b.n	80043e6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <osMessageGet+0xc6>
 80043de:	2300      	movs	r3, #0
 80043e0:	e000      	b.n	80043e4 <osMessageGet+0xc8>
 80043e2:	2340      	movs	r3, #64	; 0x40
 80043e4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	461c      	mov	r4, r3
 80043ea:	f107 0314 	add.w	r3, r7, #20
 80043ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	372c      	adds	r7, #44	; 0x2c
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd90      	pop	{r4, r7, pc}
 80043fe:	bf00      	nop
 8004400:	e000ed04 	.word	0xe000ed04

08004404 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800440c:	f7ff fd2e 	bl	8003e6c <inHandlerMode>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d004      	beq.n	8004420 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f001 fa9a 	bl	8005950 <uxQueueMessagesWaitingFromISR>
 800441c:	4603      	mov	r3, r0
 800441e:	e003      	b.n	8004428 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f001 fa78 	bl	8005916 <uxQueueMessagesWaiting>
 8004426:	4603      	mov	r3, r0
  }
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004438:	f7ff fd18 	bl	8003e6c <inHandlerMode>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <osMessageDelete+0x16>
    return osErrorISR;
 8004442:	2382      	movs	r3, #130	; 0x82
 8004444:	e003      	b.n	800444e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f001 fa9c 	bl	8005984 <vQueueDelete>

  return osOK; 
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f103 0208 	add.w	r2, r3, #8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f04f 32ff 	mov.w	r2, #4294967295
 800446e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f103 0208 	add.w	r2, r3, #8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f103 0208 	add.w	r2, r3, #8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	601a      	str	r2, [r3, #0]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr

080044f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d103      	bne.n	8004512 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	e00c      	b.n	800452c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3308      	adds	r3, #8
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	e002      	b.n	8004520 <vListInsert+0x2e>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	429a      	cmp	r2, r3
 800452a:	d9f6      	bls.n	800451a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	601a      	str	r2, [r3, #0]
}
 8004558:	bf00      	nop
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	bc80      	pop	{r7}
 8004560:	4770      	bx	lr

08004562 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6892      	ldr	r2, [r2, #8]
 8004578:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6852      	ldr	r2, [r2, #4]
 8004582:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	429a      	cmp	r2, r3
 800458c:	d103      	bne.n	8004596 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	1e5a      	subs	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr

080045b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3b04      	subs	r3, #4
 80045c4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3b04      	subs	r3, #4
 80045d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f023 0201 	bic.w	r2, r3, #1
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3b04      	subs	r3, #4
 80045e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045e4:	4a08      	ldr	r2, [pc, #32]	; (8004608 <pxPortInitialiseStack+0x54>)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3b14      	subs	r3, #20
 80045ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3b20      	subs	r3, #32
 80045fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045fc:	68fb      	ldr	r3, [r7, #12]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr
 8004608:	0800460d 	.word	0x0800460d

0800460c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004612:	2300      	movs	r3, #0
 8004614:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004616:	4b10      	ldr	r3, [pc, #64]	; (8004658 <prvTaskExitError+0x4c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461e:	d009      	beq.n	8004634 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e7fe      	b.n	8004632 <prvTaskExitError+0x26>
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004646:	bf00      	nop
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0fc      	beq.n	8004648 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	2000000c 	.word	0x2000000c
 800465c:	00000000 	.word	0x00000000

08004660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004660:	4b07      	ldr	r3, [pc, #28]	; (8004680 <pxCurrentTCBConst2>)
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	6808      	ldr	r0, [r1, #0]
 8004666:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800466a:	f380 8809 	msr	PSP, r0
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f380 8811 	msr	BASEPRI, r0
 800467a:	f04e 0e0d 	orr.w	lr, lr, #13
 800467e:	4770      	bx	lr

08004680 <pxCurrentTCBConst2>:
 8004680:	20003f1c 	.word	0x20003f1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop

08004688 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004688:	4806      	ldr	r0, [pc, #24]	; (80046a4 <prvPortStartFirstTask+0x1c>)
 800468a:	6800      	ldr	r0, [r0, #0]
 800468c:	6800      	ldr	r0, [r0, #0]
 800468e:	f380 8808 	msr	MSP, r0
 8004692:	b662      	cpsie	i
 8004694:	b661      	cpsie	f
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	df00      	svc	0
 80046a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046a2:	bf00      	nop
 80046a4:	e000ed08 	.word	0xe000ed08

080046a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046ae:	4b31      	ldr	r3, [pc, #196]	; (8004774 <xPortStartScheduler+0xcc>)
 80046b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	22ff      	movs	r2, #255	; 0xff
 80046be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	4b29      	ldr	r3, [pc, #164]	; (8004778 <xPortStartScheduler+0xd0>)
 80046d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046d6:	4b29      	ldr	r3, [pc, #164]	; (800477c <xPortStartScheduler+0xd4>)
 80046d8:	2207      	movs	r2, #7
 80046da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046dc:	e009      	b.n	80046f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80046de:	4b27      	ldr	r3, [pc, #156]	; (800477c <xPortStartScheduler+0xd4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	4a25      	ldr	r2, [pc, #148]	; (800477c <xPortStartScheduler+0xd4>)
 80046e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046f2:	78fb      	ldrb	r3, [r7, #3]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fa:	2b80      	cmp	r3, #128	; 0x80
 80046fc:	d0ef      	beq.n	80046de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046fe:	4b1f      	ldr	r3, [pc, #124]	; (800477c <xPortStartScheduler+0xd4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f1c3 0307 	rsb	r3, r3, #7
 8004706:	2b04      	cmp	r3, #4
 8004708:	d009      	beq.n	800471e <xPortStartScheduler+0x76>
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	e7fe      	b.n	800471c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800471e:	4b17      	ldr	r3, [pc, #92]	; (800477c <xPortStartScheduler+0xd4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	4a15      	ldr	r2, [pc, #84]	; (800477c <xPortStartScheduler+0xd4>)
 8004726:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004728:	4b14      	ldr	r3, [pc, #80]	; (800477c <xPortStartScheduler+0xd4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004730:	4a12      	ldr	r2, [pc, #72]	; (800477c <xPortStartScheduler+0xd4>)
 8004732:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	b2da      	uxtb	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800473c:	4a10      	ldr	r2, [pc, #64]	; (8004780 <xPortStartScheduler+0xd8>)
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <xPortStartScheduler+0xd8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004746:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004748:	4a0d      	ldr	r2, [pc, #52]	; (8004780 <xPortStartScheduler+0xd8>)
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <xPortStartScheduler+0xd8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004752:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004754:	f000 f8b0 	bl	80048b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <xPortStartScheduler+0xdc>)
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800475e:	f7ff ff93 	bl	8004688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004762:	f001 fe1f 	bl	80063a4 <vTaskSwitchContext>
	prvTaskExitError();
 8004766:	f7ff ff51 	bl	800460c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	e000e400 	.word	0xe000e400
 8004778:	200002fc 	.word	0x200002fc
 800477c:	20000300 	.word	0x20000300
 8004780:	e000ed20 	.word	0xe000ed20
 8004784:	2000000c 	.word	0x2000000c

08004788 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047a0:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <vPortEnterCritical+0x54>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3301      	adds	r3, #1
 80047a6:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <vPortEnterCritical+0x54>)
 80047a8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047aa:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <vPortEnterCritical+0x54>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d10e      	bne.n	80047d0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047b2:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <vPortEnterCritical+0x58>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d009      	beq.n	80047d0 <vPortEnterCritical+0x48>
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	e7fe      	b.n	80047ce <vPortEnterCritical+0x46>
	}
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	2000000c 	.word	0x2000000c
 80047e0:	e000ed04 	.word	0xe000ed04

080047e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047ea:	4b10      	ldr	r3, [pc, #64]	; (800482c <vPortExitCritical+0x48>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <vPortExitCritical+0x22>
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	607b      	str	r3, [r7, #4]
 8004804:	e7fe      	b.n	8004804 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004806:	4b09      	ldr	r3, [pc, #36]	; (800482c <vPortExitCritical+0x48>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3b01      	subs	r3, #1
 800480c:	4a07      	ldr	r2, [pc, #28]	; (800482c <vPortExitCritical+0x48>)
 800480e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004810:	4b06      	ldr	r3, [pc, #24]	; (800482c <vPortExitCritical+0x48>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d104      	bne.n	8004822 <vPortExitCritical+0x3e>
 8004818:	2300      	movs	r3, #0
 800481a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr
 800482c:	2000000c 	.word	0x2000000c

08004830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004830:	f3ef 8009 	mrs	r0, PSP
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <pxCurrentTCBConst>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004840:	6010      	str	r0, [r2, #0]
 8004842:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004846:	f04f 0050 	mov.w	r0, #80	; 0x50
 800484a:	f380 8811 	msr	BASEPRI, r0
 800484e:	f001 fda9 	bl	80063a4 <vTaskSwitchContext>
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f380 8811 	msr	BASEPRI, r0
 800485a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800485e:	6819      	ldr	r1, [r3, #0]
 8004860:	6808      	ldr	r0, [r1, #0]
 8004862:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004866:	f380 8809 	msr	PSP, r0
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	4770      	bx	lr

08004870 <pxCurrentTCBConst>:
 8004870:	20003f1c 	.word	0x20003f1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop

08004878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004890:	f001 fccc 	bl	800622c <xTaskIncrementTick>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <SysTick_Handler+0x3c>)
 800489c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	2300      	movs	r3, #0
 80048a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	e000ed04 	.word	0xe000ed04

080048b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <vPortSetupTimerInterrupt+0x30>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048c2:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <vPortSetupTimerInterrupt+0x34>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048c8:	4a09      	ldr	r2, [pc, #36]	; (80048f0 <vPortSetupTimerInterrupt+0x38>)
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <vPortSetupTimerInterrupt+0x3c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	490a      	ldr	r1, [pc, #40]	; (80048f8 <vPortSetupTimerInterrupt+0x40>)
 80048d0:	fba1 1303 	umull	r1, r3, r1, r3
 80048d4:	099b      	lsrs	r3, r3, #6
 80048d6:	3b01      	subs	r3, #1
 80048d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048da:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <vPortSetupTimerInterrupt+0x30>)
 80048dc:	2207      	movs	r2, #7
 80048de:	601a      	str	r2, [r3, #0]
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	e000e010 	.word	0xe000e010
 80048ec:	e000e018 	.word	0xe000e018
 80048f0:	e000e014 	.word	0xe000e014
 80048f4:	20000000 	.word	0x20000000
 80048f8:	10624dd3 	.word	0x10624dd3

080048fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004902:	f3ef 8305 	mrs	r3, IPSR
 8004906:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b0f      	cmp	r3, #15
 800490c:	d913      	bls.n	8004936 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800490e:	4a15      	ldr	r2, [pc, #84]	; (8004964 <vPortValidateInterruptPriority+0x68>)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004918:	4b13      	ldr	r3, [pc, #76]	; (8004968 <vPortValidateInterruptPriority+0x6c>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	7afa      	ldrb	r2, [r7, #11]
 800491e:	429a      	cmp	r2, r3
 8004920:	d209      	bcs.n	8004936 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	607b      	str	r3, [r7, #4]
 8004934:	e7fe      	b.n	8004934 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004936:	4b0d      	ldr	r3, [pc, #52]	; (800496c <vPortValidateInterruptPriority+0x70>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800493e:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <vPortValidateInterruptPriority+0x74>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d909      	bls.n	800495a <vPortValidateInterruptPriority+0x5e>
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	e7fe      	b.n	8004958 <vPortValidateInterruptPriority+0x5c>
	}
 800495a:	bf00      	nop
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr
 8004964:	e000e3f0 	.word	0xe000e3f0
 8004968:	200002fc 	.word	0x200002fc
 800496c:	e000ed0c 	.word	0xe000ed0c
 8004970:	20000300 	.word	0x20000300

08004974 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08a      	sub	sp, #40	; 0x28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004980:	f001 fb8a 	bl	8006098 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004984:	4b57      	ldr	r3, [pc, #348]	; (8004ae4 <pvPortMalloc+0x170>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800498c:	f000 f90c 	bl	8004ba8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004990:	4b55      	ldr	r3, [pc, #340]	; (8004ae8 <pvPortMalloc+0x174>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4013      	ands	r3, r2
 8004998:	2b00      	cmp	r3, #0
 800499a:	f040 808c 	bne.w	8004ab6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01c      	beq.n	80049de <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80049a4:	2208      	movs	r2, #8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4413      	add	r3, r2
 80049aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d013      	beq.n	80049de <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f023 0307 	bic.w	r3, r3, #7
 80049bc:	3308      	adds	r3, #8
 80049be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <pvPortMalloc+0x6a>
 80049ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	e7fe      	b.n	80049dc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d068      	beq.n	8004ab6 <pvPortMalloc+0x142>
 80049e4:	4b41      	ldr	r3, [pc, #260]	; (8004aec <pvPortMalloc+0x178>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d863      	bhi.n	8004ab6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80049ee:	4b40      	ldr	r3, [pc, #256]	; (8004af0 <pvPortMalloc+0x17c>)
 80049f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80049f2:	4b3f      	ldr	r3, [pc, #252]	; (8004af0 <pvPortMalloc+0x17c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049f8:	e004      	b.n	8004a04 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d203      	bcs.n	8004a16 <pvPortMalloc+0xa2>
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f1      	bne.n	80049fa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a16:	4b33      	ldr	r3, [pc, #204]	; (8004ae4 <pvPortMalloc+0x170>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d04a      	beq.n	8004ab6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2208      	movs	r2, #8
 8004a26:	4413      	add	r3, r2
 8004a28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	1ad2      	subs	r2, r2, r3
 8004a3a:	2308      	movs	r3, #8
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d91e      	bls.n	8004a80 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4413      	add	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d009      	beq.n	8004a68 <pvPortMalloc+0xf4>
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	e7fe      	b.n	8004a66 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	1ad2      	subs	r2, r2, r3
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a7a:	69b8      	ldr	r0, [r7, #24]
 8004a7c:	f000 f8f6 	bl	8004c6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a80:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <pvPortMalloc+0x178>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	4a18      	ldr	r2, [pc, #96]	; (8004aec <pvPortMalloc+0x178>)
 8004a8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a8e:	4b17      	ldr	r3, [pc, #92]	; (8004aec <pvPortMalloc+0x178>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4b18      	ldr	r3, [pc, #96]	; (8004af4 <pvPortMalloc+0x180>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d203      	bcs.n	8004aa2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a9a:	4b14      	ldr	r3, [pc, #80]	; (8004aec <pvPortMalloc+0x178>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a15      	ldr	r2, [pc, #84]	; (8004af4 <pvPortMalloc+0x180>)
 8004aa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <pvPortMalloc+0x174>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ab6:	f001 fafd 	bl	80060b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d009      	beq.n	8004ad8 <pvPortMalloc+0x164>
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	e7fe      	b.n	8004ad6 <pvPortMalloc+0x162>
	return pvReturn;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3728      	adds	r7, #40	; 0x28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20003f0c 	.word	0x20003f0c
 8004ae8:	20003f18 	.word	0x20003f18
 8004aec:	20003f10 	.word	0x20003f10
 8004af0:	20003f04 	.word	0x20003f04
 8004af4:	20003f14 	.word	0x20003f14

08004af8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d046      	beq.n	8004b98 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b0a:	2308      	movs	r3, #8
 8004b0c:	425b      	negs	r3, r3
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4413      	add	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	4b20      	ldr	r3, [pc, #128]	; (8004ba0 <vPortFree+0xa8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <vPortFree+0x42>
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	e7fe      	b.n	8004b38 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <vPortFree+0x5e>
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	e7fe      	b.n	8004b54 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <vPortFree+0xa8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d019      	beq.n	8004b98 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d115      	bne.n	8004b98 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <vPortFree+0xa8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	43db      	mvns	r3, r3
 8004b76:	401a      	ands	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b7c:	f001 fa8c 	bl	8006098 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <vPortFree+0xac>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4413      	add	r3, r2
 8004b8a:	4a06      	ldr	r2, [pc, #24]	; (8004ba4 <vPortFree+0xac>)
 8004b8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b8e:	6938      	ldr	r0, [r7, #16]
 8004b90:	f000 f86c 	bl	8004c6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b94:	f001 fa8e 	bl	80060b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b98:	bf00      	nop
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20003f18 	.word	0x20003f18
 8004ba4:	20003f10 	.word	0x20003f10

08004ba8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bae:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004bb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004bb4:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <prvHeapInit+0xac>)
 8004bb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00c      	beq.n	8004bdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3307      	adds	r3, #7
 8004bc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0307 	bic.w	r3, r3, #7
 8004bce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	4a1f      	ldr	r2, [pc, #124]	; (8004c54 <prvHeapInit+0xac>)
 8004bd8:	4413      	add	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004be0:	4a1d      	ldr	r2, [pc, #116]	; (8004c58 <prvHeapInit+0xb0>)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004be6:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <prvHeapInit+0xb0>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0307 	bic.w	r3, r3, #7
 8004c02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <prvHeapInit+0xb4>)
 8004c08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c0a:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <prvHeapInit+0xb4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c12:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <prvHeapInit+0xb4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	1ad2      	subs	r2, r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c28:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <prvHeapInit+0xb4>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a0a      	ldr	r2, [pc, #40]	; (8004c60 <prvHeapInit+0xb8>)
 8004c36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <prvHeapInit+0xbc>)
 8004c3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c40:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <prvHeapInit+0xc0>)
 8004c42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c46:	601a      	str	r2, [r3, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20000304 	.word	0x20000304
 8004c58:	20003f04 	.word	0x20003f04
 8004c5c:	20003f0c 	.word	0x20003f0c
 8004c60:	20003f14 	.word	0x20003f14
 8004c64:	20003f10 	.word	0x20003f10
 8004c68:	20003f18 	.word	0x20003f18

08004c6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c74:	4b27      	ldr	r3, [pc, #156]	; (8004d14 <prvInsertBlockIntoFreeList+0xa8>)
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	e002      	b.n	8004c80 <prvInsertBlockIntoFreeList+0x14>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d3f7      	bcc.n	8004c7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	441a      	add	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d108      	bne.n	8004cae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	441a      	add	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	441a      	add	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d118      	bne.n	8004cf4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <prvInsertBlockIntoFreeList+0xac>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d00d      	beq.n	8004cea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	441a      	add	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e008      	b.n	8004cfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cea:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <prvInsertBlockIntoFreeList+0xac>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e003      	b.n	8004cfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d002      	beq.n	8004d0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr
 8004d14:	20003f04 	.word	0x20003f04
 8004d18:	20003f0c 	.word	0x20003f0c

08004d1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <xQueueGenericReset+0x28>
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	e7fe      	b.n	8004d42 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004d44:	f7ff fd20 	bl	8004788 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d50:	68f9      	ldr	r1, [r7, #12]
 8004d52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	441a      	add	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d74:	3b01      	subs	r3, #1
 8004d76:	68f9      	ldr	r1, [r7, #12]
 8004d78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d7a:	fb01 f303 	mul.w	r3, r1, r3
 8004d7e:	441a      	add	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	22ff      	movs	r2, #255	; 0xff
 8004d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	22ff      	movs	r2, #255	; 0xff
 8004d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d114      	bne.n	8004dc4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d01a      	beq.n	8004dd8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3310      	adds	r3, #16
 8004da6:	4618      	mov	r0, r3
 8004da8:	f001 fb7a 	bl	80064a0 <xTaskRemoveFromEventList>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d012      	beq.n	8004dd8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004db2:	4b0d      	ldr	r3, [pc, #52]	; (8004de8 <xQueueGenericReset+0xcc>)
 8004db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	e009      	b.n	8004dd8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3310      	adds	r3, #16
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff fb44 	bl	8004456 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3324      	adds	r3, #36	; 0x24
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff fb3f 	bl	8004456 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dd8:	f7ff fd04 	bl	80047e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ddc:	2301      	movs	r3, #1
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	e000ed04 	.word	0xe000ed04

08004dec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08e      	sub	sp, #56	; 0x38
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <xQueueGenericCreateStatic+0x28>
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e12:	e7fe      	b.n	8004e12 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <xQueueGenericCreateStatic+0x42>
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2c:	e7fe      	b.n	8004e2c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <xQueueGenericCreateStatic+0x4e>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <xQueueGenericCreateStatic+0x52>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <xQueueGenericCreateStatic+0x54>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <xQueueGenericCreateStatic+0x6c>
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	623b      	str	r3, [r7, #32]
 8004e56:	e7fe      	b.n	8004e56 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d102      	bne.n	8004e64 <xQueueGenericCreateStatic+0x78>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <xQueueGenericCreateStatic+0x7c>
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <xQueueGenericCreateStatic+0x7e>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <xQueueGenericCreateStatic+0x96>
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	e7fe      	b.n	8004e80 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e82:	2348      	movs	r3, #72	; 0x48
 8004e84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b48      	cmp	r3, #72	; 0x48
 8004e8a:	d009      	beq.n	8004ea0 <xQueueGenericCreateStatic+0xb4>
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	e7fe      	b.n	8004e9e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00d      	beq.n	8004ec6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004eb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 f842 	bl	8004f4a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3730      	adds	r7, #48	; 0x30
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08a      	sub	sp, #40	; 0x28
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <xQueueGenericCreate+0x28>
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	e7fe      	b.n	8004ef6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d102      	bne.n	8004f04 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	e004      	b.n	8004f0e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	fb02 f303 	mul.w	r3, r2, r3
 8004f0c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	3348      	adds	r3, #72	; 0x48
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff fd2e 	bl	8004974 <pvPortMalloc>
 8004f18:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00f      	beq.n	8004f40 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	3348      	adds	r3, #72	; 0x48
 8004f24:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f2e:	79fa      	ldrb	r2, [r7, #7]
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	4613      	mov	r3, r2
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 f805 	bl	8004f4a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004f40:	69bb      	ldr	r3, [r7, #24]
	}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3720      	adds	r7, #32
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
 8004f56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d103      	bne.n	8004f66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	e002      	b.n	8004f6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f78:	2101      	movs	r1, #1
 8004f7a:	69b8      	ldr	r0, [r7, #24]
 8004f7c:	f7ff fece 	bl	8004d1c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00e      	beq.n	8004fb4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2200      	movs	r2, #0
 8004fac:	2100      	movs	r1, #0
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f838 	bl	8005024 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	6939      	ldr	r1, [r7, #16]
 8004fd4:	6978      	ldr	r0, [r7, #20]
 8004fd6:	f7ff ff7b 	bl	8004ed0 <xQueueGenericCreate>
 8004fda:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f7ff ffd3 	bl	8004f88 <prvInitialiseMutex>

		return pxNewQueue;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
	}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	6039      	str	r1, [r7, #0]
 8004ff6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005000:	79fb      	ldrb	r3, [r7, #7]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2200      	movs	r2, #0
 8005008:	6939      	ldr	r1, [r7, #16]
 800500a:	6978      	ldr	r0, [r7, #20]
 800500c:	f7ff feee 	bl	8004dec <xQueueGenericCreateStatic>
 8005010:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff ffb8 	bl	8004f88 <prvInitialiseMutex>

		return pxNewQueue;
 8005018:	68fb      	ldr	r3, [r7, #12]
	}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08e      	sub	sp, #56	; 0x38
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005032:	2300      	movs	r3, #0
 8005034:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	2b00      	cmp	r3, #0
 800503e:	d109      	bne.n	8005054 <xQueueGenericSend+0x30>
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	62bb      	str	r3, [r7, #40]	; 0x28
 8005052:	e7fe      	b.n	8005052 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <xQueueGenericSend+0x3e>
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <xQueueGenericSend+0x42>
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <xQueueGenericSend+0x44>
 8005066:	2300      	movs	r3, #0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d109      	bne.n	8005080 <xQueueGenericSend+0x5c>
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
 800507e:	e7fe      	b.n	800507e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d103      	bne.n	800508e <xQueueGenericSend+0x6a>
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508a:	2b01      	cmp	r3, #1
 800508c:	d101      	bne.n	8005092 <xQueueGenericSend+0x6e>
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <xQueueGenericSend+0x70>
 8005092:	2300      	movs	r3, #0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d109      	bne.n	80050ac <xQueueGenericSend+0x88>
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	623b      	str	r3, [r7, #32]
 80050aa:	e7fe      	b.n	80050aa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050ac:	f001 fbb2 	bl	8006814 <xTaskGetSchedulerState>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d102      	bne.n	80050bc <xQueueGenericSend+0x98>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <xQueueGenericSend+0x9c>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <xQueueGenericSend+0x9e>
 80050c0:	2300      	movs	r3, #0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <xQueueGenericSend+0xb6>
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	e7fe      	b.n	80050d8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050da:	f7ff fb55 	bl	8004788 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d302      	bcc.n	80050f0 <xQueueGenericSend+0xcc>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d129      	bne.n	8005144 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050f6:	f000 fc7e 	bl	80059f6 <prvCopyDataToQueue>
 80050fa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	d010      	beq.n	8005126 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	3324      	adds	r3, #36	; 0x24
 8005108:	4618      	mov	r0, r3
 800510a:	f001 f9c9 	bl	80064a0 <xTaskRemoveFromEventList>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d013      	beq.n	800513c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005114:	4b3f      	ldr	r3, [pc, #252]	; (8005214 <xQueueGenericSend+0x1f0>)
 8005116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	e00a      	b.n	800513c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800512c:	4b39      	ldr	r3, [pc, #228]	; (8005214 <xQueueGenericSend+0x1f0>)
 800512e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800513c:	f7ff fb52 	bl	80047e4 <vPortExitCritical>
				return pdPASS;
 8005140:	2301      	movs	r3, #1
 8005142:	e063      	b.n	800520c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d103      	bne.n	8005152 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800514a:	f7ff fb4b 	bl	80047e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800514e:	2300      	movs	r3, #0
 8005150:	e05c      	b.n	800520c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005154:	2b00      	cmp	r3, #0
 8005156:	d106      	bne.n	8005166 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005158:	f107 0314 	add.w	r3, r7, #20
 800515c:	4618      	mov	r0, r3
 800515e:	f001 fa01 	bl	8006564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005162:	2301      	movs	r3, #1
 8005164:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005166:	f7ff fb3d 	bl	80047e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800516a:	f000 ff95 	bl	8006098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800516e:	f7ff fb0b 	bl	8004788 <vPortEnterCritical>
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005178:	b25b      	sxtb	r3, r3
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	d103      	bne.n	8005188 <xQueueGenericSend+0x164>
 8005180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800518e:	b25b      	sxtb	r3, r3
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d103      	bne.n	800519e <xQueueGenericSend+0x17a>
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800519e:	f7ff fb21 	bl	80047e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051a2:	1d3a      	adds	r2, r7, #4
 80051a4:	f107 0314 	add.w	r3, r7, #20
 80051a8:	4611      	mov	r1, r2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f001 f9f0 	bl	8006590 <xTaskCheckForTimeOut>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d124      	bne.n	8005200 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051b8:	f000 fd15 	bl	8005be6 <prvIsQueueFull>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d018      	beq.n	80051f4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	3310      	adds	r3, #16
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	4611      	mov	r1, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f001 f944 	bl	8006458 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80051d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051d2:	f000 fca0 	bl	8005b16 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80051d6:	f000 ff6d 	bl	80060b4 <xTaskResumeAll>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f47f af7c 	bne.w	80050da <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80051e2:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <xQueueGenericSend+0x1f0>)
 80051e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	e772      	b.n	80050da <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051f6:	f000 fc8e 	bl	8005b16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051fa:	f000 ff5b 	bl	80060b4 <xTaskResumeAll>
 80051fe:	e76c      	b.n	80050da <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005202:	f000 fc88 	bl	8005b16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005206:	f000 ff55 	bl	80060b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800520a:	2300      	movs	r3, #0
		}
	}
}
 800520c:	4618      	mov	r0, r3
 800520e:	3738      	adds	r7, #56	; 0x38
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	e000ed04 	.word	0xe000ed04

08005218 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08e      	sub	sp, #56	; 0x38
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	2b00      	cmp	r3, #0
 800522e:	d109      	bne.n	8005244 <xQueueGenericSendFromISR+0x2c>
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
 8005242:	e7fe      	b.n	8005242 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d103      	bne.n	8005252 <xQueueGenericSendFromISR+0x3a>
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <xQueueGenericSendFromISR+0x3e>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <xQueueGenericSendFromISR+0x40>
 8005256:	2300      	movs	r3, #0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d109      	bne.n	8005270 <xQueueGenericSendFromISR+0x58>
 800525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	623b      	str	r3, [r7, #32]
 800526e:	e7fe      	b.n	800526e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d103      	bne.n	800527e <xQueueGenericSendFromISR+0x66>
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527a:	2b01      	cmp	r3, #1
 800527c:	d101      	bne.n	8005282 <xQueueGenericSendFromISR+0x6a>
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <xQueueGenericSendFromISR+0x6c>
 8005282:	2300      	movs	r3, #0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d109      	bne.n	800529c <xQueueGenericSendFromISR+0x84>
 8005288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	61fb      	str	r3, [r7, #28]
 800529a:	e7fe      	b.n	800529a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800529c:	f7ff fb2e 	bl	80048fc <vPortValidateInterruptPriority>
	__asm volatile
 80052a0:	f3ef 8211 	mrs	r2, BASEPRI
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	61ba      	str	r2, [r7, #24]
 80052b6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80052b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d302      	bcc.n	80052ce <xQueueGenericSendFromISR+0xb6>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d12c      	bne.n	8005328 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052de:	f000 fb8a 	bl	80059f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d112      	bne.n	8005312 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d016      	beq.n	8005322 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	3324      	adds	r3, #36	; 0x24
 80052f8:	4618      	mov	r0, r3
 80052fa:	f001 f8d1 	bl	80064a0 <xTaskRemoveFromEventList>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00e      	beq.n	8005322 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	e007      	b.n	8005322 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005312:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005316:	3301      	adds	r3, #1
 8005318:	b2db      	uxtb	r3, r3
 800531a:	b25a      	sxtb	r2, r3
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005322:	2301      	movs	r3, #1
 8005324:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005326:	e001      	b.n	800532c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005328:	2300      	movs	r3, #0
 800532a:	637b      	str	r3, [r7, #52]	; 0x34
 800532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005338:	4618      	mov	r0, r3
 800533a:	3738      	adds	r7, #56	; 0x38
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08e      	sub	sp, #56	; 0x38
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	2b00      	cmp	r3, #0
 8005352:	d109      	bne.n	8005368 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	623b      	str	r3, [r7, #32]
 8005366:	e7fe      	b.n	8005366 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	d009      	beq.n	8005384 <xQueueGiveFromISR+0x44>
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	61fb      	str	r3, [r7, #28]
 8005382:	e7fe      	b.n	8005382 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d103      	bne.n	8005394 <xQueueGiveFromISR+0x54>
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <xQueueGiveFromISR+0x58>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <xQueueGiveFromISR+0x5a>
 8005398:	2300      	movs	r3, #0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d109      	bne.n	80053b2 <xQueueGiveFromISR+0x72>
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	e7fe      	b.n	80053b0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053b2:	f7ff faa3 	bl	80048fc <vPortValidateInterruptPriority>
	__asm volatile
 80053b6:	f3ef 8211 	mrs	r2, BASEPRI
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	617a      	str	r2, [r7, #20]
 80053cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80053ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	429a      	cmp	r2, r3
 80053e0:	d92b      	bls.n	800543a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fc:	d112      	bne.n	8005424 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	2b00      	cmp	r3, #0
 8005404:	d016      	beq.n	8005434 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	3324      	adds	r3, #36	; 0x24
 800540a:	4618      	mov	r0, r3
 800540c:	f001 f848 	bl	80064a0 <xTaskRemoveFromEventList>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00e      	beq.n	8005434 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2201      	movs	r2, #1
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e007      	b.n	8005434 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005428:	3301      	adds	r3, #1
 800542a:	b2db      	uxtb	r3, r3
 800542c:	b25a      	sxtb	r2, r3
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005434:	2301      	movs	r3, #1
 8005436:	637b      	str	r3, [r7, #52]	; 0x34
 8005438:	e001      	b.n	800543e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800543a:	2300      	movs	r3, #0
 800543c:	637b      	str	r3, [r7, #52]	; 0x34
 800543e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005440:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800544a:	4618      	mov	r0, r3
 800544c:	3738      	adds	r7, #56	; 0x38
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08c      	sub	sp, #48	; 0x30
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005460:	2300      	movs	r3, #0
 8005462:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <xQueueReceive+0x2e>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	623b      	str	r3, [r7, #32]
 8005480:	e7fe      	b.n	8005480 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d103      	bne.n	8005490 <xQueueReceive+0x3c>
 8005488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <xQueueReceive+0x40>
 8005490:	2301      	movs	r3, #1
 8005492:	e000      	b.n	8005496 <xQueueReceive+0x42>
 8005494:	2300      	movs	r3, #0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <xQueueReceive+0x5a>
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	e7fe      	b.n	80054ac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054ae:	f001 f9b1 	bl	8006814 <xTaskGetSchedulerState>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d102      	bne.n	80054be <xQueueReceive+0x6a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <xQueueReceive+0x6e>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <xQueueReceive+0x70>
 80054c2:	2300      	movs	r3, #0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <xQueueReceive+0x88>
 80054c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	e7fe      	b.n	80054da <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80054dc:	f7ff f954 	bl	8004788 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01f      	beq.n	800552c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054ec:	68b9      	ldr	r1, [r7, #8]
 80054ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054f0:	f000 faeb 	bl	8005aca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	1e5a      	subs	r2, r3, #1
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00f      	beq.n	8005524 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	3310      	adds	r3, #16
 8005508:	4618      	mov	r0, r3
 800550a:	f000 ffc9 	bl	80064a0 <xTaskRemoveFromEventList>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d007      	beq.n	8005524 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005514:	4b3c      	ldr	r3, [pc, #240]	; (8005608 <xQueueReceive+0x1b4>)
 8005516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005524:	f7ff f95e 	bl	80047e4 <vPortExitCritical>
				return pdPASS;
 8005528:	2301      	movs	r3, #1
 800552a:	e069      	b.n	8005600 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d103      	bne.n	800553a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005532:	f7ff f957 	bl	80047e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005536:	2300      	movs	r3, #0
 8005538:	e062      	b.n	8005600 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d106      	bne.n	800554e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005540:	f107 0310 	add.w	r3, r7, #16
 8005544:	4618      	mov	r0, r3
 8005546:	f001 f80d 	bl	8006564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800554a:	2301      	movs	r3, #1
 800554c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800554e:	f7ff f949 	bl	80047e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005552:	f000 fda1 	bl	8006098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005556:	f7ff f917 	bl	8004788 <vPortEnterCritical>
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005560:	b25b      	sxtb	r3, r3
 8005562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005566:	d103      	bne.n	8005570 <xQueueReceive+0x11c>
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005576:	b25b      	sxtb	r3, r3
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d103      	bne.n	8005586 <xQueueReceive+0x132>
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005586:	f7ff f92d 	bl	80047e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800558a:	1d3a      	adds	r2, r7, #4
 800558c:	f107 0310 	add.w	r3, r7, #16
 8005590:	4611      	mov	r1, r2
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fffc 	bl	8006590 <xTaskCheckForTimeOut>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d123      	bne.n	80055e6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800559e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055a0:	f000 fb0b 	bl	8005bba <prvIsQueueEmpty>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d017      	beq.n	80055da <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	3324      	adds	r3, #36	; 0x24
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	4611      	mov	r1, r2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 ff50 	bl	8006458 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80055b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ba:	f000 faac 	bl	8005b16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055be:	f000 fd79 	bl	80060b4 <xTaskResumeAll>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d189      	bne.n	80054dc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80055c8:	4b0f      	ldr	r3, [pc, #60]	; (8005608 <xQueueReceive+0x1b4>)
 80055ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	e780      	b.n	80054dc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80055da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055dc:	f000 fa9b 	bl	8005b16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055e0:	f000 fd68 	bl	80060b4 <xTaskResumeAll>
 80055e4:	e77a      	b.n	80054dc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80055e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055e8:	f000 fa95 	bl	8005b16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055ec:	f000 fd62 	bl	80060b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055f2:	f000 fae2 	bl	8005bba <prvIsQueueEmpty>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f43f af6f 	beq.w	80054dc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005600:	4618      	mov	r0, r3
 8005602:	3730      	adds	r7, #48	; 0x30
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	e000ed04 	.word	0xe000ed04

0800560c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08e      	sub	sp, #56	; 0x38
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005616:	2300      	movs	r3, #0
 8005618:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800561e:	2300      	movs	r3, #0
 8005620:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d109      	bne.n	800563c <xQueueSemaphoreTake+0x30>
 8005628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	623b      	str	r3, [r7, #32]
 800563a:	e7fe      	b.n	800563a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	2b00      	cmp	r3, #0
 8005642:	d009      	beq.n	8005658 <xQueueSemaphoreTake+0x4c>
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	61fb      	str	r3, [r7, #28]
 8005656:	e7fe      	b.n	8005656 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005658:	f001 f8dc 	bl	8006814 <xTaskGetSchedulerState>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <xQueueSemaphoreTake+0x5c>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <xQueueSemaphoreTake+0x60>
 8005668:	2301      	movs	r3, #1
 800566a:	e000      	b.n	800566e <xQueueSemaphoreTake+0x62>
 800566c:	2300      	movs	r3, #0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <xQueueSemaphoreTake+0x7a>
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	61bb      	str	r3, [r7, #24]
 8005684:	e7fe      	b.n	8005684 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005686:	f7ff f87f 	bl	8004788 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	2b00      	cmp	r3, #0
 8005694:	d024      	beq.n	80056e0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005698:	1e5a      	subs	r2, r3, #1
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d104      	bne.n	80056b0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80056a6:	f001 fa7b 	bl	8006ba0 <pvTaskIncrementMutexHeldCount>
 80056aa:	4602      	mov	r2, r0
 80056ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ae:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00f      	beq.n	80056d8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ba:	3310      	adds	r3, #16
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 feef 	bl	80064a0 <xTaskRemoveFromEventList>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056c8:	4b53      	ldr	r3, [pc, #332]	; (8005818 <xQueueSemaphoreTake+0x20c>)
 80056ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056d8:	f7ff f884 	bl	80047e4 <vPortExitCritical>
				return pdPASS;
 80056dc:	2301      	movs	r3, #1
 80056de:	e096      	b.n	800580e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d110      	bne.n	8005708 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d009      	beq.n	8005700 <xQueueSemaphoreTake+0xf4>
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	617b      	str	r3, [r7, #20]
 80056fe:	e7fe      	b.n	80056fe <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005700:	f7ff f870 	bl	80047e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005704:	2300      	movs	r3, #0
 8005706:	e082      	b.n	800580e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800570e:	f107 030c 	add.w	r3, r7, #12
 8005712:	4618      	mov	r0, r3
 8005714:	f000 ff26 	bl	8006564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005718:	2301      	movs	r3, #1
 800571a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800571c:	f7ff f862 	bl	80047e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005720:	f000 fcba 	bl	8006098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005724:	f7ff f830 	bl	8004788 <vPortEnterCritical>
 8005728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800572e:	b25b      	sxtb	r3, r3
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005734:	d103      	bne.n	800573e <xQueueSemaphoreTake+0x132>
 8005736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005744:	b25b      	sxtb	r3, r3
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574a:	d103      	bne.n	8005754 <xQueueSemaphoreTake+0x148>
 800574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005754:	f7ff f846 	bl	80047e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005758:	463a      	mov	r2, r7
 800575a:	f107 030c 	add.w	r3, r7, #12
 800575e:	4611      	mov	r1, r2
 8005760:	4618      	mov	r0, r3
 8005762:	f000 ff15 	bl	8006590 <xTaskCheckForTimeOut>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d132      	bne.n	80057d2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800576c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800576e:	f000 fa24 	bl	8005bba <prvIsQueueEmpty>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d026      	beq.n	80057c6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d109      	bne.n	8005794 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005780:	f7ff f802 	bl	8004788 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	4618      	mov	r0, r3
 800578a:	f001 f861 	bl	8006850 <xTaskPriorityInherit>
 800578e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005790:	f7ff f828 	bl	80047e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005796:	3324      	adds	r3, #36	; 0x24
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	4611      	mov	r1, r2
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fe5b 	bl	8006458 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057a4:	f000 f9b7 	bl	8005b16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057a8:	f000 fc84 	bl	80060b4 <xTaskResumeAll>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f47f af69 	bne.w	8005686 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80057b4:	4b18      	ldr	r3, [pc, #96]	; (8005818 <xQueueSemaphoreTake+0x20c>)
 80057b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	e75f      	b.n	8005686 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80057c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057c8:	f000 f9a5 	bl	8005b16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057cc:	f000 fc72 	bl	80060b4 <xTaskResumeAll>
 80057d0:	e759      	b.n	8005686 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80057d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057d4:	f000 f99f 	bl	8005b16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057d8:	f000 fc6c 	bl	80060b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057de:	f000 f9ec 	bl	8005bba <prvIsQueueEmpty>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f43f af4e 	beq.w	8005686 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00d      	beq.n	800580c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80057f0:	f7fe ffca 	bl	8004788 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80057f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057f6:	f000 f8e7 	bl	80059c8 <prvGetDisinheritPriorityAfterTimeout>
 80057fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80057fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005802:	4618      	mov	r0, r3
 8005804:	f001 f92e 	bl	8006a64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005808:	f7fe ffec 	bl	80047e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800580c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800580e:	4618      	mov	r0, r3
 8005810:	3738      	adds	r7, #56	; 0x38
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	e000ed04 	.word	0xe000ed04

0800581c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08e      	sub	sp, #56	; 0x38
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <xQueueReceiveFromISR+0x2a>
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	623b      	str	r3, [r7, #32]
 8005844:	e7fe      	b.n	8005844 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <xQueueReceiveFromISR+0x38>
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <xQueueReceiveFromISR+0x3c>
 8005854:	2301      	movs	r3, #1
 8005856:	e000      	b.n	800585a <xQueueReceiveFromISR+0x3e>
 8005858:	2300      	movs	r3, #0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d109      	bne.n	8005872 <xQueueReceiveFromISR+0x56>
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	61fb      	str	r3, [r7, #28]
 8005870:	e7fe      	b.n	8005870 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005872:	f7ff f843 	bl	80048fc <vPortValidateInterruptPriority>
	__asm volatile
 8005876:	f3ef 8211 	mrs	r2, BASEPRI
 800587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	61ba      	str	r2, [r7, #24]
 800588c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800588e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	2b00      	cmp	r3, #0
 800589c:	d02f      	beq.n	80058fe <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ac:	f000 f90d 	bl	8005aca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	1e5a      	subs	r2, r3, #1
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80058b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c0:	d112      	bne.n	80058e8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d016      	beq.n	80058f8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	3310      	adds	r3, #16
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fde6 	bl	80064a0 <xTaskRemoveFromEventList>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00e      	beq.n	80058f8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00b      	beq.n	80058f8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	e007      	b.n	80058f8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80058e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058ec:	3301      	adds	r3, #1
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	b25a      	sxtb	r2, r3
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80058f8:	2301      	movs	r3, #1
 80058fa:	637b      	str	r3, [r7, #52]	; 0x34
 80058fc:	e001      	b.n	8005902 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80058fe:	2300      	movs	r3, #0
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800590c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800590e:	4618      	mov	r0, r3
 8005910:	3738      	adds	r7, #56	; 0x38
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d109      	bne.n	8005938 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	60bb      	str	r3, [r7, #8]
 8005936:	e7fe      	b.n	8005936 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8005938:	f7fe ff26 	bl	8004788 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005942:	f7fe ff4f 	bl	80047e4 <vPortExitCritical>

	return uxReturn;
 8005946:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <uxQueueMessagesWaitingFromISR+0x22>
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	60bb      	str	r3, [r7, #8]
 8005970:	e7fe      	b.n	8005970 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8005978:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <vQueueDelete+0x26>
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	60bb      	str	r3, [r7, #8]
 80059a8:	e7fe      	b.n	80059a8 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f934 	bl	8005c18 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f7ff f89c 	bl	8004af8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80059c0:	bf00      	nop
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d006      	beq.n	80059e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f1c3 0307 	rsb	r3, r3, #7
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	e001      	b.n	80059ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80059ea:	68fb      	ldr	r3, [r7, #12]
	}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr

080059f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b086      	sub	sp, #24
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10d      	bne.n	8005a30 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d14d      	bne.n	8005ab8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 ff9b 	bl	800695c <xTaskPriorityDisinherit>
 8005a26:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	605a      	str	r2, [r3, #4]
 8005a2e:	e043      	b.n	8005ab8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d119      	bne.n	8005a6a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6898      	ldr	r0, [r3, #8]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	461a      	mov	r2, r3
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	f00e fb06 	bl	8014052 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	441a      	add	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d32b      	bcc.n	8005ab8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	609a      	str	r2, [r3, #8]
 8005a68:	e026      	b.n	8005ab8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	68d8      	ldr	r0, [r3, #12]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	461a      	mov	r2, r3
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	f00e faec 	bl	8014052 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	425b      	negs	r3, r3
 8005a84:	441a      	add	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d207      	bcs.n	8005aa6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	425b      	negs	r3, r3
 8005aa0:	441a      	add	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d105      	bne.n	8005ab8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ac0:	697b      	ldr	r3, [r7, #20]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b082      	sub	sp, #8
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d018      	beq.n	8005b0e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae4:	441a      	add	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d303      	bcc.n	8005afe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68d9      	ldr	r1, [r3, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	461a      	mov	r2, r3
 8005b08:	6838      	ldr	r0, [r7, #0]
 8005b0a:	f00e faa2 	bl	8014052 <memcpy>
	}
}
 8005b0e:	bf00      	nop
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b1e:	f7fe fe33 	bl	8004788 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b28:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b2a:	e011      	b.n	8005b50 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d012      	beq.n	8005b5a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3324      	adds	r3, #36	; 0x24
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fcb1 	bl	80064a0 <xTaskRemoveFromEventList>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b44:	f000 fd84 	bl	8006650 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	dce9      	bgt.n	8005b2c <prvUnlockQueue+0x16>
 8005b58:	e000      	b.n	8005b5c <prvUnlockQueue+0x46>
					break;
 8005b5a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	22ff      	movs	r2, #255	; 0xff
 8005b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b64:	f7fe fe3e 	bl	80047e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b68:	f7fe fe0e 	bl	8004788 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b72:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b74:	e011      	b.n	8005b9a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d012      	beq.n	8005ba4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3310      	adds	r3, #16
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fc8c 	bl	80064a0 <xTaskRemoveFromEventList>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b8e:	f000 fd5f 	bl	8006650 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b92:	7bbb      	ldrb	r3, [r7, #14]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	dce9      	bgt.n	8005b76 <prvUnlockQueue+0x60>
 8005ba2:	e000      	b.n	8005ba6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ba4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	22ff      	movs	r2, #255	; 0xff
 8005baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005bae:	f7fe fe19 	bl	80047e4 <vPortExitCritical>
}
 8005bb2:	bf00      	nop
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bc2:	f7fe fde1 	bl	8004788 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d102      	bne.n	8005bd4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	e001      	b.n	8005bd8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bd8:	f7fe fe04 	bl	80047e4 <vPortExitCritical>

	return xReturn;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bee:	f7fe fdcb 	bl	8004788 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d102      	bne.n	8005c04 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e001      	b.n	8005c08 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c08:	f7fe fdec 	bl	80047e4 <vPortExitCritical>

	return xReturn;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e016      	b.n	8005c54 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005c26:	4a0f      	ldr	r2, [pc, #60]	; (8005c64 <vQueueUnregisterQueue+0x4c>)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4413      	add	r3, r2
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d10b      	bne.n	8005c4e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005c36:	4a0b      	ldr	r2, [pc, #44]	; (8005c64 <vQueueUnregisterQueue+0x4c>)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005c40:	4a08      	ldr	r2, [pc, #32]	; (8005c64 <vQueueUnregisterQueue+0x4c>)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	4413      	add	r3, r2
 8005c48:	2200      	movs	r2, #0
 8005c4a:	605a      	str	r2, [r3, #4]
				break;
 8005c4c:	e005      	b.n	8005c5a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3301      	adds	r3, #1
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b07      	cmp	r3, #7
 8005c58:	d9e5      	bls.n	8005c26 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005c5a:	bf00      	nop
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr
 8005c64:	200073dc 	.word	0x200073dc

08005c68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08e      	sub	sp, #56	; 0x38
 8005c6c:	af04      	add	r7, sp, #16
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d109      	bne.n	8005c90 <xTaskCreateStatic+0x28>
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	623b      	str	r3, [r7, #32]
 8005c8e:	e7fe      	b.n	8005c8e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d109      	bne.n	8005caa <xTaskCreateStatic+0x42>
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	61fb      	str	r3, [r7, #28]
 8005ca8:	e7fe      	b.n	8005ca8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005caa:	2354      	movs	r3, #84	; 0x54
 8005cac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b54      	cmp	r3, #84	; 0x54
 8005cb2:	d009      	beq.n	8005cc8 <xTaskCreateStatic+0x60>
 8005cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	61bb      	str	r3, [r7, #24]
 8005cc6:	e7fe      	b.n	8005cc6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d01e      	beq.n	8005d0c <xTaskCreateStatic+0xa4>
 8005cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01b      	beq.n	8005d0c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cdc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	9303      	str	r3, [sp, #12]
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	9302      	str	r3, [sp, #8]
 8005cee:	f107 0314 	add.w	r3, r7, #20
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 f850 	bl	8005da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d06:	f000 f8cb 	bl	8005ea0 <prvAddNewTaskToReadyList>
 8005d0a:	e001      	b.n	8005d10 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d10:	697b      	ldr	r3, [r7, #20]
	}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3728      	adds	r7, #40	; 0x28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b08c      	sub	sp, #48	; 0x30
 8005d1e:	af04      	add	r7, sp, #16
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	603b      	str	r3, [r7, #0]
 8005d26:	4613      	mov	r3, r2
 8005d28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d2a:	88fb      	ldrh	r3, [r7, #6]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe fe20 	bl	8004974 <pvPortMalloc>
 8005d34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00e      	beq.n	8005d5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005d3c:	2054      	movs	r0, #84	; 0x54
 8005d3e:	f7fe fe19 	bl	8004974 <pvPortMalloc>
 8005d42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8005d50:	e005      	b.n	8005d5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d52:	6978      	ldr	r0, [r7, #20]
 8005d54:	f7fe fed0 	bl	8004af8 <vPortFree>
 8005d58:	e001      	b.n	8005d5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d017      	beq.n	8005d94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d6c:	88fa      	ldrh	r2, [r7, #6]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	9303      	str	r3, [sp, #12]
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	9302      	str	r3, [sp, #8]
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68b9      	ldr	r1, [r7, #8]
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 f80e 	bl	8005da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d88:	69f8      	ldr	r0, [r7, #28]
 8005d8a:	f000 f889 	bl	8005ea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	e002      	b.n	8005d9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d94:	f04f 33ff 	mov.w	r3, #4294967295
 8005d98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d9a:	69bb      	ldr	r3, [r7, #24]
	}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3720      	adds	r7, #32
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	f023 0307 	bic.w	r3, r3, #7
 8005dca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <prvInitialiseNewTask+0x46>
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	e7fe      	b.n	8005de8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dea:	2300      	movs	r3, #0
 8005dec:	61fb      	str	r3, [r7, #28]
 8005dee:	e012      	b.n	8005e16 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	4413      	add	r3, r2
 8005df6:	7819      	ldrb	r1, [r3, #0]
 8005df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	3334      	adds	r3, #52	; 0x34
 8005e00:	460a      	mov	r2, r1
 8005e02:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d006      	beq.n	8005e1e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	3301      	adds	r3, #1
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	2b0f      	cmp	r3, #15
 8005e1a:	d9e9      	bls.n	8005df0 <prvInitialiseNewTask+0x4c>
 8005e1c:	e000      	b.n	8005e20 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005e1e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2a:	2b06      	cmp	r3, #6
 8005e2c:	d901      	bls.n	8005e32 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e2e:	2306      	movs	r3, #6
 8005e30:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e36:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e3c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	2200      	movs	r2, #0
 8005e42:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	3304      	adds	r3, #4
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fe fb23 	bl	8004494 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	3318      	adds	r3, #24
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe fb1e 	bl	8004494 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	f1c3 0207 	rsb	r2, r3, #7
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	2200      	movs	r2, #0
 8005e72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	68f9      	ldr	r1, [r7, #12]
 8005e80:	69b8      	ldr	r0, [r7, #24]
 8005e82:	f7fe fb97 	bl	80045b4 <pxPortInitialiseStack>
 8005e86:	4602      	mov	r2, r0
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e98:	bf00      	nop
 8005e9a:	3720      	adds	r7, #32
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ea8:	f7fe fc6e 	bl	8004788 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005eac:	4b2a      	ldr	r3, [pc, #168]	; (8005f58 <prvAddNewTaskToReadyList+0xb8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	4a29      	ldr	r2, [pc, #164]	; (8005f58 <prvAddNewTaskToReadyList+0xb8>)
 8005eb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005eb6:	4b29      	ldr	r3, [pc, #164]	; (8005f5c <prvAddNewTaskToReadyList+0xbc>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ebe:	4a27      	ldr	r2, [pc, #156]	; (8005f5c <prvAddNewTaskToReadyList+0xbc>)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ec4:	4b24      	ldr	r3, [pc, #144]	; (8005f58 <prvAddNewTaskToReadyList+0xb8>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d110      	bne.n	8005eee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ecc:	f000 fbe4 	bl	8006698 <prvInitialiseTaskLists>
 8005ed0:	e00d      	b.n	8005eee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ed2:	4b23      	ldr	r3, [pc, #140]	; (8005f60 <prvAddNewTaskToReadyList+0xc0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d109      	bne.n	8005eee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005eda:	4b20      	ldr	r3, [pc, #128]	; (8005f5c <prvAddNewTaskToReadyList+0xbc>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d802      	bhi.n	8005eee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ee8:	4a1c      	ldr	r2, [pc, #112]	; (8005f5c <prvAddNewTaskToReadyList+0xbc>)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005eee:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <prvAddNewTaskToReadyList+0xc4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	4a1b      	ldr	r2, [pc, #108]	; (8005f64 <prvAddNewTaskToReadyList+0xc4>)
 8005ef6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	2201      	movs	r2, #1
 8005efe:	409a      	lsls	r2, r3
 8005f00:	4b19      	ldr	r3, [pc, #100]	; (8005f68 <prvAddNewTaskToReadyList+0xc8>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	4a18      	ldr	r2, [pc, #96]	; (8005f68 <prvAddNewTaskToReadyList+0xc8>)
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0e:	4613      	mov	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4a15      	ldr	r2, [pc, #84]	; (8005f6c <prvAddNewTaskToReadyList+0xcc>)
 8005f18:	441a      	add	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4610      	mov	r0, r2
 8005f22:	f7fe fac3 	bl	80044ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f26:	f7fe fc5d 	bl	80047e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <prvAddNewTaskToReadyList+0xc0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f32:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <prvAddNewTaskToReadyList+0xbc>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d207      	bcs.n	8005f50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f40:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <prvAddNewTaskToReadyList+0xd0>)
 8005f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	2000401c 	.word	0x2000401c
 8005f5c:	20003f1c 	.word	0x20003f1c
 8005f60:	20004028 	.word	0x20004028
 8005f64:	20004038 	.word	0x20004038
 8005f68:	20004024 	.word	0x20004024
 8005f6c:	20003f20 	.word	0x20003f20
 8005f70:	e000ed04 	.word	0xe000ed04

08005f74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d016      	beq.n	8005fb4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f86:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <vTaskDelay+0x60>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d009      	beq.n	8005fa2 <vTaskDelay+0x2e>
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	60bb      	str	r3, [r7, #8]
 8005fa0:	e7fe      	b.n	8005fa0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005fa2:	f000 f879 	bl	8006098 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fe0d 	bl	8006bc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005fae:	f000 f881 	bl	80060b4 <xTaskResumeAll>
 8005fb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d107      	bne.n	8005fca <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005fba:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <vTaskDelay+0x64>)
 8005fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20004044 	.word	0x20004044
 8005fd8:	e000ed04 	.word	0xe000ed04

08005fdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08a      	sub	sp, #40	; 0x28
 8005fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fea:	463a      	mov	r2, r7
 8005fec:	1d39      	adds	r1, r7, #4
 8005fee:	f107 0308 	add.w	r3, r7, #8
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fa fa74 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	9202      	str	r2, [sp, #8]
 8006000:	9301      	str	r3, [sp, #4]
 8006002:	2300      	movs	r3, #0
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	2300      	movs	r3, #0
 8006008:	460a      	mov	r2, r1
 800600a:	491d      	ldr	r1, [pc, #116]	; (8006080 <vTaskStartScheduler+0xa4>)
 800600c:	481d      	ldr	r0, [pc, #116]	; (8006084 <vTaskStartScheduler+0xa8>)
 800600e:	f7ff fe2b 	bl	8005c68 <xTaskCreateStatic>
 8006012:	4602      	mov	r2, r0
 8006014:	4b1c      	ldr	r3, [pc, #112]	; (8006088 <vTaskStartScheduler+0xac>)
 8006016:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006018:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <vTaskStartScheduler+0xac>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006020:	2301      	movs	r3, #1
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	e001      	b.n	800602a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d115      	bne.n	800605c <vTaskStartScheduler+0x80>
 8006030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006042:	4b12      	ldr	r3, [pc, #72]	; (800608c <vTaskStartScheduler+0xb0>)
 8006044:	f04f 32ff 	mov.w	r2, #4294967295
 8006048:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800604a:	4b11      	ldr	r3, [pc, #68]	; (8006090 <vTaskStartScheduler+0xb4>)
 800604c:	2201      	movs	r2, #1
 800604e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006050:	4b10      	ldr	r3, [pc, #64]	; (8006094 <vTaskStartScheduler+0xb8>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006056:	f7fe fb27 	bl	80046a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800605a:	e00d      	b.n	8006078 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d109      	bne.n	8006078 <vTaskStartScheduler+0x9c>
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	e7fe      	b.n	8006076 <vTaskStartScheduler+0x9a>
}
 8006078:	bf00      	nop
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	08015514 	.word	0x08015514
 8006084:	08006669 	.word	0x08006669
 8006088:	20004040 	.word	0x20004040
 800608c:	2000403c 	.word	0x2000403c
 8006090:	20004028 	.word	0x20004028
 8006094:	20004020 	.word	0x20004020

08006098 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800609c:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <vTaskSuspendAll+0x18>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3301      	adds	r3, #1
 80060a2:	4a03      	ldr	r2, [pc, #12]	; (80060b0 <vTaskSuspendAll+0x18>)
 80060a4:	6013      	str	r3, [r2, #0]
}
 80060a6:	bf00      	nop
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bc80      	pop	{r7}
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	20004044 	.word	0x20004044

080060b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060c2:	4b41      	ldr	r3, [pc, #260]	; (80061c8 <xTaskResumeAll+0x114>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d109      	bne.n	80060de <xTaskResumeAll+0x2a>
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	603b      	str	r3, [r7, #0]
 80060dc:	e7fe      	b.n	80060dc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060de:	f7fe fb53 	bl	8004788 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060e2:	4b39      	ldr	r3, [pc, #228]	; (80061c8 <xTaskResumeAll+0x114>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	4a37      	ldr	r2, [pc, #220]	; (80061c8 <xTaskResumeAll+0x114>)
 80060ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ec:	4b36      	ldr	r3, [pc, #216]	; (80061c8 <xTaskResumeAll+0x114>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d161      	bne.n	80061b8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060f4:	4b35      	ldr	r3, [pc, #212]	; (80061cc <xTaskResumeAll+0x118>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d05d      	beq.n	80061b8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060fc:	e02e      	b.n	800615c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80060fe:	4b34      	ldr	r3, [pc, #208]	; (80061d0 <xTaskResumeAll+0x11c>)
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3318      	adds	r3, #24
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe fa29 	bl	8004562 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3304      	adds	r3, #4
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe fa24 	bl	8004562 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611e:	2201      	movs	r2, #1
 8006120:	409a      	lsls	r2, r3
 8006122:	4b2c      	ldr	r3, [pc, #176]	; (80061d4 <xTaskResumeAll+0x120>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4313      	orrs	r3, r2
 8006128:	4a2a      	ldr	r2, [pc, #168]	; (80061d4 <xTaskResumeAll+0x120>)
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4a27      	ldr	r2, [pc, #156]	; (80061d8 <xTaskResumeAll+0x124>)
 800613a:	441a      	add	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3304      	adds	r3, #4
 8006140:	4619      	mov	r1, r3
 8006142:	4610      	mov	r0, r2
 8006144:	f7fe f9b2 	bl	80044ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614c:	4b23      	ldr	r3, [pc, #140]	; (80061dc <xTaskResumeAll+0x128>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006152:	429a      	cmp	r2, r3
 8006154:	d302      	bcc.n	800615c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006156:	4b22      	ldr	r3, [pc, #136]	; (80061e0 <xTaskResumeAll+0x12c>)
 8006158:	2201      	movs	r2, #1
 800615a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800615c:	4b1c      	ldr	r3, [pc, #112]	; (80061d0 <xTaskResumeAll+0x11c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1cc      	bne.n	80060fe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800616a:	f000 fb2f 	bl	80067cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800616e:	4b1d      	ldr	r3, [pc, #116]	; (80061e4 <xTaskResumeAll+0x130>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d010      	beq.n	800619c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800617a:	f000 f857 	bl	800622c <xTaskIncrementTick>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006184:	4b16      	ldr	r3, [pc, #88]	; (80061e0 <xTaskResumeAll+0x12c>)
 8006186:	2201      	movs	r2, #1
 8006188:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3b01      	subs	r3, #1
 800618e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1f1      	bne.n	800617a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006196:	4b13      	ldr	r3, [pc, #76]	; (80061e4 <xTaskResumeAll+0x130>)
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800619c:	4b10      	ldr	r3, [pc, #64]	; (80061e0 <xTaskResumeAll+0x12c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d009      	beq.n	80061b8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061a4:	2301      	movs	r3, #1
 80061a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061a8:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <xTaskResumeAll+0x134>)
 80061aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061b8:	f7fe fb14 	bl	80047e4 <vPortExitCritical>

	return xAlreadyYielded;
 80061bc:	68bb      	ldr	r3, [r7, #8]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20004044 	.word	0x20004044
 80061cc:	2000401c 	.word	0x2000401c
 80061d0:	20003fdc 	.word	0x20003fdc
 80061d4:	20004024 	.word	0x20004024
 80061d8:	20003f20 	.word	0x20003f20
 80061dc:	20003f1c 	.word	0x20003f1c
 80061e0:	20004030 	.word	0x20004030
 80061e4:	2000402c 	.word	0x2000402c
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061f2:	4b04      	ldr	r3, [pc, #16]	; (8006204 <xTaskGetTickCount+0x18>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80061f8:	687b      	ldr	r3, [r7, #4]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr
 8006204:	20004020 	.word	0x20004020

08006208 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800620e:	f7fe fb75 	bl	80048fc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006212:	2300      	movs	r3, #0
 8006214:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006216:	4b04      	ldr	r3, [pc, #16]	; (8006228 <xTaskGetTickCountFromISR+0x20>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800621c:	683b      	ldr	r3, [r7, #0]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20004020 	.word	0x20004020

0800622c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006236:	4b50      	ldr	r3, [pc, #320]	; (8006378 <xTaskIncrementTick+0x14c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f040 808c 	bne.w	8006358 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006240:	4b4e      	ldr	r3, [pc, #312]	; (800637c <xTaskIncrementTick+0x150>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006248:	4a4c      	ldr	r2, [pc, #304]	; (800637c <xTaskIncrementTick+0x150>)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d11f      	bne.n	8006294 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006254:	4b4a      	ldr	r3, [pc, #296]	; (8006380 <xTaskIncrementTick+0x154>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d009      	beq.n	8006272 <xTaskIncrementTick+0x46>
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	e7fe      	b.n	8006270 <xTaskIncrementTick+0x44>
 8006272:	4b43      	ldr	r3, [pc, #268]	; (8006380 <xTaskIncrementTick+0x154>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	4b42      	ldr	r3, [pc, #264]	; (8006384 <xTaskIncrementTick+0x158>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a40      	ldr	r2, [pc, #256]	; (8006380 <xTaskIncrementTick+0x154>)
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	4a40      	ldr	r2, [pc, #256]	; (8006384 <xTaskIncrementTick+0x158>)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	4b40      	ldr	r3, [pc, #256]	; (8006388 <xTaskIncrementTick+0x15c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	4a3e      	ldr	r2, [pc, #248]	; (8006388 <xTaskIncrementTick+0x15c>)
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	f000 fa9c 	bl	80067cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006294:	4b3d      	ldr	r3, [pc, #244]	; (800638c <xTaskIncrementTick+0x160>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	429a      	cmp	r2, r3
 800629c:	d34d      	bcc.n	800633a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800629e:	4b38      	ldr	r3, [pc, #224]	; (8006380 <xTaskIncrementTick+0x154>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <xTaskIncrementTick+0x80>
 80062a8:	2301      	movs	r3, #1
 80062aa:	e000      	b.n	80062ae <xTaskIncrementTick+0x82>
 80062ac:	2300      	movs	r3, #0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d004      	beq.n	80062bc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062b2:	4b36      	ldr	r3, [pc, #216]	; (800638c <xTaskIncrementTick+0x160>)
 80062b4:	f04f 32ff 	mov.w	r2, #4294967295
 80062b8:	601a      	str	r2, [r3, #0]
					break;
 80062ba:	e03e      	b.n	800633a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062bc:	4b30      	ldr	r3, [pc, #192]	; (8006380 <xTaskIncrementTick+0x154>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d203      	bcs.n	80062dc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062d4:	4a2d      	ldr	r2, [pc, #180]	; (800638c <xTaskIncrementTick+0x160>)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6013      	str	r3, [r2, #0]
						break;
 80062da:	e02e      	b.n	800633a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	3304      	adds	r3, #4
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe f93e 	bl	8004562 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d004      	beq.n	80062f8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	3318      	adds	r3, #24
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fe f935 	bl	8004562 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	2201      	movs	r2, #1
 80062fe:	409a      	lsls	r2, r3
 8006300:	4b23      	ldr	r3, [pc, #140]	; (8006390 <xTaskIncrementTick+0x164>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4313      	orrs	r3, r2
 8006306:	4a22      	ldr	r2, [pc, #136]	; (8006390 <xTaskIncrementTick+0x164>)
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <xTaskIncrementTick+0x168>)
 8006318:	441a      	add	r2, r3
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	3304      	adds	r3, #4
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f7fe f8c3 	bl	80044ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632a:	4b1b      	ldr	r3, [pc, #108]	; (8006398 <xTaskIncrementTick+0x16c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	429a      	cmp	r2, r3
 8006332:	d3b4      	bcc.n	800629e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006334:	2301      	movs	r3, #1
 8006336:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006338:	e7b1      	b.n	800629e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800633a:	4b17      	ldr	r3, [pc, #92]	; (8006398 <xTaskIncrementTick+0x16c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006340:	4914      	ldr	r1, [pc, #80]	; (8006394 <xTaskIncrementTick+0x168>)
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	440b      	add	r3, r1
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d907      	bls.n	8006362 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006352:	2301      	movs	r3, #1
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	e004      	b.n	8006362 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006358:	4b10      	ldr	r3, [pc, #64]	; (800639c <xTaskIncrementTick+0x170>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3301      	adds	r3, #1
 800635e:	4a0f      	ldr	r2, [pc, #60]	; (800639c <xTaskIncrementTick+0x170>)
 8006360:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006362:	4b0f      	ldr	r3, [pc, #60]	; (80063a0 <xTaskIncrementTick+0x174>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800636a:	2301      	movs	r3, #1
 800636c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800636e:	697b      	ldr	r3, [r7, #20]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	20004044 	.word	0x20004044
 800637c:	20004020 	.word	0x20004020
 8006380:	20003fd4 	.word	0x20003fd4
 8006384:	20003fd8 	.word	0x20003fd8
 8006388:	20004034 	.word	0x20004034
 800638c:	2000403c 	.word	0x2000403c
 8006390:	20004024 	.word	0x20004024
 8006394:	20003f20 	.word	0x20003f20
 8006398:	20003f1c 	.word	0x20003f1c
 800639c:	2000402c 	.word	0x2000402c
 80063a0:	20004030 	.word	0x20004030

080063a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063aa:	4b26      	ldr	r3, [pc, #152]	; (8006444 <vTaskSwitchContext+0xa0>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063b2:	4b25      	ldr	r3, [pc, #148]	; (8006448 <vTaskSwitchContext+0xa4>)
 80063b4:	2201      	movs	r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063b8:	e03e      	b.n	8006438 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80063ba:	4b23      	ldr	r3, [pc, #140]	; (8006448 <vTaskSwitchContext+0xa4>)
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80063c0:	4b22      	ldr	r3, [pc, #136]	; (800644c <vTaskSwitchContext+0xa8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	fab3 f383 	clz	r3, r3
 80063cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80063ce:	7afb      	ldrb	r3, [r7, #11]
 80063d0:	f1c3 031f 	rsb	r3, r3, #31
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	491e      	ldr	r1, [pc, #120]	; (8006450 <vTaskSwitchContext+0xac>)
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	440b      	add	r3, r1
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <vTaskSwitchContext+0x5a>
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	607b      	str	r3, [r7, #4]
 80063fc:	e7fe      	b.n	80063fc <vTaskSwitchContext+0x58>
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4613      	mov	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4a11      	ldr	r2, [pc, #68]	; (8006450 <vTaskSwitchContext+0xac>)
 800640a:	4413      	add	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	605a      	str	r2, [r3, #4]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	3308      	adds	r3, #8
 8006420:	429a      	cmp	r2, r3
 8006422:	d104      	bne.n	800642e <vTaskSwitchContext+0x8a>
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	605a      	str	r2, [r3, #4]
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	4a07      	ldr	r2, [pc, #28]	; (8006454 <vTaskSwitchContext+0xb0>)
 8006436:	6013      	str	r3, [r2, #0]
}
 8006438:	bf00      	nop
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	20004044 	.word	0x20004044
 8006448:	20004030 	.word	0x20004030
 800644c:	20004024 	.word	0x20004024
 8006450:	20003f20 	.word	0x20003f20
 8006454:	20003f1c 	.word	0x20003f1c

08006458 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d109      	bne.n	800647c <vTaskPlaceOnEventList+0x24>
 8006468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	e7fe      	b.n	800647a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800647c:	4b07      	ldr	r3, [pc, #28]	; (800649c <vTaskPlaceOnEventList+0x44>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3318      	adds	r3, #24
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7fe f834 	bl	80044f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800648a:	2101      	movs	r1, #1
 800648c:	6838      	ldr	r0, [r7, #0]
 800648e:	f000 fb9b 	bl	8006bc8 <prvAddCurrentTaskToDelayedList>
}
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20003f1c 	.word	0x20003f1c

080064a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d109      	bne.n	80064ca <xTaskRemoveFromEventList+0x2a>
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	e7fe      	b.n	80064c8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	3318      	adds	r3, #24
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe f847 	bl	8004562 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064d4:	4b1d      	ldr	r3, [pc, #116]	; (800654c <xTaskRemoveFromEventList+0xac>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d11c      	bne.n	8006516 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	3304      	adds	r3, #4
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fe f83e 	bl	8004562 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	2201      	movs	r2, #1
 80064ec:	409a      	lsls	r2, r3
 80064ee:	4b18      	ldr	r3, [pc, #96]	; (8006550 <xTaskRemoveFromEventList+0xb0>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	4a16      	ldr	r2, [pc, #88]	; (8006550 <xTaskRemoveFromEventList+0xb0>)
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4a13      	ldr	r2, [pc, #76]	; (8006554 <xTaskRemoveFromEventList+0xb4>)
 8006506:	441a      	add	r2, r3
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	3304      	adds	r3, #4
 800650c:	4619      	mov	r1, r3
 800650e:	4610      	mov	r0, r2
 8006510:	f7fd ffcc 	bl	80044ac <vListInsertEnd>
 8006514:	e005      	b.n	8006522 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	3318      	adds	r3, #24
 800651a:	4619      	mov	r1, r3
 800651c:	480e      	ldr	r0, [pc, #56]	; (8006558 <xTaskRemoveFromEventList+0xb8>)
 800651e:	f7fd ffc5 	bl	80044ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006526:	4b0d      	ldr	r3, [pc, #52]	; (800655c <xTaskRemoveFromEventList+0xbc>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	429a      	cmp	r2, r3
 800652e:	d905      	bls.n	800653c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006530:	2301      	movs	r3, #1
 8006532:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006534:	4b0a      	ldr	r3, [pc, #40]	; (8006560 <xTaskRemoveFromEventList+0xc0>)
 8006536:	2201      	movs	r2, #1
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	e001      	b.n	8006540 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006540:	697b      	ldr	r3, [r7, #20]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20004044 	.word	0x20004044
 8006550:	20004024 	.word	0x20004024
 8006554:	20003f20 	.word	0x20003f20
 8006558:	20003fdc 	.word	0x20003fdc
 800655c:	20003f1c 	.word	0x20003f1c
 8006560:	20004030 	.word	0x20004030

08006564 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800656c:	4b06      	ldr	r3, [pc, #24]	; (8006588 <vTaskInternalSetTimeOutState+0x24>)
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <vTaskInternalSetTimeOutState+0x28>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	605a      	str	r2, [r3, #4]
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	bc80      	pop	{r7}
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20004034 	.word	0x20004034
 800658c:	20004020 	.word	0x20004020

08006590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d109      	bne.n	80065b4 <xTaskCheckForTimeOut+0x24>
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	613b      	str	r3, [r7, #16]
 80065b2:	e7fe      	b.n	80065b2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <xTaskCheckForTimeOut+0x3e>
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	e7fe      	b.n	80065cc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80065ce:	f7fe f8db 	bl	8004788 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80065d2:	4b1d      	ldr	r3, [pc, #116]	; (8006648 <xTaskCheckForTimeOut+0xb8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ea:	d102      	bne.n	80065f2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80065ec:	2300      	movs	r3, #0
 80065ee:	61fb      	str	r3, [r7, #28]
 80065f0:	e023      	b.n	800663a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	4b15      	ldr	r3, [pc, #84]	; (800664c <xTaskCheckForTimeOut+0xbc>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d007      	beq.n	800660e <xTaskCheckForTimeOut+0x7e>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	429a      	cmp	r2, r3
 8006606:	d802      	bhi.n	800660e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006608:	2301      	movs	r3, #1
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	e015      	b.n	800663a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	429a      	cmp	r2, r3
 8006616:	d90b      	bls.n	8006630 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	1ad2      	subs	r2, r2, r3
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff ff9d 	bl	8006564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800662a:	2300      	movs	r3, #0
 800662c:	61fb      	str	r3, [r7, #28]
 800662e:	e004      	b.n	800663a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006636:	2301      	movs	r3, #1
 8006638:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800663a:	f7fe f8d3 	bl	80047e4 <vPortExitCritical>

	return xReturn;
 800663e:	69fb      	ldr	r3, [r7, #28]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3720      	adds	r7, #32
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20004020 	.word	0x20004020
 800664c:	20004034 	.word	0x20004034

08006650 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006654:	4b03      	ldr	r3, [pc, #12]	; (8006664 <vTaskMissedYield+0x14>)
 8006656:	2201      	movs	r2, #1
 8006658:	601a      	str	r2, [r3, #0]
}
 800665a:	bf00      	nop
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	20004030 	.word	0x20004030

08006668 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006670:	f000 f852 	bl	8006718 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006674:	4b06      	ldr	r3, [pc, #24]	; (8006690 <prvIdleTask+0x28>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d9f9      	bls.n	8006670 <prvIdleTask+0x8>
			{
				taskYIELD();
 800667c:	4b05      	ldr	r3, [pc, #20]	; (8006694 <prvIdleTask+0x2c>)
 800667e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800668c:	e7f0      	b.n	8006670 <prvIdleTask+0x8>
 800668e:	bf00      	nop
 8006690:	20003f20 	.word	0x20003f20
 8006694:	e000ed04 	.word	0xe000ed04

08006698 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800669e:	2300      	movs	r3, #0
 80066a0:	607b      	str	r3, [r7, #4]
 80066a2:	e00c      	b.n	80066be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4a12      	ldr	r2, [pc, #72]	; (80066f8 <prvInitialiseTaskLists+0x60>)
 80066b0:	4413      	add	r3, r2
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fd fecf 	bl	8004456 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3301      	adds	r3, #1
 80066bc:	607b      	str	r3, [r7, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b06      	cmp	r3, #6
 80066c2:	d9ef      	bls.n	80066a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066c4:	480d      	ldr	r0, [pc, #52]	; (80066fc <prvInitialiseTaskLists+0x64>)
 80066c6:	f7fd fec6 	bl	8004456 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066ca:	480d      	ldr	r0, [pc, #52]	; (8006700 <prvInitialiseTaskLists+0x68>)
 80066cc:	f7fd fec3 	bl	8004456 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066d0:	480c      	ldr	r0, [pc, #48]	; (8006704 <prvInitialiseTaskLists+0x6c>)
 80066d2:	f7fd fec0 	bl	8004456 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066d6:	480c      	ldr	r0, [pc, #48]	; (8006708 <prvInitialiseTaskLists+0x70>)
 80066d8:	f7fd febd 	bl	8004456 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066dc:	480b      	ldr	r0, [pc, #44]	; (800670c <prvInitialiseTaskLists+0x74>)
 80066de:	f7fd feba 	bl	8004456 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066e2:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <prvInitialiseTaskLists+0x78>)
 80066e4:	4a05      	ldr	r2, [pc, #20]	; (80066fc <prvInitialiseTaskLists+0x64>)
 80066e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066e8:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <prvInitialiseTaskLists+0x7c>)
 80066ea:	4a05      	ldr	r2, [pc, #20]	; (8006700 <prvInitialiseTaskLists+0x68>)
 80066ec:	601a      	str	r2, [r3, #0]
}
 80066ee:	bf00      	nop
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20003f20 	.word	0x20003f20
 80066fc:	20003fac 	.word	0x20003fac
 8006700:	20003fc0 	.word	0x20003fc0
 8006704:	20003fdc 	.word	0x20003fdc
 8006708:	20003ff0 	.word	0x20003ff0
 800670c:	20004008 	.word	0x20004008
 8006710:	20003fd4 	.word	0x20003fd4
 8006714:	20003fd8 	.word	0x20003fd8

08006718 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800671e:	e019      	b.n	8006754 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006720:	f7fe f832 	bl	8004788 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006724:	4b0f      	ldr	r3, [pc, #60]	; (8006764 <prvCheckTasksWaitingTermination+0x4c>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3304      	adds	r3, #4
 8006730:	4618      	mov	r0, r3
 8006732:	f7fd ff16 	bl	8004562 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006736:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <prvCheckTasksWaitingTermination+0x50>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3b01      	subs	r3, #1
 800673c:	4a0a      	ldr	r2, [pc, #40]	; (8006768 <prvCheckTasksWaitingTermination+0x50>)
 800673e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006740:	4b0a      	ldr	r3, [pc, #40]	; (800676c <prvCheckTasksWaitingTermination+0x54>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3b01      	subs	r3, #1
 8006746:	4a09      	ldr	r2, [pc, #36]	; (800676c <prvCheckTasksWaitingTermination+0x54>)
 8006748:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800674a:	f7fe f84b 	bl	80047e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f80e 	bl	8006770 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006754:	4b05      	ldr	r3, [pc, #20]	; (800676c <prvCheckTasksWaitingTermination+0x54>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e1      	bne.n	8006720 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800675c:	bf00      	nop
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	20003ff0 	.word	0x20003ff0
 8006768:	2000401c 	.word	0x2000401c
 800676c:	20004004 	.word	0x20004004

08006770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800677e:	2b00      	cmp	r3, #0
 8006780:	d108      	bne.n	8006794 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe f9b6 	bl	8004af8 <vPortFree>
				vPortFree( pxTCB );
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7fe f9b3 	bl	8004af8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006792:	e017      	b.n	80067c4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800679a:	2b01      	cmp	r3, #1
 800679c:	d103      	bne.n	80067a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7fe f9aa 	bl	8004af8 <vPortFree>
	}
 80067a4:	e00e      	b.n	80067c4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d009      	beq.n	80067c4 <prvDeleteTCB+0x54>
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	e7fe      	b.n	80067c2 <prvDeleteTCB+0x52>
	}
 80067c4:	bf00      	nop
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067d2:	4b0e      	ldr	r3, [pc, #56]	; (800680c <prvResetNextTaskUnblockTime+0x40>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <prvResetNextTaskUnblockTime+0x14>
 80067dc:	2301      	movs	r3, #1
 80067de:	e000      	b.n	80067e2 <prvResetNextTaskUnblockTime+0x16>
 80067e0:	2300      	movs	r3, #0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d004      	beq.n	80067f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067e6:	4b0a      	ldr	r3, [pc, #40]	; (8006810 <prvResetNextTaskUnblockTime+0x44>)
 80067e8:	f04f 32ff 	mov.w	r2, #4294967295
 80067ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067ee:	e008      	b.n	8006802 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <prvResetNextTaskUnblockTime+0x40>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	4a04      	ldr	r2, [pc, #16]	; (8006810 <prvResetNextTaskUnblockTime+0x44>)
 8006800:	6013      	str	r3, [r2, #0]
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr
 800680c:	20003fd4 	.word	0x20003fd4
 8006810:	2000403c 	.word	0x2000403c

08006814 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800681a:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <xTaskGetSchedulerState+0x34>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d102      	bne.n	8006828 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006822:	2301      	movs	r3, #1
 8006824:	607b      	str	r3, [r7, #4]
 8006826:	e008      	b.n	800683a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006828:	4b08      	ldr	r3, [pc, #32]	; (800684c <xTaskGetSchedulerState+0x38>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d102      	bne.n	8006836 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006830:	2302      	movs	r3, #2
 8006832:	607b      	str	r3, [r7, #4]
 8006834:	e001      	b.n	800683a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006836:	2300      	movs	r3, #0
 8006838:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800683a:	687b      	ldr	r3, [r7, #4]
	}
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	20004028 	.word	0x20004028
 800684c:	20004044 	.word	0x20004044

08006850 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d06e      	beq.n	8006944 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686a:	4b39      	ldr	r3, [pc, #228]	; (8006950 <xTaskPriorityInherit+0x100>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	429a      	cmp	r2, r3
 8006872:	d25e      	bcs.n	8006932 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	2b00      	cmp	r3, #0
 800687a:	db06      	blt.n	800688a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800687c:	4b34      	ldr	r3, [pc, #208]	; (8006950 <xTaskPriorityInherit+0x100>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	f1c3 0207 	rsb	r2, r3, #7
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	6959      	ldr	r1, [r3, #20]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4a2e      	ldr	r2, [pc, #184]	; (8006954 <xTaskPriorityInherit+0x104>)
 800689c:	4413      	add	r3, r2
 800689e:	4299      	cmp	r1, r3
 80068a0:	d101      	bne.n	80068a6 <xTaskPriorityInherit+0x56>
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <xTaskPriorityInherit+0x58>
 80068a6:	2300      	movs	r3, #0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d03a      	beq.n	8006922 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fd fe56 	bl	8004562 <uxListRemove>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d115      	bne.n	80068e8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c0:	4924      	ldr	r1, [pc, #144]	; (8006954 <xTaskPriorityInherit+0x104>)
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10a      	bne.n	80068e8 <xTaskPriorityInherit+0x98>
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d6:	2201      	movs	r2, #1
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	43da      	mvns	r2, r3
 80068de:	4b1e      	ldr	r3, [pc, #120]	; (8006958 <xTaskPriorityInherit+0x108>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4013      	ands	r3, r2
 80068e4:	4a1c      	ldr	r2, [pc, #112]	; (8006958 <xTaskPriorityInherit+0x108>)
 80068e6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80068e8:	4b19      	ldr	r3, [pc, #100]	; (8006950 <xTaskPriorityInherit+0x100>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	2201      	movs	r2, #1
 80068f8:	409a      	lsls	r2, r3
 80068fa:	4b17      	ldr	r3, [pc, #92]	; (8006958 <xTaskPriorityInherit+0x108>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4313      	orrs	r3, r2
 8006900:	4a15      	ldr	r2, [pc, #84]	; (8006958 <xTaskPriorityInherit+0x108>)
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4a10      	ldr	r2, [pc, #64]	; (8006954 <xTaskPriorityInherit+0x104>)
 8006912:	441a      	add	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	3304      	adds	r3, #4
 8006918:	4619      	mov	r1, r3
 800691a:	4610      	mov	r0, r2
 800691c:	f7fd fdc6 	bl	80044ac <vListInsertEnd>
 8006920:	e004      	b.n	800692c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006922:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <xTaskPriorityInherit+0x100>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800692c:	2301      	movs	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	e008      	b.n	8006944 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006936:	4b06      	ldr	r3, [pc, #24]	; (8006950 <xTaskPriorityInherit+0x100>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	429a      	cmp	r2, r3
 800693e:	d201      	bcs.n	8006944 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006940:	2301      	movs	r3, #1
 8006942:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006944:	68fb      	ldr	r3, [r7, #12]
	}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20003f1c 	.word	0x20003f1c
 8006954:	20003f20 	.word	0x20003f20
 8006958:	20004024 	.word	0x20004024

0800695c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006968:	2300      	movs	r3, #0
 800696a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d06c      	beq.n	8006a4c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006972:	4b39      	ldr	r3, [pc, #228]	; (8006a58 <xTaskPriorityDisinherit+0xfc>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	429a      	cmp	r2, r3
 800697a:	d009      	beq.n	8006990 <xTaskPriorityDisinherit+0x34>
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	e7fe      	b.n	800698e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006994:	2b00      	cmp	r3, #0
 8006996:	d109      	bne.n	80069ac <xTaskPriorityDisinherit+0x50>
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	60bb      	str	r3, [r7, #8]
 80069aa:	e7fe      	b.n	80069aa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b0:	1e5a      	subs	r2, r3, #1
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069be:	429a      	cmp	r2, r3
 80069c0:	d044      	beq.n	8006a4c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d140      	bne.n	8006a4c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	3304      	adds	r3, #4
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fd fdc7 	bl	8004562 <uxListRemove>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d115      	bne.n	8006a06 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069de:	491f      	ldr	r1, [pc, #124]	; (8006a5c <xTaskPriorityDisinherit+0x100>)
 80069e0:	4613      	mov	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	440b      	add	r3, r1
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <xTaskPriorityDisinherit+0xaa>
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	2201      	movs	r2, #1
 80069f6:	fa02 f303 	lsl.w	r3, r2, r3
 80069fa:	43da      	mvns	r2, r3
 80069fc:	4b18      	ldr	r3, [pc, #96]	; (8006a60 <xTaskPriorityDisinherit+0x104>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4013      	ands	r3, r2
 8006a02:	4a17      	ldr	r2, [pc, #92]	; (8006a60 <xTaskPriorityDisinherit+0x104>)
 8006a04:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a12:	f1c3 0207 	rsb	r2, r3, #7
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1e:	2201      	movs	r2, #1
 8006a20:	409a      	lsls	r2, r3
 8006a22:	4b0f      	ldr	r3, [pc, #60]	; (8006a60 <xTaskPriorityDisinherit+0x104>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	4a0d      	ldr	r2, [pc, #52]	; (8006a60 <xTaskPriorityDisinherit+0x104>)
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4a08      	ldr	r2, [pc, #32]	; (8006a5c <xTaskPriorityDisinherit+0x100>)
 8006a3a:	441a      	add	r2, r3
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4619      	mov	r1, r3
 8006a42:	4610      	mov	r0, r2
 8006a44:	f7fd fd32 	bl	80044ac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a4c:	697b      	ldr	r3, [r7, #20]
	}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20003f1c 	.word	0x20003f1c
 8006a5c:	20003f20 	.word	0x20003f20
 8006a60:	20004024 	.word	0x20004024

08006a64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006a72:	2301      	movs	r3, #1
 8006a74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 8086 	beq.w	8006b8a <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d109      	bne.n	8006a9a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8006a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	e7fe      	b.n	8006a98 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d202      	bcs.n	8006aaa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	61fb      	str	r3, [r7, #28]
 8006aa8:	e002      	b.n	8006ab0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d067      	beq.n	8006b8a <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d162      	bne.n	8006b8a <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006ac4:	4b33      	ldr	r3, [pc, #204]	; (8006b94 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d109      	bne.n	8006ae2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	60bb      	str	r3, [r7, #8]
 8006ae0:	e7fe      	b.n	8006ae0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	db04      	blt.n	8006b00 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	f1c3 0207 	rsb	r2, r3, #7
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	6959      	ldr	r1, [r3, #20]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4a22      	ldr	r2, [pc, #136]	; (8006b98 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006b10:	4413      	add	r3, r2
 8006b12:	4299      	cmp	r1, r3
 8006b14:	d101      	bne.n	8006b1a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d034      	beq.n	8006b8a <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fd fd1c 	bl	8004562 <uxListRemove>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d115      	bne.n	8006b5c <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b34:	4918      	ldr	r1, [pc, #96]	; (8006b98 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	440b      	add	r3, r1
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	43da      	mvns	r2, r3
 8006b52:	4b12      	ldr	r3, [pc, #72]	; (8006b9c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4013      	ands	r3, r2
 8006b58:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006b5a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	2201      	movs	r2, #1
 8006b62:	409a      	lsls	r2, r3
 8006b64:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	4a0c      	ldr	r2, [pc, #48]	; (8006b9c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4a07      	ldr	r2, [pc, #28]	; (8006b98 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006b7c:	441a      	add	r2, r3
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f7fd fc91 	bl	80044ac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b8a:	bf00      	nop
 8006b8c:	3720      	adds	r7, #32
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20003f1c 	.word	0x20003f1c
 8006b98:	20003f20 	.word	0x20003f20
 8006b9c:	20004024 	.word	0x20004024

08006ba0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006ba4:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d004      	beq.n	8006bb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006bac:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bb2:	3201      	adds	r2, #1
 8006bb4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006bb6:	4b03      	ldr	r3, [pc, #12]	; (8006bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
	}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc80      	pop	{r7}
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20003f1c 	.word	0x20003f1c

08006bc8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bd2:	4b29      	ldr	r3, [pc, #164]	; (8006c78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bd8:	4b28      	ldr	r3, [pc, #160]	; (8006c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fd fcbf 	bl	8004562 <uxListRemove>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10b      	bne.n	8006c02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006bea:	4b24      	ldr	r3, [pc, #144]	; (8006c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf6:	43da      	mvns	r2, r3
 8006bf8:	4b21      	ldr	r3, [pc, #132]	; (8006c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	4a20      	ldr	r2, [pc, #128]	; (8006c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c08:	d10a      	bne.n	8006c20 <prvAddCurrentTaskToDelayedList+0x58>
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d007      	beq.n	8006c20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c10:	4b1a      	ldr	r3, [pc, #104]	; (8006c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4619      	mov	r1, r3
 8006c18:	481a      	ldr	r0, [pc, #104]	; (8006c84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006c1a:	f7fd fc47 	bl	80044ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c1e:	e026      	b.n	8006c6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4413      	add	r3, r2
 8006c26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c28:	4b14      	ldr	r3, [pc, #80]	; (8006c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d209      	bcs.n	8006c4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c38:	4b13      	ldr	r3, [pc, #76]	; (8006c88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	4b0f      	ldr	r3, [pc, #60]	; (8006c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3304      	adds	r3, #4
 8006c42:	4619      	mov	r1, r3
 8006c44:	4610      	mov	r0, r2
 8006c46:	f7fd fc54 	bl	80044f2 <vListInsert>
}
 8006c4a:	e010      	b.n	8006c6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c4c:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3304      	adds	r3, #4
 8006c56:	4619      	mov	r1, r3
 8006c58:	4610      	mov	r0, r2
 8006c5a:	f7fd fc4a 	bl	80044f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d202      	bcs.n	8006c6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006c68:	4a09      	ldr	r2, [pc, #36]	; (8006c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6013      	str	r3, [r2, #0]
}
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20004020 	.word	0x20004020
 8006c7c:	20003f1c 	.word	0x20003f1c
 8006c80:	20004024 	.word	0x20004024
 8006c84:	20004008 	.word	0x20004008
 8006c88:	20003fd8 	.word	0x20003fd8
 8006c8c:	20003fd4 	.word	0x20003fd4
 8006c90:	2000403c 	.word	0x2000403c

08006c94 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	330c      	adds	r3, #12
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f003 f80d 	bl	8009cc8 <tcpip_send_msg_wait_sem>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8006cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d103      	bne.n	8006cc2 <netconn_apimsg+0x2e>
    return apimsg->err;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006cc0:	e001      	b.n	8006cc6 <netconn_apimsg+0x32>
  }
  return err;
 8006cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08a      	sub	sp, #40	; 0x28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	603a      	str	r2, [r7, #0]
 8006cda:	71fb      	strb	r3, [r7, #7]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fef7 	bl	8007ad8 <netconn_alloc>
 8006cea:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d054      	beq.n	8006d9c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8006cf2:	79bb      	ldrb	r3, [r7, #6]
 8006cf4:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8006cfa:	f107 030c 	add.w	r3, r7, #12
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4829      	ldr	r0, [pc, #164]	; (8006da8 <netconn_new_with_proto_and_callback+0xd8>)
 8006d02:	f7ff ffc7 	bl	8006c94 <netconn_apimsg>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8006d0c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d043      	beq.n	8006d9c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <netconn_new_with_proto_and_callback+0x58>
 8006d1c:	4b23      	ldr	r3, [pc, #140]	; (8006dac <netconn_new_with_proto_and_callback+0xdc>)
 8006d1e:	2289      	movs	r2, #137	; 0x89
 8006d20:	4923      	ldr	r1, [pc, #140]	; (8006db0 <netconn_new_with_proto_and_callback+0xe0>)
 8006d22:	4824      	ldr	r0, [pc, #144]	; (8006db4 <netconn_new_with_proto_and_callback+0xe4>)
 8006d24:	f00d f9d6 	bl	80140d4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	3310      	adds	r3, #16
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f00c fffd 	bl	8013d2c <sys_mbox_valid>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d105      	bne.n	8006d44 <netconn_new_with_proto_and_callback+0x74>
 8006d38:	4b1c      	ldr	r3, [pc, #112]	; (8006dac <netconn_new_with_proto_and_callback+0xdc>)
 8006d3a:	228a      	movs	r2, #138	; 0x8a
 8006d3c:	491e      	ldr	r1, [pc, #120]	; (8006db8 <netconn_new_with_proto_and_callback+0xe8>)
 8006d3e:	481d      	ldr	r0, [pc, #116]	; (8006db4 <netconn_new_with_proto_and_callback+0xe4>)
 8006d40:	f00d f9c8 	bl	80140d4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	3314      	adds	r3, #20
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f00c ffef 	bl	8013d2c <sys_mbox_valid>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <netconn_new_with_proto_and_callback+0x90>
 8006d54:	4b15      	ldr	r3, [pc, #84]	; (8006dac <netconn_new_with_proto_and_callback+0xdc>)
 8006d56:	228c      	movs	r2, #140	; 0x8c
 8006d58:	4918      	ldr	r1, [pc, #96]	; (8006dbc <netconn_new_with_proto_and_callback+0xec>)
 8006d5a:	4816      	ldr	r0, [pc, #88]	; (8006db4 <netconn_new_with_proto_and_callback+0xe4>)
 8006d5c:	f00d f9ba 	bl	80140d4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	330c      	adds	r3, #12
 8006d64:	4618      	mov	r0, r3
 8006d66:	f00d f870 	bl	8013e4a <sys_sem_valid>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d105      	bne.n	8006d7c <netconn_new_with_proto_and_callback+0xac>
 8006d70:	4b0e      	ldr	r3, [pc, #56]	; (8006dac <netconn_new_with_proto_and_callback+0xdc>)
 8006d72:	228f      	movs	r2, #143	; 0x8f
 8006d74:	4912      	ldr	r1, [pc, #72]	; (8006dc0 <netconn_new_with_proto_and_callback+0xf0>)
 8006d76:	480f      	ldr	r0, [pc, #60]	; (8006db4 <netconn_new_with_proto_and_callback+0xe4>)
 8006d78:	f00d f9ac 	bl	80140d4 <iprintf>
      sys_sem_free(&conn->op_completed);
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	330c      	adds	r3, #12
 8006d80:	4618      	mov	r0, r3
 8006d82:	f00d f855 	bl	8013e30 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	3310      	adds	r3, #16
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f00c ff32 	bl	8013bf4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8006d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d92:	2007      	movs	r0, #7
 8006d94:	f005 feaa 	bl	800caec <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	e000      	b.n	8006d9e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3728      	adds	r7, #40	; 0x28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	08007a81 	.word	0x08007a81
 8006dac:	0801551c 	.word	0x0801551c
 8006db0:	08015550 	.word	0x08015550
 8006db4:	08015574 	.word	0x08015574
 8006db8:	0801559c 	.word	0x0801559c
 8006dbc:	080155b4 	.word	0x080155b4
 8006dc0:	080155d8 	.word	0x080155d8

08006dc4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <netconn_delete+0x12>
    return ERR_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	e016      	b.n	8006e04 <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006dda:	2329      	movs	r3, #41	; 0x29
 8006ddc:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8006dde:	f107 0308 	add.w	r3, r7, #8
 8006de2:	4619      	mov	r1, r3
 8006de4:	4809      	ldr	r0, [pc, #36]	; (8006e0c <netconn_delete+0x48>)
 8006de6:	f7ff ff55 	bl	8006c94 <netconn_apimsg>
 8006dea:	4603      	mov	r3, r0
 8006dec:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8006dee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <netconn_delete+0x38>
    return err;
 8006df6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006dfa:	e003      	b.n	8006e04 <netconn_delete+0x40>
  }

  netconn_free(conn);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fedb 	bl	8007bb8 <netconn_free>

  return ERR_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3720      	adds	r7, #32
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	0800803d 	.word	0x0800803d

08006e10 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08a      	sub	sp, #40	; 0x28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d108      	bne.n	8006e36 <netconn_getaddr+0x26>
 8006e24:	4b1c      	ldr	r3, [pc, #112]	; (8006e98 <netconn_getaddr+0x88>)
 8006e26:	22d9      	movs	r2, #217	; 0xd9
 8006e28:	491c      	ldr	r1, [pc, #112]	; (8006e9c <netconn_getaddr+0x8c>)
 8006e2a:	481d      	ldr	r0, [pc, #116]	; (8006ea0 <netconn_getaddr+0x90>)
 8006e2c:	f00d f952 	bl	80140d4 <iprintf>
 8006e30:	f06f 030f 	mvn.w	r3, #15
 8006e34:	e02b      	b.n	8006e8e <netconn_getaddr+0x7e>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d108      	bne.n	8006e4e <netconn_getaddr+0x3e>
 8006e3c:	4b16      	ldr	r3, [pc, #88]	; (8006e98 <netconn_getaddr+0x88>)
 8006e3e:	22da      	movs	r2, #218	; 0xda
 8006e40:	4918      	ldr	r1, [pc, #96]	; (8006ea4 <netconn_getaddr+0x94>)
 8006e42:	4817      	ldr	r0, [pc, #92]	; (8006ea0 <netconn_getaddr+0x90>)
 8006e44:	f00d f946 	bl	80140d4 <iprintf>
 8006e48:	f06f 030f 	mvn.w	r3, #15
 8006e4c:	e01f      	b.n	8006e8e <netconn_getaddr+0x7e>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d108      	bne.n	8006e66 <netconn_getaddr+0x56>
 8006e54:	4b10      	ldr	r3, [pc, #64]	; (8006e98 <netconn_getaddr+0x88>)
 8006e56:	22db      	movs	r2, #219	; 0xdb
 8006e58:	4913      	ldr	r1, [pc, #76]	; (8006ea8 <netconn_getaddr+0x98>)
 8006e5a:	4811      	ldr	r0, [pc, #68]	; (8006ea0 <netconn_getaddr+0x90>)
 8006e5c:	f00d f93a 	bl	80140d4 <iprintf>
 8006e60:	f06f 030f 	mvn.w	r3, #15
 8006e64:	e013      	b.n	8006e8e <netconn_getaddr+0x7e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8006e6a:	78fb      	ldrb	r3, [r7, #3]
 8006e6c:	f887 3020 	strb.w	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	61bb      	str	r3, [r7, #24]
  msg.msg.ad.port = port;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	61fb      	str	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8006e78:	f107 0310 	add.w	r3, r7, #16
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	480b      	ldr	r0, [pc, #44]	; (8006eac <netconn_getaddr+0x9c>)
 8006e80:	f7ff ff08 	bl	8006c94 <netconn_apimsg>
 8006e84:	4603      	mov	r3, r0
 8006e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8006e8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3728      	adds	r7, #40	; 0x28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	0801551c 	.word	0x0801551c
 8006e9c:	080155f4 	.word	0x080155f4
 8006ea0:	08015574 	.word	0x08015574
 8006ea4:	08015614 	.word	0x08015614
 8006ea8:	08015634 	.word	0x08015634
 8006eac:	08008bb1 	.word	0x08008bb1

08006eb0 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	; 0x28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d109      	bne.n	8006ed8 <netconn_connect+0x28>
 8006ec4:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <netconn_connect+0x5c>)
 8006ec6:	f240 122b 	movw	r2, #299	; 0x12b
 8006eca:	4911      	ldr	r1, [pc, #68]	; (8006f10 <netconn_connect+0x60>)
 8006ecc:	4811      	ldr	r0, [pc, #68]	; (8006f14 <netconn_connect+0x64>)
 8006ece:	f00d f901 	bl	80140d4 <iprintf>
 8006ed2:	f06f 030f 	mvn.w	r3, #15
 8006ed6:	e015      	b.n	8006f04 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8006ede:	4b0e      	ldr	r3, [pc, #56]	; (8006f18 <netconn_connect+0x68>)
 8006ee0:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8006eea:	88fb      	ldrh	r3, [r7, #6]
 8006eec:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8006eee:	f107 0310 	add.w	r3, r7, #16
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	4809      	ldr	r0, [pc, #36]	; (8006f1c <netconn_connect+0x6c>)
 8006ef6:	f7ff fecd 	bl	8006c94 <netconn_apimsg>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8006f00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3728      	adds	r7, #40	; 0x28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	0801551c 	.word	0x0801551c
 8006f10:	08015670 	.word	0x08015670
 8006f14:	08015574 	.word	0x08015574
 8006f18:	08017efc 	.word	0x08017efc
 8006f1c:	08008385 	.word	0x08008385

08006f20 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d109      	bne.n	8006f42 <netconn_disconnect+0x22>
 8006f2e:	4b0d      	ldr	r3, [pc, #52]	; (8006f64 <netconn_disconnect+0x44>)
 8006f30:	f240 124b 	movw	r2, #331	; 0x14b
 8006f34:	490c      	ldr	r1, [pc, #48]	; (8006f68 <netconn_disconnect+0x48>)
 8006f36:	480d      	ldr	r0, [pc, #52]	; (8006f6c <netconn_disconnect+0x4c>)
 8006f38:	f00d f8cc 	bl	80140d4 <iprintf>
 8006f3c:	f06f 030f 	mvn.w	r3, #15
 8006f40:	e00b      	b.n	8006f5a <netconn_disconnect+0x3a>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60bb      	str	r3, [r7, #8]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8006f46:	f107 0308 	add.w	r3, r7, #8
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	4808      	ldr	r0, [pc, #32]	; (8006f70 <netconn_disconnect+0x50>)
 8006f4e:	f7ff fea1 	bl	8006c94 <netconn_apimsg>
 8006f52:	4603      	mov	r3, r0
 8006f54:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8006f56:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3720      	adds	r7, #32
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	0801551c 	.word	0x0801551c
 8006f68:	08015690 	.word	0x08015690
 8006f6c:	08015574 	.word	0x08015574
 8006f70:	0800853d 	.word	0x0800853d

08006f74 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08a      	sub	sp, #40	; 0x28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d109      	bne.n	8006f9c <netconn_recv_data+0x28>
 8006f88:	4b5c      	ldr	r3, [pc, #368]	; (80070fc <netconn_recv_data+0x188>)
 8006f8a:	f240 12e7 	movw	r2, #487	; 0x1e7
 8006f8e:	495c      	ldr	r1, [pc, #368]	; (8007100 <netconn_recv_data+0x18c>)
 8006f90:	485c      	ldr	r0, [pc, #368]	; (8007104 <netconn_recv_data+0x190>)
 8006f92:	f00d f89f 	bl	80140d4 <iprintf>
 8006f96:	f06f 030f 	mvn.w	r3, #15
 8006f9a:	e0aa      	b.n	80070f2 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d109      	bne.n	8006fbc <netconn_recv_data+0x48>
 8006fa8:	4b54      	ldr	r3, [pc, #336]	; (80070fc <netconn_recv_data+0x188>)
 8006faa:	f240 12e9 	movw	r2, #489	; 0x1e9
 8006fae:	4956      	ldr	r1, [pc, #344]	; (8007108 <netconn_recv_data+0x194>)
 8006fb0:	4854      	ldr	r0, [pc, #336]	; (8007104 <netconn_recv_data+0x190>)
 8006fb2:	f00d f88f 	bl	80140d4 <iprintf>
 8006fb6:	f06f 030f 	mvn.w	r3, #15
 8006fba:	e09a      	b.n	80070f2 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fc4:	2b10      	cmp	r3, #16
 8006fc6:	d115      	bne.n	8006ff4 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	3310      	adds	r3, #16
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f00c fead 	bl	8013d2c <sys_mbox_valid>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10d      	bne.n	8006ff4 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3314      	adds	r3, #20
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f00c fea5 	bl	8013d2c <sys_mbox_valid>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <netconn_recv_data+0x7a>
 8006fe8:	f06f 030a 	mvn.w	r3, #10
 8006fec:	e081      	b.n	80070f2 <netconn_recv_data+0x17e>
 8006fee:	f06f 030e 	mvn.w	r3, #14
 8006ff2:	e07e      	b.n	80070f2 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	3310      	adds	r3, #16
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f00c fe97 	bl	8013d2c <sys_mbox_valid>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d109      	bne.n	8007018 <netconn_recv_data+0xa4>
 8007004:	4b3d      	ldr	r3, [pc, #244]	; (80070fc <netconn_recv_data+0x188>)
 8007006:	f240 12f5 	movw	r2, #501	; 0x1f5
 800700a:	4940      	ldr	r1, [pc, #256]	; (800710c <netconn_recv_data+0x198>)
 800700c:	483d      	ldr	r0, [pc, #244]	; (8007104 <netconn_recv_data+0x190>)
 800700e:	f00d f861 	bl	80140d4 <iprintf>
 8007012:	f06f 030a 	mvn.w	r3, #10
 8007016:	e06c      	b.n	80070f2 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800701e:	f113 0f0c 	cmn.w	r3, #12
 8007022:	da03      	bge.n	800702c <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800702a:	e062      	b.n	80070f2 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3310      	adds	r3, #16
 8007030:	f107 0120 	add.w	r1, r7, #32
 8007034:	2200      	movs	r2, #0
 8007036:	4618      	mov	r0, r3
 8007038:	f00c fe1d 	bl	8013c76 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007044:	2b10      	cmp	r3, #16
 8007046:	d138      	bne.n	80070ba <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	891b      	ldrh	r3, [r3, #8]
 8007056:	617b      	str	r3, [r7, #20]
 8007058:	e001      	b.n	800705e <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800705a:	2301      	movs	r3, #1
 800705c:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800705e:	f107 030c 	add.w	r3, r7, #12
 8007062:	4619      	mov	r1, r3
 8007064:	482a      	ldr	r0, [pc, #168]	; (8007110 <netconn_recv_data+0x19c>)
 8007066:	f7ff fe15 	bl	8006c94 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d120      	bne.n	80070b2 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007074:	2b00      	cmp	r3, #0
 8007076:	d005      	beq.n	8007084 <netconn_recv_data+0x110>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707c:	2200      	movs	r2, #0
 800707e:	2101      	movs	r1, #1
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10b      	bne.n	80070a4 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <netconn_recv_data+0x12a>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800709c:	e029      	b.n	80070f2 <netconn_recv_data+0x17e>
 800709e:	f06f 030d 	mvn.w	r3, #13
 80070a2:	e026      	b.n	80070f2 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80070a4:	2101      	movs	r1, #1
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f97a 	bl	80073a0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80070ac:	f06f 030e 	mvn.w	r3, #14
 80070b0:	e01f      	b.n	80070f2 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	891b      	ldrh	r3, [r3, #8]
 80070b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80070b8:	e00d      	b.n	80070d6 <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d106      	bne.n	80070ce <netconn_recv_data+0x15a>
 80070c0:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <netconn_recv_data+0x188>)
 80070c2:	f240 223e 	movw	r2, #574	; 0x23e
 80070c6:	4913      	ldr	r1, [pc, #76]	; (8007114 <netconn_recv_data+0x1a0>)
 80070c8:	480e      	ldr	r0, [pc, #56]	; (8007104 <netconn_recv_data+0x190>)
 80070ca:	f00d f803 	bl	80140d4 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	891b      	ldrh	r3, [r3, #8]
 80070d4:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d005      	beq.n	80070ea <netconn_recv_data+0x176>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80070e4:	2101      	movs	r1, #1
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80070ea:	6a3a      	ldr	r2, [r7, #32]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3728      	adds	r7, #40	; 0x28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	0801551c 	.word	0x0801551c
 8007100:	08015714 	.word	0x08015714
 8007104:	08015574 	.word	0x08015574
 8007108:	08015734 	.word	0x08015734
 800710c:	08015750 	.word	0x08015750
 8007110:	08008675 	.word	0x08008675
 8007114:	08015770 	.word	0x08015770

08007118 <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <netconn_recv_tcp_pbuf+0x1c>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007130:	2b10      	cmp	r3, #16
 8007132:	d009      	beq.n	8007148 <netconn_recv_tcp_pbuf+0x30>
 8007134:	4b09      	ldr	r3, [pc, #36]	; (800715c <netconn_recv_tcp_pbuf+0x44>)
 8007136:	f240 225e 	movw	r2, #606	; 0x25e
 800713a:	4909      	ldr	r1, [pc, #36]	; (8007160 <netconn_recv_tcp_pbuf+0x48>)
 800713c:	4809      	ldr	r0, [pc, #36]	; (8007164 <netconn_recv_tcp_pbuf+0x4c>)
 800713e:	f00c ffc9 	bl	80140d4 <iprintf>
 8007142:	f06f 030f 	mvn.w	r3, #15
 8007146:	e004      	b.n	8007152 <netconn_recv_tcp_pbuf+0x3a>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff ff12 	bl	8006f74 <netconn_recv_data>
 8007150:	4603      	mov	r3, r0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	0801551c 	.word	0x0801551c
 8007160:	08015734 	.word	0x08015734
 8007164:	08015574 	.word	0x08015574

08007168 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d109      	bne.n	8007190 <netconn_recv+0x28>
 800717c:	4b31      	ldr	r3, [pc, #196]	; (8007244 <netconn_recv+0xdc>)
 800717e:	f44f 721d 	mov.w	r2, #628	; 0x274
 8007182:	4931      	ldr	r1, [pc, #196]	; (8007248 <netconn_recv+0xe0>)
 8007184:	4831      	ldr	r0, [pc, #196]	; (800724c <netconn_recv+0xe4>)
 8007186:	f00c ffa5 	bl	80140d4 <iprintf>
 800718a:	f06f 030f 	mvn.w	r3, #15
 800718e:	e054      	b.n	800723a <netconn_recv+0xd2>
  *new_buf = NULL;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d109      	bne.n	80071b0 <netconn_recv+0x48>
 800719c:	4b29      	ldr	r3, [pc, #164]	; (8007244 <netconn_recv+0xdc>)
 800719e:	f240 2276 	movw	r2, #630	; 0x276
 80071a2:	492b      	ldr	r1, [pc, #172]	; (8007250 <netconn_recv+0xe8>)
 80071a4:	4829      	ldr	r0, [pc, #164]	; (800724c <netconn_recv+0xe4>)
 80071a6:	f00c ff95 	bl	80140d4 <iprintf>
 80071aa:	f06f 030f 	mvn.w	r3, #15
 80071ae:	e044      	b.n	800723a <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071b8:	2b10      	cmp	r3, #16
 80071ba:	d139      	bne.n	8007230 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80071c0:	2006      	movs	r0, #6
 80071c2:	f005 fc41 	bl	800ca48 <memp_malloc>
 80071c6:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d102      	bne.n	80071d4 <netconn_recv+0x6c>
      return ERR_MEM;
 80071ce:	f04f 33ff 	mov.w	r3, #4294967295
 80071d2:	e032      	b.n	800723a <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 80071d4:	f107 030c 	add.w	r3, r7, #12
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7ff feca 	bl	8006f74 <netconn_recv_data>
 80071e0:	4603      	mov	r3, r0
 80071e2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80071e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d006      	beq.n	80071fa <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 80071ec:	6979      	ldr	r1, [r7, #20]
 80071ee:	2006      	movs	r0, #6
 80071f0:	f005 fc7c 	bl	800caec <memp_free>
      return err;
 80071f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80071f8:	e01f      	b.n	800723a <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d106      	bne.n	800720e <netconn_recv+0xa6>
 8007200:	4b10      	ldr	r3, [pc, #64]	; (8007244 <netconn_recv+0xdc>)
 8007202:	f240 228a 	movw	r2, #650	; 0x28a
 8007206:	4913      	ldr	r1, [pc, #76]	; (8007254 <netconn_recv+0xec>)
 8007208:	4810      	ldr	r0, [pc, #64]	; (800724c <netconn_recv+0xe4>)
 800720a:	f00c ff63 	bl	80140d4 <iprintf>

    buf->p = p;
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2200      	movs	r2, #0
 800721e:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2200      	movs	r2, #0
 8007224:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	e004      	b.n	800723a <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7ff fe9e 	bl	8006f74 <netconn_recv_data>
 8007238:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	0801551c 	.word	0x0801551c
 8007248:	08015714 	.word	0x08015714
 800724c:	08015574 	.word	0x08015574
 8007250:	08015734 	.word	0x08015734
 8007254:	0801577c 	.word	0x0801577c

08007258 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b088      	sub	sp, #32
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d109      	bne.n	800727c <netconn_send+0x24>
 8007268:	4b0d      	ldr	r3, [pc, #52]	; (80072a0 <netconn_send+0x48>)
 800726a:	f240 22c3 	movw	r2, #707	; 0x2c3
 800726e:	490d      	ldr	r1, [pc, #52]	; (80072a4 <netconn_send+0x4c>)
 8007270:	480d      	ldr	r0, [pc, #52]	; (80072a8 <netconn_send+0x50>)
 8007272:	f00c ff2f 	bl	80140d4 <iprintf>
 8007276:	f06f 030f 	mvn.w	r3, #15
 800727a:	e00d      	b.n	8007298 <netconn_send+0x40>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	60bb      	str	r3, [r7, #8]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	613b      	str	r3, [r7, #16]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8007284:	f107 0308 	add.w	r3, r7, #8
 8007288:	4619      	mov	r1, r3
 800728a:	4808      	ldr	r0, [pc, #32]	; (80072ac <netconn_send+0x54>)
 800728c:	f7ff fd02 	bl	8006c94 <netconn_apimsg>
 8007290:	4603      	mov	r3, r0
 8007292:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8007294:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3720      	adds	r7, #32
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	0801551c 	.word	0x0801551c
 80072a4:	08015788 	.word	0x08015788
 80072a8:	08015574 	.word	0x08015574
 80072ac:	080085a7 	.word	0x080085a7

080072b0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08a      	sub	sp, #40	; 0x28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d109      	bne.n	80072d8 <netconn_write_partly+0x28>
 80072c4:	4b31      	ldr	r3, [pc, #196]	; (800738c <netconn_write_partly+0xdc>)
 80072c6:	f240 22e6 	movw	r2, #742	; 0x2e6
 80072ca:	4931      	ldr	r1, [pc, #196]	; (8007390 <netconn_write_partly+0xe0>)
 80072cc:	4831      	ldr	r0, [pc, #196]	; (8007394 <netconn_write_partly+0xe4>)
 80072ce:	f00c ff01 	bl	80140d4 <iprintf>
 80072d2:	f06f 030f 	mvn.w	r3, #15
 80072d6:	e054      	b.n	8007382 <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072e0:	2b10      	cmp	r3, #16
 80072e2:	d009      	beq.n	80072f8 <netconn_write_partly+0x48>
 80072e4:	4b29      	ldr	r3, [pc, #164]	; (800738c <netconn_write_partly+0xdc>)
 80072e6:	f240 22e7 	movw	r2, #743	; 0x2e7
 80072ea:	492b      	ldr	r1, [pc, #172]	; (8007398 <netconn_write_partly+0xe8>)
 80072ec:	4829      	ldr	r0, [pc, #164]	; (8007394 <netconn_write_partly+0xe4>)
 80072ee:	f00c fef1 	bl	80140d4 <iprintf>
 80072f2:	f06f 0305 	mvn.w	r3, #5
 80072f6:	e044      	b.n	8007382 <netconn_write_partly+0xd2>
  if (size == 0) {
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <netconn_write_partly+0x52>
    return ERR_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	e03f      	b.n	8007382 <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	7f1b      	ldrb	r3, [r3, #28]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d104      	bne.n	8007318 <netconn_write_partly+0x68>
 800730e:	78fb      	ldrb	r3, [r7, #3]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <netconn_write_partly+0x6c>
 8007318:	2301      	movs	r3, #1
 800731a:	e000      	b.n	800731e <netconn_write_partly+0x6e>
 800731c:	2300      	movs	r3, #0
 800731e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8007322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007326:	2b00      	cmp	r3, #0
 8007328:	d005      	beq.n	8007336 <netconn_write_partly+0x86>
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	2b00      	cmp	r3, #0
 800732e:	d102      	bne.n	8007336 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8007330:	f06f 0305 	mvn.w	r3, #5
 8007334:	e025      	b.n	8007382 <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800733e:	78fb      	ldrb	r3, [r7, #3]
 8007340:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8007348:	f107 0310 	add.w	r3, r7, #16
 800734c:	4619      	mov	r1, r3
 800734e:	4813      	ldr	r0, [pc, #76]	; (800739c <netconn_write_partly+0xec>)
 8007350:	f7ff fca0 	bl	8006c94 <netconn_apimsg>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800735a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10d      	bne.n	800737e <netconn_write_partly+0xce>
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <netconn_write_partly+0xce>
    if (dontblock) {
 8007368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	e002      	b.n	800737e <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 8007378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800737e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8007382:	4618      	mov	r0, r3
 8007384:	3728      	adds	r7, #40	; 0x28
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	0801551c 	.word	0x0801551c
 8007390:	080157a4 	.word	0x080157a4
 8007394:	08015574 	.word	0x08015574
 8007398:	080157c0 	.word	0x080157c0
 800739c:	08008a51 	.word	0x08008a51

080073a0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b088      	sub	sp, #32
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d109      	bne.n	80073c6 <netconn_close_shutdown+0x26>
 80073b2:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <netconn_close_shutdown+0x50>)
 80073b4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80073b8:	490e      	ldr	r1, [pc, #56]	; (80073f4 <netconn_close_shutdown+0x54>)
 80073ba:	480f      	ldr	r0, [pc, #60]	; (80073f8 <netconn_close_shutdown+0x58>)
 80073bc:	f00c fe8a 	bl	80140d4 <iprintf>
 80073c0:	f06f 030f 	mvn.w	r3, #15
 80073c4:	e00f      	b.n	80073e6 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80073ce:	2329      	movs	r3, #41	; 0x29
 80073d0:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80073d2:	f107 0308 	add.w	r3, r7, #8
 80073d6:	4619      	mov	r1, r3
 80073d8:	4808      	ldr	r0, [pc, #32]	; (80073fc <netconn_close_shutdown+0x5c>)
 80073da:	f7ff fc5b 	bl	8006c94 <netconn_apimsg>
 80073de:	4603      	mov	r3, r0
 80073e0:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 80073e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3720      	adds	r7, #32
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	0801551c 	.word	0x0801551c
 80073f4:	080157e4 	.word	0x080157e4
 80073f8:	08015574 	.word	0x08015574
 80073fc:	08008ce9 	.word	0x08008ce9

08007400 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d105      	bne.n	8007420 <recv_udp+0x20>
 8007414:	4b34      	ldr	r3, [pc, #208]	; (80074e8 <recv_udp+0xe8>)
 8007416:	22b1      	movs	r2, #177	; 0xb1
 8007418:	4934      	ldr	r1, [pc, #208]	; (80074ec <recv_udp+0xec>)
 800741a:	4835      	ldr	r0, [pc, #212]	; (80074f0 <recv_udp+0xf0>)
 800741c:	f00c fe5a 	bl	80140d4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d105      	bne.n	8007432 <recv_udp+0x32>
 8007426:	4b30      	ldr	r3, [pc, #192]	; (80074e8 <recv_udp+0xe8>)
 8007428:	22b2      	movs	r2, #178	; 0xb2
 800742a:	4932      	ldr	r1, [pc, #200]	; (80074f4 <recv_udp+0xf4>)
 800742c:	4830      	ldr	r0, [pc, #192]	; (80074f0 <recv_udp+0xf0>)
 800742e:	f00c fe51 	bl	80140d4 <iprintf>
  conn = (struct netconn *)arg;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d103      	bne.n	8007444 <recv_udp+0x44>
    pbuf_free(p);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f006 f909 	bl	800d654 <pbuf_free>
    return;
 8007442:	e04d      	b.n	80074e0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	429a      	cmp	r2, r3
 800744c:	d005      	beq.n	800745a <recv_udp+0x5a>
 800744e:	4b26      	ldr	r3, [pc, #152]	; (80074e8 <recv_udp+0xe8>)
 8007450:	22ba      	movs	r2, #186	; 0xba
 8007452:	4929      	ldr	r1, [pc, #164]	; (80074f8 <recv_udp+0xf8>)
 8007454:	4826      	ldr	r0, [pc, #152]	; (80074f0 <recv_udp+0xf0>)
 8007456:	f00c fe3d 	bl	80140d4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	3310      	adds	r3, #16
 800745e:	4618      	mov	r0, r3
 8007460:	f00c fc64 	bl	8013d2c <sys_mbox_valid>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d103      	bne.n	8007472 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f006 f8f2 	bl	800d654 <pbuf_free>
    return;
 8007470:	e036      	b.n	80074e0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007472:	2006      	movs	r0, #6
 8007474:	f005 fae8 	bl	800ca48 <memp_malloc>
 8007478:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d103      	bne.n	8007488 <recv_udp+0x88>
    pbuf_free(p);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f006 f8e7 	bl	800d654 <pbuf_free>
    return;
 8007486:	e02b      	b.n	80074e0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <recv_udp+0xa0>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	e000      	b.n	80074a2 <recv_udp+0xa2>
 80074a0:	2300      	movs	r3, #0
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80074aa:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	891b      	ldrh	r3, [r3, #8]
 80074b0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	3310      	adds	r3, #16
 80074b6:	69b9      	ldr	r1, [r7, #24]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f00c fbc2 	bl	8013c42 <sys_mbox_trypost>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <recv_udp+0xcc>
    netbuf_delete(buf);
 80074c4:	69b8      	ldr	r0, [r7, #24]
 80074c6:	f001 fcd5 	bl	8008e74 <netbuf_delete>
    return;
 80074ca:	e009      	b.n	80074e0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <recv_udp+0xe0>
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d8:	8afa      	ldrh	r2, [r7, #22]
 80074da:	2100      	movs	r1, #0
 80074dc:	69f8      	ldr	r0, [r7, #28]
 80074de:	4798      	blx	r3
  }
}
 80074e0:	3720      	adds	r7, #32
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	08015800 	.word	0x08015800
 80074ec:	08015834 	.word	0x08015834
 80074f0:	08015858 	.word	0x08015858
 80074f4:	08015880 	.word	0x08015880
 80074f8:	080158a0 	.word	0x080158a0

080074fc <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b088      	sub	sp, #32
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d105      	bne.n	800751c <recv_tcp+0x20>
 8007510:	4b39      	ldr	r3, [pc, #228]	; (80075f8 <recv_tcp+0xfc>)
 8007512:	22f9      	movs	r2, #249	; 0xf9
 8007514:	4939      	ldr	r1, [pc, #228]	; (80075fc <recv_tcp+0x100>)
 8007516:	483a      	ldr	r0, [pc, #232]	; (8007600 <recv_tcp+0x104>)
 8007518:	f00c fddc 	bl	80140d4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d105      	bne.n	800752e <recv_tcp+0x32>
 8007522:	4b35      	ldr	r3, [pc, #212]	; (80075f8 <recv_tcp+0xfc>)
 8007524:	22fa      	movs	r2, #250	; 0xfa
 8007526:	4937      	ldr	r1, [pc, #220]	; (8007604 <recv_tcp+0x108>)
 8007528:	4835      	ldr	r0, [pc, #212]	; (8007600 <recv_tcp+0x104>)
 800752a:	f00c fdd3 	bl	80140d4 <iprintf>
  conn = (struct netconn *)arg;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d102      	bne.n	800753e <recv_tcp+0x42>
    return ERR_VAL;
 8007538:	f06f 0305 	mvn.w	r3, #5
 800753c:	e057      	b.n	80075ee <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	429a      	cmp	r2, r3
 8007546:	d006      	beq.n	8007556 <recv_tcp+0x5a>
 8007548:	4b2b      	ldr	r3, [pc, #172]	; (80075f8 <recv_tcp+0xfc>)
 800754a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800754e:	492e      	ldr	r1, [pc, #184]	; (8007608 <recv_tcp+0x10c>)
 8007550:	482b      	ldr	r0, [pc, #172]	; (8007600 <recv_tcp+0x104>)
 8007552:	f00c fdbf 	bl	80140d4 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	3310      	adds	r3, #16
 800755a:	4618      	mov	r0, r3
 800755c:	f00c fbe6 	bl	8013d2c <sys_mbox_valid>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10d      	bne.n	8007582 <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d008      	beq.n	800757e <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	891b      	ldrh	r3, [r3, #8]
 8007570:	4619      	mov	r1, r3
 8007572:	68b8      	ldr	r0, [r7, #8]
 8007574:	f006 fe1c 	bl	800e1b0 <tcp_recved>
      pbuf_free(p);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f006 f86b 	bl	800d654 <pbuf_free>
    }
    return ERR_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	e035      	b.n	80075ee <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 8007582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d011      	beq.n	80075ae <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00e      	beq.n	80075ae <recv_tcp+0xb2>
 8007590:	f00c fce4 	bl	8013f5c <sys_arch_protect>
 8007594:	6178      	str	r0, [r7, #20]
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800759c:	f113 0f0c 	cmn.w	r3, #12
 80075a0:	db02      	blt.n	80075a8 <recv_tcp+0xac>
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	78fa      	ldrb	r2, [r7, #3]
 80075a6:	721a      	strb	r2, [r3, #8]
 80075a8:	6978      	ldr	r0, [r7, #20]
 80075aa:	f00c fce5 	bl	8013f78 <sys_arch_unprotect>
  }

  if (p != NULL) {
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <recv_tcp+0xc0>
    len = p->tot_len;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	891b      	ldrh	r3, [r3, #8]
 80075b8:	83fb      	strh	r3, [r7, #30]
 80075ba:	e001      	b.n	80075c0 <recv_tcp+0xc4>
  } else {
    len = 0;
 80075bc:	2300      	movs	r3, #0
 80075be:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	3310      	adds	r3, #16
 80075c4:	6879      	ldr	r1, [r7, #4]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f00c fb3b 	bl	8013c42 <sys_mbox_trypost>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80075d2:	f04f 33ff 	mov.w	r3, #4294967295
 80075d6:	e00a      	b.n	80075ee <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <recv_tcp+0xf0>
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e4:	8bfa      	ldrh	r2, [r7, #30]
 80075e6:	2100      	movs	r1, #0
 80075e8:	69b8      	ldr	r0, [r7, #24]
 80075ea:	4798      	blx	r3
  }

  return ERR_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3720      	adds	r7, #32
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	08015800 	.word	0x08015800
 80075fc:	080158c0 	.word	0x080158c0
 8007600:	08015858 	.word	0x08015858
 8007604:	080158e4 	.word	0x080158e4
 8007608:	08015904 	.word	0x08015904

0800760c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d106      	bne.n	800762e <poll_tcp+0x22>
 8007620:	4b29      	ldr	r3, [pc, #164]	; (80076c8 <poll_tcp+0xbc>)
 8007622:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007626:	4929      	ldr	r1, [pc, #164]	; (80076cc <poll_tcp+0xc0>)
 8007628:	4829      	ldr	r0, [pc, #164]	; (80076d0 <poll_tcp+0xc4>)
 800762a:	f00c fd53 	bl	80140d4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	785b      	ldrb	r3, [r3, #1]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d104      	bne.n	8007640 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007636:	2101      	movs	r1, #1
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f001 f867 	bl	800870c <lwip_netconn_do_writemore>
 800763e:	e016      	b.n	800766e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	785b      	ldrb	r3, [r3, #1]
 8007644:	2b04      	cmp	r3, #4
 8007646:	d112      	bne.n	800766e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00a      	beq.n	8007666 <poll_tcp+0x5a>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	7a5b      	ldrb	r3, [r3, #9]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d005      	beq.n	8007666 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	7a5a      	ldrb	r2, [r3, #9]
 8007660:	3a01      	subs	r2, #1
 8007662:	b2d2      	uxtb	r2, r2
 8007664:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007666:	2101      	movs	r1, #1
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fb6f 	bl	8007d4c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	7f1b      	ldrb	r3, [r3, #28]
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	2b00      	cmp	r3, #0
 8007678:	d021      	beq.n	80076be <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d01d      	beq.n	80076be <poll_tcp+0xb2>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800768a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800768e:	d316      	bcc.n	80076be <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007698:	2b04      	cmp	r3, #4
 800769a:	d810      	bhi.n	80076be <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	7f1b      	ldrb	r3, [r3, #28]
 80076a0:	f023 0310 	bic.w	r3, r3, #16
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d005      	beq.n	80076be <poll_tcp+0xb2>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b6:	2200      	movs	r2, #0
 80076b8:	2102      	movs	r1, #2
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	08015800 	.word	0x08015800
 80076cc:	08015924 	.word	0x08015924
 80076d0:	08015858 	.word	0x08015858

080076d4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	4613      	mov	r3, r2
 80076e0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d106      	bne.n	80076fa <sent_tcp+0x26>
 80076ec:	4b20      	ldr	r3, [pc, #128]	; (8007770 <sent_tcp+0x9c>)
 80076ee:	f240 1261 	movw	r2, #353	; 0x161
 80076f2:	4920      	ldr	r1, [pc, #128]	; (8007774 <sent_tcp+0xa0>)
 80076f4:	4820      	ldr	r0, [pc, #128]	; (8007778 <sent_tcp+0xa4>)
 80076f6:	f00c fced 	bl	80140d4 <iprintf>

  if (conn) {
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d032      	beq.n	8007766 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	785b      	ldrb	r3, [r3, #1]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d104      	bne.n	8007712 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007708:	2101      	movs	r1, #1
 800770a:	6978      	ldr	r0, [r7, #20]
 800770c:	f000 fffe 	bl	800870c <lwip_netconn_do_writemore>
 8007710:	e007      	b.n	8007722 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	2b04      	cmp	r3, #4
 8007718:	d103      	bne.n	8007722 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800771a:	2101      	movs	r1, #1
 800771c:	6978      	ldr	r0, [r7, #20]
 800771e:	f000 fb15 	bl	8007d4c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d01d      	beq.n	8007766 <sent_tcp+0x92>
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007732:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007736:	d316      	bcc.n	8007766 <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007740:	2b04      	cmp	r3, #4
 8007742:	d810      	bhi.n	8007766 <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	7f1b      	ldrb	r3, [r3, #28]
 8007748:	f023 0310 	bic.w	r3, r3, #16
 800774c:	b2da      	uxtb	r2, r3
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007756:	2b00      	cmp	r3, #0
 8007758:	d005      	beq.n	8007766 <sent_tcp+0x92>
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	88fa      	ldrh	r2, [r7, #6]
 8007760:	2102      	movs	r1, #2
 8007762:	6978      	ldr	r0, [r7, #20]
 8007764:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	08015800 	.word	0x08015800
 8007774:	08015924 	.word	0x08015924
 8007778:	08015858 	.word	0x08015858

0800777c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b08a      	sub	sp, #40	; 0x28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	2b00      	cmp	r3, #0
 8007790:	d106      	bne.n	80077a0 <err_tcp+0x24>
 8007792:	4b6c      	ldr	r3, [pc, #432]	; (8007944 <err_tcp+0x1c8>)
 8007794:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8007798:	496b      	ldr	r1, [pc, #428]	; (8007948 <err_tcp+0x1cc>)
 800779a:	486c      	ldr	r0, [pc, #432]	; (800794c <err_tcp+0x1d0>)
 800779c:	f00c fc9a 	bl	80140d4 <iprintf>

  conn->pcb.tcp = NULL;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	2200      	movs	r2, #0
 80077a4:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	785b      	ldrb	r3, [r3, #1]
 80077aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	2200      	movs	r2, #0
 80077b2:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 80077b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d114      	bne.n	80077e6 <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d018      	beq.n	80077f8 <err_tcp+0x7c>
 80077c6:	f00c fbc9 	bl	8013f5c <sys_arch_protect>
 80077ca:	61f8      	str	r0, [r7, #28]
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80077d2:	f113 0f0c 	cmn.w	r3, #12
 80077d6:	db02      	blt.n	80077de <err_tcp+0x62>
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	2200      	movs	r2, #0
 80077dc:	721a      	strb	r2, [r3, #8]
 80077de:	69f8      	ldr	r0, [r7, #28]
 80077e0:	f00c fbca 	bl	8013f78 <sys_arch_unprotect>
 80077e4:	e008      	b.n	80077f8 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 80077e6:	f00c fbb9 	bl	8013f5c <sys_arch_protect>
 80077ea:	61b8      	str	r0, [r7, #24]
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	78fa      	ldrb	r2, [r7, #3]
 80077f0:	721a      	strb	r2, [r3, #8]
 80077f2:	69b8      	ldr	r0, [r7, #24]
 80077f4:	f00c fbc0 	bl	8013f78 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d005      	beq.n	800780c <err_tcp+0x90>
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007804:	2200      	movs	r2, #0
 8007806:	2104      	movs	r1, #4
 8007808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800780a:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007810:	2b00      	cmp	r3, #0
 8007812:	d005      	beq.n	8007820 <err_tcp+0xa4>
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007818:	2200      	movs	r2, #0
 800781a:	2100      	movs	r1, #0
 800781c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800781e:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007824:	2b00      	cmp	r3, #0
 8007826:	d005      	beq.n	8007834 <err_tcp+0xb8>
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	2200      	movs	r2, #0
 800782e:	2102      	movs	r1, #2
 8007830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007832:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	3310      	adds	r3, #16
 8007838:	4618      	mov	r0, r3
 800783a:	f00c fa77 	bl	8013d2c <sys_mbox_valid>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d005      	beq.n	8007850 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	3310      	adds	r3, #16
 8007848:	2100      	movs	r1, #0
 800784a:	4618      	mov	r0, r3
 800784c:	f00c f9f9 	bl	8013c42 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	3314      	adds	r3, #20
 8007854:	4618      	mov	r0, r3
 8007856:	f00c fa69 	bl	8013d2c <sys_mbox_valid>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	3314      	adds	r3, #20
 8007864:	2100      	movs	r1, #0
 8007866:	4618      	mov	r0, r3
 8007868:	f00c f9eb 	bl	8013c42 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800786c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007870:	2b01      	cmp	r3, #1
 8007872:	d007      	beq.n	8007884 <err_tcp+0x108>
 8007874:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007878:	2b04      	cmp	r3, #4
 800787a:	d003      	beq.n	8007884 <err_tcp+0x108>
 800787c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007880:	2b03      	cmp	r3, #3
 8007882:	d14d      	bne.n	8007920 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	7f1b      	ldrb	r3, [r3, #28]
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	bf14      	ite	ne
 8007890:	2301      	movne	r3, #1
 8007892:	2300      	moveq	r3, #0
 8007894:	b2db      	uxtb	r3, r3
 8007896:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	7f1b      	ldrb	r3, [r3, #28]
 800789c:	f023 0304 	bic.w	r3, r3, #4
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d145      	bne.n	8007938 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d106      	bne.n	80078c2 <err_tcp+0x146>
 80078b4:	4b23      	ldr	r3, [pc, #140]	; (8007944 <err_tcp+0x1c8>)
 80078b6:	f240 12b3 	movw	r2, #435	; 0x1b3
 80078ba:	4925      	ldr	r1, [pc, #148]	; (8007950 <err_tcp+0x1d4>)
 80078bc:	4823      	ldr	r0, [pc, #140]	; (800794c <err_tcp+0x1d0>)
 80078be:	f00c fc09 	bl	80140d4 <iprintf>
      conn->current_msg->err = err;
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	78fa      	ldrb	r2, [r7, #3]
 80078c8:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	330c      	adds	r3, #12
 80078d2:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80078d4:	6938      	ldr	r0, [r7, #16]
 80078d6:	f00c fab8 	bl	8013e4a <sys_sem_valid>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d106      	bne.n	80078ee <err_tcp+0x172>
 80078e0:	4b18      	ldr	r3, [pc, #96]	; (8007944 <err_tcp+0x1c8>)
 80078e2:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80078e6:	491b      	ldr	r1, [pc, #108]	; (8007954 <err_tcp+0x1d8>)
 80078e8:	4818      	ldr	r0, [pc, #96]	; (800794c <err_tcp+0x1d0>)
 80078ea:	f00c fbf3 	bl	80140d4 <iprintf>
      conn->current_msg = NULL;
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	2200      	movs	r2, #0
 80078f2:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00e      	beq.n	8007918 <err_tcp+0x19c>
 80078fa:	f00c fb2f 	bl	8013f5c <sys_arch_protect>
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007906:	f113 0f0c 	cmn.w	r3, #12
 800790a:	db02      	blt.n	8007912 <err_tcp+0x196>
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	78fa      	ldrb	r2, [r7, #3]
 8007910:	721a      	strb	r2, [r3, #8]
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f00c fb30 	bl	8013f78 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8007918:	6938      	ldr	r0, [r7, #16]
 800791a:	f00c fa7c 	bl	8013e16 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800791e:	e00b      	b.n	8007938 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <err_tcp+0x1be>
 8007928:	4b06      	ldr	r3, [pc, #24]	; (8007944 <err_tcp+0x1c8>)
 800792a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800792e:	490a      	ldr	r1, [pc, #40]	; (8007958 <err_tcp+0x1dc>)
 8007930:	4806      	ldr	r0, [pc, #24]	; (800794c <err_tcp+0x1d0>)
 8007932:	f00c fbcf 	bl	80140d4 <iprintf>
  }
}
 8007936:	e000      	b.n	800793a <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 8007938:	bf00      	nop
}
 800793a:	bf00      	nop
 800793c:	3728      	adds	r7, #40	; 0x28
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	08015800 	.word	0x08015800
 8007948:	08015924 	.word	0x08015924
 800794c:	08015858 	.word	0x08015858
 8007950:	08015934 	.word	0x08015934
 8007954:	08015950 	.word	0x08015950
 8007958:	0801596c 	.word	0x0801596c

0800795c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f007 faf5 	bl	800ef5c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8007972:	490a      	ldr	r1, [pc, #40]	; (800799c <setup_tcp+0x40>)
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f007 fb01 	bl	800ef7c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800797a:	4909      	ldr	r1, [pc, #36]	; (80079a0 <setup_tcp+0x44>)
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f007 fb1f 	bl	800efc0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8007982:	2202      	movs	r2, #2
 8007984:	4907      	ldr	r1, [pc, #28]	; (80079a4 <setup_tcp+0x48>)
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f007 fb72 	bl	800f070 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800798c:	4906      	ldr	r1, [pc, #24]	; (80079a8 <setup_tcp+0x4c>)
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f007 fb36 	bl	800f000 <tcp_err>
}
 8007994:	bf00      	nop
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	080074fd 	.word	0x080074fd
 80079a0:	080076d5 	.word	0x080076d5
 80079a4:	0800760d 	.word	0x0800760d
 80079a8:	0800777d 	.word	0x0800777d

080079ac <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80079ac:	b590      	push	{r4, r7, lr}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d006      	beq.n	80079d0 <pcb_new+0x24>
 80079c2:	4b2b      	ldr	r3, [pc, #172]	; (8007a70 <pcb_new+0xc4>)
 80079c4:	f44f 720b 	mov.w	r2, #556	; 0x22c
 80079c8:	492a      	ldr	r1, [pc, #168]	; (8007a74 <pcb_new+0xc8>)
 80079ca:	482b      	ldr	r0, [pc, #172]	; (8007a78 <pcb_new+0xcc>)
 80079cc:	f00c fb82 	bl	80140d4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079da:	2b10      	cmp	r3, #16
 80079dc:	d022      	beq.n	8007a24 <pcb_new+0x78>
 80079de:	2b20      	cmp	r3, #32
 80079e0:	d133      	bne.n	8007a4a <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681c      	ldr	r4, [r3, #0]
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f00b ffcc 	bl	8013986 <udp_new_ip_type>
 80079ee:	4603      	mov	r3, r0
 80079f0:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d02a      	beq.n	8007a52 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2b22      	cmp	r3, #34	; 0x22
 8007a04:	d104      	bne.n	8007a10 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6858      	ldr	r0, [r3, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	4917      	ldr	r1, [pc, #92]	; (8007a7c <pcb_new+0xd0>)
 8007a1e:	f00b ff57 	bl	80138d0 <udp_recv>
    }
    break;
 8007a22:	e016      	b.n	8007a52 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681c      	ldr	r4, [r3, #0]
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f007 fa88 	bl	800ef40 <tcp_new_ip_type>
 8007a30:	4603      	mov	r3, r0
 8007a32:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00b      	beq.n	8007a56 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff ff8a 	bl	800795c <setup_tcp>
    }
    break;
 8007a48:	e005      	b.n	8007a56 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	22fa      	movs	r2, #250	; 0xfa
 8007a4e:	711a      	strb	r2, [r3, #4]
    return;
 8007a50:	e00a      	b.n	8007a68 <pcb_new+0xbc>
    break;
 8007a52:	bf00      	nop
 8007a54:	e000      	b.n	8007a58 <pcb_new+0xac>
    break;
 8007a56:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d102      	bne.n	8007a68 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	22ff      	movs	r2, #255	; 0xff
 8007a66:	711a      	strb	r2, [r3, #4]
  }
}
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd90      	pop	{r4, r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	08015800 	.word	0x08015800
 8007a74:	08015988 	.word	0x08015988
 8007a78:	08015858 	.word	0x08015858
 8007a7c:	08007401 	.word	0x08007401

08007a80 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d102      	bne.n	8007aa2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f7ff ff85 	bl	80079ac <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d012      	beq.n	8007ad0 <lwip_netconn_do_newconn+0x50>
 8007aaa:	f00c fa57 	bl	8013f5c <sys_arch_protect>
 8007aae:	60b8      	str	r0, [r7, #8]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007ab8:	f113 0f0c 	cmn.w	r3, #12
 8007abc:	db05      	blt.n	8007aca <lwip_netconn_do_newconn+0x4a>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007ac8:	721a      	strb	r2, [r3, #8]
 8007aca:	68b8      	ldr	r0, [r7, #8]
 8007acc:	f00c fa54 	bl	8013f78 <sys_arch_unprotect>
}
 8007ad0:	bf00      	nop
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	6039      	str	r1, [r7, #0]
 8007ae2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007ae4:	2007      	movs	r0, #7
 8007ae6:	f004 ffaf 	bl	800ca48 <memp_malloc>
 8007aea:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <netconn_alloc+0x1e>
    return NULL;
 8007af2:	2300      	movs	r3, #0
 8007af4:	e055      	b.n	8007ba2 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2200      	movs	r2, #0
 8007afa:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	79fa      	ldrb	r2, [r7, #7]
 8007b00:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	2200      	movs	r2, #0
 8007b06:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8007b08:	79fb      	ldrb	r3, [r7, #7]
 8007b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b0e:	2b10      	cmp	r3, #16
 8007b10:	d004      	beq.n	8007b1c <netconn_alloc+0x44>
 8007b12:	2b20      	cmp	r3, #32
 8007b14:	d105      	bne.n	8007b22 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 8007b16:	2306      	movs	r3, #6
 8007b18:	60fb      	str	r3, [r7, #12]
    break;
 8007b1a:	e00a      	b.n	8007b32 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8007b1c:	2306      	movs	r3, #6
 8007b1e:	60fb      	str	r3, [r7, #12]
    break;
 8007b20:	e007      	b.n	8007b32 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8007b22:	4b22      	ldr	r3, [pc, #136]	; (8007bac <netconn_alloc+0xd4>)
 8007b24:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8007b28:	4921      	ldr	r1, [pc, #132]	; (8007bb0 <netconn_alloc+0xd8>)
 8007b2a:	4822      	ldr	r0, [pc, #136]	; (8007bb4 <netconn_alloc+0xdc>)
 8007b2c:	f00c fad2 	bl	80140d4 <iprintf>
    goto free_and_return;
 8007b30:	e032      	b.n	8007b98 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	3310      	adds	r3, #16
 8007b36:	68f9      	ldr	r1, [r7, #12]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f00c f839 	bl	8013bb0 <sys_mbox_new>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d128      	bne.n	8007b96 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	330c      	adds	r3, #12
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f00c f90a 	bl	8013d64 <sys_sem_new>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d005      	beq.n	8007b62 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	3310      	adds	r3, #16
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f00c f84a 	bl	8013bf4 <sys_mbox_free>
    goto free_and_return;
 8007b60:	e01a      	b.n	8007b98 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	3314      	adds	r3, #20
 8007b66:	4618      	mov	r0, r3
 8007b68:	f00c f8f0 	bl	8013d4c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f04f 32ff 	mov.w	r2, #4294967295
 8007b78:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2200      	movs	r2, #0
 8007b84:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	771a      	strb	r2, [r3, #28]
  return conn;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	e005      	b.n	8007ba2 <netconn_alloc+0xca>
    goto free_and_return;
 8007b96:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8007b98:	68b9      	ldr	r1, [r7, #8]
 8007b9a:	2007      	movs	r0, #7
 8007b9c:	f004 ffa6 	bl	800caec <memp_free>
  return NULL;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	08015800 	.word	0x08015800
 8007bb0:	080159a8 	.word	0x080159a8
 8007bb4:	08015858 	.word	0x08015858

08007bb8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d006      	beq.n	8007bd6 <netconn_free+0x1e>
 8007bc8:	4b1b      	ldr	r3, [pc, #108]	; (8007c38 <netconn_free+0x80>)
 8007bca:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8007bce:	491b      	ldr	r1, [pc, #108]	; (8007c3c <netconn_free+0x84>)
 8007bd0:	481b      	ldr	r0, [pc, #108]	; (8007c40 <netconn_free+0x88>)
 8007bd2:	f00c fa7f 	bl	80140d4 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3310      	adds	r3, #16
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f00c f8a6 	bl	8013d2c <sys_mbox_valid>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d006      	beq.n	8007bf4 <netconn_free+0x3c>
 8007be6:	4b14      	ldr	r3, [pc, #80]	; (8007c38 <netconn_free+0x80>)
 8007be8:	f240 22e2 	movw	r2, #738	; 0x2e2
 8007bec:	4915      	ldr	r1, [pc, #84]	; (8007c44 <netconn_free+0x8c>)
 8007bee:	4814      	ldr	r0, [pc, #80]	; (8007c40 <netconn_free+0x88>)
 8007bf0:	f00c fa70 	bl	80140d4 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	3314      	adds	r3, #20
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f00c f897 	bl	8013d2c <sys_mbox_valid>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d006      	beq.n	8007c12 <netconn_free+0x5a>
 8007c04:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <netconn_free+0x80>)
 8007c06:	f240 22e5 	movw	r2, #741	; 0x2e5
 8007c0a:	490f      	ldr	r1, [pc, #60]	; (8007c48 <netconn_free+0x90>)
 8007c0c:	480c      	ldr	r0, [pc, #48]	; (8007c40 <netconn_free+0x88>)
 8007c0e:	f00c fa61 	bl	80140d4 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	330c      	adds	r3, #12
 8007c16:	4618      	mov	r0, r3
 8007c18:	f00c f90a 	bl	8013e30 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	330c      	adds	r3, #12
 8007c20:	4618      	mov	r0, r3
 8007c22:	f00c f922 	bl	8013e6a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8007c26:	6879      	ldr	r1, [r7, #4]
 8007c28:	2007      	movs	r0, #7
 8007c2a:	f004 ff5f 	bl	800caec <memp_free>
}
 8007c2e:	bf00      	nop
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	08015800 	.word	0x08015800
 8007c3c:	080159d0 	.word	0x080159d0
 8007c40:	08015858 	.word	0x08015858
 8007c44:	08015a00 	.word	0x08015a00
 8007c48:	08015a3c 	.word	0x08015a3c

08007c4c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3310      	adds	r3, #16
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f00c f867 	bl	8013d2c <sys_mbox_valid>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d035      	beq.n	8007cd0 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8007c64:	e01e      	b.n	8007ca4 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c6e:	2b10      	cmp	r3, #16
 8007c70:	d114      	bne.n	8007c9c <netconn_drain+0x50>
        if (mem != NULL) {
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d015      	beq.n	8007ca4 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d007      	beq.n	8007c94 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	891b      	ldrh	r3, [r3, #8]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	f006 fa8e 	bl	800e1b0 <tcp_recved>
          }
          pbuf_free(p);
 8007c94:	6978      	ldr	r0, [r7, #20]
 8007c96:	f005 fcdd 	bl	800d654 <pbuf_free>
 8007c9a:	e003      	b.n	8007ca4 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f001 f8e8 	bl	8008e74 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3310      	adds	r3, #16
 8007ca8:	f107 020c 	add.w	r2, r7, #12
 8007cac:	4611      	mov	r1, r2
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f00c f820 	bl	8013cf4 <sys_arch_mbox_tryfetch>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cba:	d1d4      	bne.n	8007c66 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3310      	adds	r3, #16
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f00b ff97 	bl	8013bf4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	3310      	adds	r3, #16
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f00c f83e 	bl	8013d4c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3314      	adds	r3, #20
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f00c f829 	bl	8013d2c <sys_mbox_valid>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d02e      	beq.n	8007d3e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007ce0:	e017      	b.n	8007d12 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4a18      	ldr	r2, [pc, #96]	; (8007d48 <netconn_drain+0xfc>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d013      	beq.n	8007d12 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 8007cee:	6938      	ldr	r0, [r7, #16]
 8007cf0:	f7ff ffac 	bl	8007c4c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d007      	beq.n	8007d0c <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f006 f9f9 	bl	800e0f8 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 8007d0c:	6938      	ldr	r0, [r7, #16]
 8007d0e:	f7ff ff53 	bl	8007bb8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	3314      	adds	r3, #20
 8007d16:	f107 020c 	add.w	r2, r7, #12
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f00b ffe9 	bl	8013cf4 <sys_arch_mbox_tryfetch>
 8007d22:	4603      	mov	r3, r0
 8007d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d28:	d1db      	bne.n	8007ce2 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3314      	adds	r3, #20
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f00b ff60 	bl	8013bf4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3314      	adds	r3, #20
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f00c f807 	bl	8013d4c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8007d3e:	bf00      	nop
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	2000741c 	.word	0x2000741c

08007d4c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d106      	bne.n	8007d70 <lwip_netconn_do_close_internal+0x24>
 8007d62:	4baa      	ldr	r3, [pc, #680]	; (800800c <lwip_netconn_do_close_internal+0x2c0>)
 8007d64:	f240 3243 	movw	r2, #835	; 0x343
 8007d68:	49a9      	ldr	r1, [pc, #676]	; (8008010 <lwip_netconn_do_close_internal+0x2c4>)
 8007d6a:	48aa      	ldr	r0, [pc, #680]	; (8008014 <lwip_netconn_do_close_internal+0x2c8>)
 8007d6c:	f00c f9b2 	bl	80140d4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d78:	2b10      	cmp	r3, #16
 8007d7a:	d006      	beq.n	8007d8a <lwip_netconn_do_close_internal+0x3e>
 8007d7c:	4ba3      	ldr	r3, [pc, #652]	; (800800c <lwip_netconn_do_close_internal+0x2c0>)
 8007d7e:	f44f 7251 	mov.w	r2, #836	; 0x344
 8007d82:	49a5      	ldr	r1, [pc, #660]	; (8008018 <lwip_netconn_do_close_internal+0x2cc>)
 8007d84:	48a3      	ldr	r0, [pc, #652]	; (8008014 <lwip_netconn_do_close_internal+0x2c8>)
 8007d86:	f00c f9a5 	bl	80140d4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	785b      	ldrb	r3, [r3, #1]
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d006      	beq.n	8007da0 <lwip_netconn_do_close_internal+0x54>
 8007d92:	4b9e      	ldr	r3, [pc, #632]	; (800800c <lwip_netconn_do_close_internal+0x2c0>)
 8007d94:	f240 3245 	movw	r2, #837	; 0x345
 8007d98:	49a0      	ldr	r1, [pc, #640]	; (800801c <lwip_netconn_do_close_internal+0x2d0>)
 8007d9a:	489e      	ldr	r0, [pc, #632]	; (8008014 <lwip_netconn_do_close_internal+0x2c8>)
 8007d9c:	f00c f99a 	bl	80140d4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d106      	bne.n	8007db6 <lwip_netconn_do_close_internal+0x6a>
 8007da8:	4b98      	ldr	r3, [pc, #608]	; (800800c <lwip_netconn_do_close_internal+0x2c0>)
 8007daa:	f240 3246 	movw	r2, #838	; 0x346
 8007dae:	499c      	ldr	r1, [pc, #624]	; (8008020 <lwip_netconn_do_close_internal+0x2d4>)
 8007db0:	4898      	ldr	r0, [pc, #608]	; (8008014 <lwip_netconn_do_close_internal+0x2c8>)
 8007db2:	f00c f98f 	bl	80140d4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d106      	bne.n	8007dcc <lwip_netconn_do_close_internal+0x80>
 8007dbe:	4b93      	ldr	r3, [pc, #588]	; (800800c <lwip_netconn_do_close_internal+0x2c0>)
 8007dc0:	f240 3247 	movw	r2, #839	; 0x347
 8007dc4:	4997      	ldr	r1, [pc, #604]	; (8008024 <lwip_netconn_do_close_internal+0x2d8>)
 8007dc6:	4893      	ldr	r0, [pc, #588]	; (8008014 <lwip_netconn_do_close_internal+0x2c8>)
 8007dc8:	f00c f984 	bl	80140d4 <iprintf>

  tpcb = conn->pcb.tcp;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	7a1b      	ldrb	r3, [r3, #8]
 8007dd8:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	d102      	bne.n	8007df6 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8007df0:	2301      	movs	r3, #1
 8007df2:	77bb      	strb	r3, [r7, #30]
 8007df4:	e01f      	b.n	8007e36 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8007df6:	7dbb      	ldrb	r3, [r7, #22]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00e      	beq.n	8007e1a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8007e00:	2b05      	cmp	r3, #5
 8007e02:	d007      	beq.n	8007e14 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8007e08:	2b06      	cmp	r3, #6
 8007e0a:	d003      	beq.n	8007e14 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d102      	bne.n	8007e1a <lwip_netconn_do_close_internal+0xce>
    close = 1;
 8007e14:	2301      	movs	r3, #1
 8007e16:	77bb      	strb	r3, [r7, #30]
 8007e18:	e00d      	b.n	8007e36 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8007e1a:	7d7b      	ldrb	r3, [r7, #21]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d008      	beq.n	8007e32 <lwip_netconn_do_close_internal+0xe6>
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	7e9b      	ldrb	r3, [r3, #26]
 8007e24:	f003 0310 	and.w	r3, r3, #16
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	77bb      	strb	r3, [r7, #30]
 8007e30:	e001      	b.n	8007e36 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 8007e36:	7fbb      	ldrb	r3, [r7, #30]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	69b8      	ldr	r0, [r7, #24]
 8007e40:	f007 f88c 	bl	800ef5c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	7d1b      	ldrb	r3, [r3, #20]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d104      	bne.n	8007e56 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	69b8      	ldr	r0, [r7, #24]
 8007e50:	f007 f8f8 	bl	800f044 <tcp_accept>
 8007e54:	e01d      	b.n	8007e92 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8007e56:	7dbb      	ldrb	r3, [r7, #22]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d007      	beq.n	8007e6c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	69b8      	ldr	r0, [r7, #24]
 8007e60:	f007 f88c 	bl	800ef7c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007e64:	2100      	movs	r1, #0
 8007e66:	69b8      	ldr	r0, [r7, #24]
 8007e68:	f007 f8ec 	bl	800f044 <tcp_accept>
    }
    if (shut_tx) {
 8007e6c:	7d7b      	ldrb	r3, [r7, #21]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8007e72:	2100      	movs	r1, #0
 8007e74:	69b8      	ldr	r0, [r7, #24]
 8007e76:	f007 f8a3 	bl	800efc0 <tcp_sent>
    }
    if (close) {
 8007e7a:	7fbb      	ldrb	r3, [r7, #30]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d008      	beq.n	8007e92 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8007e80:	2200      	movs	r2, #0
 8007e82:	2100      	movs	r1, #0
 8007e84:	69b8      	ldr	r0, [r7, #24]
 8007e86:	f007 f8f3 	bl	800f070 <tcp_poll>
      tcp_err(tpcb, NULL);
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	69b8      	ldr	r0, [r7, #24]
 8007e8e:	f007 f8b7 	bl	800f000 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 8007e92:	7fbb      	ldrb	r3, [r7, #30]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d005      	beq.n	8007ea4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8007e98:	69b8      	ldr	r0, [r7, #24]
 8007e9a:	f006 f81b 	bl	800ded4 <tcp_close>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	77fb      	strb	r3, [r7, #31]
 8007ea2:	e007      	b.n	8007eb4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8007ea4:	7dbb      	ldrb	r3, [r7, #22]
 8007ea6:	7d7a      	ldrb	r2, [r7, #21]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	69b8      	ldr	r0, [r7, #24]
 8007eac:	f006 f82a 	bl	800df04 <tcp_shutdown>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 8007eb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d102      	bne.n	8007ec2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	777b      	strb	r3, [r7, #29]
 8007ec0:	e016      	b.n	8007ef0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8007ec2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eca:	d10f      	bne.n	8007eec <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	7a5b      	ldrb	r3, [r3, #9]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10c      	bne.n	8007ef0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	777b      	strb	r3, [r7, #29]
        if (close) {
 8007eda:	7fbb      	ldrb	r3, [r7, #30]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d007      	beq.n	8007ef0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8007ee0:	69b8      	ldr	r0, [r7, #24]
 8007ee2:	f006 f909 	bl	800e0f8 <tcp_abort>
          err = ERR_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	77fb      	strb	r3, [r7, #31]
 8007eea:	e001      	b.n	8007ef0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8007eec:	2301      	movs	r3, #1
 8007eee:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 8007ef0:	7f7b      	ldrb	r3, [r7, #29]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d056      	beq.n	8007fa4 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	330c      	adds	r3, #12
 8007efe:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	7ffa      	ldrb	r2, [r7, #31]
 8007f06:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8007f14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d129      	bne.n	8007f70 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8007f1c:	7fbb      	ldrb	r3, [r7, #30]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00c      	beq.n	8007f3c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d005      	beq.n	8007f3c <lwip_netconn_do_close_internal+0x1f0>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f34:	2200      	movs	r2, #0
 8007f36:	2104      	movs	r1, #4
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	4798      	blx	r3
      }
      if (shut_rx) {
 8007f3c:	7dbb      	ldrb	r3, [r7, #22]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d009      	beq.n	8007f56 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d005      	beq.n	8007f56 <lwip_netconn_do_close_internal+0x20a>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	2200      	movs	r2, #0
 8007f50:	2100      	movs	r1, #0
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	4798      	blx	r3
      }
      if (shut_tx) {
 8007f56:	7d7b      	ldrb	r3, [r7, #21]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d009      	beq.n	8007f70 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d005      	beq.n	8007f70 <lwip_netconn_do_close_internal+0x224>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2102      	movs	r1, #2
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00e      	beq.n	8007f94 <lwip_netconn_do_close_internal+0x248>
 8007f76:	f00b fff1 	bl	8013f5c <sys_arch_protect>
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007f82:	f113 0f0c 	cmn.w	r3, #12
 8007f86:	db02      	blt.n	8007f8e <lwip_netconn_do_close_internal+0x242>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	7ffa      	ldrb	r2, [r7, #31]
 8007f8c:	721a      	strb	r2, [r3, #8]
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f00b fff2 	bl	8013f78 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8007f9a:	6938      	ldr	r0, [r7, #16]
 8007f9c:	f00b ff3b 	bl	8013e16 <sys_sem_signal>
    }
    return ERR_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	e02e      	b.n	8008002 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 8007fa4:	7f7b      	ldrb	r3, [r7, #29]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d11e      	bne.n	8007fe8 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	7d1b      	ldrb	r3, [r3, #20]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d106      	bne.n	8007fc0 <lwip_netconn_do_close_internal+0x274>
 8007fb2:	4b16      	ldr	r3, [pc, #88]	; (800800c <lwip_netconn_do_close_internal+0x2c0>)
 8007fb4:	f240 32e3 	movw	r2, #995	; 0x3e3
 8007fb8:	491b      	ldr	r1, [pc, #108]	; (8008028 <lwip_netconn_do_close_internal+0x2dc>)
 8007fba:	4816      	ldr	r0, [pc, #88]	; (8008014 <lwip_netconn_do_close_internal+0x2c8>)
 8007fbc:	f00c f88a 	bl	80140d4 <iprintf>
    if (shut_tx) {
 8007fc0:	7d7b      	ldrb	r3, [r7, #21]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 8007fc6:	4919      	ldr	r1, [pc, #100]	; (800802c <lwip_netconn_do_close_internal+0x2e0>)
 8007fc8:	69b8      	ldr	r0, [r7, #24]
 8007fca:	f006 fff9 	bl	800efc0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8007fce:	2201      	movs	r2, #1
 8007fd0:	4917      	ldr	r1, [pc, #92]	; (8008030 <lwip_netconn_do_close_internal+0x2e4>)
 8007fd2:	69b8      	ldr	r0, [r7, #24]
 8007fd4:	f007 f84c 	bl	800f070 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8007fd8:	4916      	ldr	r1, [pc, #88]	; (8008034 <lwip_netconn_do_close_internal+0x2e8>)
 8007fda:	69b8      	ldr	r0, [r7, #24]
 8007fdc:	f007 f810 	bl	800f000 <tcp_err>
    tcp_arg(tpcb, conn);
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	69b8      	ldr	r0, [r7, #24]
 8007fe4:	f006 ffba 	bl	800ef5c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8007fe8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d106      	bne.n	8007ffe <lwip_netconn_do_close_internal+0x2b2>
 8007ff0:	4b06      	ldr	r3, [pc, #24]	; (800800c <lwip_netconn_do_close_internal+0x2c0>)
 8007ff2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8007ff6:	4910      	ldr	r1, [pc, #64]	; (8008038 <lwip_netconn_do_close_internal+0x2ec>)
 8007ff8:	4806      	ldr	r0, [pc, #24]	; (8008014 <lwip_netconn_do_close_internal+0x2c8>)
 8007ffa:	f00c f86b 	bl	80140d4 <iprintf>
  return err;
 8007ffe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3720      	adds	r7, #32
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	08015800 	.word	0x08015800
 8008010:	08015a78 	.word	0x08015a78
 8008014:	08015858 	.word	0x08015858
 8008018:	08015a88 	.word	0x08015a88
 800801c:	08015aa8 	.word	0x08015aa8
 8008020:	08015acc 	.word	0x08015acc
 8008024:	08015934 	.word	0x08015934
 8008028:	08015ae0 	.word	0x08015ae0
 800802c:	080076d5 	.word	0x080076d5
 8008030:	0800760d 	.word	0x0800760d
 8008034:	0800777d 	.word	0x0800777d
 8008038:	08015b04 	.word	0x08015b04

0800803c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008050:	7cfb      	ldrb	r3, [r7, #19]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00d      	beq.n	8008072 <lwip_netconn_do_delconn+0x36>
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008060:	2b10      	cmp	r3, #16
 8008062:	d006      	beq.n	8008072 <lwip_netconn_do_delconn+0x36>
 8008064:	4b6f      	ldr	r3, [pc, #444]	; (8008224 <lwip_netconn_do_delconn+0x1e8>)
 8008066:	f240 4201 	movw	r2, #1025	; 0x401
 800806a:	496f      	ldr	r1, [pc, #444]	; (8008228 <lwip_netconn_do_delconn+0x1ec>)
 800806c:	486f      	ldr	r0, [pc, #444]	; (800822c <lwip_netconn_do_delconn+0x1f0>)
 800806e:	f00c f831 	bl	80140d4 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8008072:	7cfb      	ldrb	r3, [r7, #19]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d005      	beq.n	8008084 <lwip_netconn_do_delconn+0x48>
 8008078:	7cfb      	ldrb	r3, [r7, #19]
 800807a:	2b02      	cmp	r3, #2
 800807c:	d002      	beq.n	8008084 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800807e:	7cfb      	ldrb	r3, [r7, #19]
 8008080:	2b03      	cmp	r3, #3
 8008082:	d109      	bne.n	8008098 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8008084:	7cfb      	ldrb	r3, [r7, #19]
 8008086:	2b03      	cmp	r3, #3
 8008088:	d10a      	bne.n	80080a0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	7f1b      	ldrb	r3, [r3, #28]
 8008090:	f003 0304 	and.w	r3, r3, #4
 8008094:	2b00      	cmp	r3, #0
 8008096:	d103      	bne.n	80080a0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	22fb      	movs	r2, #251	; 0xfb
 800809c:	711a      	strb	r2, [r3, #4]
 800809e:	e09c      	b.n	80081da <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80080a0:	7cfb      	ldrb	r3, [r7, #19]
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d10d      	bne.n	80080c2 <lwip_netconn_do_delconn+0x86>
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	7f1b      	ldrb	r3, [r3, #28]
 80080ac:	f003 0304 	and.w	r3, r3, #4
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d106      	bne.n	80080c2 <lwip_netconn_do_delconn+0x86>
 80080b4:	4b5b      	ldr	r3, [pc, #364]	; (8008224 <lwip_netconn_do_delconn+0x1e8>)
 80080b6:	f240 421f 	movw	r2, #1055	; 0x41f
 80080ba:	495d      	ldr	r1, [pc, #372]	; (8008230 <lwip_netconn_do_delconn+0x1f4>)
 80080bc:	485b      	ldr	r0, [pc, #364]	; (800822c <lwip_netconn_do_delconn+0x1f0>)
 80080be:	f00c f809 	bl	80140d4 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	2200      	movs	r2, #0
 80080c6:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff fdbd 	bl	8007c4c <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d064      	beq.n	80081a6 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080e6:	2b10      	cmp	r3, #16
 80080e8:	d00e      	beq.n	8008108 <lwip_netconn_do_delconn+0xcc>
 80080ea:	2b20      	cmp	r3, #32
 80080ec:	d000      	beq.n	80080f0 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 80080ee:	e056      	b.n	800819e <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	4618      	mov	r0, r3
 8008102:	f00b fbf7 	bl	80138f4 <udp_remove>
        break;
 8008106:	e04a      	b.n	800819e <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	2b00      	cmp	r3, #0
 8008110:	d104      	bne.n	800811c <lwip_netconn_do_delconn+0xe0>
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d006      	beq.n	800812a <lwip_netconn_do_delconn+0xee>
 800811c:	4b41      	ldr	r3, [pc, #260]	; (8008224 <lwip_netconn_do_delconn+0x1e8>)
 800811e:	f240 4235 	movw	r2, #1077	; 0x435
 8008122:	4944      	ldr	r1, [pc, #272]	; (8008234 <lwip_netconn_do_delconn+0x1f8>)
 8008124:	4841      	ldr	r0, [pc, #260]	; (800822c <lwip_netconn_do_delconn+0x1f0>)
 8008126:	f00b ffd5 	bl	80140d4 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2204      	movs	r2, #4
 8008130:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2203      	movs	r2, #3
 8008136:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2100      	movs	r1, #0
 8008146:	4618      	mov	r0, r3
 8008148:	f7ff fe00 	bl	8007d4c <lwip_netconn_do_close_internal>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d064      	beq.n	800821c <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	785b      	ldrb	r3, [r3, #1]
 8008158:	2b04      	cmp	r3, #4
 800815a:	d006      	beq.n	800816a <lwip_netconn_do_delconn+0x12e>
 800815c:	4b31      	ldr	r3, [pc, #196]	; (8008224 <lwip_netconn_do_delconn+0x1e8>)
 800815e:	f240 423b 	movw	r2, #1083	; 0x43b
 8008162:	4935      	ldr	r1, [pc, #212]	; (8008238 <lwip_netconn_do_delconn+0x1fc>)
 8008164:	4831      	ldr	r0, [pc, #196]	; (800822c <lwip_netconn_do_delconn+0x1f0>)
 8008166:	f00b ffb5 	bl	80140d4 <iprintf>
          UNLOCK_TCPIP_CORE();
 800816a:	4834      	ldr	r0, [pc, #208]	; (800823c <lwip_netconn_do_delconn+0x200>)
 800816c:	f00b fec3 	bl	8013ef6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	330c      	adds	r3, #12
 8008176:	2100      	movs	r1, #0
 8008178:	4618      	mov	r0, r3
 800817a:	f00b fe1b 	bl	8013db4 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800817e:	482f      	ldr	r0, [pc, #188]	; (800823c <lwip_netconn_do_delconn+0x200>)
 8008180:	f00b feaa 	bl	8013ed8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	785b      	ldrb	r3, [r3, #1]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d046      	beq.n	800821c <lwip_netconn_do_delconn+0x1e0>
 800818e:	4b25      	ldr	r3, [pc, #148]	; (8008224 <lwip_netconn_do_delconn+0x1e8>)
 8008190:	f240 423f 	movw	r2, #1087	; 0x43f
 8008194:	4928      	ldr	r1, [pc, #160]	; (8008238 <lwip_netconn_do_delconn+0x1fc>)
 8008196:	4825      	ldr	r0, [pc, #148]	; (800822c <lwip_netconn_do_delconn+0x1f0>)
 8008198:	f00b ff9c 	bl	80140d4 <iprintf>
        return;
 800819c:	e03e      	b.n	800821c <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2200      	movs	r2, #0
 80081a4:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <lwip_netconn_do_delconn+0x184>
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	6810      	ldr	r0, [r2, #0]
 80081ba:	2200      	movs	r2, #0
 80081bc:	2100      	movs	r1, #0
 80081be:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d007      	beq.n	80081da <lwip_netconn_do_delconn+0x19e>
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	6810      	ldr	r0, [r2, #0]
 80081d4:	2200      	movs	r2, #0
 80081d6:	2102      	movs	r1, #2
 80081d8:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	330c      	adds	r3, #12
 80081e0:	4618      	mov	r0, r3
 80081e2:	f00b fe32 	bl	8013e4a <sys_sem_valid>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d018      	beq.n	800821e <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d014      	beq.n	800821e <lwip_netconn_do_delconn+0x1e2>
 80081f4:	f00b feb2 	bl	8013f5c <sys_arch_protect>
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008202:	f113 0f0c 	cmn.w	r3, #12
 8008206:	db05      	blt.n	8008214 <lwip_netconn_do_delconn+0x1d8>
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008212:	721a      	strb	r2, [r3, #8]
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f00b feaf 	bl	8013f78 <sys_arch_unprotect>
 800821a:	e000      	b.n	800821e <lwip_netconn_do_delconn+0x1e2>
        return;
 800821c:	bf00      	nop
  }
}
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	08015800 	.word	0x08015800
 8008228:	08015b14 	.word	0x08015b14
 800822c:	08015858 	.word	0x08015858
 8008230:	08015b28 	.word	0x08015b28
 8008234:	08015b48 	.word	0x08015b48
 8008238:	08015b64 	.word	0x08015b64
 800823c:	20007420 	.word	0x20007420

08008240 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
 800824e:	2300      	movs	r3, #0
 8008250:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d102      	bne.n	8008262 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800825c:	f06f 0305 	mvn.w	r3, #5
 8008260:	e082      	b.n	8008368 <lwip_netconn_do_connected+0x128>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	785b      	ldrb	r3, [r3, #1]
 8008266:	2b03      	cmp	r3, #3
 8008268:	d006      	beq.n	8008278 <lwip_netconn_do_connected+0x38>
 800826a:	4b41      	ldr	r3, [pc, #260]	; (8008370 <lwip_netconn_do_connected+0x130>)
 800826c:	f44f 6293 	mov.w	r2, #1176	; 0x498
 8008270:	4940      	ldr	r1, [pc, #256]	; (8008374 <lwip_netconn_do_connected+0x134>)
 8008272:	4841      	ldr	r0, [pc, #260]	; (8008378 <lwip_netconn_do_connected+0x138>)
 8008274:	f00b ff2e 	bl	80140d4 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10c      	bne.n	800829a <lwip_netconn_do_connected+0x5a>
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	7f1b      	ldrb	r3, [r3, #28]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	d106      	bne.n	800829a <lwip_netconn_do_connected+0x5a>
 800828c:	4b38      	ldr	r3, [pc, #224]	; (8008370 <lwip_netconn_do_connected+0x130>)
 800828e:	f240 429a 	movw	r2, #1178	; 0x49a
 8008292:	493a      	ldr	r1, [pc, #232]	; (800837c <lwip_netconn_do_connected+0x13c>)
 8008294:	4838      	ldr	r0, [pc, #224]	; (8008378 <lwip_netconn_do_connected+0x138>)
 8008296:	f00b ff1d 	bl	80140d4 <iprintf>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d008      	beq.n	80082b4 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a6:	79fa      	ldrb	r2, [r7, #7]
 80082a8:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	330c      	adds	r3, #12
 80082b2:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082bc:	2b10      	cmp	r3, #16
 80082be:	d106      	bne.n	80082ce <lwip_netconn_do_connected+0x8e>
 80082c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d102      	bne.n	80082ce <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 80082c8:	69b8      	ldr	r0, [r7, #24]
 80082ca:	f7ff fb47 	bl	800795c <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	7f1b      	ldrb	r3, [r3, #28]
 80082d2:	f003 0304 	and.w	r3, r3, #4
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	bf0c      	ite	eq
 80082da:	2301      	moveq	r3, #1
 80082dc:	2300      	movne	r3, #0
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	7f1b      	ldrb	r3, [r3, #28]
 80082e6:	f023 0304 	bic.w	r3, r3, #4
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <lwip_netconn_do_connected+0xbc>
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10c      	bne.n	8008316 <lwip_netconn_do_connected+0xd6>
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d102      	bne.n	8008308 <lwip_netconn_do_connected+0xc8>
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d006      	beq.n	8008316 <lwip_netconn_do_connected+0xd6>
 8008308:	4b19      	ldr	r3, [pc, #100]	; (8008370 <lwip_netconn_do_connected+0x130>)
 800830a:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800830e:	491c      	ldr	r1, [pc, #112]	; (8008380 <lwip_netconn_do_connected+0x140>)
 8008310:	4819      	ldr	r0, [pc, #100]	; (8008378 <lwip_netconn_do_connected+0x138>)
 8008312:	f00b fedf 	bl	80140d4 <iprintf>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	2200      	movs	r2, #0
 800831a:	625a      	str	r2, [r3, #36]	; 0x24
  conn->state = NETCONN_NONE;
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	2200      	movs	r2, #0
 8008320:	705a      	strb	r2, [r3, #1]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00e      	beq.n	8008346 <lwip_netconn_do_connected+0x106>
 8008328:	f00b fe18 	bl	8013f5c <sys_arch_protect>
 800832c:	6138      	str	r0, [r7, #16]
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008334:	f113 0f0c 	cmn.w	r3, #12
 8008338:	db02      	blt.n	8008340 <lwip_netconn_do_connected+0x100>
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	2200      	movs	r2, #0
 800833e:	721a      	strb	r2, [r3, #8]
 8008340:	6938      	ldr	r0, [r7, #16]
 8008342:	f00b fe19 	bl	8013f78 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834a:	2b00      	cmp	r3, #0
 800834c:	d005      	beq.n	800835a <lwip_netconn_do_connected+0x11a>
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008352:	2200      	movs	r2, #0
 8008354:	2102      	movs	r1, #2
 8008356:	69b8      	ldr	r0, [r7, #24]
 8008358:	4798      	blx	r3

  if (was_blocking) {
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <lwip_netconn_do_connected+0x126>
    sys_sem_signal(op_completed_sem);
 8008360:	69f8      	ldr	r0, [r7, #28]
 8008362:	f00b fd58 	bl	8013e16 <sys_sem_signal>
  }
  return ERR_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3720      	adds	r7, #32
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	08015800 	.word	0x08015800
 8008374:	08015b6c 	.word	0x08015b6c
 8008378:	08015858 	.word	0x08015858
 800837c:	08015b8c 	.word	0x08015b8c
 8008380:	08015bcc 	.word	0x08015bcc

08008384 <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	617b      	str	r3, [r7, #20]

  if (msg->conn->pcb.tcp == NULL) {
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d103      	bne.n	80083a2 <lwip_netconn_do_connect+0x1e>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	22f1      	movs	r2, #241	; 0xf1
 800839e:	711a      	strb	r2, [r3, #4]
 80083a0:	e0a4      	b.n	80084ec <lwip_netconn_do_connect+0x168>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083ac:	2b10      	cmp	r3, #16
 80083ae:	d011      	beq.n	80083d4 <lwip_netconn_do_connect+0x50>
 80083b0:	2b20      	cmp	r3, #32
 80083b2:	f040 808f 	bne.w	80084d4 <lwip_netconn_do_connect+0x150>
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6858      	ldr	r0, [r3, #4]
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	6899      	ldr	r1, [r3, #8]
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	899b      	ldrh	r3, [r3, #12]
 80083c4:	461a      	mov	r2, r3
 80083c6:	f00b fa17 	bl	80137f8 <udp_connect>
 80083ca:	4603      	mov	r3, r0
 80083cc:	461a      	mov	r2, r3
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	711a      	strb	r2, [r3, #4]
      break;
 80083d2:	e08b      	b.n	80084ec <lwip_netconn_do_connect+0x168>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d103      	bne.n	80083e6 <lwip_netconn_do_connect+0x62>
        msg->err = ERR_ALREADY;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	22f7      	movs	r2, #247	; 0xf7
 80083e2:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
 80083e4:	e081      	b.n	80084ea <lwip_netconn_do_connect+0x166>
      } else if (msg->conn->state != NETCONN_NONE) {
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	785b      	ldrb	r3, [r3, #1]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <lwip_netconn_do_connect+0x74>
        msg->err = ERR_ISCONN;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	22f6      	movs	r2, #246	; 0xf6
 80083f4:	711a      	strb	r2, [r3, #4]
      break;
 80083f6:	e078      	b.n	80084ea <lwip_netconn_do_connect+0x166>
        setup_tcp(msg->conn);
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7ff faad 	bl	800795c <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6858      	ldr	r0, [r3, #4]
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	6899      	ldr	r1, [r3, #8]
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	899a      	ldrh	r2, [r3, #12]
 8008410:	4b44      	ldr	r3, [pc, #272]	; (8008524 <lwip_netconn_do_connect+0x1a0>)
 8008412:	f005 ff6b 	bl	800e2ec <tcp_connect>
 8008416:	4603      	mov	r3, r0
 8008418:	461a      	mov	r2, r3
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	711a      	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d160      	bne.n	80084ea <lwip_netconn_do_connect+0x166>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	7f1b      	ldrb	r3, [r3, #28]
 800842e:	f003 0302 	and.w	r3, r3, #2
 8008432:	2b00      	cmp	r3, #0
 8008434:	bf14      	ite	ne
 8008436:	2301      	movne	r3, #1
 8008438:	2300      	moveq	r3, #0
 800843a:	b2db      	uxtb	r3, r3
 800843c:	74fb      	strb	r3, [r7, #19]
          msg->conn->state = NETCONN_CONNECT;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2203      	movs	r2, #3
 8008444:	705a      	strb	r2, [r3, #1]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8008446:	7cfb      	ldrb	r3, [r7, #19]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d009      	beq.n	8008460 <lwip_netconn_do_connect+0xdc>
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	6812      	ldr	r2, [r2, #0]
 8008454:	7f12      	ldrb	r2, [r2, #28]
 8008456:	f042 0204 	orr.w	r2, r2, #4
 800845a:	b2d2      	uxtb	r2, r2
 800845c:	771a      	strb	r2, [r3, #28]
 800845e:	e008      	b.n	8008472 <lwip_netconn_do_connect+0xee>
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	6812      	ldr	r2, [r2, #0]
 8008468:	7f12      	ldrb	r2, [r2, #28]
 800846a:	f022 0204 	bic.w	r2, r2, #4
 800846e:	b2d2      	uxtb	r2, r2
 8008470:	771a      	strb	r2, [r3, #28]
          if (non_blocking) {
 8008472:	7cfb      	ldrb	r3, [r7, #19]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d003      	beq.n	8008480 <lwip_netconn_do_connect+0xfc>
            msg->err = ERR_INPROGRESS;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	22fb      	movs	r2, #251	; 0xfb
 800847c:	711a      	strb	r2, [r3, #4]
      break;
 800847e:	e034      	b.n	80084ea <lwip_netconn_do_connect+0x166>
            msg->conn->current_msg = msg;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	625a      	str	r2, [r3, #36]	; 0x24
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	785b      	ldrb	r3, [r3, #1]
 800848e:	2b03      	cmp	r3, #3
 8008490:	d006      	beq.n	80084a0 <lwip_netconn_do_connect+0x11c>
 8008492:	4b25      	ldr	r3, [pc, #148]	; (8008528 <lwip_netconn_do_connect+0x1a4>)
 8008494:	f240 42e5 	movw	r2, #1253	; 0x4e5
 8008498:	4924      	ldr	r1, [pc, #144]	; (800852c <lwip_netconn_do_connect+0x1a8>)
 800849a:	4825      	ldr	r0, [pc, #148]	; (8008530 <lwip_netconn_do_connect+0x1ac>)
 800849c:	f00b fe1a 	bl	80140d4 <iprintf>
            UNLOCK_TCPIP_CORE();
 80084a0:	4824      	ldr	r0, [pc, #144]	; (8008534 <lwip_netconn_do_connect+0x1b0>)
 80084a2:	f00b fd28 	bl	8013ef6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	330c      	adds	r3, #12
 80084ac:	2100      	movs	r1, #0
 80084ae:	4618      	mov	r0, r3
 80084b0:	f00b fc80 	bl	8013db4 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80084b4:	481f      	ldr	r0, [pc, #124]	; (8008534 <lwip_netconn_do_connect+0x1b0>)
 80084b6:	f00b fd0f 	bl	8013ed8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	785b      	ldrb	r3, [r3, #1]
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d12b      	bne.n	800851c <lwip_netconn_do_connect+0x198>
 80084c4:	4b18      	ldr	r3, [pc, #96]	; (8008528 <lwip_netconn_do_connect+0x1a4>)
 80084c6:	f240 42e9 	movw	r2, #1257	; 0x4e9
 80084ca:	4918      	ldr	r1, [pc, #96]	; (800852c <lwip_netconn_do_connect+0x1a8>)
 80084cc:	4818      	ldr	r0, [pc, #96]	; (8008530 <lwip_netconn_do_connect+0x1ac>)
 80084ce:	f00b fe01 	bl	80140d4 <iprintf>
            return;
 80084d2:	e023      	b.n	800851c <lwip_netconn_do_connect+0x198>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 80084d4:	4b14      	ldr	r3, [pc, #80]	; (8008528 <lwip_netconn_do_connect+0x1a4>)
 80084d6:	f240 42f2 	movw	r2, #1266	; 0x4f2
 80084da:	4917      	ldr	r1, [pc, #92]	; (8008538 <lwip_netconn_do_connect+0x1b4>)
 80084dc:	4814      	ldr	r0, [pc, #80]	; (8008530 <lwip_netconn_do_connect+0x1ac>)
 80084de:	f00b fdf9 	bl	80140d4 <iprintf>
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	22fa      	movs	r2, #250	; 0xfa
 80084e6:	711a      	strb	r2, [r3, #4]
      break;
 80084e8:	e000      	b.n	80084ec <lwip_netconn_do_connect+0x168>
      break;
 80084ea:	bf00      	nop
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d014      	beq.n	800851e <lwip_netconn_do_connect+0x19a>
 80084f4:	f00b fd32 	bl	8013f5c <sys_arch_protect>
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008502:	f113 0f0c 	cmn.w	r3, #12
 8008506:	db05      	blt.n	8008514 <lwip_netconn_do_connect+0x190>
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008512:	721a      	strb	r2, [r3, #8]
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f00b fd2f 	bl	8013f78 <sys_arch_unprotect>
 800851a:	e000      	b.n	800851e <lwip_netconn_do_connect+0x19a>
            return;
 800851c:	bf00      	nop
}
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	08008241 	.word	0x08008241
 8008528:	08015800 	.word	0x08015800
 800852c:	08015b64 	.word	0x08015b64
 8008530:	08015858 	.word	0x08015858
 8008534:	20007420 	.word	0x20007420
 8008538:	08015bec 	.word	0x08015bec

0800853c <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008552:	2b20      	cmp	r3, #32
 8008554:	d109      	bne.n	800856a <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	4618      	mov	r0, r3
 800855e:	f00b f9a1 	bl	80138a4 <udp_disconnect>
    msg->err = ERR_OK;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	711a      	strb	r2, [r3, #4]
 8008568:	e002      	b.n	8008570 <lwip_netconn_do_disconnect+0x34>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	22fa      	movs	r2, #250	; 0xfa
 800856e:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d012      	beq.n	800859e <lwip_netconn_do_disconnect+0x62>
 8008578:	f00b fcf0 	bl	8013f5c <sys_arch_protect>
 800857c:	60b8      	str	r0, [r7, #8]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008586:	f113 0f0c 	cmn.w	r3, #12
 800858a:	db05      	blt.n	8008598 <lwip_netconn_do_disconnect+0x5c>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008596:	721a      	strb	r2, [r3, #8]
 8008598:	68b8      	ldr	r0, [r7, #8]
 800859a:	f00b fced 	bl	8013f78 <sys_arch_unprotect>
}
 800859e:	bf00      	nop
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b084      	sub	sp, #16
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80085ba:	f113 0f0c 	cmn.w	r3, #12
 80085be:	da06      	bge.n	80085ce <lwip_netconn_do_send+0x28>
    msg->err = msg->conn->last_err;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	711a      	strb	r2, [r3, #4]
 80085cc:	e037      	b.n	800863e <lwip_netconn_do_send+0x98>
  } else {
    msg->err = ERR_CONN;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	22f5      	movs	r2, #245	; 0xf5
 80085d2:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d02f      	beq.n	800863e <lwip_netconn_do_send+0x98>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085e8:	2b20      	cmp	r3, #32
 80085ea:	d000      	beq.n	80085ee <lwip_netconn_do_send+0x48>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
 80085ec:	e027      	b.n	800863e <lwip_netconn_do_send+0x98>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10e      	bne.n	8008616 <lwip_netconn_do_send+0x70>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4619      	mov	r1, r3
 8008606:	4610      	mov	r0, r2
 8008608:	f00a ff6c 	bl	80134e4 <udp_send>
 800860c:	4603      	mov	r3, r0
 800860e:	461a      	mov	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	711a      	strb	r2, [r3, #4]
        break;
 8008614:	e012      	b.n	800863c <lwip_netconn_do_send+0x96>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6858      	ldr	r0, [r3, #4]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	6819      	ldr	r1, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f103 0208 	add.w	r2, r3, #8
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	899b      	ldrh	r3, [r3, #12]
 8008630:	f00a ff70 	bl	8013514 <udp_sendto>
 8008634:	4603      	mov	r3, r0
 8008636:	461a      	mov	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	711a      	strb	r2, [r3, #4]
        break;
 800863c:	bf00      	nop
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d012      	beq.n	800866c <lwip_netconn_do_send+0xc6>
 8008646:	f00b fc89 	bl	8013f5c <sys_arch_protect>
 800864a:	60b8      	str	r0, [r7, #8]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008654:	f113 0f0c 	cmn.w	r3, #12
 8008658:	db05      	blt.n	8008666 <lwip_netconn_do_send+0xc0>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008664:	721a      	strb	r2, [r3, #8]
 8008666:	68b8      	ldr	r0, [r7, #8]
 8008668:	f00b fc86 	bl	8013f78 <sys_arch_unprotect>
}
 800866c:	bf00      	nop
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	2200      	movs	r2, #0
 8008684:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d022      	beq.n	80086d6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800869a:	2b10      	cmp	r3, #16
 800869c:	d11b      	bne.n	80086d6 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086aa:	d202      	bcs.n	80086b2 <lwip_netconn_do_recv+0x3e>
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	e001      	b.n	80086b6 <lwip_netconn_do_recv+0x42>
 80086b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086b6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	89fa      	ldrh	r2, [r7, #14]
 80086c0:	4611      	mov	r1, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f005 fd74 	bl	800e1b0 <tcp_recved>
        remaining -= recved;
 80086c8:	89fb      	ldrh	r3, [r7, #14]
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e6      	bne.n	80086a4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d012      	beq.n	8008704 <lwip_netconn_do_recv+0x90>
 80086de:	f00b fc3d 	bl	8013f5c <sys_arch_protect>
 80086e2:	60b8      	str	r0, [r7, #8]
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80086ec:	f113 0f0c 	cmn.w	r3, #12
 80086f0:	db05      	blt.n	80086fe <lwip_netconn_do_recv+0x8a>
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80086fc:	721a      	strb	r2, [r3, #8]
 80086fe:	68b8      	ldr	r0, [r7, #8]
 8008700:	f00b fc3a 	bl	8013f78 <sys_arch_unprotect>
}
 8008704:	bf00      	nop
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08a      	sub	sp, #40	; 0x28
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8008718:	2300      	movs	r3, #0
 800871a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d106      	bne.n	8008732 <lwip_netconn_do_writemore+0x26>
 8008724:	4ba2      	ldr	r3, [pc, #648]	; (80089b0 <lwip_netconn_do_writemore+0x2a4>)
 8008726:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800872a:	49a2      	ldr	r1, [pc, #648]	; (80089b4 <lwip_netconn_do_writemore+0x2a8>)
 800872c:	48a2      	ldr	r0, [pc, #648]	; (80089b8 <lwip_netconn_do_writemore+0x2ac>)
 800872e:	f00b fcd1 	bl	80140d4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	785b      	ldrb	r3, [r3, #1]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d006      	beq.n	8008748 <lwip_netconn_do_writemore+0x3c>
 800873a:	4b9d      	ldr	r3, [pc, #628]	; (80089b0 <lwip_netconn_do_writemore+0x2a4>)
 800873c:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8008740:	499e      	ldr	r1, [pc, #632]	; (80089bc <lwip_netconn_do_writemore+0x2b0>)
 8008742:	489d      	ldr	r0, [pc, #628]	; (80089b8 <lwip_netconn_do_writemore+0x2ac>)
 8008744:	f00b fcc6 	bl	80140d4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	2b00      	cmp	r3, #0
 800874e:	d106      	bne.n	800875e <lwip_netconn_do_writemore+0x52>
 8008750:	4b97      	ldr	r3, [pc, #604]	; (80089b0 <lwip_netconn_do_writemore+0x2a4>)
 8008752:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8008756:	499a      	ldr	r1, [pc, #616]	; (80089c0 <lwip_netconn_do_writemore+0x2b4>)
 8008758:	4897      	ldr	r0, [pc, #604]	; (80089b8 <lwip_netconn_do_writemore+0x2ac>)
 800875a:	f00b fcbb 	bl	80140d4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d106      	bne.n	8008774 <lwip_netconn_do_writemore+0x68>
 8008766:	4b92      	ldr	r3, [pc, #584]	; (80089b0 <lwip_netconn_do_writemore+0x2a4>)
 8008768:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800876c:	4995      	ldr	r1, [pc, #596]	; (80089c4 <lwip_netconn_do_writemore+0x2b8>)
 800876e:	4892      	ldr	r0, [pc, #584]	; (80089b8 <lwip_netconn_do_writemore+0x2ac>)
 8008770:	f00b fcb0 	bl	80140d4 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a1a      	ldr	r2, [r3, #32]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	429a      	cmp	r2, r3
 8008780:	d306      	bcc.n	8008790 <lwip_netconn_do_writemore+0x84>
 8008782:	4b8b      	ldr	r3, [pc, #556]	; (80089b0 <lwip_netconn_do_writemore+0x2a4>)
 8008784:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8008788:	498f      	ldr	r1, [pc, #572]	; (80089c8 <lwip_netconn_do_writemore+0x2bc>)
 800878a:	488b      	ldr	r0, [pc, #556]	; (80089b8 <lwip_netconn_do_writemore+0x2ac>)
 800878c:	f00b fca2 	bl	80140d4 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	7c1b      	ldrb	r3, [r3, #16]
 8008796:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	7f1b      	ldrb	r3, [r3, #28]
 800879e:	f003 0302 	and.w	r3, r3, #2
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d105      	bne.n	80087b2 <lwip_netconn_do_writemore+0xa6>
 80087a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80087aa:	f003 0304 	and.w	r3, r3, #4
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <lwip_netconn_do_writemore+0xaa>
 80087b2:	2301      	movs	r3, #1
 80087b4:	e000      	b.n	80087b8 <lwip_netconn_do_writemore+0xac>
 80087b6:	2300      	movs	r3, #0
 80087b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	689a      	ldr	r2, [r3, #8]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	4413      	add	r3, r2
 80087c8:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	68da      	ldr	r2, [r3, #12]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a1b      	ldr	r3, [r3, #32]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087de:	d309      	bcc.n	80087f4 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 80087e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087e4:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 80087e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80087ea:	f043 0302 	orr.w	r3, r3, #2
 80087ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80087f2:	e001      	b.n	80087f8 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008800:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 8008802:	8afa      	ldrh	r2, [r7, #22]
 8008804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008806:	429a      	cmp	r2, r3
 8008808:	d212      	bcs.n	8008830 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800880a:	8afb      	ldrh	r3, [r7, #22]
 800880c:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 800880e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008812:	2b00      	cmp	r3, #0
 8008814:	d006      	beq.n	8008824 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 8008816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008818:	2b00      	cmp	r3, #0
 800881a:	d109      	bne.n	8008830 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 800881c:	23f9      	movs	r3, #249	; 0xf9
 800881e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 8008822:	e029      	b.n	8008878 <lwip_netconn_do_writemore+0x16c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8008824:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008828:	f043 0302 	orr.w	r3, r3, #2
 800882c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a1a      	ldr	r2, [r3, #32]
 8008834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008836:	441a      	add	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	429a      	cmp	r2, r3
 8008840:	d906      	bls.n	8008850 <lwip_netconn_do_writemore+0x144>
 8008842:	4b5b      	ldr	r3, [pc, #364]	; (80089b0 <lwip_netconn_do_writemore+0x2a4>)
 8008844:	f240 6213 	movw	r2, #1555	; 0x613
 8008848:	4960      	ldr	r1, [pc, #384]	; (80089cc <lwip_netconn_do_writemore+0x2c0>)
 800884a:	485b      	ldr	r0, [pc, #364]	; (80089b8 <lwip_netconn_do_writemore+0x2ac>)
 800884c:	f00b fc42 	bl	80140d4 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6858      	ldr	r0, [r3, #4]
 8008854:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008858:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800885a:	69f9      	ldr	r1, [r7, #28]
 800885c:	f009 f9b6 	bl	8011bcc <tcp_write>
 8008860:	4603      	mov	r3, r0
 8008862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8008866:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800886a:	2b00      	cmp	r3, #0
 800886c:	d004      	beq.n	8008878 <lwip_netconn_do_writemore+0x16c>
 800886e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008876:	d132      	bne.n	80088de <lwip_netconn_do_writemore+0x1d2>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8008878:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800887c:	2b00      	cmp	r3, #0
 800887e:	d017      	beq.n	80088b0 <lwip_netconn_do_writemore+0x1a4>
 8008880:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	429a      	cmp	r2, r3
 800888a:	d211      	bcs.n	80088b0 <lwip_netconn_do_writemore+0x1a4>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008890:	2b00      	cmp	r3, #0
 8008892:	d005      	beq.n	80088a0 <lwip_netconn_do_writemore+0x194>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008898:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800889a:	2103      	movs	r1, #3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	7f1b      	ldrb	r3, [r3, #28]
 80088a4:	f043 0310 	orr.w	r3, r3, #16
 80088a8:	b2da      	uxtb	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	771a      	strb	r2, [r3, #28]
 80088ae:	e016      	b.n	80088de <lwip_netconn_do_writemore+0x1d2>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80088b8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80088bc:	d305      	bcc.n	80088ca <lwip_netconn_do_writemore+0x1be>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	d909      	bls.n	80088de <lwip_netconn_do_writemore+0x1d2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d005      	beq.n	80088de <lwip_netconn_do_writemore+0x1d2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80088d8:	2103      	movs	r1, #3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80088de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d134      	bne.n	8008950 <lwip_netconn_do_writemore+0x244>
      err_t out_err;
      conn->write_offset += len;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a1a      	ldr	r2, [r3, #32]
 80088ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088ec:	441a      	add	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1a      	ldr	r2, [r3, #32]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d003      	beq.n	8008908 <lwip_netconn_do_writemore+0x1fc>
 8008900:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008904:	2b00      	cmp	r3, #0
 8008906:	d007      	beq.n	8008918 <lwip_netconn_do_writemore+0x20c>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	6a12      	ldr	r2, [r2, #32]
 8008910:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8008912:	2301      	movs	r3, #1
 8008914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	4618      	mov	r0, r3
 800891e:	f009 fe0b 	bl	8012538 <tcp_output>
 8008922:	4603      	mov	r3, r0
 8008924:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008926:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800892a:	f113 0f0c 	cmn.w	r3, #12
 800892e:	db04      	blt.n	800893a <lwip_netconn_do_writemore+0x22e>
 8008930:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8008934:	f113 0f04 	cmn.w	r3, #4
 8008938:	d151      	bne.n	80089de <lwip_netconn_do_writemore+0x2d2>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800893a:	7d7b      	ldrb	r3, [r7, #21]
 800893c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8008940:	2301      	movs	r3, #1
 8008942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894a:	2200      	movs	r2, #0
 800894c:	60da      	str	r2, [r3, #12]
 800894e:	e046      	b.n	80089de <lwip_netconn_do_writemore+0x2d2>
      }
    } else if (err == ERR_MEM) {
 8008950:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008958:	d13a      	bne.n	80089d0 <lwip_netconn_do_writemore+0x2c4>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	4618      	mov	r0, r3
 8008960:	f009 fdea 	bl	8012538 <tcp_output>
 8008964:	4603      	mov	r3, r0
 8008966:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008968:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800896c:	f113 0f0c 	cmn.w	r3, #12
 8008970:	db04      	blt.n	800897c <lwip_netconn_do_writemore+0x270>
 8008972:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008976:	f113 0f04 	cmn.w	r3, #4
 800897a:	d10a      	bne.n	8008992 <lwip_netconn_do_writemore+0x286>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800897c:	7d3b      	ldrb	r3, [r7, #20]
 800897e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8008982:	2301      	movs	r3, #1
 8008984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	2200      	movs	r2, #0
 800898e:	60da      	str	r2, [r3, #12]
 8008990:	e025      	b.n	80089de <lwip_netconn_do_writemore+0x2d2>
      } else if (dontblock) {
 8008992:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008996:	2b00      	cmp	r3, #0
 8008998:	d021      	beq.n	80089de <lwip_netconn_do_writemore+0x2d2>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800899a:	23f9      	movs	r3, #249	; 0xf9
 800899c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 80089a0:	2301      	movs	r3, #1
 80089a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	2200      	movs	r2, #0
 80089ac:	60da      	str	r2, [r3, #12]
 80089ae:	e016      	b.n	80089de <lwip_netconn_do_writemore+0x2d2>
 80089b0:	08015800 	.word	0x08015800
 80089b4:	08015924 	.word	0x08015924
 80089b8:	08015858 	.word	0x08015858
 80089bc:	08015c04 	.word	0x08015c04
 80089c0:	08015934 	.word	0x08015934
 80089c4:	08015c24 	.word	0x08015c24
 80089c8:	08015c3c 	.word	0x08015c3c
 80089cc:	08015c70 	.word	0x08015c70
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80089d0:	2301      	movs	r3, #1
 80089d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089da:	2200      	movs	r2, #0
 80089dc:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 80089de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d02c      	beq.n	8008a40 <lwip_netconn_do_writemore+0x334>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	330c      	adds	r3, #12
 80089ee:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80089f8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00f      	beq.n	8008a32 <lwip_netconn_do_writemore+0x326>
 8008a12:	f00b faa3 	bl	8013f5c <sys_arch_protect>
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008a1e:	f113 0f0c 	cmn.w	r3, #12
 8008a22:	db03      	blt.n	8008a2c <lwip_netconn_do_writemore+0x320>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008a2a:	721a      	strb	r2, [r3, #8]
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f00b faa3 	bl	8013f78 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008a32:	78fb      	ldrb	r3, [r7, #3]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d006      	beq.n	8008a46 <lwip_netconn_do_writemore+0x33a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8008a38:	6938      	ldr	r0, [r7, #16]
 8008a3a:	f00b f9ec 	bl	8013e16 <sys_sem_signal>
 8008a3e:	e002      	b.n	8008a46 <lwip_netconn_do_writemore+0x33a>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8008a40:	f04f 33ff 	mov.w	r3, #4294967295
 8008a44:	e000      	b.n	8008a48 <lwip_netconn_do_writemore+0x33c>
  }
#endif
  return ERR_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3728      	adds	r7, #40	; 0x28
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008a64:	f113 0f0c 	cmn.w	r3, #12
 8008a68:	da06      	bge.n	8008a78 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	711a      	strb	r2, [r3, #4]
 8008a76:	e072      	b.n	8008b5e <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a82:	2b10      	cmp	r3, #16
 8008a84:	d168      	bne.n	8008b58 <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	785b      	ldrb	r3, [r3, #1]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	22fb      	movs	r2, #251	; 0xfb
 8008a94:	711a      	strb	r2, [r3, #4]
 8008a96:	e062      	b.n	8008b5e <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d056      	beq.n	8008b50 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d104      	bne.n	8008abe <lwip_netconn_do_write+0x6e>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d006      	beq.n	8008acc <lwip_netconn_do_write+0x7c>
 8008abe:	4b36      	ldr	r3, [pc, #216]	; (8008b98 <lwip_netconn_do_write+0x148>)
 8008ac0:	f240 6283 	movw	r2, #1667	; 0x683
 8008ac4:	4935      	ldr	r1, [pc, #212]	; (8008b9c <lwip_netconn_do_write+0x14c>)
 8008ac6:	4836      	ldr	r0, [pc, #216]	; (8008ba0 <lwip_netconn_do_write+0x150>)
 8008ac8:	f00b fb04 	bl	80140d4 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d106      	bne.n	8008ae2 <lwip_netconn_do_write+0x92>
 8008ad4:	4b30      	ldr	r3, [pc, #192]	; (8008b98 <lwip_netconn_do_write+0x148>)
 8008ad6:	f240 6284 	movw	r2, #1668	; 0x684
 8008ada:	4932      	ldr	r1, [pc, #200]	; (8008ba4 <lwip_netconn_do_write+0x154>)
 8008adc:	4830      	ldr	r0, [pc, #192]	; (8008ba0 <lwip_netconn_do_write+0x150>)
 8008ade:	f00b faf9 	bl	80140d4 <iprintf>
        msg->conn->current_msg = msg;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2200      	movs	r2, #0
 8008af0:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2100      	movs	r1, #0
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff fe07 	bl	800870c <lwip_netconn_do_writemore>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d044      	beq.n	8008b8e <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	785b      	ldrb	r3, [r3, #1]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d006      	beq.n	8008b1c <lwip_netconn_do_write+0xcc>
 8008b0e:	4b22      	ldr	r3, [pc, #136]	; (8008b98 <lwip_netconn_do_write+0x148>)
 8008b10:	f240 6289 	movw	r2, #1673	; 0x689
 8008b14:	4924      	ldr	r1, [pc, #144]	; (8008ba8 <lwip_netconn_do_write+0x158>)
 8008b16:	4822      	ldr	r0, [pc, #136]	; (8008ba0 <lwip_netconn_do_write+0x150>)
 8008b18:	f00b fadc 	bl	80140d4 <iprintf>
          UNLOCK_TCPIP_CORE();
 8008b1c:	4823      	ldr	r0, [pc, #140]	; (8008bac <lwip_netconn_do_write+0x15c>)
 8008b1e:	f00b f9ea 	bl	8013ef6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	330c      	adds	r3, #12
 8008b28:	2100      	movs	r1, #0
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f00b f942 	bl	8013db4 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8008b30:	481e      	ldr	r0, [pc, #120]	; (8008bac <lwip_netconn_do_write+0x15c>)
 8008b32:	f00b f9d1 	bl	8013ed8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	785b      	ldrb	r3, [r3, #1]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d126      	bne.n	8008b8e <lwip_netconn_do_write+0x13e>
 8008b40:	4b15      	ldr	r3, [pc, #84]	; (8008b98 <lwip_netconn_do_write+0x148>)
 8008b42:	f240 628d 	movw	r2, #1677	; 0x68d
 8008b46:	4918      	ldr	r1, [pc, #96]	; (8008ba8 <lwip_netconn_do_write+0x158>)
 8008b48:	4815      	ldr	r0, [pc, #84]	; (8008ba0 <lwip_netconn_do_write+0x150>)
 8008b4a:	f00b fac3 	bl	80140d4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8008b4e:	e01e      	b.n	8008b8e <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	22f5      	movs	r2, #245	; 0xf5
 8008b54:	711a      	strb	r2, [r3, #4]
 8008b56:	e002      	b.n	8008b5e <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	22fa      	movs	r2, #250	; 0xfa
 8008b5c:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d014      	beq.n	8008b90 <lwip_netconn_do_write+0x140>
 8008b66:	f00b f9f9 	bl	8013f5c <sys_arch_protect>
 8008b6a:	60b8      	str	r0, [r7, #8]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008b74:	f113 0f0c 	cmn.w	r3, #12
 8008b78:	db05      	blt.n	8008b86 <lwip_netconn_do_write+0x136>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008b84:	721a      	strb	r2, [r3, #8]
 8008b86:	68b8      	ldr	r0, [r7, #8]
 8008b88:	f00b f9f6 	bl	8013f78 <sys_arch_unprotect>
 8008b8c:	e000      	b.n	8008b90 <lwip_netconn_do_write+0x140>
        return;
 8008b8e:	bf00      	nop
}
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	08015800 	.word	0x08015800
 8008b9c:	08015b48 	.word	0x08015b48
 8008ba0:	08015858 	.word	0x08015858
 8008ba4:	08015c9c 	.word	0x08015c9c
 8008ba8:	08015b64 	.word	0x08015b64
 8008bac:	20007420 	.word	0x20007420

08008bb0 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d06c      	beq.n	8008ca0 <lwip_netconn_do_getaddr+0xf0>
    if (msg->msg.ad.local) {
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	7c1b      	ldrb	r3, [r3, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d007      	beq.n	8008bde <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	6812      	ldr	r2, [r2, #0]
 8008bd6:	6852      	ldr	r2, [r2, #4]
 8008bd8:	6812      	ldr	r2, [r2, #0]
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	e006      	b.n	8008bec <lwip_netconn_do_getaddr+0x3c>
        msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	6812      	ldr	r2, [r2, #0]
 8008be6:	6852      	ldr	r2, [r2, #4]
 8008be8:	6852      	ldr	r2, [r2, #4]
 8008bea:	601a      	str	r2, [r3, #0]
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bfc:	2b10      	cmp	r3, #16
 8008bfe:	d021      	beq.n	8008c44 <lwip_netconn_do_getaddr+0x94>
 8008c00:	2b20      	cmp	r3, #32
 8008c02:	d144      	bne.n	8008c8e <lwip_netconn_do_getaddr+0xde>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	7c1b      	ldrb	r3, [r3, #16]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d007      	beq.n	8008c1c <lwip_netconn_do_getaddr+0x6c>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	6812      	ldr	r2, [r2, #0]
 8008c14:	6852      	ldr	r2, [r2, #4]
 8008c16:	8a52      	ldrh	r2, [r2, #18]
 8008c18:	801a      	strh	r2, [r3, #0]
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
 8008c1a:	e044      	b.n	8008ca6 <lwip_netconn_do_getaddr+0xf6>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	7c1b      	ldrb	r3, [r3, #16]
 8008c24:	f003 0304 	and.w	r3, r3, #4
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d103      	bne.n	8008c34 <lwip_netconn_do_getaddr+0x84>
          msg->err = ERR_CONN;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	22f5      	movs	r2, #245	; 0xf5
 8008c30:	711a      	strb	r2, [r3, #4]
      break;
 8008c32:	e038      	b.n	8008ca6 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	6812      	ldr	r2, [r2, #0]
 8008c3c:	6852      	ldr	r2, [r2, #4]
 8008c3e:	8a92      	ldrh	r2, [r2, #20]
 8008c40:	801a      	strh	r2, [r3, #0]
      break;
 8008c42:	e030      	b.n	8008ca6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	7c1b      	ldrb	r3, [r3, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10f      	bne.n	8008c6c <lwip_netconn_do_getaddr+0xbc>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	7d1b      	ldrb	r3, [r3, #20]
      if ((msg->msg.ad.local == 0) &&
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d005      	beq.n	8008c64 <lwip_netconn_do_getaddr+0xb4>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	7d1b      	ldrb	r3, [r3, #20]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d103      	bne.n	8008c6c <lwip_netconn_do_getaddr+0xbc>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	22f5      	movs	r2, #245	; 0xf5
 8008c68:	711a      	strb	r2, [r3, #4]
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
      }
      break;
 8008c6a:	e01c      	b.n	8008ca6 <lwip_netconn_do_getaddr+0xf6>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	68da      	ldr	r2, [r3, #12]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	7c1b      	ldrb	r3, [r3, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d004      	beq.n	8008c82 <lwip_netconn_do_getaddr+0xd2>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	8adb      	ldrh	r3, [r3, #22]
 8008c80:	e003      	b.n	8008c8a <lwip_netconn_do_getaddr+0xda>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	8b1b      	ldrh	r3, [r3, #24]
 8008c8a:	8013      	strh	r3, [r2, #0]
      break;
 8008c8c:	e00b      	b.n	8008ca6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
 8008c8e:	4b13      	ldr	r3, [pc, #76]	; (8008cdc <lwip_netconn_do_getaddr+0x12c>)
 8008c90:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008c94:	4912      	ldr	r1, [pc, #72]	; (8008ce0 <lwip_netconn_do_getaddr+0x130>)
 8008c96:	4813      	ldr	r0, [pc, #76]	; (8008ce4 <lwip_netconn_do_getaddr+0x134>)
 8008c98:	f00b fa1c 	bl	80140d4 <iprintf>
      break;
 8008c9c:	bf00      	nop
 8008c9e:	e002      	b.n	8008ca6 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	22f5      	movs	r2, #245	; 0xf5
 8008ca4:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d012      	beq.n	8008cd4 <lwip_netconn_do_getaddr+0x124>
 8008cae:	f00b f955 	bl	8013f5c <sys_arch_protect>
 8008cb2:	60b8      	str	r0, [r7, #8]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008cbc:	f113 0f0c 	cmn.w	r3, #12
 8008cc0:	db05      	blt.n	8008cce <lwip_netconn_do_getaddr+0x11e>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008ccc:	721a      	strb	r2, [r3, #8]
 8008cce:	68b8      	ldr	r0, [r7, #8]
 8008cd0:	f00b f952 	bl	8013f78 <sys_arch_unprotect>
}
 8008cd4:	bf00      	nop
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	08015800 	.word	0x08015800
 8008ce0:	08015cb0 	.word	0x08015cb0
 8008ce4:	08015858 	.word	0x08015858

08008ce8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	785b      	ldrb	r3, [r3, #1]
 8008cfa:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d06e      	beq.n	8008de4 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8008d10:	2b10      	cmp	r3, #16
 8008d12:	d167      	bne.n	8008de4 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	d002      	beq.n	8008d22 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008d1c:	7cfb      	ldrb	r3, [r7, #19]
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d060      	beq.n	8008de4 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8008d22:	7cfb      	ldrb	r3, [r7, #19]
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d103      	bne.n	8008d30 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	22f5      	movs	r2, #245	; 0xf5
 8008d2c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8008d2e:	e05c      	b.n	8008dea <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 8008d30:	7cfb      	ldrb	r3, [r7, #19]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d103      	bne.n	8008d3e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	22fb      	movs	r2, #251	; 0xfb
 8008d3a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8008d3c:	e055      	b.n	8008dea <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	7a1b      	ldrb	r3, [r3, #8]
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d004      	beq.n	8008d54 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fe ff7c 	bl	8007c4c <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <lwip_netconn_do_close+0x80>
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	6a1b      	ldr	r3, [r3, #32]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d006      	beq.n	8008d76 <lwip_netconn_do_close+0x8e>
 8008d68:	4b2e      	ldr	r3, [pc, #184]	; (8008e24 <lwip_netconn_do_close+0x13c>)
 8008d6a:	f240 721c 	movw	r2, #1820	; 0x71c
 8008d6e:	492e      	ldr	r1, [pc, #184]	; (8008e28 <lwip_netconn_do_close+0x140>)
 8008d70:	482e      	ldr	r0, [pc, #184]	; (8008e2c <lwip_netconn_do_close+0x144>)
 8008d72:	f00b f9af 	bl	80140d4 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2204      	movs	r2, #4
 8008d7c:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fe ffdd 	bl	8007d4c <lwip_netconn_do_close_internal>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d040      	beq.n	8008e1a <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	785b      	ldrb	r3, [r3, #1]
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	d006      	beq.n	8008db0 <lwip_netconn_do_close+0xc8>
 8008da2:	4b20      	ldr	r3, [pc, #128]	; (8008e24 <lwip_netconn_do_close+0x13c>)
 8008da4:	f240 7221 	movw	r2, #1825	; 0x721
 8008da8:	4921      	ldr	r1, [pc, #132]	; (8008e30 <lwip_netconn_do_close+0x148>)
 8008daa:	4820      	ldr	r0, [pc, #128]	; (8008e2c <lwip_netconn_do_close+0x144>)
 8008dac:	f00b f992 	bl	80140d4 <iprintf>
        UNLOCK_TCPIP_CORE();
 8008db0:	4820      	ldr	r0, [pc, #128]	; (8008e34 <lwip_netconn_do_close+0x14c>)
 8008db2:	f00b f8a0 	bl	8013ef6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	330c      	adds	r3, #12
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f00a fff8 	bl	8013db4 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8008dc4:	481b      	ldr	r0, [pc, #108]	; (8008e34 <lwip_netconn_do_close+0x14c>)
 8008dc6:	f00b f887 	bl	8013ed8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	785b      	ldrb	r3, [r3, #1]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d022      	beq.n	8008e1a <lwip_netconn_do_close+0x132>
 8008dd4:	4b13      	ldr	r3, [pc, #76]	; (8008e24 <lwip_netconn_do_close+0x13c>)
 8008dd6:	f240 7225 	movw	r2, #1829	; 0x725
 8008dda:	4915      	ldr	r1, [pc, #84]	; (8008e30 <lwip_netconn_do_close+0x148>)
 8008ddc:	4813      	ldr	r0, [pc, #76]	; (8008e2c <lwip_netconn_do_close+0x144>)
 8008dde:	f00b f979 	bl	80140d4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8008de2:	e01a      	b.n	8008e1a <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	22f5      	movs	r2, #245	; 0xf5
 8008de8:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d014      	beq.n	8008e1c <lwip_netconn_do_close+0x134>
 8008df2:	f00b f8b3 	bl	8013f5c <sys_arch_protect>
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008e00:	f113 0f0c 	cmn.w	r3, #12
 8008e04:	db05      	blt.n	8008e12 <lwip_netconn_do_close+0x12a>
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008e10:	721a      	strb	r2, [r3, #8]
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f00b f8b0 	bl	8013f78 <sys_arch_unprotect>
 8008e18:	e000      	b.n	8008e1c <lwip_netconn_do_close+0x134>
      return;
 8008e1a:	bf00      	nop
}
 8008e1c:	3718      	adds	r7, #24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	08015800 	.word	0x08015800
 8008e28:	08015b48 	.word	0x08015b48
 8008e2c:	08015858 	.word	0x08015858
 8008e30:	08015b64 	.word	0x08015b64
 8008e34:	20007420 	.word	0x20007420

08008e38 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8008e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	dc04      	bgt.n	8008e54 <err_to_errno+0x1c>
 8008e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e4e:	425b      	negs	r3, r3
 8008e50:	2b10      	cmp	r3, #16
 8008e52:	dd01      	ble.n	8008e58 <err_to_errno+0x20>
    return EIO;
 8008e54:	2305      	movs	r3, #5
 8008e56:	e005      	b.n	8008e64 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8008e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e5c:	425b      	negs	r3, r3
 8008e5e:	4a04      	ldr	r2, [pc, #16]	; (8008e70 <err_to_errno+0x38>)
 8008e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bc80      	pop	{r7}
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	08017eb8 	.word	0x08017eb8

08008e74 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d013      	beq.n	8008eaa <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00b      	beq.n	8008ea2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f004 fbe0 	bl	800d654 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	605a      	str	r2, [r3, #4]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8008ea2:	6879      	ldr	r1, [r7, #4]
 8008ea4:	2006      	movs	r0, #6
 8008ea6:	f003 fe21 	bl	800caec <memp_free>
  }
}
 8008eaa:	bf00      	nop
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
	...

08008eb4 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d106      	bne.n	8008ed0 <netbuf_free+0x1c>
 8008ec2:	4b0d      	ldr	r3, [pc, #52]	; (8008ef8 <netbuf_free+0x44>)
 8008ec4:	2281      	movs	r2, #129	; 0x81
 8008ec6:	490d      	ldr	r1, [pc, #52]	; (8008efc <netbuf_free+0x48>)
 8008ec8:	480d      	ldr	r0, [pc, #52]	; (8008f00 <netbuf_free+0x4c>)
 8008eca:	f00b f903 	bl	80140d4 <iprintf>
 8008ece:	e00f      	b.n	8008ef0 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d004      	beq.n	8008ee2 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f004 fbb9 	bl	800d654 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	605a      	str	r2, [r3, #4]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	601a      	str	r2, [r3, #0]
}
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	08015cc8 	.word	0x08015cc8
 8008efc:	08015d64 	.word	0x08015d64
 8008f00:	08015d18 	.word	0x08015d18

08008f04 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d108      	bne.n	8008f2a <netbuf_ref+0x26>
 8008f18:	4b1c      	ldr	r3, [pc, #112]	; (8008f8c <netbuf_ref+0x88>)
 8008f1a:	2295      	movs	r2, #149	; 0x95
 8008f1c:	491c      	ldr	r1, [pc, #112]	; (8008f90 <netbuf_ref+0x8c>)
 8008f1e:	481d      	ldr	r0, [pc, #116]	; (8008f94 <netbuf_ref+0x90>)
 8008f20:	f00b f8d8 	bl	80140d4 <iprintf>
 8008f24:	f06f 030f 	mvn.w	r3, #15
 8008f28:	e02b      	b.n	8008f82 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d004      	beq.n	8008f3c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f004 fb8c 	bl	800d654 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	2100      	movs	r1, #0
 8008f40:	2000      	movs	r0, #0
 8008f42:	f004 f815 	bl	800cf70 <pbuf_alloc>
 8008f46:	4602      	mov	r2, r0
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d105      	bne.n	8008f60 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8008f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f5e:	e010      	b.n	8008f82 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	88f9      	ldrh	r1, [r7, #6]
 8008f72:	8119      	strh	r1, [r3, #8]
 8008f74:	891b      	ldrh	r3, [r3, #8]
 8008f76:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	08015cc8 	.word	0x08015cc8
 8008f90:	08015d80 	.word	0x08015d80
 8008f94:	08015d18 	.word	0x08015d18

08008f98 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int s)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	db02      	blt.n	8008fac <get_socket+0x14>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	dd04      	ble.n	8008fb6 <get_socket+0x1e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 8008fac:	4b0d      	ldr	r3, [pc, #52]	; (8008fe4 <get_socket+0x4c>)
 8008fae:	2209      	movs	r2, #9
 8008fb0:	601a      	str	r2, [r3, #0]
    return NULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e011      	b.n	8008fda <get_socket+0x42>
  }

  sock = &sockets[s];
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	4613      	mov	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4413      	add	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4a09      	ldr	r2, [pc, #36]	; (8008fe8 <get_socket+0x50>)
 8008fc2:	4413      	add	r3, r2
 8008fc4:	60fb      	str	r3, [r7, #12]

  if (!sock->conn) {
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d104      	bne.n	8008fd8 <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 8008fce:	4b05      	ldr	r3, [pc, #20]	; (8008fe4 <get_socket+0x4c>)
 8008fd0:	2209      	movs	r2, #9
 8008fd2:	601a      	str	r2, [r3, #0]
    return NULL;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	e000      	b.n	8008fda <get_socket+0x42>
  }

  return sock;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3714      	adds	r7, #20
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bc80      	pop	{r7}
 8008fe2:	4770      	bx	lr
 8008fe4:	2000ab50 	.word	0x2000ab50
 8008fe8:	20004048 	.word	0x20004048

08008fec <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60fb      	str	r3, [r7, #12]
 8008ffa:	e074      	b.n	80090e6 <alloc_socket+0xfa>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8008ffc:	f00a ffae 	bl	8013f5c <sys_arch_protect>
 8009000:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 8009002:	493d      	ldr	r1, [pc, #244]	; (80090f8 <alloc_socket+0x10c>)
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	4613      	mov	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	440b      	add	r3, r1
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d161      	bne.n	80090da <alloc_socket+0xee>
 8009016:	4938      	ldr	r1, [pc, #224]	; (80090f8 <alloc_socket+0x10c>)
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	4613      	mov	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	4413      	add	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	440b      	add	r3, r1
 8009024:	3311      	adds	r3, #17
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d156      	bne.n	80090da <alloc_socket+0xee>
      sockets[i].conn       = newconn;
 800902c:	4932      	ldr	r1, [pc, #200]	; (80090f8 <alloc_socket+0x10c>)
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	440b      	add	r3, r1
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800903e:	68b8      	ldr	r0, [r7, #8]
 8009040:	f00a ff9a 	bl	8013f78 <sys_arch_unprotect>
      sockets[i].lastdata   = NULL;
 8009044:	492c      	ldr	r1, [pc, #176]	; (80090f8 <alloc_socket+0x10c>)
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	4613      	mov	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	440b      	add	r3, r1
 8009052:	3304      	adds	r3, #4
 8009054:	2200      	movs	r2, #0
 8009056:	601a      	str	r2, [r3, #0]
      sockets[i].lastoffset = 0;
 8009058:	4927      	ldr	r1, [pc, #156]	; (80090f8 <alloc_socket+0x10c>)
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	4613      	mov	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	440b      	add	r3, r1
 8009066:	3308      	adds	r3, #8
 8009068:	2200      	movs	r2, #0
 800906a:	801a      	strh	r2, [r3, #0]
      sockets[i].rcvevent   = 0;
 800906c:	4922      	ldr	r1, [pc, #136]	; (80090f8 <alloc_socket+0x10c>)
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	4613      	mov	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	440b      	add	r3, r1
 800907a:	330a      	adds	r3, #10
 800907c:	2200      	movs	r2, #0
 800907e:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009088:	2b10      	cmp	r3, #16
 800908a:	d102      	bne.n	8009092 <alloc_socket+0xa6>
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <alloc_socket+0xaa>
 8009092:	2301      	movs	r3, #1
 8009094:	e000      	b.n	8009098 <alloc_socket+0xac>
 8009096:	2300      	movs	r3, #0
 8009098:	b298      	uxth	r0, r3
 800909a:	4917      	ldr	r1, [pc, #92]	; (80090f8 <alloc_socket+0x10c>)
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	440b      	add	r3, r1
 80090a8:	330c      	adds	r3, #12
 80090aa:	4602      	mov	r2, r0
 80090ac:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 80090ae:	4912      	ldr	r1, [pc, #72]	; (80090f8 <alloc_socket+0x10c>)
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4613      	mov	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	440b      	add	r3, r1
 80090bc:	330e      	adds	r3, #14
 80090be:	2200      	movs	r2, #0
 80090c0:	801a      	strh	r2, [r3, #0]
      sockets[i].err        = 0;
 80090c2:	490d      	ldr	r1, [pc, #52]	; (80090f8 <alloc_socket+0x10c>)
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	4613      	mov	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	440b      	add	r3, r1
 80090d0:	3310      	adds	r3, #16
 80090d2:	2200      	movs	r2, #0
 80090d4:	701a      	strb	r2, [r3, #0]
      return i + LWIP_SOCKET_OFFSET;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	e00a      	b.n	80090f0 <alloc_socket+0x104>
    }
    SYS_ARCH_UNPROTECT(lev);
 80090da:	68b8      	ldr	r0, [r7, #8]
 80090dc:	f00a ff4c 	bl	8013f78 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	3301      	adds	r3, #1
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	dd87      	ble.n	8008ffc <alloc_socket+0x10>
  }
  return -1;
 80090ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	20004048 	.word	0x20004048

080090fc <lwip_connect>:
  return 0;
}

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b08c      	sub	sp, #48	; 0x30
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f7ff ff45 	bl	8008f98 <get_socket>
 800910e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 8009110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009112:	2b00      	cmp	r3, #0
 8009114:	d102      	bne.n	800911c <lwip_connect+0x20>
    return -1;
 8009116:	f04f 33ff 	mov.w	r3, #4294967295
 800911a:	e06e      	b.n	80091fa <lwip_connect+0xfe>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	785b      	ldrb	r3, [r3, #1]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d108      	bne.n	8009136 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4618      	mov	r0, r3
 800912a:	f7fd fef9 	bl	8006f20 <netconn_disconnect>
 800912e:	4603      	mov	r3, r0
 8009130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009134:	e03d      	b.n	80091b2 <lwip_connect+0xb6>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b10      	cmp	r3, #16
 800913a:	d10c      	bne.n	8009156 <lwip_connect+0x5a>
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	785b      	ldrb	r3, [r3, #1]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d003      	beq.n	800914c <lwip_connect+0x50>
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	785b      	ldrb	r3, [r3, #1]
 8009148:	2b02      	cmp	r3, #2
 800914a:	d104      	bne.n	8009156 <lwip_connect+0x5a>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	f003 0303 	and.w	r3, r3, #3
 8009152:	2b00      	cmp	r3, #0
 8009154:	d018      	beq.n	8009188 <lwip_connect+0x8c>
 8009156:	4b2b      	ldr	r3, [pc, #172]	; (8009204 <lwip_connect+0x108>)
 8009158:	f240 229f 	movw	r2, #671	; 0x29f
 800915c:	492a      	ldr	r1, [pc, #168]	; (8009208 <lwip_connect+0x10c>)
 800915e:	482b      	ldr	r0, [pc, #172]	; (800920c <lwip_connect+0x110>)
 8009160:	f00a ffb8 	bl	80140d4 <iprintf>
 8009164:	f06f 000f 	mvn.w	r0, #15
 8009168:	f7ff fe66 	bl	8008e38 <err_to_errno>
 800916c:	6238      	str	r0, [r7, #32]
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	b2da      	uxtb	r2, r3
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	741a      	strb	r2, [r3, #16]
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <lwip_connect+0x86>
 800917c:	4a24      	ldr	r2, [pc, #144]	; (8009210 <lwip_connect+0x114>)
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	f04f 33ff 	mov.w	r3, #4294967295
 8009186:	e038      	b.n	80091fa <lwip_connect+0xfe>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	617b      	str	r3, [r7, #20]
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	885b      	ldrh	r3, [r3, #2]
 8009192:	4618      	mov	r0, r3
 8009194:	f000 fdf8 	bl	8009d88 <lwip_htons>
 8009198:	4603      	mov	r3, r0
 800919a:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80091a2:	f107 0114 	add.w	r1, r7, #20
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fd fe82 	bl	8006eb0 <netconn_connect>
 80091ac:	4603      	mov	r3, r0
 80091ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 80091b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d012      	beq.n	80091e0 <lwip_connect+0xe4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 80091ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80091be:	4618      	mov	r0, r3
 80091c0:	f7ff fe3a 	bl	8008e38 <err_to_errno>
 80091c4:	61b8      	str	r0, [r7, #24]
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	741a      	strb	r2, [r3, #16]
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <lwip_connect+0xde>
 80091d4:	4a0e      	ldr	r2, [pc, #56]	; (8009210 <lwip_connect+0x114>)
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	6013      	str	r3, [r2, #0]
    return -1;
 80091da:	f04f 33ff 	mov.w	r3, #4294967295
 80091de:	e00c      	b.n	80091fa <lwip_connect+0xfe>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 80091e0:	2300      	movs	r3, #0
 80091e2:	61fb      	str	r3, [r7, #28]
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ea:	741a      	strb	r2, [r3, #16]
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d002      	beq.n	80091f8 <lwip_connect+0xfc>
 80091f2:	4a07      	ldr	r2, [pc, #28]	; (8009210 <lwip_connect+0x114>)
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	6013      	str	r3, [r2, #0]
  return 0;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3730      	adds	r7, #48	; 0x30
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	08015e60 	.word	0x08015e60
 8009208:	08015f58 	.word	0x08015f58
 800920c:	08015ea4 	.word	0x08015ea4
 8009210:	2000ab50 	.word	0x2000ab50

08009214 <lwip_recvfrom>:
}

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 8009214:	b590      	push	{r4, r7, lr}
 8009216:	b097      	sub	sp, #92	; 0x5c
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
 8009220:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  void             *buf = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	64fb      	str	r3, [r7, #76]	; 0x4c
  u8_t             done = 0;
 800922a:	2300      	movs	r3, #0
 800922c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  err_t            err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f7ff feb1 	bl	8008f98 <get_socket>
 8009236:	6438      	str	r0, [r7, #64]	; 0x40
  if (!sock) {
 8009238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800923a:	2b00      	cmp	r3, #0
 800923c:	d102      	bne.n	8009244 <lwip_recvfrom+0x30>
    return -1;
 800923e:	f04f 33ff 	mov.w	r3, #4294967295
 8009242:	e199      	b.n	8009578 <lwip_recvfrom+0x364>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
 8009244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d003      	beq.n	8009254 <lwip_recvfrom+0x40>
      buf = sock->lastdata;
 800924c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	62bb      	str	r3, [r7, #40]	; 0x28
 8009252:	e08d      	b.n	8009370 <lwip_recvfrom+0x15c>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	f003 0308 	and.w	r3, r3, #8
 800925a:	2b00      	cmp	r3, #0
 800925c:	d106      	bne.n	800926c <lwip_recvfrom+0x58>
 800925e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	7f1b      	ldrb	r3, [r3, #28]
 8009264:	f003 0302 	and.w	r3, r3, #2
 8009268:	2b00      	cmp	r3, #0
 800926a:	d01b      	beq.n	80092a4 <lwip_recvfrom+0x90>
          (sock->rcvevent <= 0)) {
 800926c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800926e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
 8009272:	2b00      	cmp	r3, #0
 8009274:	dc16      	bgt.n	80092a4 <lwip_recvfrom+0x90>
        if (off > 0) {
 8009276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009278:	2b00      	cmp	r3, #0
 800927a:	dd0d      	ble.n	8009298 <lwip_recvfrom+0x84>
          /* already received data, return that */
          sock_set_errno(sock, 0);
 800927c:	2300      	movs	r3, #0
 800927e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009282:	b2da      	uxtb	r2, r3
 8009284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009286:	741a      	strb	r2, [r3, #16]
 8009288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928a:	2b00      	cmp	r3, #0
 800928c:	d002      	beq.n	8009294 <lwip_recvfrom+0x80>
 800928e:	4aa9      	ldr	r2, [pc, #676]	; (8009534 <lwip_recvfrom+0x320>)
 8009290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009292:	6013      	str	r3, [r2, #0]
          return off;
 8009294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009296:	e16f      	b.n	8009578 <lwip_recvfrom+0x364>
        }
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        set_errno(EWOULDBLOCK);
 8009298:	4ba6      	ldr	r3, [pc, #664]	; (8009534 <lwip_recvfrom+0x320>)
 800929a:	220b      	movs	r2, #11
 800929c:	601a      	str	r2, [r3, #0]
        return -1;
 800929e:	f04f 33ff 	mov.w	r3, #4294967295
 80092a2:	e169      	b.n	8009578 <lwip_recvfrom+0x364>
      }

      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80092a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092ae:	2b10      	cmp	r3, #16
 80092b0:	d10b      	bne.n	80092ca <lwip_recvfrom+0xb6>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
 80092b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80092ba:	4611      	mov	r1, r2
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fd ff2b 	bl	8007118 <netconn_recv_tcp_pbuf>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80092c8:	e00a      	b.n	80092e0 <lwip_recvfrom+0xcc>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
 80092ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80092d2:	4611      	mov	r1, r2
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fd ff47 	bl	8007168 <netconn_recv>
 80092da:	4603      	mov	r3, r0
 80092dc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
 80092e0:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d036      	beq.n	8009356 <lwip_recvfrom+0x142>
        if (off > 0) {
 80092e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	dd19      	ble.n	8009322 <lwip_recvfrom+0x10e>
          if (err == ERR_CLSD) {
 80092ee:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80092f2:	f113 0f0f 	cmn.w	r3, #15
 80092f6:	d106      	bne.n	8009306 <lwip_recvfrom+0xf2>
            /* closed but already received data, ensure select gets the FIN, too */
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
 80092f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2200      	movs	r2, #0
 80092fe:	2100      	movs	r1, #0
 8009300:	4618      	mov	r0, r3
 8009302:	f000 fac5 	bl	8009890 <event_callback>
          }
          /* already received data, return that */
          sock_set_errno(sock, 0);
 8009306:	2300      	movs	r3, #0
 8009308:	637b      	str	r3, [r7, #52]	; 0x34
 800930a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930c:	b2da      	uxtb	r2, r3
 800930e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009310:	741a      	strb	r2, [r3, #16]
 8009312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <lwip_recvfrom+0x10a>
 8009318:	4a86      	ldr	r2, [pc, #536]	; (8009534 <lwip_recvfrom+0x320>)
 800931a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931c:	6013      	str	r3, [r2, #0]
          return off;
 800931e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009320:	e12a      	b.n	8009578 <lwip_recvfrom+0x364>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 8009322:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8009326:	4618      	mov	r0, r3
 8009328:	f7ff fd86 	bl	8008e38 <err_to_errno>
 800932c:	6338      	str	r0, [r7, #48]	; 0x30
 800932e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009330:	b2da      	uxtb	r2, r3
 8009332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009334:	741a      	strb	r2, [r3, #16]
 8009336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009338:	2b00      	cmp	r3, #0
 800933a:	d002      	beq.n	8009342 <lwip_recvfrom+0x12e>
 800933c:	4a7d      	ldr	r2, [pc, #500]	; (8009534 <lwip_recvfrom+0x320>)
 800933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009340:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8009342:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8009346:	f113 0f0f 	cmn.w	r3, #15
 800934a:	d101      	bne.n	8009350 <lwip_recvfrom+0x13c>
          return 0;
 800934c:	2300      	movs	r3, #0
 800934e:	e113      	b.n	8009578 <lwip_recvfrom+0x364>
        } else {
          return -1;
 8009350:	f04f 33ff 	mov.w	r3, #4294967295
 8009354:	e110      	b.n	8009578 <lwip_recvfrom+0x364>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
 8009356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009358:	2b00      	cmp	r3, #0
 800935a:	d106      	bne.n	800936a <lwip_recvfrom+0x156>
 800935c:	4b76      	ldr	r3, [pc, #472]	; (8009538 <lwip_recvfrom+0x324>)
 800935e:	f240 3227 	movw	r2, #807	; 0x327
 8009362:	4976      	ldr	r1, [pc, #472]	; (800953c <lwip_recvfrom+0x328>)
 8009364:	4876      	ldr	r0, [pc, #472]	; (8009540 <lwip_recvfrom+0x32c>)
 8009366:	f00a feb5 	bl	80140d4 <iprintf>
      sock->lastdata = buf;
 800936a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800936c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800936e:	605a      	str	r2, [r3, #4]
    }

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8009370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800937a:	2b10      	cmp	r3, #16
 800937c:	d102      	bne.n	8009384 <lwip_recvfrom+0x170>
      p = (struct pbuf *)buf;
 800937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009380:	657b      	str	r3, [r7, #84]	; 0x54
 8009382:	e002      	b.n	800938a <lwip_recvfrom+0x176>
    } else {
      p = ((struct netbuf *)buf)->p;
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	657b      	str	r3, [r7, #84]	; 0x54
    }
    buflen = p->tot_len;
 800938a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800938c:	891b      	ldrh	r3, [r3, #8]
 800938e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
 8009390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009392:	891b      	ldrh	r3, [r3, #8]
 8009394:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if (len > buflen) {
 800939a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d203      	bcs.n	80093aa <lwip_recvfrom+0x196>
      copylen = buflen;
 80093a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80093a4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80093a8:	e002      	b.n	80093b0 <lwip_recvfrom+0x19c>
    } else {
      copylen = (u16_t)len;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
 80093b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	18d1      	adds	r1, r2, r3
 80093b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093b8:	891b      	ldrh	r3, [r3, #8]
 80093ba:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80093be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80093c0:	f004 fb52 	bl	800da68 <pbuf_copy_partial>

    off += copylen;
 80093c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80093c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093ca:	4413      	add	r3, r2
 80093cc:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80093ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093d8:	2b10      	cmp	r3, #16
 80093da:	d127      	bne.n	800942c <lwip_recvfrom+0x218>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
 80093dc:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d906      	bls.n	80093f4 <lwip_recvfrom+0x1e0>
 80093e6:	4b54      	ldr	r3, [pc, #336]	; (8009538 <lwip_recvfrom+0x324>)
 80093e8:	f240 3243 	movw	r2, #835	; 0x343
 80093ec:	4955      	ldr	r1, [pc, #340]	; (8009544 <lwip_recvfrom+0x330>)
 80093ee:	4854      	ldr	r0, [pc, #336]	; (8009540 <lwip_recvfrom+0x32c>)
 80093f0:	f00a fe70 	bl	80140d4 <iprintf>
      len -= copylen;
 80093f4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	607b      	str	r3, [r7, #4]
      if ((len <= 0) ||
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00f      	beq.n	8009424 <lwip_recvfrom+0x210>
          (p->flags & PBUF_FLAG_PUSH) ||
 8009404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009406:	7b5b      	ldrb	r3, [r3, #13]
 8009408:	f003 0301 	and.w	r3, r3, #1
      if ((len <= 0) ||
 800940c:	2b00      	cmp	r3, #0
 800940e:	d109      	bne.n	8009424 <lwip_recvfrom+0x210>
          (sock->rcvevent <= 0) ||
 8009410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009412:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
 8009416:	2b00      	cmp	r3, #0
 8009418:	dd04      	ble.n	8009424 <lwip_recvfrom+0x210>
          ((flags & MSG_PEEK) != 0)) {
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	f003 0301 	and.w	r3, r3, #1
          (sock->rcvevent <= 0) ||
 8009420:	2b00      	cmp	r3, #0
 8009422:	d006      	beq.n	8009432 <lwip_recvfrom+0x21e>
        done = 1;
 8009424:	2301      	movs	r3, #1
 8009426:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800942a:	e002      	b.n	8009432 <lwip_recvfrom+0x21e>
      }
    } else {
      done = 1;
 800942c:	2301      	movs	r3, #1
 800942e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    }

    /* Check to see from where the data was.*/
    if (done) {
 8009432:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8009436:	2b00      	cmp	r3, #0
 8009438:	d04c      	beq.n	80094d4 <lwip_recvfrom+0x2c0>
#if !SOCKETS_DEBUG
      if (from && fromlen)
 800943a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800943c:	2b00      	cmp	r3, #0
 800943e:	d049      	beq.n	80094d4 <lwip_recvfrom+0x2c0>
 8009440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009442:	2b00      	cmp	r3, #0
 8009444:	d046      	beq.n	80094d4 <lwip_recvfrom+0x2c0>
        u16_t port;
        ip_addr_t tmpaddr;
        ip_addr_t *fromaddr;
        union sockaddr_aligned saddr;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8009446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009450:	2b10      	cmp	r3, #16
 8009452:	d10b      	bne.n	800946c <lwip_recvfrom+0x258>
          fromaddr = &tmpaddr;
 8009454:	f107 0320 	add.w	r3, r7, #32
 8009458:	647b      	str	r3, [r7, #68]	; 0x44
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
 800945a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800945c:	6818      	ldr	r0, [r3, #0]
 800945e:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8009462:	2300      	movs	r3, #0
 8009464:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009466:	f7fd fcd3 	bl	8006e10 <netconn_getaddr>
 800946a:	e005      	b.n	8009478 <lwip_recvfrom+0x264>
        } else {
          port = netbuf_fromport((struct netbuf *)buf);
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	899b      	ldrh	r3, [r3, #12]
 8009470:	84fb      	strh	r3, [r7, #38]	; 0x26
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
 8009472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009474:	3308      	adds	r3, #8
 8009476:	647b      	str	r3, [r7, #68]	; 0x44
          ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
          IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
        }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8009478:	f107 0310 	add.w	r3, r7, #16
 800947c:	2210      	movs	r2, #16
 800947e:	701a      	strb	r2, [r3, #0]
 8009480:	f107 0310 	add.w	r3, r7, #16
 8009484:	2202      	movs	r2, #2
 8009486:	705a      	strb	r2, [r3, #1]
 8009488:	f107 0410 	add.w	r4, r7, #16
 800948c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800948e:	4618      	mov	r0, r3
 8009490:	f000 fc7a 	bl	8009d88 <lwip_htons>
 8009494:	4603      	mov	r3, r0
 8009496:	8063      	strh	r3, [r4, #2]
 8009498:	f107 0310 	add.w	r3, r7, #16
 800949c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800949e:	6812      	ldr	r2, [r2, #0]
 80094a0:	605a      	str	r2, [r3, #4]
 80094a2:	f107 0310 	add.w	r3, r7, #16
 80094a6:	3308      	adds	r3, #8
 80094a8:	2208      	movs	r2, #8
 80094aa:	2100      	movs	r1, #0
 80094ac:	4618      	mov	r0, r3
 80094ae:	f00a fddb 	bl	8014068 <memset>
        LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, off));
#if SOCKETS_DEBUG
        if (from && fromlen)
#endif /* SOCKETS_DEBUG */
        {
          if (*fromlen > saddr.sa.sa_len) {
 80094b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	7c3a      	ldrb	r2, [r7, #16]
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d903      	bls.n	80094c4 <lwip_recvfrom+0x2b0>
            *fromlen = saddr.sa.sa_len;
 80094bc:	7c3b      	ldrb	r3, [r7, #16]
 80094be:	461a      	mov	r2, r3
 80094c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094c2:	601a      	str	r2, [r3, #0]
          }
          MEMCPY(from, &saddr, *fromlen);
 80094c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	f107 0310 	add.w	r3, r7, #16
 80094cc:	4619      	mov	r1, r3
 80094ce:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80094d0:	f00a fdbf 	bl	8014052 <memcpy>
        }
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d13a      	bne.n	8009554 <lwip_recvfrom+0x340>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
 80094de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094e8:	2b10      	cmp	r3, #16
 80094ea:	d111      	bne.n	8009510 <lwip_recvfrom+0x2fc>
 80094ec:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80094ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	dd0b      	ble.n	8009510 <lwip_recvfrom+0x2fc>
        sock->lastdata = buf;
 80094f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094fc:	605a      	str	r2, [r3, #4]
        sock->lastoffset += copylen;
 80094fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009500:	891a      	ldrh	r2, [r3, #8]
 8009502:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009506:	4413      	add	r3, r2
 8009508:	b29a      	uxth	r2, r3
 800950a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800950c:	811a      	strh	r2, [r3, #8]
 800950e:	e021      	b.n	8009554 <lwip_recvfrom+0x340>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
 8009510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009512:	2200      	movs	r2, #0
 8009514:	605a      	str	r2, [r3, #4]
        sock->lastoffset = 0;
 8009516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009518:	2200      	movs	r2, #0
 800951a:	811a      	strh	r2, [r3, #8]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800951c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009526:	2b10      	cmp	r3, #16
 8009528:	d10e      	bne.n	8009548 <lwip_recvfrom+0x334>
          pbuf_free((struct pbuf *)buf);
 800952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952c:	4618      	mov	r0, r3
 800952e:	f004 f891 	bl	800d654 <pbuf_free>
 8009532:	e00d      	b.n	8009550 <lwip_recvfrom+0x33c>
 8009534:	2000ab50 	.word	0x2000ab50
 8009538:	08015e60 	.word	0x08015e60
 800953c:	08015f78 	.word	0x08015f78
 8009540:	08015ea4 	.word	0x08015ea4
 8009544:	08015f84 	.word	0x08015f84
        } else {
          netbuf_delete((struct netbuf *)buf);
 8009548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954a:	4618      	mov	r0, r3
 800954c:	f7ff fc92 	bl	8008e74 <netbuf_delete>
        }
        buf = NULL;
 8009550:	2300      	movs	r3, #0
 8009552:	62bb      	str	r3, [r7, #40]	; 0x28
      }
    }
  } while (!done);
 8009554:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8009558:	2b00      	cmp	r3, #0
 800955a:	f43f ae73 	beq.w	8009244 <lwip_recvfrom+0x30>

  sock_set_errno(sock, 0);
 800955e:	2300      	movs	r3, #0
 8009560:	63bb      	str	r3, [r7, #56]	; 0x38
 8009562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009564:	b2da      	uxtb	r2, r3
 8009566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009568:	741a      	strb	r2, [r3, #16]
 800956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <lwip_recvfrom+0x362>
 8009570:	4a03      	ldr	r2, [pc, #12]	; (8009580 <lwip_recvfrom+0x36c>)
 8009572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009574:	6013      	str	r3, [r2, #0]
  return off;
 8009576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009578:	4618      	mov	r0, r3
 800957a:	375c      	adds	r7, #92	; 0x5c
 800957c:	46bd      	mov	sp, r7
 800957e:	bd90      	pop	{r4, r7, pc}
 8009580:	2000ab50 	.word	0x2000ab50

08009584 <lwip_recv>:
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
}

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af02      	add	r7, sp, #8
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 8009592:	2300      	movs	r3, #0
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	2300      	movs	r3, #0
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	68b9      	ldr	r1, [r7, #8]
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f7ff fe37 	bl	8009214 <lwip_recvfrom>
 80095a6:	4603      	mov	r3, r0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08a      	sub	sp, #40	; 0x28
 80095b4:	af02      	add	r7, sp, #8
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f7ff fcea 	bl	8008f98 <get_socket>
 80095c4:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d102      	bne.n	80095d2 <lwip_send+0x22>
    return -1;
 80095cc:	f04f 33ff 	mov.w	r3, #4294967295
 80095d0:	e04c      	b.n	800966c <lwip_send+0xbc>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095dc:	2b10      	cmp	r3, #16
 80095de:	d00b      	beq.n	80095f8 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80095e0:	2300      	movs	r3, #0
 80095e2:	9301      	str	r3, [sp, #4]
 80095e4:	2300      	movs	r3, #0
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	68b9      	ldr	r1, [r7, #8]
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f000 f842 	bl	8009678 <lwip_sendto>
 80095f4:	4603      	mov	r3, r0
 80095f6:	e039      	b.n	800966c <lwip_send+0xbc>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	f003 0310 	and.w	r3, r3, #16
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <lwip_send+0x56>
 8009602:	2203      	movs	r2, #3
 8009604:	e000      	b.n	8009608 <lwip_send+0x58>
 8009606:	2201      	movs	r2, #1
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	f003 0308 	and.w	r3, r3, #8
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <lwip_send+0x66>
 8009612:	2304      	movs	r3, #4
 8009614:	e000      	b.n	8009618 <lwip_send+0x68>
 8009616:	2300      	movs	r3, #0
 8009618:	4313      	orrs	r3, r2
 800961a:	b25b      	sxtb	r3, r3
  write_flags = NETCONN_COPY |
 800961c:	76fb      	strb	r3, [r7, #27]
  written = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	7efa      	ldrb	r2, [r7, #27]
 8009628:	f107 0310 	add.w	r3, r7, #16
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	4613      	mov	r3, r2
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	68b9      	ldr	r1, [r7, #8]
 8009634:	f7fd fe3c 	bl	80072b0 <netconn_write_partly>
 8009638:	4603      	mov	r3, r0
 800963a:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800963c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009640:	4618      	mov	r0, r3
 8009642:	f7ff fbf9 	bl	8008e38 <err_to_errno>
 8009646:	6178      	str	r0, [r7, #20]
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	b2da      	uxtb	r2, r3
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	741a      	strb	r2, [r3, #16]
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d002      	beq.n	800965c <lwip_send+0xac>
 8009656:	4a07      	ldr	r2, [pc, #28]	; (8009674 <lwip_send+0xc4>)
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	6013      	str	r3, [r2, #0]
  return (err == ERR_OK ? (int)written : -1);
 800965c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <lwip_send+0xb8>
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	e001      	b.n	800966c <lwip_send+0xbc>
 8009668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800966c:	4618      	mov	r0, r3
 800966e:	3720      	adds	r7, #32
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	2000ab50 	.word	0x2000ab50

08009678 <lwip_sendto>:
}

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b08e      	sub	sp, #56	; 0x38
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff fc86 	bl	8008f98 <get_socket>
 800968c:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800968e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009690:	2b00      	cmp	r3, #0
 8009692:	d102      	bne.n	800969a <lwip_sendto+0x22>
    return -1;
 8009694:	f04f 33ff 	mov.w	r3, #4294967295
 8009698:	e094      	b.n	80097c4 <lwip_sendto+0x14c>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800969a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096a4:	2b10      	cmp	r3, #16
 80096a6:	d107      	bne.n	80096b8 <lwip_sendto+0x40>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	68b9      	ldr	r1, [r7, #8]
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f7ff ff7e 	bl	80095b0 <lwip_send>
 80096b4:	4603      	mov	r3, r0
 80096b6:	e085      	b.n	80097c4 <lwip_sendto+0x14c>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096be:	d306      	bcc.n	80096ce <lwip_sendto+0x56>
 80096c0:	4b42      	ldr	r3, [pc, #264]	; (80097cc <lwip_sendto+0x154>)
 80096c2:	f240 427b 	movw	r2, #1147	; 0x47b
 80096c6:	4942      	ldr	r1, [pc, #264]	; (80097d0 <lwip_sendto+0x158>)
 80096c8:	4842      	ldr	r0, [pc, #264]	; (80097d4 <lwip_sendto+0x15c>)
 80096ca:	f00a fd03 	bl	80140d4 <iprintf>
  short_size = (u16_t)size;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80096d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d102      	bne.n	80096de <lwip_sendto+0x66>
 80096d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d024      	beq.n	8009728 <lwip_sendto+0xb0>
 80096de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096e0:	2b10      	cmp	r3, #16
 80096e2:	d108      	bne.n	80096f6 <lwip_sendto+0x7e>
 80096e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096e6:	785b      	ldrb	r3, [r3, #1]
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d104      	bne.n	80096f6 <lwip_sendto+0x7e>
 80096ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ee:	f003 0303 	and.w	r3, r3, #3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d018      	beq.n	8009728 <lwip_sendto+0xb0>
 80096f6:	4b35      	ldr	r3, [pc, #212]	; (80097cc <lwip_sendto+0x154>)
 80096f8:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80096fc:	4936      	ldr	r1, [pc, #216]	; (80097d8 <lwip_sendto+0x160>)
 80096fe:	4835      	ldr	r0, [pc, #212]	; (80097d4 <lwip_sendto+0x15c>)
 8009700:	f00a fce8 	bl	80140d4 <iprintf>
 8009704:	f06f 000f 	mvn.w	r0, #15
 8009708:	f7ff fb96 	bl	8008e38 <err_to_errno>
 800970c:	62b8      	str	r0, [r7, #40]	; 0x28
 800970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009710:	b2da      	uxtb	r2, r3
 8009712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009714:	741a      	strb	r2, [r3, #16]
 8009716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009718:	2b00      	cmp	r3, #0
 800971a:	d002      	beq.n	8009722 <lwip_sendto+0xaa>
 800971c:	4a2f      	ldr	r2, [pc, #188]	; (80097dc <lwip_sendto+0x164>)
 800971e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009720:	6013      	str	r3, [r2, #0]
 8009722:	f04f 33ff 	mov.w	r3, #4294967295
 8009726:	e04d      	b.n	80097c4 <lwip_sendto+0x14c>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 8009728:	2300      	movs	r3, #0
 800972a:	61bb      	str	r3, [r7, #24]
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	617b      	str	r3, [r7, #20]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8009730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00a      	beq.n	800974c <lwip_sendto+0xd4>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8009736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	61fb      	str	r3, [r7, #28]
 800973c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800973e:	885b      	ldrh	r3, [r3, #2]
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fb21 	bl	8009d88 <lwip_htons>
 8009746:	4603      	mov	r3, r0
 8009748:	86bb      	strh	r3, [r7, #52]	; 0x34
 800974a:	e003      	b.n	8009754 <lwip_sendto+0xdc>
  } else {
    remote_port = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8009750:	2300      	movs	r3, #0
 8009752:	61fb      	str	r3, [r7, #28]
  }
  netbuf_fromport(&buf) = remote_port;
 8009754:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009756:	843b      	strh	r3, [r7, #32]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8009758:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800975a:	f107 0314 	add.w	r3, r7, #20
 800975e:	68b9      	ldr	r1, [r7, #8]
 8009760:	4618      	mov	r0, r3
 8009762:	f7ff fbcf 	bl	8008f04 <netbuf_ref>
 8009766:	4603      	mov	r3, r0
 8009768:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800976c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10a      	bne.n	800978a <lwip_sendto+0x112>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8009774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f107 0214 	add.w	r2, r7, #20
 800977c:	4611      	mov	r1, r2
 800977e:	4618      	mov	r0, r3
 8009780:	f7fd fd6a 	bl	8007258 <netconn_send>
 8009784:	4603      	mov	r3, r0
 8009786:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800978a:	f107 0314 	add.w	r3, r7, #20
 800978e:	4618      	mov	r0, r3
 8009790:	f7ff fb90 	bl	8008eb4 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8009794:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009798:	4618      	mov	r0, r3
 800979a:	f7ff fb4d 	bl	8008e38 <err_to_errno>
 800979e:	6278      	str	r0, [r7, #36]	; 0x24
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a6:	741a      	strb	r2, [r3, #16]
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d002      	beq.n	80097b4 <lwip_sendto+0x13c>
 80097ae:	4a0b      	ldr	r2, [pc, #44]	; (80097dc <lwip_sendto+0x164>)
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	6013      	str	r3, [r2, #0]
  return (err == ERR_OK ? short_size : -1);
 80097b4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <lwip_sendto+0x148>
 80097bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80097be:	e001      	b.n	80097c4 <lwip_sendto+0x14c>
 80097c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3738      	adds	r7, #56	; 0x38
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	08015e60 	.word	0x08015e60
 80097d0:	08016024 	.word	0x08016024
 80097d4:	08015ea4 	.word	0x08015ea4
 80097d8:	08016048 	.word	0x08016048
 80097dc:	2000ab50 	.word	0x2000ab50

080097e0 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d00d      	beq.n	800980e <lwip_socket+0x2e>
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d002      	beq.n	80097fc <lwip_socket+0x1c>
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d016      	beq.n	8009828 <lwip_socket+0x48>
 80097fa:	e01c      	b.n	8009836 <lwip_socket+0x56>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	4a21      	ldr	r2, [pc, #132]	; (8009888 <lwip_socket+0xa8>)
 8009802:	4619      	mov	r1, r3
 8009804:	2040      	movs	r0, #64	; 0x40
 8009806:	f7fd fa63 	bl	8006cd0 <netconn_new_with_proto_and_callback>
 800980a:	6178      	str	r0, [r7, #20]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 800980c:	e019      	b.n	8009842 <lwip_socket+0x62>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2b88      	cmp	r3, #136	; 0x88
 8009812:	d101      	bne.n	8009818 <lwip_socket+0x38>
 8009814:	2321      	movs	r3, #33	; 0x21
 8009816:	e000      	b.n	800981a <lwip_socket+0x3a>
 8009818:	2320      	movs	r3, #32
 800981a:	4a1b      	ldr	r2, [pc, #108]	; (8009888 <lwip_socket+0xa8>)
 800981c:	2100      	movs	r1, #0
 800981e:	4618      	mov	r0, r3
 8009820:	f7fd fa56 	bl	8006cd0 <netconn_new_with_proto_and_callback>
 8009824:	6178      	str	r0, [r7, #20]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 8009826:	e00c      	b.n	8009842 <lwip_socket+0x62>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
 8009828:	4a17      	ldr	r2, [pc, #92]	; (8009888 <lwip_socket+0xa8>)
 800982a:	2100      	movs	r1, #0
 800982c:	2010      	movs	r0, #16
 800982e:	f7fd fa4f 	bl	8006cd0 <netconn_new_with_proto_and_callback>
 8009832:	6178      	str	r0, [r7, #20]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 8009834:	e005      	b.n	8009842 <lwip_socket+0x62>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
 8009836:	4b15      	ldr	r3, [pc, #84]	; (800988c <lwip_socket+0xac>)
 8009838:	2216      	movs	r2, #22
 800983a:	601a      	str	r2, [r3, #0]
    return -1;
 800983c:	f04f 33ff 	mov.w	r3, #4294967295
 8009840:	e01e      	b.n	8009880 <lwip_socket+0xa0>
  }

  if (!conn) {
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d105      	bne.n	8009854 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 8009848:	4b10      	ldr	r3, [pc, #64]	; (800988c <lwip_socket+0xac>)
 800984a:	2269      	movs	r2, #105	; 0x69
 800984c:	601a      	str	r2, [r3, #0]
    return -1;
 800984e:	f04f 33ff 	mov.w	r3, #4294967295
 8009852:	e015      	b.n	8009880 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 8009854:	2100      	movs	r1, #0
 8009856:	6978      	ldr	r0, [r7, #20]
 8009858:	f7ff fbc8 	bl	8008fec <alloc_socket>
 800985c:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009864:	d108      	bne.n	8009878 <lwip_socket+0x98>
    netconn_delete(conn);
 8009866:	6978      	ldr	r0, [r7, #20]
 8009868:	f7fd faac 	bl	8006dc4 <netconn_delete>
    set_errno(ENFILE);
 800986c:	4b07      	ldr	r3, [pc, #28]	; (800988c <lwip_socket+0xac>)
 800986e:	2217      	movs	r2, #23
 8009870:	601a      	str	r2, [r3, #0]
    return -1;
 8009872:	f04f 33ff 	mov.w	r3, #4294967295
 8009876:	e003      	b.n	8009880 <lwip_socket+0xa0>
  }
  conn->socket = i;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	619a      	str	r2, [r3, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800987e:	693b      	ldr	r3, [r7, #16]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3718      	adds	r7, #24
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	08009891 	.word	0x08009891
 800988c:	2000ab50 	.word	0x2000ab50

08009890 <event_callback>:
 * Callback registered in the netconn layer for each socket-netconn.
 * Processes recvevent (data available) and wakes up tasks waiting for select.
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
 800989c:	4613      	mov	r3, r2
 800989e:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 80ea 	beq.w	8009a7c <event_callback+0x1ec>
    s = conn->socket;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	61fb      	str	r3, [r7, #28]
    if (s < 0) {
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	da18      	bge.n	80098e6 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 80098b4:	f00a fb52 	bl	8013f5c <sys_arch_protect>
 80098b8:	6178      	str	r0, [r7, #20]
      if (conn->socket < 0) {
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	da0b      	bge.n	80098da <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 80098c2:	78fb      	ldrb	r3, [r7, #3]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d104      	bne.n	80098d2 <event_callback+0x42>
          conn->socket--;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	1e5a      	subs	r2, r3, #1
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 80098d2:	6978      	ldr	r0, [r7, #20]
 80098d4:	f00a fb50 	bl	8013f78 <sys_arch_unprotect>
        return;
 80098d8:	e0d3      	b.n	8009a82 <event_callback+0x1f2>
      }
      s = conn->socket;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	61fb      	str	r3, [r7, #28]
      SYS_ARCH_UNPROTECT(lev);
 80098e0:	6978      	ldr	r0, [r7, #20]
 80098e2:	f00a fb49 	bl	8013f78 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 80098e6:	69f8      	ldr	r0, [r7, #28]
 80098e8:	f7ff fb56 	bl	8008f98 <get_socket>
 80098ec:	60f8      	str	r0, [r7, #12]
    if (!sock) {
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 80c5 	beq.w	8009a80 <event_callback+0x1f0>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
 80098f6:	f00a fb31 	bl	8013f5c <sys_arch_protect>
 80098fa:	6178      	str	r0, [r7, #20]
  /* Set event as required */
  switch (evt) {
 80098fc:	78fb      	ldrb	r3, [r7, #3]
 80098fe:	2b04      	cmp	r3, #4
 8009900:	d82c      	bhi.n	800995c <event_callback+0xcc>
 8009902:	a201      	add	r2, pc, #4	; (adr r2, 8009908 <event_callback+0x78>)
 8009904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009908:	0800991d 	.word	0x0800991d
 800990c:	08009931 	.word	0x08009931
 8009910:	08009945 	.word	0x08009945
 8009914:	0800994d 	.word	0x0800994d
 8009918:	08009955 	.word	0x08009955
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009922:	b29b      	uxth	r3, r3
 8009924:	3301      	adds	r3, #1
 8009926:	b29b      	uxth	r3, r3
 8009928:	b21a      	sxth	r2, r3
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	815a      	strh	r2, [r3, #10]
      break;
 800992e:	e01d      	b.n	800996c <event_callback+0xdc>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009936:	b29b      	uxth	r3, r3
 8009938:	3b01      	subs	r3, #1
 800993a:	b29b      	uxth	r3, r3
 800993c:	b21a      	sxth	r2, r3
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	815a      	strh	r2, [r3, #10]
      break;
 8009942:	e013      	b.n	800996c <event_callback+0xdc>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2201      	movs	r2, #1
 8009948:	819a      	strh	r2, [r3, #12]
      break;
 800994a:	e00f      	b.n	800996c <event_callback+0xdc>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	819a      	strh	r2, [r3, #12]
      break;
 8009952:	e00b      	b.n	800996c <event_callback+0xdc>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2201      	movs	r2, #1
 8009958:	81da      	strh	r2, [r3, #14]
      break;
 800995a:	e007      	b.n	800996c <event_callback+0xdc>
    default:
      LWIP_ASSERT("unknown event", 0);
 800995c:	4b4a      	ldr	r3, [pc, #296]	; (8009a88 <event_callback+0x1f8>)
 800995e:	f240 625d 	movw	r2, #1629	; 0x65d
 8009962:	494a      	ldr	r1, [pc, #296]	; (8009a8c <event_callback+0x1fc>)
 8009964:	484a      	ldr	r0, [pc, #296]	; (8009a90 <event_callback+0x200>)
 8009966:	f00a fbb5 	bl	80140d4 <iprintf>
      break;
 800996a:	bf00      	nop
  }

  if (sock->select_waiting == 0) {
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	7c5b      	ldrb	r3, [r3, #17]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d103      	bne.n	800997c <event_callback+0xec>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
 8009974:	6978      	ldr	r0, [r7, #20]
 8009976:	f00a faff 	bl	8013f78 <sys_arch_unprotect>
    return;
 800997a:	e082      	b.n	8009a82 <event_callback+0x1f2>
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800997c:	4b45      	ldr	r3, [pc, #276]	; (8009a94 <event_callback+0x204>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	61bb      	str	r3, [r7, #24]
 8009982:	e074      	b.n	8009a6e <event_callback+0x1de>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
 8009984:	4b44      	ldr	r3, [pc, #272]	; (8009a98 <event_callback+0x208>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	60bb      	str	r3, [r7, #8]
    if (scb->sem_signalled == 0) {
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d15e      	bne.n	8009a50 <event_callback+0x1c0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	613b      	str	r3, [r7, #16]
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800999c:	2b00      	cmp	r3, #0
 800999e:	dd14      	ble.n	80099ca <event_callback+0x13a>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d010      	beq.n	80099ca <event_callback+0x13a>
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	69fa      	ldr	r2, [r7, #28]
 80099ae:	0952      	lsrs	r2, r2, #5
 80099b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b4:	69fa      	ldr	r2, [r7, #28]
 80099b6:	f002 021f 	and.w	r2, r2, #31
 80099ba:	2101      	movs	r1, #1
 80099bc:	fa01 f202 	lsl.w	r2, r1, r2
 80099c0:	4013      	ands	r3, r2
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d001      	beq.n	80099ca <event_callback+0x13a>
          do_signal = 1;
 80099c6:	2301      	movs	r3, #1
 80099c8:	613b      	str	r3, [r7, #16]
        }
      }
      if (sock->sendevent != 0) {
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	899b      	ldrh	r3, [r3, #12]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d017      	beq.n	8009a02 <event_callback+0x172>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d114      	bne.n	8009a02 <event_callback+0x172>
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d010      	beq.n	8009a02 <event_callback+0x172>
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	69fa      	ldr	r2, [r7, #28]
 80099e6:	0952      	lsrs	r2, r2, #5
 80099e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ec:	69fa      	ldr	r2, [r7, #28]
 80099ee:	f002 021f 	and.w	r2, r2, #31
 80099f2:	2101      	movs	r1, #1
 80099f4:	fa01 f202 	lsl.w	r2, r1, r2
 80099f8:	4013      	ands	r3, r2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <event_callback+0x172>
          do_signal = 1;
 80099fe:	2301      	movs	r3, #1
 8009a00:	613b      	str	r3, [r7, #16]
        }
      }
      if (sock->errevent != 0) {
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	89db      	ldrh	r3, [r3, #14]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d017      	beq.n	8009a3a <event_callback+0x1aa>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d114      	bne.n	8009a3a <event_callback+0x1aa>
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d010      	beq.n	8009a3a <event_callback+0x1aa>
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	69fa      	ldr	r2, [r7, #28]
 8009a1e:	0952      	lsrs	r2, r2, #5
 8009a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a24:	69fa      	ldr	r2, [r7, #28]
 8009a26:	f002 021f 	and.w	r2, r2, #31
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8009a30:	4013      	ands	r3, r2
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <event_callback+0x1aa>
          do_signal = 1;
 8009a36:	2301      	movs	r3, #1
 8009a38:	613b      	str	r3, [r7, #16]
        }
      }
      if (do_signal) {
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <event_callback+0x1c0>
        scb->sem_signalled = 1;
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	2201      	movs	r2, #1
 8009a44:	615a      	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	3318      	adds	r3, #24
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f00a f9e3 	bl	8013e16 <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
 8009a50:	6978      	ldr	r0, [r7, #20]
 8009a52:	f00a fa91 	bl	8013f78 <sys_arch_unprotect>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
 8009a56:	f00a fa81 	bl	8013f5c <sys_arch_protect>
 8009a5a:	6178      	str	r0, [r7, #20]
    if (last_select_cb_ctr != select_cb_ctr) {
 8009a5c:	4b0e      	ldr	r3, [pc, #56]	; (8009a98 <event_callback+0x208>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d000      	beq.n	8009a68 <event_callback+0x1d8>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
 8009a66:	e789      	b.n	800997c <event_callback+0xec>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	61bb      	str	r3, [r7, #24]
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d187      	bne.n	8009984 <event_callback+0xf4>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
 8009a74:	6978      	ldr	r0, [r7, #20]
 8009a76:	f00a fa7f 	bl	8013f78 <sys_arch_unprotect>
 8009a7a:	e002      	b.n	8009a82 <event_callback+0x1f2>
    return;
 8009a7c:	bf00      	nop
 8009a7e:	e000      	b.n	8009a82 <event_callback+0x1f2>
      return;
 8009a80:	bf00      	nop
}
 8009a82:	3720      	adds	r7, #32
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	08015e60 	.word	0x08015e60
 8009a8c:	080160c0 	.word	0x080160c0
 8009a90:	08015ea4 	.word	0x08015ea4
 8009a94:	20004098 	.word	0x20004098
 8009a98:	2000409c 	.word	0x2000409c

08009a9c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8009aa4:	4b29      	ldr	r3, [pc, #164]	; (8009b4c <tcpip_thread+0xb0>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d005      	beq.n	8009ab8 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8009aac:	4b27      	ldr	r3, [pc, #156]	; (8009b4c <tcpip_thread+0xb0>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a27      	ldr	r2, [pc, #156]	; (8009b50 <tcpip_thread+0xb4>)
 8009ab2:	6812      	ldr	r2, [r2, #0]
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8009ab8:	4826      	ldr	r0, [pc, #152]	; (8009b54 <tcpip_thread+0xb8>)
 8009aba:	f00a fa0d 	bl	8013ed8 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8009abe:	4825      	ldr	r0, [pc, #148]	; (8009b54 <tcpip_thread+0xb8>)
 8009ac0:	f00a fa19 	bl	8013ef6 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8009ac4:	f107 030c 	add.w	r3, r7, #12
 8009ac8:	4619      	mov	r1, r3
 8009aca:	4823      	ldr	r0, [pc, #140]	; (8009b58 <tcpip_thread+0xbc>)
 8009acc:	f009 fb86 	bl	80131dc <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009ad0:	4820      	ldr	r0, [pc, #128]	; (8009b54 <tcpip_thread+0xb8>)
 8009ad2:	f00a fa01 	bl	8013ed8 <sys_mutex_lock>
    if (msg == NULL) {
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d106      	bne.n	8009aea <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009adc:	4b1f      	ldr	r3, [pc, #124]	; (8009b5c <tcpip_thread+0xc0>)
 8009ade:	2269      	movs	r2, #105	; 0x69
 8009ae0:	491f      	ldr	r1, [pc, #124]	; (8009b60 <tcpip_thread+0xc4>)
 8009ae2:	4820      	ldr	r0, [pc, #128]	; (8009b64 <tcpip_thread+0xc8>)
 8009ae4:	f00a faf6 	bl	80140d4 <iprintf>
      continue;
 8009ae8:	e02f      	b.n	8009b4a <tcpip_thread+0xae>
    }
    switch (msg->type) {
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d011      	beq.n	8009b16 <tcpip_thread+0x7a>
 8009af2:	2b04      	cmp	r3, #4
 8009af4:	d01b      	beq.n	8009b2e <tcpip_thread+0x92>
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d120      	bne.n	8009b3c <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	6850      	ldr	r0, [r2, #4]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	6892      	ldr	r2, [r2, #8]
 8009b06:	4611      	mov	r1, r2
 8009b08:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	2009      	movs	r0, #9
 8009b10:	f002 ffec 	bl	800caec <memp_free>
      break;
 8009b14:	e019      	b.n	8009b4a <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	6892      	ldr	r2, [r2, #8]
 8009b1e:	4610      	mov	r0, r2
 8009b20:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4619      	mov	r1, r3
 8009b26:	2008      	movs	r0, #8
 8009b28:	f002 ffe0 	bl	800caec <memp_free>
      break;
 8009b2c:	e00d      	b.n	8009b4a <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	6892      	ldr	r2, [r2, #8]
 8009b36:	4610      	mov	r0, r2
 8009b38:	4798      	blx	r3
      break;
 8009b3a:	e006      	b.n	8009b4a <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009b3c:	4b07      	ldr	r3, [pc, #28]	; (8009b5c <tcpip_thread+0xc0>)
 8009b3e:	229b      	movs	r2, #155	; 0x9b
 8009b40:	4907      	ldr	r1, [pc, #28]	; (8009b60 <tcpip_thread+0xc4>)
 8009b42:	4808      	ldr	r0, [pc, #32]	; (8009b64 <tcpip_thread+0xc8>)
 8009b44:	f00a fac6 	bl	80140d4 <iprintf>
      break;
 8009b48:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 8009b4a:	e7b8      	b.n	8009abe <tcpip_thread+0x22>
 8009b4c:	200040a0 	.word	0x200040a0
 8009b50:	200040a4 	.word	0x200040a4
 8009b54:	20007420 	.word	0x20007420
 8009b58:	200040a8 	.word	0x200040a8
 8009b5c:	080160d0 	.word	0x080160d0
 8009b60:	08016100 	.word	0x08016100
 8009b64:	08016120 	.word	0x08016120

08009b68 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8009b74:	481a      	ldr	r0, [pc, #104]	; (8009be0 <tcpip_inpkt+0x78>)
 8009b76:	f00a f8d9 	bl	8013d2c <sys_mbox_valid>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d105      	bne.n	8009b8c <tcpip_inpkt+0x24>
 8009b80:	4b18      	ldr	r3, [pc, #96]	; (8009be4 <tcpip_inpkt+0x7c>)
 8009b82:	22b5      	movs	r2, #181	; 0xb5
 8009b84:	4918      	ldr	r1, [pc, #96]	; (8009be8 <tcpip_inpkt+0x80>)
 8009b86:	4819      	ldr	r0, [pc, #100]	; (8009bec <tcpip_inpkt+0x84>)
 8009b88:	f00a faa4 	bl	80140d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009b8c:	2009      	movs	r0, #9
 8009b8e:	f002 ff5b 	bl	800ca48 <memp_malloc>
 8009b92:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d102      	bne.n	8009ba0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9e:	e01a      	b.n	8009bd6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8009bb8:	6979      	ldr	r1, [r7, #20]
 8009bba:	4809      	ldr	r0, [pc, #36]	; (8009be0 <tcpip_inpkt+0x78>)
 8009bbc:	f00a f841 	bl	8013c42 <sys_mbox_trypost>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d006      	beq.n	8009bd4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009bc6:	6979      	ldr	r1, [r7, #20]
 8009bc8:	2009      	movs	r0, #9
 8009bca:	f002 ff8f 	bl	800caec <memp_free>
    return ERR_MEM;
 8009bce:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd2:	e000      	b.n	8009bd6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009bd4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	200040a8 	.word	0x200040a8
 8009be4:	080160d0 	.word	0x080160d0
 8009be8:	08016148 	.word	0x08016148
 8009bec:	08016120 	.word	0x08016120

08009bf0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c00:	f003 0318 	and.w	r3, r3, #24
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d006      	beq.n	8009c16 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009c08:	4a08      	ldr	r2, [pc, #32]	; (8009c2c <tcpip_input+0x3c>)
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f7ff ffab 	bl	8009b68 <tcpip_inpkt>
 8009c12:	4603      	mov	r3, r0
 8009c14:	e005      	b.n	8009c22 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8009c16:	4a06      	ldr	r2, [pc, #24]	; (8009c30 <tcpip_input+0x40>)
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f7ff ffa4 	bl	8009b68 <tcpip_inpkt>
 8009c20:	4603      	mov	r3, r0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	080139fd 	.word	0x080139fd
 8009c30:	0800b015 	.word	0x0800b015

08009c34 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8009c42:	481d      	ldr	r0, [pc, #116]	; (8009cb8 <tcpip_callback_with_block+0x84>)
 8009c44:	f00a f872 	bl	8013d2c <sys_mbox_valid>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d105      	bne.n	8009c5a <tcpip_callback_with_block+0x26>
 8009c4e:	4b1b      	ldr	r3, [pc, #108]	; (8009cbc <tcpip_callback_with_block+0x88>)
 8009c50:	22ee      	movs	r2, #238	; 0xee
 8009c52:	491b      	ldr	r1, [pc, #108]	; (8009cc0 <tcpip_callback_with_block+0x8c>)
 8009c54:	481b      	ldr	r0, [pc, #108]	; (8009cc4 <tcpip_callback_with_block+0x90>)
 8009c56:	f00a fa3d 	bl	80140d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009c5a:	2008      	movs	r0, #8
 8009c5c:	f002 fef4 	bl	800ca48 <memp_malloc>
 8009c60:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d102      	bne.n	8009c6e <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8009c68:	f04f 33ff 	mov.w	r3, #4294967295
 8009c6c:	e01f      	b.n	8009cae <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2203      	movs	r2, #3
 8009c72:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	609a      	str	r2, [r3, #8]
  if (block) {
 8009c80:	79fb      	ldrb	r3, [r7, #7]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d004      	beq.n	8009c90 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8009c86:	6979      	ldr	r1, [r7, #20]
 8009c88:	480b      	ldr	r0, [pc, #44]	; (8009cb8 <tcpip_callback_with_block+0x84>)
 8009c8a:	f009 ffc5 	bl	8013c18 <sys_mbox_post>
 8009c8e:	e00d      	b.n	8009cac <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8009c90:	6979      	ldr	r1, [r7, #20]
 8009c92:	4809      	ldr	r0, [pc, #36]	; (8009cb8 <tcpip_callback_with_block+0x84>)
 8009c94:	f009 ffd5 	bl	8013c42 <sys_mbox_trypost>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d006      	beq.n	8009cac <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009c9e:	6979      	ldr	r1, [r7, #20]
 8009ca0:	2008      	movs	r0, #8
 8009ca2:	f002 ff23 	bl	800caec <memp_free>
      return ERR_MEM;
 8009ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8009caa:	e000      	b.n	8009cae <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	200040a8 	.word	0x200040a8
 8009cbc:	080160d0 	.word	0x080160d0
 8009cc0:	08016148 	.word	0x08016148
 8009cc4:	08016120 	.word	0x08016120

08009cc8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009cd4:	4806      	ldr	r0, [pc, #24]	; (8009cf0 <tcpip_send_msg_wait_sem+0x28>)
 8009cd6:	f00a f8ff 	bl	8013ed8 <sys_mutex_lock>
  fn(apimsg);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	68b8      	ldr	r0, [r7, #8]
 8009cde:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009ce0:	4803      	ldr	r0, [pc, #12]	; (8009cf0 <tcpip_send_msg_wait_sem+0x28>)
 8009ce2:	f00a f908 	bl	8013ef6 <sys_mutex_unlock>
  return ERR_OK;
 8009ce6:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	20007420 	.word	0x20007420

08009cf4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af02      	add	r7, sp, #8
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009cfe:	f000 f868 	bl	8009dd2 <lwip_init>

  tcpip_init_done = initfunc;
 8009d02:	4a17      	ldr	r2, [pc, #92]	; (8009d60 <tcpip_init+0x6c>)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009d08:	4a16      	ldr	r2, [pc, #88]	; (8009d64 <tcpip_init+0x70>)
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009d0e:	2106      	movs	r1, #6
 8009d10:	4815      	ldr	r0, [pc, #84]	; (8009d68 <tcpip_init+0x74>)
 8009d12:	f009 ff4d 	bl	8013bb0 <sys_mbox_new>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d006      	beq.n	8009d2a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009d1c:	4b13      	ldr	r3, [pc, #76]	; (8009d6c <tcpip_init+0x78>)
 8009d1e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8009d22:	4913      	ldr	r1, [pc, #76]	; (8009d70 <tcpip_init+0x7c>)
 8009d24:	4813      	ldr	r0, [pc, #76]	; (8009d74 <tcpip_init+0x80>)
 8009d26:	f00a f9d5 	bl	80140d4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009d2a:	4813      	ldr	r0, [pc, #76]	; (8009d78 <tcpip_init+0x84>)
 8009d2c:	f00a f8b8 	bl	8013ea0 <sys_mutex_new>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d006      	beq.n	8009d44 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009d36:	4b0d      	ldr	r3, [pc, #52]	; (8009d6c <tcpip_init+0x78>)
 8009d38:	f240 12d9 	movw	r2, #473	; 0x1d9
 8009d3c:	490f      	ldr	r1, [pc, #60]	; (8009d7c <tcpip_init+0x88>)
 8009d3e:	480d      	ldr	r0, [pc, #52]	; (8009d74 <tcpip_init+0x80>)
 8009d40:	f00a f9c8 	bl	80140d4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009d44:	2300      	movs	r3, #0
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	490c      	ldr	r1, [pc, #48]	; (8009d80 <tcpip_init+0x8c>)
 8009d50:	480c      	ldr	r0, [pc, #48]	; (8009d84 <tcpip_init+0x90>)
 8009d52:	f00a f8dd 	bl	8013f10 <sys_thread_new>
}
 8009d56:	bf00      	nop
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	200040a0 	.word	0x200040a0
 8009d64:	200040a4 	.word	0x200040a4
 8009d68:	200040a8 	.word	0x200040a8
 8009d6c:	080160d0 	.word	0x080160d0
 8009d70:	08016158 	.word	0x08016158
 8009d74:	08016120 	.word	0x08016120
 8009d78:	20007420 	.word	0x20007420
 8009d7c:	0801617c 	.word	0x0801617c
 8009d80:	08009a9d 	.word	0x08009a9d
 8009d84:	080161a0 	.word	0x080161a0

08009d88 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8009d92:	88fb      	ldrh	r3, [r7, #6]
 8009d94:	ba5b      	rev16	r3, r3
 8009d96:	b29b      	uxth	r3, r3
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bc80      	pop	{r7}
 8009da0:	4770      	bx	lr

08009da2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	061a      	lsls	r2, r3, #24
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	021b      	lsls	r3, r3, #8
 8009db2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009db6:	431a      	orrs	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	0a1b      	lsrs	r3, r3, #8
 8009dbc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009dc0:	431a      	orrs	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	0e1b      	lsrs	r3, r3, #24
 8009dc6:	4313      	orrs	r3, r2
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bc80      	pop	{r7}
 8009dd0:	4770      	bx	lr

08009dd2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009ddc:	f00a f852 	bl	8013e84 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009de0:	f002 fb1c 	bl	800c41c <mem_init>
  memp_init();
 8009de4:	f002 fde4 	bl	800c9b0 <memp_init>
  pbuf_init();
  netif_init();
 8009de8:	f002 feaa 	bl	800cb40 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009dec:	f009 fa1c 	bl	8013228 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009df0:	f003 feb4 	bl	800db5c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8009df4:	f009 f8ae 	bl	8012f54 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8009e08:	4915      	ldr	r1, [pc, #84]	; (8009e60 <etharp_free_entry+0x60>)
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	005b      	lsls	r3, r3, #1
 8009e10:	4413      	add	r3, r2
 8009e12:	00db      	lsls	r3, r3, #3
 8009e14:	440b      	add	r3, r1
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d013      	beq.n	8009e44 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009e1c:	4910      	ldr	r1, [pc, #64]	; (8009e60 <etharp_free_entry+0x60>)
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	4613      	mov	r3, r2
 8009e22:	005b      	lsls	r3, r3, #1
 8009e24:	4413      	add	r3, r2
 8009e26:	00db      	lsls	r3, r3, #3
 8009e28:	440b      	add	r3, r1
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f003 fc11 	bl	800d654 <pbuf_free>
    arp_table[i].q = NULL;
 8009e32:	490b      	ldr	r1, [pc, #44]	; (8009e60 <etharp_free_entry+0x60>)
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	4613      	mov	r3, r2
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	4413      	add	r3, r2
 8009e3c:	00db      	lsls	r3, r3, #3
 8009e3e:	440b      	add	r3, r1
 8009e40:	2200      	movs	r2, #0
 8009e42:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8009e44:	4906      	ldr	r1, [pc, #24]	; (8009e60 <etharp_free_entry+0x60>)
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	005b      	lsls	r3, r3, #1
 8009e4c:	4413      	add	r3, r2
 8009e4e:	00db      	lsls	r3, r3, #3
 8009e50:	440b      	add	r3, r1
 8009e52:	3314      	adds	r3, #20
 8009e54:	2200      	movs	r2, #0
 8009e56:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8009e58:	bf00      	nop
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	200040ac 	.word	0x200040ac

08009e64 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	71fb      	strb	r3, [r7, #7]
 8009e6e:	e096      	b.n	8009f9e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8009e70:	79fa      	ldrb	r2, [r7, #7]
 8009e72:	494f      	ldr	r1, [pc, #316]	; (8009fb0 <etharp_tmr+0x14c>)
 8009e74:	4613      	mov	r3, r2
 8009e76:	005b      	lsls	r3, r3, #1
 8009e78:	4413      	add	r3, r2
 8009e7a:	00db      	lsls	r3, r3, #3
 8009e7c:	440b      	add	r3, r1
 8009e7e:	3314      	adds	r3, #20
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8009e84:	79bb      	ldrb	r3, [r7, #6]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 8086 	beq.w	8009f98 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8009e8c:	79fa      	ldrb	r2, [r7, #7]
 8009e8e:	4948      	ldr	r1, [pc, #288]	; (8009fb0 <etharp_tmr+0x14c>)
 8009e90:	4613      	mov	r3, r2
 8009e92:	005b      	lsls	r3, r3, #1
 8009e94:	4413      	add	r3, r2
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	440b      	add	r3, r1
 8009e9a:	3312      	adds	r3, #18
 8009e9c:	881b      	ldrh	r3, [r3, #0]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	b298      	uxth	r0, r3
 8009ea2:	4943      	ldr	r1, [pc, #268]	; (8009fb0 <etharp_tmr+0x14c>)
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	005b      	lsls	r3, r3, #1
 8009ea8:	4413      	add	r3, r2
 8009eaa:	00db      	lsls	r3, r3, #3
 8009eac:	440b      	add	r3, r1
 8009eae:	3312      	adds	r3, #18
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009eb4:	79fa      	ldrb	r2, [r7, #7]
 8009eb6:	493e      	ldr	r1, [pc, #248]	; (8009fb0 <etharp_tmr+0x14c>)
 8009eb8:	4613      	mov	r3, r2
 8009eba:	005b      	lsls	r3, r3, #1
 8009ebc:	4413      	add	r3, r2
 8009ebe:	00db      	lsls	r3, r3, #3
 8009ec0:	440b      	add	r3, r1
 8009ec2:	3312      	adds	r3, #18
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009eca:	d215      	bcs.n	8009ef8 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009ecc:	79fa      	ldrb	r2, [r7, #7]
 8009ece:	4938      	ldr	r1, [pc, #224]	; (8009fb0 <etharp_tmr+0x14c>)
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	005b      	lsls	r3, r3, #1
 8009ed4:	4413      	add	r3, r2
 8009ed6:	00db      	lsls	r3, r3, #3
 8009ed8:	440b      	add	r3, r1
 8009eda:	3314      	adds	r3, #20
 8009edc:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d10f      	bne.n	8009f02 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8009ee2:	79fa      	ldrb	r2, [r7, #7]
 8009ee4:	4932      	ldr	r1, [pc, #200]	; (8009fb0 <etharp_tmr+0x14c>)
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	005b      	lsls	r3, r3, #1
 8009eea:	4413      	add	r3, r2
 8009eec:	00db      	lsls	r3, r3, #3
 8009eee:	440b      	add	r3, r1
 8009ef0:	3312      	adds	r3, #18
 8009ef2:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009ef4:	2b04      	cmp	r3, #4
 8009ef6:	d904      	bls.n	8009f02 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8009ef8:	79fb      	ldrb	r3, [r7, #7]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7ff ff80 	bl	8009e00 <etharp_free_entry>
 8009f00:	e04a      	b.n	8009f98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8009f02:	79fa      	ldrb	r2, [r7, #7]
 8009f04:	492a      	ldr	r1, [pc, #168]	; (8009fb0 <etharp_tmr+0x14c>)
 8009f06:	4613      	mov	r3, r2
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	4413      	add	r3, r2
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	440b      	add	r3, r1
 8009f10:	3314      	adds	r3, #20
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	2b03      	cmp	r3, #3
 8009f16:	d10a      	bne.n	8009f2e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009f18:	79fa      	ldrb	r2, [r7, #7]
 8009f1a:	4925      	ldr	r1, [pc, #148]	; (8009fb0 <etharp_tmr+0x14c>)
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	005b      	lsls	r3, r3, #1
 8009f20:	4413      	add	r3, r2
 8009f22:	00db      	lsls	r3, r3, #3
 8009f24:	440b      	add	r3, r1
 8009f26:	3314      	adds	r3, #20
 8009f28:	2204      	movs	r2, #4
 8009f2a:	701a      	strb	r2, [r3, #0]
 8009f2c:	e034      	b.n	8009f98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8009f2e:	79fa      	ldrb	r2, [r7, #7]
 8009f30:	491f      	ldr	r1, [pc, #124]	; (8009fb0 <etharp_tmr+0x14c>)
 8009f32:	4613      	mov	r3, r2
 8009f34:	005b      	lsls	r3, r3, #1
 8009f36:	4413      	add	r3, r2
 8009f38:	00db      	lsls	r3, r3, #3
 8009f3a:	440b      	add	r3, r1
 8009f3c:	3314      	adds	r3, #20
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	d10a      	bne.n	8009f5a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009f44:	79fa      	ldrb	r2, [r7, #7]
 8009f46:	491a      	ldr	r1, [pc, #104]	; (8009fb0 <etharp_tmr+0x14c>)
 8009f48:	4613      	mov	r3, r2
 8009f4a:	005b      	lsls	r3, r3, #1
 8009f4c:	4413      	add	r3, r2
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	440b      	add	r3, r1
 8009f52:	3314      	adds	r3, #20
 8009f54:	2202      	movs	r2, #2
 8009f56:	701a      	strb	r2, [r3, #0]
 8009f58:	e01e      	b.n	8009f98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009f5a:	79fa      	ldrb	r2, [r7, #7]
 8009f5c:	4914      	ldr	r1, [pc, #80]	; (8009fb0 <etharp_tmr+0x14c>)
 8009f5e:	4613      	mov	r3, r2
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	4413      	add	r3, r2
 8009f64:	00db      	lsls	r3, r3, #3
 8009f66:	440b      	add	r3, r1
 8009f68:	3314      	adds	r3, #20
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d113      	bne.n	8009f98 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8009f70:	79fa      	ldrb	r2, [r7, #7]
 8009f72:	490f      	ldr	r1, [pc, #60]	; (8009fb0 <etharp_tmr+0x14c>)
 8009f74:	4613      	mov	r3, r2
 8009f76:	005b      	lsls	r3, r3, #1
 8009f78:	4413      	add	r3, r2
 8009f7a:	00db      	lsls	r3, r3, #3
 8009f7c:	440b      	add	r3, r1
 8009f7e:	3308      	adds	r3, #8
 8009f80:	6818      	ldr	r0, [r3, #0]
 8009f82:	79fa      	ldrb	r2, [r7, #7]
 8009f84:	4613      	mov	r3, r2
 8009f86:	005b      	lsls	r3, r3, #1
 8009f88:	4413      	add	r3, r2
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	4a08      	ldr	r2, [pc, #32]	; (8009fb0 <etharp_tmr+0x14c>)
 8009f8e:	4413      	add	r3, r2
 8009f90:	3304      	adds	r3, #4
 8009f92:	4619      	mov	r1, r3
 8009f94:	f000 fe38 	bl	800ac08 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009f98:	79fb      	ldrb	r3, [r7, #7]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	71fb      	strb	r3, [r7, #7]
 8009f9e:	79fb      	ldrb	r3, [r7, #7]
 8009fa0:	2b09      	cmp	r3, #9
 8009fa2:	f67f af65 	bls.w	8009e70 <etharp_tmr+0xc>
      }
    }
  }
}
 8009fa6:	bf00      	nop
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	200040ac 	.word	0x200040ac

08009fb4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8009fc2:	230a      	movs	r3, #10
 8009fc4:	77fb      	strb	r3, [r7, #31]
 8009fc6:	230a      	movs	r3, #10
 8009fc8:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8009fca:	230a      	movs	r3, #10
 8009fcc:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8009fd2:	230a      	movs	r3, #10
 8009fd4:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	833b      	strh	r3, [r7, #24]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	82fb      	strh	r3, [r7, #22]
 8009fde:	2300      	movs	r3, #0
 8009fe0:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	773b      	strb	r3, [r7, #28]
 8009fe6:	e093      	b.n	800a110 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8009fe8:	7f3a      	ldrb	r2, [r7, #28]
 8009fea:	4990      	ldr	r1, [pc, #576]	; (800a22c <etharp_find_entry+0x278>)
 8009fec:	4613      	mov	r3, r2
 8009fee:	005b      	lsls	r3, r3, #1
 8009ff0:	4413      	add	r3, r2
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	440b      	add	r3, r1
 8009ff6:	3314      	adds	r3, #20
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009ffc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a000:	2b0a      	cmp	r3, #10
 800a002:	d105      	bne.n	800a010 <etharp_find_entry+0x5c>
 800a004:	7cfb      	ldrb	r3, [r7, #19]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d102      	bne.n	800a010 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800a00a:	7f3b      	ldrb	r3, [r7, #28]
 800a00c:	777b      	strb	r3, [r7, #29]
 800a00e:	e07c      	b.n	800a10a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a010:	7cfb      	ldrb	r3, [r7, #19]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d079      	beq.n	800a10a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800a016:	7cfb      	ldrb	r3, [r7, #19]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d009      	beq.n	800a030 <etharp_find_entry+0x7c>
 800a01c:	7cfb      	ldrb	r3, [r7, #19]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d806      	bhi.n	800a030 <etharp_find_entry+0x7c>
 800a022:	4b83      	ldr	r3, [pc, #524]	; (800a230 <etharp_find_entry+0x27c>)
 800a024:	f44f 7293 	mov.w	r2, #294	; 0x126
 800a028:	4982      	ldr	r1, [pc, #520]	; (800a234 <etharp_find_entry+0x280>)
 800a02a:	4883      	ldr	r0, [pc, #524]	; (800a238 <etharp_find_entry+0x284>)
 800a02c:	f00a f852 	bl	80140d4 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00f      	beq.n	800a056 <etharp_find_entry+0xa2>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6819      	ldr	r1, [r3, #0]
 800a03a:	7f3a      	ldrb	r2, [r7, #28]
 800a03c:	487b      	ldr	r0, [pc, #492]	; (800a22c <etharp_find_entry+0x278>)
 800a03e:	4613      	mov	r3, r2
 800a040:	005b      	lsls	r3, r3, #1
 800a042:	4413      	add	r3, r2
 800a044:	00db      	lsls	r3, r3, #3
 800a046:	4403      	add	r3, r0
 800a048:	3304      	adds	r3, #4
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4299      	cmp	r1, r3
 800a04e:	d102      	bne.n	800a056 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800a050:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a054:	e0e5      	b.n	800a222 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800a056:	7cfb      	ldrb	r3, [r7, #19]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d13b      	bne.n	800a0d4 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800a05c:	7f3a      	ldrb	r2, [r7, #28]
 800a05e:	4973      	ldr	r1, [pc, #460]	; (800a22c <etharp_find_entry+0x278>)
 800a060:	4613      	mov	r3, r2
 800a062:	005b      	lsls	r3, r3, #1
 800a064:	4413      	add	r3, r2
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	440b      	add	r3, r1
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d018      	beq.n	800a0a2 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800a070:	7f3a      	ldrb	r2, [r7, #28]
 800a072:	496e      	ldr	r1, [pc, #440]	; (800a22c <etharp_find_entry+0x278>)
 800a074:	4613      	mov	r3, r2
 800a076:	005b      	lsls	r3, r3, #1
 800a078:	4413      	add	r3, r2
 800a07a:	00db      	lsls	r3, r3, #3
 800a07c:	440b      	add	r3, r1
 800a07e:	3312      	adds	r3, #18
 800a080:	881b      	ldrh	r3, [r3, #0]
 800a082:	8b3a      	ldrh	r2, [r7, #24]
 800a084:	429a      	cmp	r2, r3
 800a086:	d840      	bhi.n	800a10a <etharp_find_entry+0x156>
            old_queue = i;
 800a088:	7f3b      	ldrb	r3, [r7, #28]
 800a08a:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800a08c:	7f3a      	ldrb	r2, [r7, #28]
 800a08e:	4967      	ldr	r1, [pc, #412]	; (800a22c <etharp_find_entry+0x278>)
 800a090:	4613      	mov	r3, r2
 800a092:	005b      	lsls	r3, r3, #1
 800a094:	4413      	add	r3, r2
 800a096:	00db      	lsls	r3, r3, #3
 800a098:	440b      	add	r3, r1
 800a09a:	3312      	adds	r3, #18
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	833b      	strh	r3, [r7, #24]
 800a0a0:	e033      	b.n	800a10a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800a0a2:	7f3a      	ldrb	r2, [r7, #28]
 800a0a4:	4961      	ldr	r1, [pc, #388]	; (800a22c <etharp_find_entry+0x278>)
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	005b      	lsls	r3, r3, #1
 800a0aa:	4413      	add	r3, r2
 800a0ac:	00db      	lsls	r3, r3, #3
 800a0ae:	440b      	add	r3, r1
 800a0b0:	3312      	adds	r3, #18
 800a0b2:	881b      	ldrh	r3, [r3, #0]
 800a0b4:	8afa      	ldrh	r2, [r7, #22]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d827      	bhi.n	800a10a <etharp_find_entry+0x156>
            old_pending = i;
 800a0ba:	7f3b      	ldrb	r3, [r7, #28]
 800a0bc:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800a0be:	7f3a      	ldrb	r2, [r7, #28]
 800a0c0:	495a      	ldr	r1, [pc, #360]	; (800a22c <etharp_find_entry+0x278>)
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	005b      	lsls	r3, r3, #1
 800a0c6:	4413      	add	r3, r2
 800a0c8:	00db      	lsls	r3, r3, #3
 800a0ca:	440b      	add	r3, r1
 800a0cc:	3312      	adds	r3, #18
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	82fb      	strh	r3, [r7, #22]
 800a0d2:	e01a      	b.n	800a10a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800a0d4:	7cfb      	ldrb	r3, [r7, #19]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d917      	bls.n	800a10a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800a0da:	7f3a      	ldrb	r2, [r7, #28]
 800a0dc:	4953      	ldr	r1, [pc, #332]	; (800a22c <etharp_find_entry+0x278>)
 800a0de:	4613      	mov	r3, r2
 800a0e0:	005b      	lsls	r3, r3, #1
 800a0e2:	4413      	add	r3, r2
 800a0e4:	00db      	lsls	r3, r3, #3
 800a0e6:	440b      	add	r3, r1
 800a0e8:	3312      	adds	r3, #18
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	8aba      	ldrh	r2, [r7, #20]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d80b      	bhi.n	800a10a <etharp_find_entry+0x156>
            old_stable = i;
 800a0f2:	7f3b      	ldrb	r3, [r7, #28]
 800a0f4:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800a0f6:	7f3a      	ldrb	r2, [r7, #28]
 800a0f8:	494c      	ldr	r1, [pc, #304]	; (800a22c <etharp_find_entry+0x278>)
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	005b      	lsls	r3, r3, #1
 800a0fe:	4413      	add	r3, r2
 800a100:	00db      	lsls	r3, r3, #3
 800a102:	440b      	add	r3, r1
 800a104:	3312      	adds	r3, #18
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a10a:	7f3b      	ldrb	r3, [r7, #28]
 800a10c:	3301      	adds	r3, #1
 800a10e:	773b      	strb	r3, [r7, #28]
 800a110:	7f3b      	ldrb	r3, [r7, #28]
 800a112:	2b09      	cmp	r3, #9
 800a114:	f67f af68 	bls.w	8009fe8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800a118:	7afb      	ldrb	r3, [r7, #11]
 800a11a:	f003 0302 	and.w	r3, r3, #2
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d108      	bne.n	800a134 <etharp_find_entry+0x180>
 800a122:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a126:	2b0a      	cmp	r3, #10
 800a128:	d107      	bne.n	800a13a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800a12a:	7afb      	ldrb	r3, [r7, #11]
 800a12c:	f003 0301 	and.w	r3, r3, #1
 800a130:	2b00      	cmp	r3, #0
 800a132:	d102      	bne.n	800a13a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800a134:	f04f 33ff 	mov.w	r3, #4294967295
 800a138:	e073      	b.n	800a222 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800a13a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a13e:	2b09      	cmp	r3, #9
 800a140:	dc02      	bgt.n	800a148 <etharp_find_entry+0x194>
    i = empty;
 800a142:	7f7b      	ldrb	r3, [r7, #29]
 800a144:	773b      	strb	r3, [r7, #28]
 800a146:	e036      	b.n	800a1b6 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800a148:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a14c:	2b09      	cmp	r3, #9
 800a14e:	dc13      	bgt.n	800a178 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800a150:	7fbb      	ldrb	r3, [r7, #30]
 800a152:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a154:	7f3a      	ldrb	r2, [r7, #28]
 800a156:	4935      	ldr	r1, [pc, #212]	; (800a22c <etharp_find_entry+0x278>)
 800a158:	4613      	mov	r3, r2
 800a15a:	005b      	lsls	r3, r3, #1
 800a15c:	4413      	add	r3, r2
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	440b      	add	r3, r1
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d018      	beq.n	800a19a <etharp_find_entry+0x1e6>
 800a168:	4b31      	ldr	r3, [pc, #196]	; (800a230 <etharp_find_entry+0x27c>)
 800a16a:	f240 126f 	movw	r2, #367	; 0x16f
 800a16e:	4933      	ldr	r1, [pc, #204]	; (800a23c <etharp_find_entry+0x288>)
 800a170:	4831      	ldr	r0, [pc, #196]	; (800a238 <etharp_find_entry+0x284>)
 800a172:	f009 ffaf 	bl	80140d4 <iprintf>
 800a176:	e010      	b.n	800a19a <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800a178:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a17c:	2b09      	cmp	r3, #9
 800a17e:	dc02      	bgt.n	800a186 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800a180:	7ffb      	ldrb	r3, [r7, #31]
 800a182:	773b      	strb	r3, [r7, #28]
 800a184:	e009      	b.n	800a19a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800a186:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a18a:	2b09      	cmp	r3, #9
 800a18c:	dc02      	bgt.n	800a194 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800a18e:	7efb      	ldrb	r3, [r7, #27]
 800a190:	773b      	strb	r3, [r7, #28]
 800a192:	e002      	b.n	800a19a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800a194:	f04f 33ff 	mov.w	r3, #4294967295
 800a198:	e043      	b.n	800a222 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a19a:	7f3b      	ldrb	r3, [r7, #28]
 800a19c:	2b09      	cmp	r3, #9
 800a19e:	d906      	bls.n	800a1ae <etharp_find_entry+0x1fa>
 800a1a0:	4b23      	ldr	r3, [pc, #140]	; (800a230 <etharp_find_entry+0x27c>)
 800a1a2:	f240 1281 	movw	r2, #385	; 0x181
 800a1a6:	4926      	ldr	r1, [pc, #152]	; (800a240 <etharp_find_entry+0x28c>)
 800a1a8:	4823      	ldr	r0, [pc, #140]	; (800a238 <etharp_find_entry+0x284>)
 800a1aa:	f009 ff93 	bl	80140d4 <iprintf>
    etharp_free_entry(i);
 800a1ae:	7f3b      	ldrb	r3, [r7, #28]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7ff fe25 	bl	8009e00 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a1b6:	7f3b      	ldrb	r3, [r7, #28]
 800a1b8:	2b09      	cmp	r3, #9
 800a1ba:	d906      	bls.n	800a1ca <etharp_find_entry+0x216>
 800a1bc:	4b1c      	ldr	r3, [pc, #112]	; (800a230 <etharp_find_entry+0x27c>)
 800a1be:	f240 1285 	movw	r2, #389	; 0x185
 800a1c2:	491f      	ldr	r1, [pc, #124]	; (800a240 <etharp_find_entry+0x28c>)
 800a1c4:	481c      	ldr	r0, [pc, #112]	; (800a238 <etharp_find_entry+0x284>)
 800a1c6:	f009 ff85 	bl	80140d4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a1ca:	7f3a      	ldrb	r2, [r7, #28]
 800a1cc:	4917      	ldr	r1, [pc, #92]	; (800a22c <etharp_find_entry+0x278>)
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	005b      	lsls	r3, r3, #1
 800a1d2:	4413      	add	r3, r2
 800a1d4:	00db      	lsls	r3, r3, #3
 800a1d6:	440b      	add	r3, r1
 800a1d8:	3314      	adds	r3, #20
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d006      	beq.n	800a1ee <etharp_find_entry+0x23a>
 800a1e0:	4b13      	ldr	r3, [pc, #76]	; (800a230 <etharp_find_entry+0x27c>)
 800a1e2:	f240 1287 	movw	r2, #391	; 0x187
 800a1e6:	4917      	ldr	r1, [pc, #92]	; (800a244 <etharp_find_entry+0x290>)
 800a1e8:	4813      	ldr	r0, [pc, #76]	; (800a238 <etharp_find_entry+0x284>)
 800a1ea:	f009 ff73 	bl	80140d4 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00a      	beq.n	800a20a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a1f4:	7f3a      	ldrb	r2, [r7, #28]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6819      	ldr	r1, [r3, #0]
 800a1fa:	480c      	ldr	r0, [pc, #48]	; (800a22c <etharp_find_entry+0x278>)
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	005b      	lsls	r3, r3, #1
 800a200:	4413      	add	r3, r2
 800a202:	00db      	lsls	r3, r3, #3
 800a204:	4403      	add	r3, r0
 800a206:	3304      	adds	r3, #4
 800a208:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800a20a:	7f3a      	ldrb	r2, [r7, #28]
 800a20c:	4907      	ldr	r1, [pc, #28]	; (800a22c <etharp_find_entry+0x278>)
 800a20e:	4613      	mov	r3, r2
 800a210:	005b      	lsls	r3, r3, #1
 800a212:	4413      	add	r3, r2
 800a214:	00db      	lsls	r3, r3, #3
 800a216:	440b      	add	r3, r1
 800a218:	3312      	adds	r3, #18
 800a21a:	2200      	movs	r2, #0
 800a21c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800a21e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3720      	adds	r7, #32
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	200040ac 	.word	0x200040ac
 800a230:	080161b0 	.word	0x080161b0
 800a234:	080161e8 	.word	0x080161e8
 800a238:	08016228 	.word	0x08016228
 800a23c:	08016250 	.word	0x08016250
 800a240:	08016268 	.word	0x08016268
 800a244:	0801627c 	.word	0x0801627c

0800a248 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af02      	add	r7, sp, #8
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
 800a254:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a25c:	2b06      	cmp	r3, #6
 800a25e:	d006      	beq.n	800a26e <etharp_update_arp_entry+0x26>
 800a260:	4b48      	ldr	r3, [pc, #288]	; (800a384 <etharp_update_arp_entry+0x13c>)
 800a262:	f240 12ab 	movw	r2, #427	; 0x1ab
 800a266:	4948      	ldr	r1, [pc, #288]	; (800a388 <etharp_update_arp_entry+0x140>)
 800a268:	4848      	ldr	r0, [pc, #288]	; (800a38c <etharp_update_arp_entry+0x144>)
 800a26a:	f009 ff33 	bl	80140d4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d012      	beq.n	800a29a <etharp_update_arp_entry+0x52>
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00e      	beq.n	800a29a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68f9      	ldr	r1, [r7, #12]
 800a282:	4618      	mov	r0, r3
 800a284:	f001 f8d4 	bl	800b430 <ip4_addr_isbroadcast_u32>
 800a288:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d105      	bne.n	800a29a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a296:	2be0      	cmp	r3, #224	; 0xe0
 800a298:	d102      	bne.n	800a2a0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a29a:	f06f 030f 	mvn.w	r3, #15
 800a29e:	e06c      	b.n	800a37a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800a2a0:	78fb      	ldrb	r3, [r7, #3]
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	68b8      	ldr	r0, [r7, #8]
 800a2a8:	f7ff fe84 	bl	8009fb4 <etharp_find_entry>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800a2b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	da02      	bge.n	800a2be <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800a2b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2bc:	e05d      	b.n	800a37a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a2be:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a2c2:	4933      	ldr	r1, [pc, #204]	; (800a390 <etharp_update_arp_entry+0x148>)
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	4413      	add	r3, r2
 800a2ca:	00db      	lsls	r3, r3, #3
 800a2cc:	440b      	add	r3, r1
 800a2ce:	3314      	adds	r3, #20
 800a2d0:	2202      	movs	r2, #2
 800a2d2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800a2d4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a2d8:	492d      	ldr	r1, [pc, #180]	; (800a390 <etharp_update_arp_entry+0x148>)
 800a2da:	4613      	mov	r3, r2
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	4413      	add	r3, r2
 800a2e0:	00db      	lsls	r3, r3, #3
 800a2e2:	440b      	add	r3, r1
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800a2ea:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	4413      	add	r3, r2
 800a2f4:	00db      	lsls	r3, r3, #3
 800a2f6:	3308      	adds	r3, #8
 800a2f8:	4a25      	ldr	r2, [pc, #148]	; (800a390 <etharp_update_arp_entry+0x148>)
 800a2fa:	4413      	add	r3, r2
 800a2fc:	3304      	adds	r3, #4
 800a2fe:	2206      	movs	r2, #6
 800a300:	6879      	ldr	r1, [r7, #4]
 800a302:	4618      	mov	r0, r3
 800a304:	f009 fea5 	bl	8014052 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800a308:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a30c:	4920      	ldr	r1, [pc, #128]	; (800a390 <etharp_update_arp_entry+0x148>)
 800a30e:	4613      	mov	r3, r2
 800a310:	005b      	lsls	r3, r3, #1
 800a312:	4413      	add	r3, r2
 800a314:	00db      	lsls	r3, r3, #3
 800a316:	440b      	add	r3, r1
 800a318:	3312      	adds	r3, #18
 800a31a:	2200      	movs	r2, #0
 800a31c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800a31e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a322:	491b      	ldr	r1, [pc, #108]	; (800a390 <etharp_update_arp_entry+0x148>)
 800a324:	4613      	mov	r3, r2
 800a326:	005b      	lsls	r3, r3, #1
 800a328:	4413      	add	r3, r2
 800a32a:	00db      	lsls	r3, r3, #3
 800a32c:	440b      	add	r3, r1
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d021      	beq.n	800a378 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800a334:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a338:	4915      	ldr	r1, [pc, #84]	; (800a390 <etharp_update_arp_entry+0x148>)
 800a33a:	4613      	mov	r3, r2
 800a33c:	005b      	lsls	r3, r3, #1
 800a33e:	4413      	add	r3, r2
 800a340:	00db      	lsls	r3, r3, #3
 800a342:	440b      	add	r3, r1
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800a348:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a34c:	4910      	ldr	r1, [pc, #64]	; (800a390 <etharp_update_arp_entry+0x148>)
 800a34e:	4613      	mov	r3, r2
 800a350:	005b      	lsls	r3, r3, #1
 800a352:	4413      	add	r3, r2
 800a354:	00db      	lsls	r3, r3, #3
 800a356:	440b      	add	r3, r1
 800a358:	2200      	movs	r2, #0
 800a35a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800a362:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6939      	ldr	r1, [r7, #16]
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f009 fbd7 	bl	8013b20 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800a372:	6938      	ldr	r0, [r7, #16]
 800a374:	f003 f96e 	bl	800d654 <pbuf_free>
  }
  return ERR_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	080161b0 	.word	0x080161b0
 800a388:	080162a8 	.word	0x080162a8
 800a38c:	08016228 	.word	0x08016228
 800a390:	200040ac 	.word	0x200040ac

0800a394 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a39c:	2300      	movs	r3, #0
 800a39e:	73fb      	strb	r3, [r7, #15]
 800a3a0:	e01f      	b.n	800a3e2 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800a3a2:	7bfa      	ldrb	r2, [r7, #15]
 800a3a4:	4912      	ldr	r1, [pc, #72]	; (800a3f0 <etharp_cleanup_netif+0x5c>)
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	005b      	lsls	r3, r3, #1
 800a3aa:	4413      	add	r3, r2
 800a3ac:	00db      	lsls	r3, r3, #3
 800a3ae:	440b      	add	r3, r1
 800a3b0:	3314      	adds	r3, #20
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800a3b6:	7bbb      	ldrb	r3, [r7, #14]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00f      	beq.n	800a3dc <etharp_cleanup_netif+0x48>
 800a3bc:	7bfa      	ldrb	r2, [r7, #15]
 800a3be:	490c      	ldr	r1, [pc, #48]	; (800a3f0 <etharp_cleanup_netif+0x5c>)
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	005b      	lsls	r3, r3, #1
 800a3c4:	4413      	add	r3, r2
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	440b      	add	r3, r1
 800a3ca:	3308      	adds	r3, #8
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d103      	bne.n	800a3dc <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800a3d4:	7bfb      	ldrb	r3, [r7, #15]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7ff fd12 	bl	8009e00 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	73fb      	strb	r3, [r7, #15]
 800a3e2:	7bfb      	ldrb	r3, [r7, #15]
 800a3e4:	2b09      	cmp	r3, #9
 800a3e6:	d9dc      	bls.n	800a3a2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800a3e8:	bf00      	nop
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	200040ac 	.word	0x200040ac

0800a3f4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800a3f4:	b5b0      	push	{r4, r5, r7, lr}
 800a3f6:	b08a      	sub	sp, #40	; 0x28
 800a3f8:	af04      	add	r7, sp, #16
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d107      	bne.n	800a414 <etharp_input+0x20>
 800a404:	4b3d      	ldr	r3, [pc, #244]	; (800a4fc <etharp_input+0x108>)
 800a406:	f44f 7222 	mov.w	r2, #648	; 0x288
 800a40a:	493d      	ldr	r1, [pc, #244]	; (800a500 <etharp_input+0x10c>)
 800a40c:	483d      	ldr	r0, [pc, #244]	; (800a504 <etharp_input+0x110>)
 800a40e:	f009 fe61 	bl	80140d4 <iprintf>
 800a412:	e06f      	b.n	800a4f4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	881b      	ldrh	r3, [r3, #0]
 800a41e:	b29b      	uxth	r3, r3
 800a420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a424:	d10c      	bne.n	800a440 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800a42a:	2b06      	cmp	r3, #6
 800a42c:	d108      	bne.n	800a440 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a432:	2b04      	cmp	r3, #4
 800a434:	d104      	bne.n	800a440 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	885b      	ldrh	r3, [r3, #2]
 800a43a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a43c:	2b08      	cmp	r3, #8
 800a43e:	d003      	beq.n	800a448 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f003 f907 	bl	800d654 <pbuf_free>
    return;
 800a446:	e055      	b.n	800a4f4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	330e      	adds	r3, #14
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	3318      	adds	r3, #24
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	3304      	adds	r3, #4
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d102      	bne.n	800a468 <etharp_input+0x74>
    for_us = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	75fb      	strb	r3, [r7, #23]
 800a466:	e009      	b.n	800a47c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	3304      	adds	r3, #4
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	429a      	cmp	r2, r3
 800a472:	bf0c      	ite	eq
 800a474:	2301      	moveq	r3, #1
 800a476:	2300      	movne	r3, #0
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	f103 0208 	add.w	r2, r3, #8
 800a482:	7dfb      	ldrb	r3, [r7, #23]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <etharp_input+0x98>
 800a488:	2301      	movs	r3, #1
 800a48a:	e000      	b.n	800a48e <etharp_input+0x9a>
 800a48c:	2302      	movs	r3, #2
 800a48e:	f107 010c 	add.w	r1, r7, #12
 800a492:	6838      	ldr	r0, [r7, #0]
 800a494:	f7ff fed8 	bl	800a248 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	88db      	ldrh	r3, [r3, #6]
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4a2:	d003      	beq.n	800a4ac <etharp_input+0xb8>
 800a4a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4a8:	d01e      	beq.n	800a4e8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800a4aa:	e020      	b.n	800a4ee <etharp_input+0xfa>
    if (for_us) {
 800a4ac:	7dfb      	ldrb	r3, [r7, #23]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d01c      	beq.n	800a4ec <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	3208      	adds	r2, #8
      etharp_raw(netif,
 800a4cc:	2102      	movs	r1, #2
 800a4ce:	9103      	str	r1, [sp, #12]
 800a4d0:	f107 010c 	add.w	r1, r7, #12
 800a4d4:	9102      	str	r1, [sp, #8]
 800a4d6:	9201      	str	r2, [sp, #4]
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	462b      	mov	r3, r5
 800a4dc:	4622      	mov	r2, r4
 800a4de:	4601      	mov	r1, r0
 800a4e0:	6838      	ldr	r0, [r7, #0]
 800a4e2:	f000 fae3 	bl	800aaac <etharp_raw>
    break;
 800a4e6:	e001      	b.n	800a4ec <etharp_input+0xf8>
    break;
 800a4e8:	bf00      	nop
 800a4ea:	e000      	b.n	800a4ee <etharp_input+0xfa>
    break;
 800a4ec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f003 f8b0 	bl	800d654 <pbuf_free>
}
 800a4f4:	3718      	adds	r7, #24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bdb0      	pop	{r4, r5, r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	080161b0 	.word	0x080161b0
 800a500:	08016300 	.word	0x08016300
 800a504:	08016228 	.word	0x08016228

0800a508 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af02      	add	r7, sp, #8
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	4613      	mov	r3, r2
 800a514:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a516:	79fa      	ldrb	r2, [r7, #7]
 800a518:	4944      	ldr	r1, [pc, #272]	; (800a62c <etharp_output_to_arp_index+0x124>)
 800a51a:	4613      	mov	r3, r2
 800a51c:	005b      	lsls	r3, r3, #1
 800a51e:	4413      	add	r3, r2
 800a520:	00db      	lsls	r3, r3, #3
 800a522:	440b      	add	r3, r1
 800a524:	3314      	adds	r3, #20
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d806      	bhi.n	800a53a <etharp_output_to_arp_index+0x32>
 800a52c:	4b40      	ldr	r3, [pc, #256]	; (800a630 <etharp_output_to_arp_index+0x128>)
 800a52e:	f240 22ed 	movw	r2, #749	; 0x2ed
 800a532:	4940      	ldr	r1, [pc, #256]	; (800a634 <etharp_output_to_arp_index+0x12c>)
 800a534:	4840      	ldr	r0, [pc, #256]	; (800a638 <etharp_output_to_arp_index+0x130>)
 800a536:	f009 fdcd 	bl	80140d4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a53a:	79fa      	ldrb	r2, [r7, #7]
 800a53c:	493b      	ldr	r1, [pc, #236]	; (800a62c <etharp_output_to_arp_index+0x124>)
 800a53e:	4613      	mov	r3, r2
 800a540:	005b      	lsls	r3, r3, #1
 800a542:	4413      	add	r3, r2
 800a544:	00db      	lsls	r3, r3, #3
 800a546:	440b      	add	r3, r1
 800a548:	3314      	adds	r3, #20
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d153      	bne.n	800a5f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a550:	79fa      	ldrb	r2, [r7, #7]
 800a552:	4936      	ldr	r1, [pc, #216]	; (800a62c <etharp_output_to_arp_index+0x124>)
 800a554:	4613      	mov	r3, r2
 800a556:	005b      	lsls	r3, r3, #1
 800a558:	4413      	add	r3, r2
 800a55a:	00db      	lsls	r3, r3, #3
 800a55c:	440b      	add	r3, r1
 800a55e:	3312      	adds	r3, #18
 800a560:	881b      	ldrh	r3, [r3, #0]
 800a562:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800a566:	d919      	bls.n	800a59c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a568:	79fa      	ldrb	r2, [r7, #7]
 800a56a:	4613      	mov	r3, r2
 800a56c:	005b      	lsls	r3, r3, #1
 800a56e:	4413      	add	r3, r2
 800a570:	00db      	lsls	r3, r3, #3
 800a572:	4a2e      	ldr	r2, [pc, #184]	; (800a62c <etharp_output_to_arp_index+0x124>)
 800a574:	4413      	add	r3, r2
 800a576:	3304      	adds	r3, #4
 800a578:	4619      	mov	r1, r3
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f000 fb44 	bl	800ac08 <etharp_request>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d138      	bne.n	800a5f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a586:	79fa      	ldrb	r2, [r7, #7]
 800a588:	4928      	ldr	r1, [pc, #160]	; (800a62c <etharp_output_to_arp_index+0x124>)
 800a58a:	4613      	mov	r3, r2
 800a58c:	005b      	lsls	r3, r3, #1
 800a58e:	4413      	add	r3, r2
 800a590:	00db      	lsls	r3, r3, #3
 800a592:	440b      	add	r3, r1
 800a594:	3314      	adds	r3, #20
 800a596:	2203      	movs	r2, #3
 800a598:	701a      	strb	r2, [r3, #0]
 800a59a:	e02d      	b.n	800a5f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800a59c:	79fa      	ldrb	r2, [r7, #7]
 800a59e:	4923      	ldr	r1, [pc, #140]	; (800a62c <etharp_output_to_arp_index+0x124>)
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	005b      	lsls	r3, r3, #1
 800a5a4:	4413      	add	r3, r2
 800a5a6:	00db      	lsls	r3, r3, #3
 800a5a8:	440b      	add	r3, r1
 800a5aa:	3312      	adds	r3, #18
 800a5ac:	881b      	ldrh	r3, [r3, #0]
 800a5ae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a5b2:	d321      	bcc.n	800a5f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a5b4:	79fa      	ldrb	r2, [r7, #7]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	005b      	lsls	r3, r3, #1
 800a5ba:	4413      	add	r3, r2
 800a5bc:	00db      	lsls	r3, r3, #3
 800a5be:	4a1b      	ldr	r2, [pc, #108]	; (800a62c <etharp_output_to_arp_index+0x124>)
 800a5c0:	4413      	add	r3, r2
 800a5c2:	1d19      	adds	r1, r3, #4
 800a5c4:	79fa      	ldrb	r2, [r7, #7]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	005b      	lsls	r3, r3, #1
 800a5ca:	4413      	add	r3, r2
 800a5cc:	00db      	lsls	r3, r3, #3
 800a5ce:	3308      	adds	r3, #8
 800a5d0:	4a16      	ldr	r2, [pc, #88]	; (800a62c <etharp_output_to_arp_index+0x124>)
 800a5d2:	4413      	add	r3, r2
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f000 faf3 	bl	800abc4 <etharp_request_dst>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d109      	bne.n	800a5f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a5e4:	79fa      	ldrb	r2, [r7, #7]
 800a5e6:	4911      	ldr	r1, [pc, #68]	; (800a62c <etharp_output_to_arp_index+0x124>)
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	005b      	lsls	r3, r3, #1
 800a5ec:	4413      	add	r3, r2
 800a5ee:	00db      	lsls	r3, r3, #3
 800a5f0:	440b      	add	r3, r1
 800a5f2:	3314      	adds	r3, #20
 800a5f4:	2203      	movs	r2, #3
 800a5f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800a5fe:	79fa      	ldrb	r2, [r7, #7]
 800a600:	4613      	mov	r3, r2
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	4413      	add	r3, r2
 800a606:	00db      	lsls	r3, r3, #3
 800a608:	3308      	adds	r3, #8
 800a60a:	4a08      	ldr	r2, [pc, #32]	; (800a62c <etharp_output_to_arp_index+0x124>)
 800a60c:	4413      	add	r3, r2
 800a60e:	1d1a      	adds	r2, r3, #4
 800a610:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	4613      	mov	r3, r2
 800a618:	460a      	mov	r2, r1
 800a61a:	68b9      	ldr	r1, [r7, #8]
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f009 fa7f 	bl	8013b20 <ethernet_output>
 800a622:	4603      	mov	r3, r0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	200040ac 	.word	0x200040ac
 800a630:	080161b0 	.word	0x080161b0
 800a634:	08016320 	.word	0x08016320
 800a638:	08016228 	.word	0x08016228

0800a63c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08a      	sub	sp, #40	; 0x28
 800a640:	af02      	add	r7, sp, #8
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d106      	bne.n	800a660 <etharp_output+0x24>
 800a652:	4b69      	ldr	r3, [pc, #420]	; (800a7f8 <etharp_output+0x1bc>)
 800a654:	f240 321b 	movw	r2, #795	; 0x31b
 800a658:	4968      	ldr	r1, [pc, #416]	; (800a7fc <etharp_output+0x1c0>)
 800a65a:	4869      	ldr	r0, [pc, #420]	; (800a800 <etharp_output+0x1c4>)
 800a65c:	f009 fd3a 	bl	80140d4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d106      	bne.n	800a674 <etharp_output+0x38>
 800a666:	4b64      	ldr	r3, [pc, #400]	; (800a7f8 <etharp_output+0x1bc>)
 800a668:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a66c:	4965      	ldr	r1, [pc, #404]	; (800a804 <etharp_output+0x1c8>)
 800a66e:	4864      	ldr	r0, [pc, #400]	; (800a800 <etharp_output+0x1c4>)
 800a670:	f009 fd30 	bl	80140d4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d106      	bne.n	800a688 <etharp_output+0x4c>
 800a67a:	4b5f      	ldr	r3, [pc, #380]	; (800a7f8 <etharp_output+0x1bc>)
 800a67c:	f240 321d 	movw	r2, #797	; 0x31d
 800a680:	4961      	ldr	r1, [pc, #388]	; (800a808 <etharp_output+0x1cc>)
 800a682:	485f      	ldr	r0, [pc, #380]	; (800a800 <etharp_output+0x1c4>)
 800a684:	f009 fd26 	bl	80140d4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68f9      	ldr	r1, [r7, #12]
 800a68e:	4618      	mov	r0, r3
 800a690:	f000 fece 	bl	800b430 <ip4_addr_isbroadcast_u32>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d002      	beq.n	800a6a0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800a69a:	4b5c      	ldr	r3, [pc, #368]	; (800a80c <etharp_output+0x1d0>)
 800a69c:	61fb      	str	r3, [r7, #28]
 800a69e:	e09b      	b.n	800a7d8 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6a8:	2be0      	cmp	r3, #224	; 0xe0
 800a6aa:	d118      	bne.n	800a6de <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800a6b4:	235e      	movs	r3, #94	; 0x5e
 800a6b6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	3302      	adds	r3, #2
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	3303      	adds	r3, #3
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800a6d6:	f107 0310 	add.w	r3, r7, #16
 800a6da:	61fb      	str	r3, [r7, #28]
 800a6dc:	e07c      	b.n	800a7d8 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3304      	adds	r3, #4
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	405a      	eors	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3308      	adds	r3, #8
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d012      	beq.n	800a71c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a6fc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a700:	4293      	cmp	r3, r2
 800a702:	d00b      	beq.n	800a71c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	330c      	adds	r3, #12
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	330c      	adds	r3, #12
 800a712:	61bb      	str	r3, [r7, #24]
 800a714:	e002      	b.n	800a71c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800a716:	f06f 0303 	mvn.w	r3, #3
 800a71a:	e069      	b.n	800a7f0 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a71c:	4b3c      	ldr	r3, [pc, #240]	; (800a810 <etharp_output+0x1d4>)
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	4619      	mov	r1, r3
 800a722:	4a3c      	ldr	r2, [pc, #240]	; (800a814 <etharp_output+0x1d8>)
 800a724:	460b      	mov	r3, r1
 800a726:	005b      	lsls	r3, r3, #1
 800a728:	440b      	add	r3, r1
 800a72a:	00db      	lsls	r3, r3, #3
 800a72c:	4413      	add	r3, r2
 800a72e:	3314      	adds	r3, #20
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d917      	bls.n	800a766 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	4b35      	ldr	r3, [pc, #212]	; (800a810 <etharp_output+0x1d4>)
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	4618      	mov	r0, r3
 800a740:	4934      	ldr	r1, [pc, #208]	; (800a814 <etharp_output+0x1d8>)
 800a742:	4603      	mov	r3, r0
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	4403      	add	r3, r0
 800a748:	00db      	lsls	r3, r3, #3
 800a74a:	440b      	add	r3, r1
 800a74c:	3304      	adds	r3, #4
 800a74e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a750:	429a      	cmp	r2, r3
 800a752:	d108      	bne.n	800a766 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800a754:	4b2e      	ldr	r3, [pc, #184]	; (800a810 <etharp_output+0x1d4>)
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	461a      	mov	r2, r3
 800a75a:	68b9      	ldr	r1, [r7, #8]
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f7ff fed3 	bl	800a508 <etharp_output_to_arp_index>
 800a762:	4603      	mov	r3, r0
 800a764:	e044      	b.n	800a7f0 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a766:	2300      	movs	r3, #0
 800a768:	75fb      	strb	r3, [r7, #23]
 800a76a:	e02a      	b.n	800a7c2 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a76c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a770:	4928      	ldr	r1, [pc, #160]	; (800a814 <etharp_output+0x1d8>)
 800a772:	4613      	mov	r3, r2
 800a774:	005b      	lsls	r3, r3, #1
 800a776:	4413      	add	r3, r2
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	440b      	add	r3, r1
 800a77c:	3314      	adds	r3, #20
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d918      	bls.n	800a7b6 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	6819      	ldr	r1, [r3, #0]
 800a788:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a78c:	4821      	ldr	r0, [pc, #132]	; (800a814 <etharp_output+0x1d8>)
 800a78e:	4613      	mov	r3, r2
 800a790:	005b      	lsls	r3, r3, #1
 800a792:	4413      	add	r3, r2
 800a794:	00db      	lsls	r3, r3, #3
 800a796:	4403      	add	r3, r0
 800a798:	3304      	adds	r3, #4
 800a79a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a79c:	4299      	cmp	r1, r3
 800a79e:	d10a      	bne.n	800a7b6 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800a7a0:	7dfa      	ldrb	r2, [r7, #23]
 800a7a2:	4b1b      	ldr	r3, [pc, #108]	; (800a810 <etharp_output+0x1d4>)
 800a7a4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800a7a6:	7dfb      	ldrb	r3, [r7, #23]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	68b9      	ldr	r1, [r7, #8]
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f7ff feab 	bl	800a508 <etharp_output_to_arp_index>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	e01c      	b.n	800a7f0 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a7b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	3301      	adds	r3, #1
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	75fb      	strb	r3, [r7, #23]
 800a7c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7c6:	2b09      	cmp	r3, #9
 800a7c8:	ddd0      	ble.n	800a76c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	69b9      	ldr	r1, [r7, #24]
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f000 f822 	bl	800a818 <etharp_query>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	e00b      	b.n	800a7f0 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800a7de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f009 f999 	bl	8013b20 <ethernet_output>
 800a7ee:	4603      	mov	r3, r0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3720      	adds	r7, #32
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	080161b0 	.word	0x080161b0
 800a7fc:	08016300 	.word	0x08016300
 800a800:	08016228 	.word	0x08016228
 800a804:	08016350 	.word	0x08016350
 800a808:	080162f0 	.word	0x080162f0
 800a80c:	08018010 	.word	0x08018010
 800a810:	2000419c 	.word	0x2000419c
 800a814:	200040ac 	.word	0x200040ac

0800a818 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b08c      	sub	sp, #48	; 0x30
 800a81c:	af02      	add	r7, sp, #8
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	3329      	adds	r3, #41	; 0x29
 800a828:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800a82a:	23ff      	movs	r3, #255	; 0xff
 800a82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800a830:	2300      	movs	r3, #0
 800a832:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68f9      	ldr	r1, [r7, #12]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 fdf8 	bl	800b430 <ip4_addr_isbroadcast_u32>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d10c      	bne.n	800a860 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a84e:	2be0      	cmp	r3, #224	; 0xe0
 800a850:	d006      	beq.n	800a860 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d003      	beq.n	800a860 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d102      	bne.n	800a866 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a860:	f06f 030f 	mvn.w	r3, #15
 800a864:	e10f      	b.n	800aa86 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	2101      	movs	r1, #1
 800a86a:	68b8      	ldr	r0, [r7, #8]
 800a86c:	f7ff fba2 	bl	8009fb4 <etharp_find_entry>
 800a870:	4603      	mov	r3, r0
 800a872:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800a874:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	da02      	bge.n	800a882 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800a87c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a880:	e101      	b.n	800aa86 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800a882:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a886:	4982      	ldr	r1, [pc, #520]	; (800aa90 <etharp_query+0x278>)
 800a888:	4613      	mov	r3, r2
 800a88a:	005b      	lsls	r3, r3, #1
 800a88c:	4413      	add	r3, r2
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	440b      	add	r3, r1
 800a892:	3314      	adds	r3, #20
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d117      	bne.n	800a8ca <etharp_query+0xb2>
    is_new_entry = 1;
 800a89a:	2301      	movs	r3, #1
 800a89c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800a89e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a8a2:	497b      	ldr	r1, [pc, #492]	; (800aa90 <etharp_query+0x278>)
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	005b      	lsls	r3, r3, #1
 800a8a8:	4413      	add	r3, r2
 800a8aa:	00db      	lsls	r3, r3, #3
 800a8ac:	440b      	add	r3, r1
 800a8ae:	3314      	adds	r3, #20
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800a8b4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a8b8:	4975      	ldr	r1, [pc, #468]	; (800aa90 <etharp_query+0x278>)
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	005b      	lsls	r3, r3, #1
 800a8be:	4413      	add	r3, r2
 800a8c0:	00db      	lsls	r3, r3, #3
 800a8c2:	440b      	add	r3, r1
 800a8c4:	3308      	adds	r3, #8
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800a8ca:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a8ce:	4970      	ldr	r1, [pc, #448]	; (800aa90 <etharp_query+0x278>)
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	005b      	lsls	r3, r3, #1
 800a8d4:	4413      	add	r3, r2
 800a8d6:	00db      	lsls	r3, r3, #3
 800a8d8:	440b      	add	r3, r1
 800a8da:	3314      	adds	r3, #20
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d012      	beq.n	800a908 <etharp_query+0xf0>
 800a8e2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a8e6:	496a      	ldr	r1, [pc, #424]	; (800aa90 <etharp_query+0x278>)
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	005b      	lsls	r3, r3, #1
 800a8ec:	4413      	add	r3, r2
 800a8ee:	00db      	lsls	r3, r3, #3
 800a8f0:	440b      	add	r3, r1
 800a8f2:	3314      	adds	r3, #20
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d806      	bhi.n	800a908 <etharp_query+0xf0>
 800a8fa:	4b66      	ldr	r3, [pc, #408]	; (800aa94 <etharp_query+0x27c>)
 800a8fc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a900:	4965      	ldr	r1, [pc, #404]	; (800aa98 <etharp_query+0x280>)
 800a902:	4866      	ldr	r0, [pc, #408]	; (800aa9c <etharp_query+0x284>)
 800a904:	f009 fbe6 	bl	80140d4 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800a908:	6a3b      	ldr	r3, [r7, #32]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d102      	bne.n	800a914 <etharp_query+0xfc>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d10c      	bne.n	800a92e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800a914:	68b9      	ldr	r1, [r7, #8]
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f000 f976 	bl	800ac08 <etharp_request>
 800a91c:	4603      	mov	r3, r0
 800a91e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d102      	bne.n	800a92e <etharp_query+0x116>
      return result;
 800a928:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a92c:	e0ab      	b.n	800aa86 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d106      	bne.n	800a942 <etharp_query+0x12a>
 800a934:	4b57      	ldr	r3, [pc, #348]	; (800aa94 <etharp_query+0x27c>)
 800a936:	f240 32db 	movw	r2, #987	; 0x3db
 800a93a:	4959      	ldr	r1, [pc, #356]	; (800aaa0 <etharp_query+0x288>)
 800a93c:	4857      	ldr	r0, [pc, #348]	; (800aa9c <etharp_query+0x284>)
 800a93e:	f009 fbc9 	bl	80140d4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800a942:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a946:	4952      	ldr	r1, [pc, #328]	; (800aa90 <etharp_query+0x278>)
 800a948:	4613      	mov	r3, r2
 800a94a:	005b      	lsls	r3, r3, #1
 800a94c:	4413      	add	r3, r2
 800a94e:	00db      	lsls	r3, r3, #3
 800a950:	440b      	add	r3, r1
 800a952:	3314      	adds	r3, #20
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d919      	bls.n	800a98e <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800a95a:	7cfa      	ldrb	r2, [r7, #19]
 800a95c:	4b51      	ldr	r3, [pc, #324]	; (800aaa4 <etharp_query+0x28c>)
 800a95e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800a960:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a964:	4613      	mov	r3, r2
 800a966:	005b      	lsls	r3, r3, #1
 800a968:	4413      	add	r3, r2
 800a96a:	00db      	lsls	r3, r3, #3
 800a96c:	3308      	adds	r3, #8
 800a96e:	4a48      	ldr	r2, [pc, #288]	; (800aa90 <etharp_query+0x278>)
 800a970:	4413      	add	r3, r2
 800a972:	1d1a      	adds	r2, r3, #4
 800a974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a978:	9300      	str	r3, [sp, #0]
 800a97a:	4613      	mov	r3, r2
 800a97c:	697a      	ldr	r2, [r7, #20]
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f009 f8cd 	bl	8013b20 <ethernet_output>
 800a986:	4603      	mov	r3, r0
 800a988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a98c:	e079      	b.n	800aa82 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a98e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a992:	493f      	ldr	r1, [pc, #252]	; (800aa90 <etharp_query+0x278>)
 800a994:	4613      	mov	r3, r2
 800a996:	005b      	lsls	r3, r3, #1
 800a998:	4413      	add	r3, r2
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	440b      	add	r3, r1
 800a99e:	3314      	adds	r3, #20
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d16d      	bne.n	800aa82 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	61fb      	str	r3, [r7, #28]
    while (p) {
 800a9ae:	e01a      	b.n	800a9e6 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	895a      	ldrh	r2, [r3, #10]
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	891b      	ldrh	r3, [r3, #8]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d10a      	bne.n	800a9d2 <etharp_query+0x1ba>
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d006      	beq.n	800a9d2 <etharp_query+0x1ba>
 800a9c4:	4b33      	ldr	r3, [pc, #204]	; (800aa94 <etharp_query+0x27c>)
 800a9c6:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800a9ca:	4937      	ldr	r1, [pc, #220]	; (800aaa8 <etharp_query+0x290>)
 800a9cc:	4833      	ldr	r0, [pc, #204]	; (800aa9c <etharp_query+0x284>)
 800a9ce:	f009 fb81 	bl	80140d4 <iprintf>
      if (p->type != PBUF_ROM) {
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	7b1b      	ldrb	r3, [r3, #12]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d002      	beq.n	800a9e0 <etharp_query+0x1c8>
        copy_needed = 1;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	61bb      	str	r3, [r7, #24]
        break;
 800a9de:	e005      	b.n	800a9ec <etharp_query+0x1d4>
      }
      p = p->next;
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	61fb      	str	r3, [r7, #28]
    while (p) {
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1e1      	bne.n	800a9b0 <etharp_query+0x198>
    }
    if (copy_needed) {
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d017      	beq.n	800aa22 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	891b      	ldrh	r3, [r3, #8]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	2002      	movs	r0, #2
 800a9fc:	f002 fab8 	bl	800cf70 <pbuf_alloc>
 800aa00:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d011      	beq.n	800aa2c <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800aa08:	6879      	ldr	r1, [r7, #4]
 800aa0a:	69f8      	ldr	r0, [r7, #28]
 800aa0c:	f002 ff60 	bl	800d8d0 <pbuf_copy>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d00a      	beq.n	800aa2c <etharp_query+0x214>
          pbuf_free(p);
 800aa16:	69f8      	ldr	r0, [r7, #28]
 800aa18:	f002 fe1c 	bl	800d654 <pbuf_free>
          p = NULL;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	61fb      	str	r3, [r7, #28]
 800aa20:	e004      	b.n	800aa2c <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800aa26:	69f8      	ldr	r0, [r7, #28]
 800aa28:	f002 fec4 	bl	800d7b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d024      	beq.n	800aa7c <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800aa32:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800aa36:	4916      	ldr	r1, [pc, #88]	; (800aa90 <etharp_query+0x278>)
 800aa38:	4613      	mov	r3, r2
 800aa3a:	005b      	lsls	r3, r3, #1
 800aa3c:	4413      	add	r3, r2
 800aa3e:	00db      	lsls	r3, r3, #3
 800aa40:	440b      	add	r3, r1
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00b      	beq.n	800aa60 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800aa48:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800aa4c:	4910      	ldr	r1, [pc, #64]	; (800aa90 <etharp_query+0x278>)
 800aa4e:	4613      	mov	r3, r2
 800aa50:	005b      	lsls	r3, r3, #1
 800aa52:	4413      	add	r3, r2
 800aa54:	00db      	lsls	r3, r3, #3
 800aa56:	440b      	add	r3, r1
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f002 fdfa 	bl	800d654 <pbuf_free>
      }
      arp_table[i].q = p;
 800aa60:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800aa64:	490a      	ldr	r1, [pc, #40]	; (800aa90 <etharp_query+0x278>)
 800aa66:	4613      	mov	r3, r2
 800aa68:	005b      	lsls	r3, r3, #1
 800aa6a:	4413      	add	r3, r2
 800aa6c:	00db      	lsls	r3, r3, #3
 800aa6e:	440b      	add	r3, r1
 800aa70:	69fa      	ldr	r2, [r7, #28]
 800aa72:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa7a:	e002      	b.n	800aa82 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800aa7c:	23ff      	movs	r3, #255	; 0xff
 800aa7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800aa82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3728      	adds	r7, #40	; 0x28
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	200040ac 	.word	0x200040ac
 800aa94:	080161b0 	.word	0x080161b0
 800aa98:	0801635c 	.word	0x0801635c
 800aa9c:	08016228 	.word	0x08016228
 800aaa0:	08016350 	.word	0x08016350
 800aaa4:	2000419c 	.word	0x2000419c
 800aaa8:	08016384 	.word	0x08016384

0800aaac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08a      	sub	sp, #40	; 0x28
 800aab0:	af02      	add	r7, sp, #8
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
 800aab8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800aaba:	2300      	movs	r3, #0
 800aabc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d106      	bne.n	800aad2 <etharp_raw+0x26>
 800aac4:	4b3a      	ldr	r3, [pc, #232]	; (800abb0 <etharp_raw+0x104>)
 800aac6:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800aaca:	493a      	ldr	r1, [pc, #232]	; (800abb4 <etharp_raw+0x108>)
 800aacc:	483a      	ldr	r0, [pc, #232]	; (800abb8 <etharp_raw+0x10c>)
 800aace:	f009 fb01 	bl	80140d4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800aad2:	2200      	movs	r2, #0
 800aad4:	211c      	movs	r1, #28
 800aad6:	2002      	movs	r0, #2
 800aad8:	f002 fa4a 	bl	800cf70 <pbuf_alloc>
 800aadc:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d102      	bne.n	800aaea <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800aae4:	f04f 33ff 	mov.w	r3, #4294967295
 800aae8:	e05d      	b.n	800aba6 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	895b      	ldrh	r3, [r3, #10]
 800aaee:	2b1b      	cmp	r3, #27
 800aaf0:	d806      	bhi.n	800ab00 <etharp_raw+0x54>
 800aaf2:	4b2f      	ldr	r3, [pc, #188]	; (800abb0 <etharp_raw+0x104>)
 800aaf4:	f240 4264 	movw	r2, #1124	; 0x464
 800aaf8:	4930      	ldr	r1, [pc, #192]	; (800abbc <etharp_raw+0x110>)
 800aafa:	482f      	ldr	r0, [pc, #188]	; (800abb8 <etharp_raw+0x10c>)
 800aafc:	f009 faea 	bl	80140d4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ab06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7ff f93d 	bl	8009d88 <lwip_htons>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	461a      	mov	r2, r3
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab1c:	2b06      	cmp	r3, #6
 800ab1e:	d006      	beq.n	800ab2e <etharp_raw+0x82>
 800ab20:	4b23      	ldr	r3, [pc, #140]	; (800abb0 <etharp_raw+0x104>)
 800ab22:	f240 426b 	movw	r2, #1131	; 0x46b
 800ab26:	4926      	ldr	r1, [pc, #152]	; (800abc0 <etharp_raw+0x114>)
 800ab28:	4823      	ldr	r0, [pc, #140]	; (800abb8 <etharp_raw+0x10c>)
 800ab2a:	f009 fad3 	bl	80140d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	3308      	adds	r3, #8
 800ab32:	2206      	movs	r2, #6
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f009 fa8b 	bl	8014052 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	3312      	adds	r3, #18
 800ab40:	2206      	movs	r2, #6
 800ab42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab44:	4618      	mov	r0, r3
 800ab46:	f009 fa84 	bl	8014052 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	330e      	adds	r3, #14
 800ab4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab50:	6812      	ldr	r2, [r2, #0]
 800ab52:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	3318      	adds	r3, #24
 800ab58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab5a:	6812      	ldr	r2, [r2, #0]
 800ab5c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	2200      	movs	r2, #0
 800ab62:	701a      	strb	r2, [r3, #0]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f042 0201 	orr.w	r2, r2, #1
 800ab6a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f042 0208 	orr.w	r2, r2, #8
 800ab74:	709a      	strb	r2, [r3, #2]
 800ab76:	2200      	movs	r2, #0
 800ab78:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	2206      	movs	r2, #6
 800ab7e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	2204      	movs	r2, #4
 800ab84:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ab86:	f640 0306 	movw	r3, #2054	; 0x806
 800ab8a:	9300      	str	r3, [sp, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	69b9      	ldr	r1, [r7, #24]
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	f008 ffc4 	bl	8013b20 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ab98:	69b8      	ldr	r0, [r7, #24]
 800ab9a:	f002 fd5b 	bl	800d654 <pbuf_free>
  p = NULL;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800aba2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3720      	adds	r7, #32
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	080161b0 	.word	0x080161b0
 800abb4:	08016300 	.word	0x08016300
 800abb8:	08016228 	.word	0x08016228
 800abbc:	080163a0 	.word	0x080163a0
 800abc0:	080163d4 	.word	0x080163d4

0800abc4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b088      	sub	sp, #32
 800abc8:	af04      	add	r7, sp, #16
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800abe0:	2201      	movs	r2, #1
 800abe2:	9203      	str	r2, [sp, #12]
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	9202      	str	r2, [sp, #8]
 800abe8:	4a06      	ldr	r2, [pc, #24]	; (800ac04 <etharp_request_dst+0x40>)
 800abea:	9201      	str	r2, [sp, #4]
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	4603      	mov	r3, r0
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f7ff ff5a 	bl	800aaac <etharp_raw>
 800abf8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	08018018 	.word	0x08018018

0800ac08 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ac12:	4a05      	ldr	r2, [pc, #20]	; (800ac28 <etharp_request+0x20>)
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f7ff ffd4 	bl	800abc4 <etharp_request_dst>
 800ac1c:	4603      	mov	r3, r0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	08018010 	.word	0x08018010

0800ac2c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08e      	sub	sp, #56	; 0x38
 800ac30:	af04      	add	r7, sp, #16
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ac36:	4b7a      	ldr	r3, [pc, #488]	; (800ae20 <icmp_input+0x1f4>)
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800ac3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	f003 030f 	and.w	r3, r3, #15
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ac4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac4e:	2b13      	cmp	r3, #19
 800ac50:	f240 80d1 	bls.w	800adf6 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	895b      	ldrh	r3, [r3, #10]
 800ac58:	2b03      	cmp	r3, #3
 800ac5a:	f240 80ce 	bls.w	800adfa <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ac68:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f000 80bb 	beq.w	800ade8 <icmp_input+0x1bc>
 800ac72:	2b08      	cmp	r3, #8
 800ac74:	f040 80bb 	bne.w	800adee <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800ac78:	4b6a      	ldr	r3, [pc, #424]	; (800ae24 <icmp_input+0x1f8>)
 800ac7a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ac7c:	4b68      	ldr	r3, [pc, #416]	; (800ae20 <icmp_input+0x1f4>)
 800ac7e:	695b      	ldr	r3, [r3, #20]
 800ac80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac84:	2be0      	cmp	r3, #224	; 0xe0
 800ac86:	f000 80bf 	beq.w	800ae08 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ac8a:	4b65      	ldr	r3, [pc, #404]	; (800ae20 <icmp_input+0x1f4>)
 800ac8c:	695a      	ldr	r2, [r3, #20]
 800ac8e:	4b64      	ldr	r3, [pc, #400]	; (800ae20 <icmp_input+0x1f4>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4619      	mov	r1, r3
 800ac94:	4610      	mov	r0, r2
 800ac96:	f000 fbcb 	bl	800b430 <ip4_addr_isbroadcast_u32>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f040 80b5 	bne.w	800ae0c <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	891b      	ldrh	r3, [r3, #8]
 800aca6:	2b07      	cmp	r3, #7
 800aca8:	f240 80a9 	bls.w	800adfe <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800acac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800acae:	330e      	adds	r3, #14
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	b21b      	sxth	r3, r3
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f002 fca8 	bl	800d60c <pbuf_header>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d046      	beq.n	800ad50 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	891a      	ldrh	r2, [r3, #8]
 800acc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800acc8:	4413      	add	r3, r2
 800acca:	b29b      	uxth	r3, r3
 800accc:	2200      	movs	r2, #0
 800acce:	4619      	mov	r1, r3
 800acd0:	2002      	movs	r0, #2
 800acd2:	f002 f94d 	bl	800cf70 <pbuf_alloc>
 800acd6:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f000 8098 	beq.w	800ae10 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	895b      	ldrh	r3, [r3, #10]
 800ace4:	461a      	mov	r2, r3
 800ace6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ace8:	3308      	adds	r3, #8
 800acea:	429a      	cmp	r2, r3
 800acec:	d203      	bcs.n	800acf6 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800acee:	69b8      	ldr	r0, [r7, #24]
 800acf0:	f002 fcb0 	bl	800d654 <pbuf_free>
        goto icmperr;
 800acf4:	e08d      	b.n	800ae12 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800acfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800acfe:	4618      	mov	r0, r3
 800ad00:	f009 f9a7 	bl	8014052 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800ad04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad06:	425b      	negs	r3, r3
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	b21b      	sxth	r3, r3
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	69b8      	ldr	r0, [r7, #24]
 800ad10:	f002 fc7c 	bl	800d60c <pbuf_header>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d009      	beq.n	800ad2e <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ad1a:	4b43      	ldr	r3, [pc, #268]	; (800ae28 <icmp_input+0x1fc>)
 800ad1c:	22af      	movs	r2, #175	; 0xaf
 800ad1e:	4943      	ldr	r1, [pc, #268]	; (800ae2c <icmp_input+0x200>)
 800ad20:	4843      	ldr	r0, [pc, #268]	; (800ae30 <icmp_input+0x204>)
 800ad22:	f009 f9d7 	bl	80140d4 <iprintf>
        pbuf_free(r);
 800ad26:	69b8      	ldr	r0, [r7, #24]
 800ad28:	f002 fc94 	bl	800d654 <pbuf_free>
        goto icmperr;
 800ad2c:	e071      	b.n	800ae12 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800ad2e:	6879      	ldr	r1, [r7, #4]
 800ad30:	69b8      	ldr	r0, [r7, #24]
 800ad32:	f002 fdcd 	bl	800d8d0 <pbuf_copy>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d003      	beq.n	800ad44 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800ad3c:	69b8      	ldr	r0, [r7, #24]
 800ad3e:	f002 fc89 	bl	800d654 <pbuf_free>
        goto icmperr;
 800ad42:	e066      	b.n	800ae12 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f002 fc85 	bl	800d654 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	607b      	str	r3, [r7, #4]
 800ad4e:	e015      	b.n	800ad7c <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800ad50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad52:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800ad56:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ad5a:	33f2      	adds	r3, #242	; 0xf2
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	b21b      	sxth	r3, r3
 800ad60:	4619      	mov	r1, r3
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f002 fc52 	bl	800d60c <pbuf_header>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d006      	beq.n	800ad7c <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ad6e:	4b2e      	ldr	r3, [pc, #184]	; (800ae28 <icmp_input+0x1fc>)
 800ad70:	22c0      	movs	r2, #192	; 0xc0
 800ad72:	4930      	ldr	r1, [pc, #192]	; (800ae34 <icmp_input+0x208>)
 800ad74:	482e      	ldr	r0, [pc, #184]	; (800ae30 <icmp_input+0x204>)
 800ad76:	f009 f9ad 	bl	80140d4 <iprintf>
        goto icmperr;
 800ad7a:	e04a      	b.n	800ae12 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800ad82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ad86:	4619      	mov	r1, r3
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f002 fc3f 	bl	800d60c <pbuf_header>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d12b      	bne.n	800adec <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ada2:	4b1f      	ldr	r3, [pc, #124]	; (800ae20 <icmp_input+0x1f4>)
 800ada4:	691a      	ldr	r2, [r3, #16]
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	2200      	movs	r2, #0
 800adae:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	2200      	movs	r2, #0
 800adb4:	709a      	strb	r2, [r3, #2]
 800adb6:	2200      	movs	r2, #0
 800adb8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	22ff      	movs	r2, #255	; 0xff
 800adbe:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	2200      	movs	r2, #0
 800adc4:	729a      	strb	r2, [r3, #10]
 800adc6:	2200      	movs	r2, #0
 800adc8:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	9302      	str	r3, [sp, #8]
 800adce:	2301      	movs	r3, #1
 800add0:	9301      	str	r3, [sp, #4]
 800add2:	2300      	movs	r3, #0
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	23ff      	movs	r3, #255	; 0xff
 800add8:	2200      	movs	r2, #0
 800adda:	69f9      	ldr	r1, [r7, #28]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fa55 	bl	800b28c <ip4_output_if>
 800ade2:	4603      	mov	r3, r0
 800ade4:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800ade6:	e001      	b.n	800adec <icmp_input+0x1c0>
    break;
 800ade8:	bf00      	nop
 800adea:	e000      	b.n	800adee <icmp_input+0x1c2>
    break;
 800adec:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f002 fc30 	bl	800d654 <pbuf_free>
  return;
 800adf4:	e011      	b.n	800ae1a <icmp_input+0x1ee>
    goto lenerr;
 800adf6:	bf00      	nop
 800adf8:	e002      	b.n	800ae00 <icmp_input+0x1d4>
    goto lenerr;
 800adfa:	bf00      	nop
 800adfc:	e000      	b.n	800ae00 <icmp_input+0x1d4>
      goto lenerr;
 800adfe:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f002 fc27 	bl	800d654 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ae06:	e008      	b.n	800ae1a <icmp_input+0x1ee>
      goto icmperr;
 800ae08:	bf00      	nop
 800ae0a:	e002      	b.n	800ae12 <icmp_input+0x1e6>
      goto icmperr;
 800ae0c:	bf00      	nop
 800ae0e:	e000      	b.n	800ae12 <icmp_input+0x1e6>
        goto icmperr;
 800ae10:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f002 fc1e 	bl	800d654 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ae18:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ae1a:	3728      	adds	r7, #40	; 0x28
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	20007424 	.word	0x20007424
 800ae24:	20007438 	.word	0x20007438
 800ae28:	08016418 	.word	0x08016418
 800ae2c:	08016450 	.word	0x08016450
 800ae30:	08016488 	.word	0x08016488
 800ae34:	080164b0 	.word	0x080164b0

0800ae38 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ae44:	78fb      	ldrb	r3, [r7, #3]
 800ae46:	461a      	mov	r2, r3
 800ae48:	2103      	movs	r1, #3
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f814 	bl	800ae78 <icmp_send_response>
}
 800ae50:	bf00      	nop
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	460b      	mov	r3, r1
 800ae62:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ae64:	78fb      	ldrb	r3, [r7, #3]
 800ae66:	461a      	mov	r2, r3
 800ae68:	210b      	movs	r1, #11
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f804 	bl	800ae78 <icmp_send_response>
}
 800ae70:	bf00      	nop
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b08c      	sub	sp, #48	; 0x30
 800ae7c:	af04      	add	r7, sp, #16
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	460b      	mov	r3, r1
 800ae82:	70fb      	strb	r3, [r7, #3]
 800ae84:	4613      	mov	r3, r2
 800ae86:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ae88:	2200      	movs	r2, #0
 800ae8a:	2124      	movs	r1, #36	; 0x24
 800ae8c:	2001      	movs	r0, #1
 800ae8e:	f002 f86f 	bl	800cf70 <pbuf_alloc>
 800ae92:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d04c      	beq.n	800af34 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	895b      	ldrh	r3, [r3, #10]
 800ae9e:	2b23      	cmp	r3, #35	; 0x23
 800aea0:	d806      	bhi.n	800aeb0 <icmp_send_response+0x38>
 800aea2:	4b26      	ldr	r3, [pc, #152]	; (800af3c <icmp_send_response+0xc4>)
 800aea4:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800aea8:	4925      	ldr	r1, [pc, #148]	; (800af40 <icmp_send_response+0xc8>)
 800aeaa:	4826      	ldr	r0, [pc, #152]	; (800af44 <icmp_send_response+0xcc>)
 800aeac:	f009 f912 	bl	80140d4 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	78fa      	ldrb	r2, [r7, #3]
 800aec0:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	78ba      	ldrb	r2, [r7, #2]
 800aec6:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	2200      	movs	r2, #0
 800aecc:	711a      	strb	r2, [r3, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2200      	movs	r2, #0
 800aed6:	719a      	strb	r2, [r3, #6]
 800aed8:	2200      	movs	r2, #0
 800aeda:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	f103 0008 	add.w	r0, r3, #8
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	221c      	movs	r2, #28
 800aeea:	4619      	mov	r1, r3
 800aeec:	f009 f8b1 	bl	8014052 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800aef6:	f107 030c 	add.w	r3, r7, #12
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 f824 	bl	800af48 <ip4_route>
 800af00:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d011      	beq.n	800af2c <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	2200      	movs	r2, #0
 800af0c:	709a      	strb	r2, [r3, #2]
 800af0e:	2200      	movs	r2, #0
 800af10:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800af12:	f107 020c 	add.w	r2, r7, #12
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	9302      	str	r3, [sp, #8]
 800af1a:	2301      	movs	r3, #1
 800af1c:	9301      	str	r3, [sp, #4]
 800af1e:	2300      	movs	r3, #0
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	23ff      	movs	r3, #255	; 0xff
 800af24:	2100      	movs	r1, #0
 800af26:	69f8      	ldr	r0, [r7, #28]
 800af28:	f000 f9b0 	bl	800b28c <ip4_output_if>
  }
  pbuf_free(q);
 800af2c:	69f8      	ldr	r0, [r7, #28]
 800af2e:	f002 fb91 	bl	800d654 <pbuf_free>
 800af32:	e000      	b.n	800af36 <icmp_send_response+0xbe>
    return;
 800af34:	bf00      	nop
}
 800af36:	3720      	adds	r7, #32
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	08016418 	.word	0x08016418
 800af40:	080164e4 	.word	0x080164e4
 800af44:	08016488 	.word	0x08016488

0800af48 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800af50:	4b2e      	ldr	r3, [pc, #184]	; (800b00c <ip4_route+0xc4>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	60fb      	str	r3, [r7, #12]
 800af56:	e033      	b.n	800afc0 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800af5e:	f003 0301 	and.w	r3, r3, #1
 800af62:	2b00      	cmp	r3, #0
 800af64:	d029      	beq.n	800afba <ip4_route+0x72>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800af6c:	f003 0304 	and.w	r3, r3, #4
 800af70:	2b00      	cmp	r3, #0
 800af72:	d022      	beq.n	800afba <ip4_route+0x72>
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	3304      	adds	r3, #4
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d01d      	beq.n	800afba <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	3304      	adds	r3, #4
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	405a      	eors	r2, r3
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	3308      	adds	r3, #8
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4013      	ands	r3, r2
 800af92:	2b00      	cmp	r3, #0
 800af94:	d101      	bne.n	800af9a <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	e033      	b.n	800b002 <ip4_route+0xba>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afa0:	f003 0302 	and.w	r3, r3, #2
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d108      	bne.n	800afba <ip4_route+0x72>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	330c      	adds	r3, #12
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d101      	bne.n	800afba <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	e023      	b.n	800b002 <ip4_route+0xba>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	60fb      	str	r3, [r7, #12]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1c8      	bne.n	800af58 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800afc6:	4b12      	ldr	r3, [pc, #72]	; (800b010 <ip4_route+0xc8>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d015      	beq.n	800affa <ip4_route+0xb2>
 800afce:	4b10      	ldr	r3, [pc, #64]	; (800b010 <ip4_route+0xc8>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afd6:	f003 0301 	and.w	r3, r3, #1
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00d      	beq.n	800affa <ip4_route+0xb2>
 800afde:	4b0c      	ldr	r3, [pc, #48]	; (800b010 <ip4_route+0xc8>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afe6:	f003 0304 	and.w	r3, r3, #4
 800afea:	2b00      	cmp	r3, #0
 800afec:	d005      	beq.n	800affa <ip4_route+0xb2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800afee:	4b08      	ldr	r3, [pc, #32]	; (800b010 <ip4_route+0xc8>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3304      	adds	r3, #4
 800aff4:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d101      	bne.n	800affe <ip4_route+0xb6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800affa:	2300      	movs	r3, #0
 800affc:	e001      	b.n	800b002 <ip4_route+0xba>
  }

  return netif_default;
 800affe:	4b04      	ldr	r3, [pc, #16]	; (800b010 <ip4_route+0xc8>)
 800b000:	681b      	ldr	r3, [r3, #0]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	bc80      	pop	{r7}
 800b00a:	4770      	bx	lr
 800b00c:	2000ab24 	.word	0x2000ab24
 800b010:	2000ab28 	.word	0x2000ab28

0800b014 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	091b      	lsrs	r3, r3, #4
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	2b04      	cmp	r3, #4
 800b02e:	d004      	beq.n	800b03a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f002 fb0f 	bl	800d654 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800b036:	2300      	movs	r3, #0
 800b038:	e120      	b.n	800b27c <ip4_input+0x268>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	b29b      	uxth	r3, r3
 800b040:	f003 030f 	and.w	r3, r3, #15
 800b044:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800b046:	897b      	ldrh	r3, [r7, #10]
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	885b      	ldrh	r3, [r3, #2]
 800b050:	b29b      	uxth	r3, r3
 800b052:	4618      	mov	r0, r3
 800b054:	f7fe fe98 	bl	8009d88 <lwip_htons>
 800b058:	4603      	mov	r3, r0
 800b05a:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	891b      	ldrh	r3, [r3, #8]
 800b060:	893a      	ldrh	r2, [r7, #8]
 800b062:	429a      	cmp	r2, r3
 800b064:	d204      	bcs.n	800b070 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800b066:	893b      	ldrh	r3, [r7, #8]
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f002 f97e 	bl	800d36c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	895b      	ldrh	r3, [r3, #10]
 800b074:	897a      	ldrh	r2, [r7, #10]
 800b076:	429a      	cmp	r2, r3
 800b078:	d807      	bhi.n	800b08a <ip4_input+0x76>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	891b      	ldrh	r3, [r3, #8]
 800b07e:	893a      	ldrh	r2, [r7, #8]
 800b080:	429a      	cmp	r2, r3
 800b082:	d802      	bhi.n	800b08a <ip4_input+0x76>
 800b084:	897b      	ldrh	r3, [r7, #10]
 800b086:	2b13      	cmp	r3, #19
 800b088:	d804      	bhi.n	800b094 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f002 fae2 	bl	800d654 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	e0f3      	b.n	800b27c <ip4_input+0x268>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	4a7a      	ldr	r2, [pc, #488]	; (800b284 <ip4_input+0x270>)
 800b09a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	4a78      	ldr	r2, [pc, #480]	; (800b284 <ip4_input+0x270>)
 800b0a2:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b0a4:	4b77      	ldr	r3, [pc, #476]	; (800b284 <ip4_input+0x270>)
 800b0a6:	695b      	ldr	r3, [r3, #20]
 800b0a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0ac:	2be0      	cmp	r3, #224	; 0xe0
 800b0ae:	d111      	bne.n	800b0d4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d007      	beq.n	800b0ce <ip4_input+0xba>
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	3304      	adds	r3, #4
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <ip4_input+0xba>
      netif = inp;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	613b      	str	r3, [r7, #16]
 800b0cc:	e040      	b.n	800b150 <ip4_input+0x13c>
    } else {
      netif = NULL;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	613b      	str	r3, [r7, #16]
 800b0d2:	e03d      	b.n	800b150 <ip4_input+0x13c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b0e2:	f003 0301 	and.w	r3, r3, #1
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d014      	beq.n	800b114 <ip4_input+0x100>
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00f      	beq.n	800b114 <ip4_input+0x100>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b0f4:	4b63      	ldr	r3, [pc, #396]	; (800b284 <ip4_input+0x270>)
 800b0f6:	695a      	ldr	r2, [r3, #20]
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d026      	beq.n	800b150 <ip4_input+0x13c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800b102:	4b60      	ldr	r3, [pc, #384]	; (800b284 <ip4_input+0x270>)
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	6939      	ldr	r1, [r7, #16]
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 f991 	bl	800b430 <ip4_addr_isbroadcast_u32>
 800b10e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b110:	2b00      	cmp	r3, #0
 800b112:	d11d      	bne.n	800b150 <ip4_input+0x13c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00d      	beq.n	800b136 <ip4_input+0x122>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800b11a:	4b5a      	ldr	r3, [pc, #360]	; (800b284 <ip4_input+0x270>)
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	2b7f      	cmp	r3, #127	; 0x7f
 800b122:	d102      	bne.n	800b12a <ip4_input+0x116>
          netif = NULL;
 800b124:	2300      	movs	r3, #0
 800b126:	613b      	str	r3, [r7, #16]
          break;
 800b128:	e012      	b.n	800b150 <ip4_input+0x13c>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800b12a:	2300      	movs	r3, #0
 800b12c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800b12e:	4b56      	ldr	r3, [pc, #344]	; (800b288 <ip4_input+0x274>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	613b      	str	r3, [r7, #16]
 800b134:	e002      	b.n	800b13c <ip4_input+0x128>
      } else {
        netif = netif->next;
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	429a      	cmp	r2, r3
 800b142:	d102      	bne.n	800b14a <ip4_input+0x136>
        netif = netif->next;
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1c5      	bne.n	800b0dc <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b150:	4b4c      	ldr	r3, [pc, #304]	; (800b284 <ip4_input+0x270>)
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	6839      	ldr	r1, [r7, #0]
 800b156:	4618      	mov	r0, r3
 800b158:	f000 f96a 	bl	800b430 <ip4_addr_isbroadcast_u32>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d105      	bne.n	800b16e <ip4_input+0x15a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800b162:	4b48      	ldr	r3, [pc, #288]	; (800b284 <ip4_input+0x270>)
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b16a:	2be0      	cmp	r3, #224	; 0xe0
 800b16c:	d104      	bne.n	800b178 <ip4_input+0x164>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f002 fa70 	bl	800d654 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	e081      	b.n	800b27c <ip4_input+0x268>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d104      	bne.n	800b188 <ip4_input+0x174>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f002 fa68 	bl	800d654 <pbuf_free>
    return ERR_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	e079      	b.n	800b27c <ip4_input+0x268>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	88db      	ldrh	r3, [r3, #6]
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	461a      	mov	r2, r3
 800b190:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800b194:	4013      	ands	r3, r2
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00b      	beq.n	800b1b2 <ip4_input+0x19e>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fde0 	bl	800bd60 <ip4_reass>
 800b1a0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d101      	bne.n	800b1ac <ip4_input+0x198>
      return ERR_OK;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	e067      	b.n	800b27c <ip4_input+0x268>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800b1b2:	4a34      	ldr	r2, [pc, #208]	; (800b284 <ip4_input+0x270>)
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800b1b8:	4a32      	ldr	r2, [pc, #200]	; (800b284 <ip4_input+0x270>)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b1be:	4a31      	ldr	r2, [pc, #196]	; (800b284 <ip4_input+0x270>)
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	f003 030f 	and.w	r3, r3, #15
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	4b2b      	ldr	r3, [pc, #172]	; (800b284 <ip4_input+0x270>)
 800b1d6:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800b1d8:	897b      	ldrh	r3, [r7, #10]
 800b1da:	425b      	negs	r3, r3
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	b21b      	sxth	r3, r3
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f002 fa12 	bl	800d60c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	7a5b      	ldrb	r3, [r3, #9]
 800b1ec:	2b06      	cmp	r3, #6
 800b1ee:	d009      	beq.n	800b204 <ip4_input+0x1f0>
 800b1f0:	2b11      	cmp	r3, #17
 800b1f2:	d002      	beq.n	800b1fa <ip4_input+0x1e6>
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d00a      	beq.n	800b20e <ip4_input+0x1fa>
 800b1f8:	e00e      	b.n	800b218 <ip4_input+0x204>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800b1fa:	6839      	ldr	r1, [r7, #0]
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f008 f88b 	bl	8013318 <udp_input>
      break;
 800b202:	e028      	b.n	800b256 <ip4_input+0x242>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800b204:	6839      	ldr	r1, [r7, #0]
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f004 f8b0 	bl	800f36c <tcp_input>
      break;
 800b20c:	e023      	b.n	800b256 <ip4_input+0x242>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff fd0b 	bl	800ac2c <icmp_input>
      break;
 800b216:	e01e      	b.n	800b256 <ip4_input+0x242>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b218:	4b1a      	ldr	r3, [pc, #104]	; (800b284 <ip4_input+0x270>)
 800b21a:	695b      	ldr	r3, [r3, #20]
 800b21c:	6939      	ldr	r1, [r7, #16]
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 f906 	bl	800b430 <ip4_addr_isbroadcast_u32>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d112      	bne.n	800b250 <ip4_input+0x23c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b22a:	4b16      	ldr	r3, [pc, #88]	; (800b284 <ip4_input+0x270>)
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b232:	2be0      	cmp	r3, #224	; 0xe0
 800b234:	d00c      	beq.n	800b250 <ip4_input+0x23c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800b236:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f002 f9f7 	bl	800d630 <pbuf_header_force>
        p->payload = iphdr;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	697a      	ldr	r2, [r7, #20]
 800b246:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800b248:	2102      	movs	r1, #2
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f7ff fdf4 	bl	800ae38 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f002 f9ff 	bl	800d654 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800b256:	4b0b      	ldr	r3, [pc, #44]	; (800b284 <ip4_input+0x270>)
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800b25c:	4b09      	ldr	r3, [pc, #36]	; (800b284 <ip4_input+0x270>)
 800b25e:	2200      	movs	r2, #0
 800b260:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800b262:	4b08      	ldr	r3, [pc, #32]	; (800b284 <ip4_input+0x270>)
 800b264:	2200      	movs	r2, #0
 800b266:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800b268:	4b06      	ldr	r3, [pc, #24]	; (800b284 <ip4_input+0x270>)
 800b26a:	2200      	movs	r2, #0
 800b26c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800b26e:	4b05      	ldr	r3, [pc, #20]	; (800b284 <ip4_input+0x270>)
 800b270:	2200      	movs	r2, #0
 800b272:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800b274:	4b03      	ldr	r3, [pc, #12]	; (800b284 <ip4_input+0x270>)
 800b276:	2200      	movs	r2, #0
 800b278:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3718      	adds	r7, #24
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	20007424 	.word	0x20007424
 800b288:	2000ab24 	.word	0x2000ab24

0800b28c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b08a      	sub	sp, #40	; 0x28
 800b290:	af04      	add	r7, sp, #16
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
 800b298:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d009      	beq.n	800b2b8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d003      	beq.n	800b2b2 <ip4_output_if+0x26>
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d102      	bne.n	800b2b8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800b2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b4:	3304      	adds	r3, #4
 800b2b6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800b2b8:	78fa      	ldrb	r2, [r7, #3]
 800b2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2bc:	9302      	str	r3, [sp, #8]
 800b2be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b2c2:	9301      	str	r3, [sp, #4]
 800b2c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	6979      	ldr	r1, [r7, #20]
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	f000 f805 	bl	800b2e0 <ip4_output_if_src>
 800b2d6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3718      	adds	r7, #24
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b088      	sub	sp, #32
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
 800b2ec:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	89db      	ldrh	r3, [r3, #14]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d006      	beq.n	800b304 <ip4_output_if_src+0x24>
 800b2f6:	4b48      	ldr	r3, [pc, #288]	; (800b418 <ip4_output_if_src+0x138>)
 800b2f8:	f240 3233 	movw	r2, #819	; 0x333
 800b2fc:	4947      	ldr	r1, [pc, #284]	; (800b41c <ip4_output_if_src+0x13c>)
 800b2fe:	4848      	ldr	r0, [pc, #288]	; (800b420 <ip4_output_if_src+0x140>)
 800b300:	f008 fee8 	bl	80140d4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d060      	beq.n	800b3cc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800b30a:	2314      	movs	r3, #20
 800b30c:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800b30e:	2114      	movs	r1, #20
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f002 f97b 	bl	800d60c <pbuf_header>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d002      	beq.n	800b322 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b31c:	f06f 0301 	mvn.w	r3, #1
 800b320:	e075      	b.n	800b40e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	895b      	ldrh	r3, [r3, #10]
 800b32c:	2b13      	cmp	r3, #19
 800b32e:	d806      	bhi.n	800b33e <ip4_output_if_src+0x5e>
 800b330:	4b39      	ldr	r3, [pc, #228]	; (800b418 <ip4_output_if_src+0x138>)
 800b332:	f240 3261 	movw	r2, #865	; 0x361
 800b336:	493b      	ldr	r1, [pc, #236]	; (800b424 <ip4_output_if_src+0x144>)
 800b338:	4839      	ldr	r0, [pc, #228]	; (800b420 <ip4_output_if_src+0x140>)
 800b33a:	f008 fecb 	bl	80140d4 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	78fa      	ldrb	r2, [r7, #3]
 800b342:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b34a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800b354:	8bfb      	ldrh	r3, [r7, #30]
 800b356:	089b      	lsrs	r3, r3, #2
 800b358:	b29b      	uxth	r3, r3
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b360:	b2da      	uxtb	r2, r3
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b36c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	891b      	ldrh	r3, [r3, #8]
 800b372:	4618      	mov	r0, r3
 800b374:	f7fe fd08 	bl	8009d88 <lwip_htons>
 800b378:	4603      	mov	r3, r0
 800b37a:	461a      	mov	r2, r3
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	2200      	movs	r2, #0
 800b384:	719a      	strb	r2, [r3, #6]
 800b386:	2200      	movs	r2, #0
 800b388:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800b38a:	4b27      	ldr	r3, [pc, #156]	; (800b428 <ip4_output_if_src+0x148>)
 800b38c:	881b      	ldrh	r3, [r3, #0]
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fe fcfa 	bl	8009d88 <lwip_htons>
 800b394:	4603      	mov	r3, r0
 800b396:	461a      	mov	r2, r3
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800b39c:	4b22      	ldr	r3, [pc, #136]	; (800b428 <ip4_output_if_src+0x148>)
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	4b20      	ldr	r3, [pc, #128]	; (800b428 <ip4_output_if_src+0x148>)
 800b3a6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d104      	bne.n	800b3b8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800b3ae:	4b1f      	ldr	r3, [pc, #124]	; (800b42c <ip4_output_if_src+0x14c>)
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	60da      	str	r2, [r3, #12]
 800b3b6:	e003      	b.n	800b3c0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	729a      	strb	r2, [r3, #10]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	72da      	strb	r2, [r3, #11]
 800b3ca:	e008      	b.n	800b3de <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800b3d8:	f107 0314 	add.w	r3, r7, #20
 800b3dc:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800b3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00c      	beq.n	800b400 <ip4_output_if_src+0x120>
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	891a      	ldrh	r2, [r3, #8]
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d906      	bls.n	800b400 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3f6:	68f8      	ldr	r0, [r7, #12]
 800b3f8:	f000 fe5a 	bl	800c0b0 <ip4_frag>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	e006      	b.n	800b40e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800b400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b402:	695b      	ldr	r3, [r3, #20]
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	68f9      	ldr	r1, [r7, #12]
 800b408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b40a:	4798      	blx	r3
 800b40c:	4603      	mov	r3, r0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3720      	adds	r7, #32
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	08016510 	.word	0x08016510
 800b41c:	08016544 	.word	0x08016544
 800b420:	08016550 	.word	0x08016550
 800b424:	08016578 	.word	0x08016578
 800b428:	2000419e 	.word	0x2000419e
 800b42c:	08017efc 	.word	0x08017efc

0800b430 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b444:	d002      	beq.n	800b44c <ip4_addr_isbroadcast_u32+0x1c>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d101      	bne.n	800b450 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e02a      	b.n	800b4a6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b456:	f003 0302 	and.w	r3, r3, #2
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d101      	bne.n	800b462 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800b45e:	2300      	movs	r3, #0
 800b460:	e021      	b.n	800b4a6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	3304      	adds	r3, #4
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d101      	bne.n	800b472 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800b46e:	2300      	movs	r3, #0
 800b470:	e019      	b.n	800b4a6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	3304      	adds	r3, #4
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	405a      	eors	r2, r3
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	3308      	adds	r3, #8
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4013      	ands	r3, r2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10d      	bne.n	800b4a4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	3308      	adds	r3, #8
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	43da      	mvns	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	3308      	adds	r3, #8
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d101      	bne.n	800b4a4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e000      	b.n	800b4a6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800b4a4:	2300      	movs	r3, #0
  }
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3714      	adds	r7, #20
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bc80      	pop	{r7}
 800b4ae:	4770      	bx	lr

0800b4b0 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 800b4b8:	f107 030c 	add.w	r3, r7, #12
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f80c 	bl	800b4dc <ip4addr_aton>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d001      	beq.n	800b4ce <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	e001      	b.n	800b4d2 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 800b4ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
	...

0800b4dc <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b08a      	sub	sp, #40	; 0x28
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 800b4e6:	f107 030c 	add.w	r3, r7, #12
 800b4ea:	61fb      	str	r3, [r7, #28]

  c = *cp;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 800b4f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b4f8:	2b2f      	cmp	r3, #47	; 0x2f
 800b4fa:	d903      	bls.n	800b504 <ip4addr_aton+0x28>
 800b4fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b500:	2b39      	cmp	r3, #57	; 0x39
 800b502:	d901      	bls.n	800b508 <ip4addr_aton+0x2c>
      return 0;
 800b504:	2300      	movs	r3, #0
 800b506:	e11e      	b.n	800b746 <ip4addr_aton+0x26a>
    }
    val = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 800b50c:	230a      	movs	r3, #10
 800b50e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 800b512:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b516:	2b30      	cmp	r3, #48	; 0x30
 800b518:	d11c      	bne.n	800b554 <ip4addr_aton+0x78>
      c = *++cp;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	3301      	adds	r3, #1
 800b51e:	607b      	str	r3, [r7, #4]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 800b528:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b52c:	2b78      	cmp	r3, #120	; 0x78
 800b52e:	d003      	beq.n	800b538 <ip4addr_aton+0x5c>
 800b530:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b534:	2b58      	cmp	r3, #88	; 0x58
 800b536:	d10a      	bne.n	800b54e <ip4addr_aton+0x72>
        base = 16;
 800b538:	2310      	movs	r3, #16
 800b53a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	3301      	adds	r3, #1
 800b542:	607b      	str	r3, [r7, #4]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b54c:	e002      	b.n	800b554 <ip4addr_aton+0x78>
      } else {
        base = 8;
 800b54e:	2308      	movs	r3, #8
 800b550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 800b554:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b558:	2b2f      	cmp	r3, #47	; 0x2f
 800b55a:	d915      	bls.n	800b588 <ip4addr_aton+0xac>
 800b55c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b560:	2b39      	cmp	r3, #57	; 0x39
 800b562:	d811      	bhi.n	800b588 <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 800b564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56a:	fb02 f203 	mul.w	r2, r2, r3
 800b56e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b572:	4413      	add	r3, r2
 800b574:	3b30      	subs	r3, #48	; 0x30
 800b576:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3301      	adds	r3, #1
 800b57c:	607b      	str	r3, [r7, #4]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b586:	e036      	b.n	800b5f6 <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 800b588:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b58c:	2b10      	cmp	r3, #16
 800b58e:	d133      	bne.n	800b5f8 <ip4addr_aton+0x11c>
 800b590:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b594:	2b2f      	cmp	r3, #47	; 0x2f
 800b596:	d903      	bls.n	800b5a0 <ip4addr_aton+0xc4>
 800b598:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b59c:	2b39      	cmp	r3, #57	; 0x39
 800b59e:	d90f      	bls.n	800b5c0 <ip4addr_aton+0xe4>
 800b5a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b5a4:	2b60      	cmp	r3, #96	; 0x60
 800b5a6:	d903      	bls.n	800b5b0 <ip4addr_aton+0xd4>
 800b5a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b5ac:	2b66      	cmp	r3, #102	; 0x66
 800b5ae:	d907      	bls.n	800b5c0 <ip4addr_aton+0xe4>
 800b5b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b5b4:	2b40      	cmp	r3, #64	; 0x40
 800b5b6:	d91f      	bls.n	800b5f8 <ip4addr_aton+0x11c>
 800b5b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b5bc:	2b46      	cmp	r3, #70	; 0x46
 800b5be:	d81b      	bhi.n	800b5f8 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c2:	011b      	lsls	r3, r3, #4
 800b5c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b5c8:	f102 010a 	add.w	r1, r2, #10
 800b5cc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b5d0:	2a60      	cmp	r2, #96	; 0x60
 800b5d2:	d905      	bls.n	800b5e0 <ip4addr_aton+0x104>
 800b5d4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b5d8:	2a7a      	cmp	r2, #122	; 0x7a
 800b5da:	d801      	bhi.n	800b5e0 <ip4addr_aton+0x104>
 800b5dc:	2261      	movs	r2, #97	; 0x61
 800b5de:	e000      	b.n	800b5e2 <ip4addr_aton+0x106>
 800b5e0:	2241      	movs	r2, #65	; 0x41
 800b5e2:	1a8a      	subs	r2, r1, r2
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	607b      	str	r3, [r7, #4]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (isdigit(c)) {
 800b5f6:	e7ad      	b.n	800b554 <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 800b5f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b5fc:	2b2e      	cmp	r3, #46	; 0x2e
 800b5fe:	d114      	bne.n	800b62a <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800b600:	f107 030c 	add.w	r3, r7, #12
 800b604:	330c      	adds	r3, #12
 800b606:	69fa      	ldr	r2, [r7, #28]
 800b608:	4293      	cmp	r3, r2
 800b60a:	d801      	bhi.n	800b610 <ip4addr_aton+0x134>
        return 0;
 800b60c:	2300      	movs	r3, #0
 800b60e:	e09a      	b.n	800b746 <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	1d1a      	adds	r2, r3, #4
 800b614:	61fa      	str	r2, [r7, #28]
 800b616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b618:	601a      	str	r2, [r3, #0]
      c = *++cp;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	3301      	adds	r3, #1
 800b61e:	607b      	str	r3, [r7, #4]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!isdigit(c)) {
 800b628:	e764      	b.n	800b4f4 <ip4addr_aton+0x18>
    } else {
      break;
 800b62a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 800b62c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b630:	2b00      	cmp	r3, #0
 800b632:	d019      	beq.n	800b668 <ip4addr_aton+0x18c>
 800b634:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b638:	2b20      	cmp	r3, #32
 800b63a:	d015      	beq.n	800b668 <ip4addr_aton+0x18c>
 800b63c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b640:	2b0c      	cmp	r3, #12
 800b642:	d011      	beq.n	800b668 <ip4addr_aton+0x18c>
 800b644:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b648:	2b0a      	cmp	r3, #10
 800b64a:	d00d      	beq.n	800b668 <ip4addr_aton+0x18c>
 800b64c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b650:	2b0d      	cmp	r3, #13
 800b652:	d009      	beq.n	800b668 <ip4addr_aton+0x18c>
 800b654:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b658:	2b09      	cmp	r3, #9
 800b65a:	d005      	beq.n	800b668 <ip4addr_aton+0x18c>
 800b65c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b660:	2b0b      	cmp	r3, #11
 800b662:	d001      	beq.n	800b668 <ip4addr_aton+0x18c>
    return 0;
 800b664:	2300      	movs	r3, #0
 800b666:	e06e      	b.n	800b746 <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800b668:	69fa      	ldr	r2, [r7, #28]
 800b66a:	f107 030c 	add.w	r3, r7, #12
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	109b      	asrs	r3, r3, #2
 800b672:	3301      	adds	r3, #1
 800b674:	2b04      	cmp	r3, #4
 800b676:	d853      	bhi.n	800b720 <ip4addr_aton+0x244>
 800b678:	a201      	add	r2, pc, #4	; (adr r2, 800b680 <ip4addr_aton+0x1a4>)
 800b67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67e:	bf00      	nop
 800b680:	0800b695 	.word	0x0800b695
 800b684:	0800b731 	.word	0x0800b731
 800b688:	0800b699 	.word	0x0800b699
 800b68c:	0800b6bb 	.word	0x0800b6bb
 800b690:	0800b6e9 	.word	0x0800b6e9

  case 0:
    return 0;       /* initial nondigit */
 800b694:	2300      	movs	r3, #0
 800b696:	e056      	b.n	800b746 <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b69e:	d301      	bcc.n	800b6a4 <ip4addr_aton+0x1c8>
      return 0;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	e050      	b.n	800b746 <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2bff      	cmp	r3, #255	; 0xff
 800b6a8:	d901      	bls.n	800b6ae <ip4addr_aton+0x1d2>
      return 0;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	e04b      	b.n	800b746 <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	061b      	lsls	r3, r3, #24
 800b6b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800b6b8:	e03b      	b.n	800b732 <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6c0:	d301      	bcc.n	800b6c6 <ip4addr_aton+0x1ea>
      return 0;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	e03f      	b.n	800b746 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2bff      	cmp	r3, #255	; 0xff
 800b6ca:	d802      	bhi.n	800b6d2 <ip4addr_aton+0x1f6>
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	2bff      	cmp	r3, #255	; 0xff
 800b6d0:	d901      	bls.n	800b6d6 <ip4addr_aton+0x1fa>
      return 0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	e037      	b.n	800b746 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	061a      	lsls	r2, r3, #24
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	041b      	lsls	r3, r3, #16
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800b6e6:	e024      	b.n	800b732 <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ea:	2bff      	cmp	r3, #255	; 0xff
 800b6ec:	d901      	bls.n	800b6f2 <ip4addr_aton+0x216>
      return 0;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	e029      	b.n	800b746 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2bff      	cmp	r3, #255	; 0xff
 800b6f6:	d805      	bhi.n	800b704 <ip4addr_aton+0x228>
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	2bff      	cmp	r3, #255	; 0xff
 800b6fc:	d802      	bhi.n	800b704 <ip4addr_aton+0x228>
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	2bff      	cmp	r3, #255	; 0xff
 800b702:	d901      	bls.n	800b708 <ip4addr_aton+0x22c>
      return 0;
 800b704:	2300      	movs	r3, #0
 800b706:	e01e      	b.n	800b746 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	061a      	lsls	r2, r3, #24
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	041b      	lsls	r3, r3, #16
 800b710:	431a      	orrs	r2, r3
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	021b      	lsls	r3, r3, #8
 800b716:	4313      	orrs	r3, r2
 800b718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b71a:	4313      	orrs	r3, r2
 800b71c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800b71e:	e008      	b.n	800b732 <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 800b720:	4b0b      	ldr	r3, [pc, #44]	; (800b750 <ip4addr_aton+0x274>)
 800b722:	f240 1203 	movw	r2, #259	; 0x103
 800b726:	490b      	ldr	r1, [pc, #44]	; (800b754 <ip4addr_aton+0x278>)
 800b728:	480b      	ldr	r0, [pc, #44]	; (800b758 <ip4addr_aton+0x27c>)
 800b72a:	f008 fcd3 	bl	80140d4 <iprintf>
    break;
 800b72e:	e000      	b.n	800b732 <ip4addr_aton+0x256>
    break;
 800b730:	bf00      	nop
  }
  if (addr) {
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d005      	beq.n	800b744 <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800b738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b73a:	f7fe fb32 	bl	8009da2 <lwip_htonl>
 800b73e:	4602      	mov	r2, r0
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	601a      	str	r2, [r3, #0]
  }
  return 1;
 800b744:	2301      	movs	r3, #1
}
 800b746:	4618      	mov	r0, r3
 800b748:	3728      	adds	r7, #40	; 0x28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	080165a8 	.word	0x080165a8
 800b754:	080165e4 	.word	0x080165e4
 800b758:	080165f0 	.word	0x080165f0

0800b75c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800b762:	2300      	movs	r3, #0
 800b764:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800b766:	4b12      	ldr	r3, [pc, #72]	; (800b7b0 <ip_reass_tmr+0x54>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800b76c:	e018      	b.n	800b7a0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	7fdb      	ldrb	r3, [r3, #31]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00b      	beq.n	800b78e <ip_reass_tmr+0x32>
      r->timer--;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	7fdb      	ldrb	r3, [r3, #31]
 800b77a:	3b01      	subs	r3, #1
 800b77c:	b2da      	uxtb	r2, r3
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	e008      	b.n	800b7a0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800b798:	68b9      	ldr	r1, [r7, #8]
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f80a 	bl	800b7b4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1e3      	bne.n	800b76e <ip_reass_tmr+0x12>
     }
   }
}
 800b7a6:	bf00      	nop
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	200041a0 	.word	0x200041a0

0800b7b4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d105      	bne.n	800b7d6 <ip_reass_free_complete_datagram+0x22>
 800b7ca:	4b45      	ldr	r3, [pc, #276]	; (800b8e0 <ip_reass_free_complete_datagram+0x12c>)
 800b7cc:	22ab      	movs	r2, #171	; 0xab
 800b7ce:	4945      	ldr	r1, [pc, #276]	; (800b8e4 <ip_reass_free_complete_datagram+0x130>)
 800b7d0:	4845      	ldr	r0, [pc, #276]	; (800b8e8 <ip_reass_free_complete_datagram+0x134>)
 800b7d2:	f008 fc7f 	bl	80140d4 <iprintf>
  if (prev != NULL) {
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00a      	beq.n	800b7f2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d005      	beq.n	800b7f2 <ip_reass_free_complete_datagram+0x3e>
 800b7e6:	4b3e      	ldr	r3, [pc, #248]	; (800b8e0 <ip_reass_free_complete_datagram+0x12c>)
 800b7e8:	22ad      	movs	r2, #173	; 0xad
 800b7ea:	4940      	ldr	r1, [pc, #256]	; (800b8ec <ip_reass_free_complete_datagram+0x138>)
 800b7ec:	483e      	ldr	r0, [pc, #248]	; (800b8e8 <ip_reass_free_complete_datagram+0x134>)
 800b7ee:	f008 fc71 	bl	80140d4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	889b      	ldrh	r3, [r3, #4]
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	d12a      	bne.n	800b85a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	6858      	ldr	r0, [r3, #4]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	3308      	adds	r3, #8
 800b81a:	2214      	movs	r2, #20
 800b81c:	4619      	mov	r1, r3
 800b81e:	f008 fc18 	bl	8014052 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800b822:	2101      	movs	r1, #1
 800b824:	69b8      	ldr	r0, [r7, #24]
 800b826:	f7ff fb17 	bl	800ae58 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800b82a:	69b8      	ldr	r0, [r7, #24]
 800b82c:	f001 ffac 	bl	800d788 <pbuf_clen>
 800b830:	4603      	mov	r3, r0
 800b832:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b834:	8bfa      	ldrh	r2, [r7, #30]
 800b836:	8a7b      	ldrh	r3, [r7, #18]
 800b838:	4413      	add	r3, r2
 800b83a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b83e:	db05      	blt.n	800b84c <ip_reass_free_complete_datagram+0x98>
 800b840:	4b27      	ldr	r3, [pc, #156]	; (800b8e0 <ip_reass_free_complete_datagram+0x12c>)
 800b842:	22bc      	movs	r2, #188	; 0xbc
 800b844:	492a      	ldr	r1, [pc, #168]	; (800b8f0 <ip_reass_free_complete_datagram+0x13c>)
 800b846:	4828      	ldr	r0, [pc, #160]	; (800b8e8 <ip_reass_free_complete_datagram+0x134>)
 800b848:	f008 fc44 	bl	80140d4 <iprintf>
    pbufs_freed += clen;
 800b84c:	8bfa      	ldrh	r2, [r7, #30]
 800b84e:	8a7b      	ldrh	r3, [r7, #18]
 800b850:	4413      	add	r3, r2
 800b852:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800b854:	69b8      	ldr	r0, [r7, #24]
 800b856:	f001 fefd 	bl	800d654 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800b860:	e01f      	b.n	800b8a2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	617b      	str	r3, [r7, #20]
    pcur = p;
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f001 ff88 	bl	800d788 <pbuf_clen>
 800b878:	4603      	mov	r3, r0
 800b87a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b87c:	8bfa      	ldrh	r2, [r7, #30]
 800b87e:	8a7b      	ldrh	r3, [r7, #18]
 800b880:	4413      	add	r3, r2
 800b882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b886:	db05      	blt.n	800b894 <ip_reass_free_complete_datagram+0xe0>
 800b888:	4b15      	ldr	r3, [pc, #84]	; (800b8e0 <ip_reass_free_complete_datagram+0x12c>)
 800b88a:	22cc      	movs	r2, #204	; 0xcc
 800b88c:	4918      	ldr	r1, [pc, #96]	; (800b8f0 <ip_reass_free_complete_datagram+0x13c>)
 800b88e:	4816      	ldr	r0, [pc, #88]	; (800b8e8 <ip_reass_free_complete_datagram+0x134>)
 800b890:	f008 fc20 	bl	80140d4 <iprintf>
    pbufs_freed += clen;
 800b894:	8bfa      	ldrh	r2, [r7, #30]
 800b896:	8a7b      	ldrh	r3, [r7, #18]
 800b898:	4413      	add	r3, r2
 800b89a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f001 fed9 	bl	800d654 <pbuf_free>
  while (p != NULL) {
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1dc      	bne.n	800b862 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f8c2 	bl	800ba34 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800b8b0:	4b10      	ldr	r3, [pc, #64]	; (800b8f4 <ip_reass_free_complete_datagram+0x140>)
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	8bfa      	ldrh	r2, [r7, #30]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d905      	bls.n	800b8c6 <ip_reass_free_complete_datagram+0x112>
 800b8ba:	4b09      	ldr	r3, [pc, #36]	; (800b8e0 <ip_reass_free_complete_datagram+0x12c>)
 800b8bc:	22d2      	movs	r2, #210	; 0xd2
 800b8be:	490e      	ldr	r1, [pc, #56]	; (800b8f8 <ip_reass_free_complete_datagram+0x144>)
 800b8c0:	4809      	ldr	r0, [pc, #36]	; (800b8e8 <ip_reass_free_complete_datagram+0x134>)
 800b8c2:	f008 fc07 	bl	80140d4 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800b8c6:	4b0b      	ldr	r3, [pc, #44]	; (800b8f4 <ip_reass_free_complete_datagram+0x140>)
 800b8c8:	881a      	ldrh	r2, [r3, #0]
 800b8ca:	8bfb      	ldrh	r3, [r7, #30]
 800b8cc:	1ad3      	subs	r3, r2, r3
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	4b08      	ldr	r3, [pc, #32]	; (800b8f4 <ip_reass_free_complete_datagram+0x140>)
 800b8d2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800b8d4:	8bfb      	ldrh	r3, [r7, #30]
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3720      	adds	r7, #32
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	08016618 	.word	0x08016618
 800b8e4:	08016654 	.word	0x08016654
 800b8e8:	08016660 	.word	0x08016660
 800b8ec:	08016688 	.word	0x08016688
 800b8f0:	0801669c 	.word	0x0801669c
 800b8f4:	200041a4 	.word	0x200041a4
 800b8f8:	080166bc 	.word	0x080166bc

0800b8fc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08a      	sub	sp, #40	; 0x28
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800b906:	2300      	movs	r3, #0
 800b908:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800b90a:	2300      	movs	r3, #0
 800b90c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800b90e:	2300      	movs	r3, #0
 800b910:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800b912:	2300      	movs	r3, #0
 800b914:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800b91a:	4b28      	ldr	r3, [pc, #160]	; (800b9bc <ip_reass_remove_oldest_datagram+0xc0>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b920:	e030      	b.n	800b984 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800b922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b924:	695a      	ldr	r2, [r3, #20]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d10c      	bne.n	800b948 <ip_reass_remove_oldest_datagram+0x4c>
 800b92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b930:	699a      	ldr	r2, [r3, #24]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	429a      	cmp	r2, r3
 800b938:	d106      	bne.n	800b948 <ip_reass_remove_oldest_datagram+0x4c>
 800b93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93c:	899a      	ldrh	r2, [r3, #12]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	889b      	ldrh	r3, [r3, #4]
 800b942:	b29b      	uxth	r3, r3
 800b944:	429a      	cmp	r2, r3
 800b946:	d014      	beq.n	800b972 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	3301      	adds	r3, #1
 800b94c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800b94e:	6a3b      	ldr	r3, [r7, #32]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d104      	bne.n	800b95e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	61bb      	str	r3, [r7, #24]
 800b95c:	e009      	b.n	800b972 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800b95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b960:	7fda      	ldrb	r2, [r3, #31]
 800b962:	6a3b      	ldr	r3, [r7, #32]
 800b964:	7fdb      	ldrb	r3, [r3, #31]
 800b966:	429a      	cmp	r2, r3
 800b968:	d803      	bhi.n	800b972 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d001      	beq.n	800b97e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800b97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800b97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b986:	2b00      	cmp	r3, #0
 800b988:	d1cb      	bne.n	800b922 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800b98a:	6a3b      	ldr	r3, [r7, #32]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d008      	beq.n	800b9a2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800b990:	69b9      	ldr	r1, [r7, #24]
 800b992:	6a38      	ldr	r0, [r7, #32]
 800b994:	f7ff ff0e 	bl	800b7b4 <ip_reass_free_complete_datagram>
 800b998:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800b99a:	697a      	ldr	r2, [r7, #20]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	4413      	add	r3, r2
 800b9a0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	da02      	bge.n	800b9b0 <ip_reass_remove_oldest_datagram+0xb4>
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	dcac      	bgt.n	800b90a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800b9b0:	697b      	ldr	r3, [r7, #20]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3728      	adds	r7, #40	; 0x28
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	200041a0 	.word	0x200041a0

0800b9c0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b9ca:	2004      	movs	r0, #4
 800b9cc:	f001 f83c 	bl	800ca48 <memp_malloc>
 800b9d0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d110      	bne.n	800b9fa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800b9d8:	6839      	ldr	r1, [r7, #0]
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7ff ff8e 	bl	800b8fc <ip_reass_remove_oldest_datagram>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	db03      	blt.n	800b9f0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b9e8:	2004      	movs	r0, #4
 800b9ea:	f001 f82d 	bl	800ca48 <memp_malloc>
 800b9ee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d101      	bne.n	800b9fa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	e016      	b.n	800ba28 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800b9fa:	2220      	movs	r2, #32
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f008 fb32 	bl	8014068 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2203      	movs	r2, #3
 800ba08:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ba0a:	4b09      	ldr	r3, [pc, #36]	; (800ba30 <ip_reass_enqueue_new_datagram+0x70>)
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ba12:	4a07      	ldr	r2, [pc, #28]	; (800ba30 <ip_reass_enqueue_new_datagram+0x70>)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	3308      	adds	r3, #8
 800ba1c:	2214      	movs	r2, #20
 800ba1e:	6879      	ldr	r1, [r7, #4]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f008 fb16 	bl	8014052 <memcpy>
  return ipr;
 800ba26:	68fb      	ldr	r3, [r7, #12]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	200041a0 	.word	0x200041a0

0800ba34 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ba3e:	4b10      	ldr	r3, [pc, #64]	; (800ba80 <ip_reass_dequeue_datagram+0x4c>)
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d104      	bne.n	800ba52 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a0c      	ldr	r2, [pc, #48]	; (800ba80 <ip_reass_dequeue_datagram+0x4c>)
 800ba4e:	6013      	str	r3, [r2, #0]
 800ba50:	e00d      	b.n	800ba6e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d106      	bne.n	800ba66 <ip_reass_dequeue_datagram+0x32>
 800ba58:	4b0a      	ldr	r3, [pc, #40]	; (800ba84 <ip_reass_dequeue_datagram+0x50>)
 800ba5a:	f240 1245 	movw	r2, #325	; 0x145
 800ba5e:	490a      	ldr	r1, [pc, #40]	; (800ba88 <ip_reass_dequeue_datagram+0x54>)
 800ba60:	480a      	ldr	r0, [pc, #40]	; (800ba8c <ip_reass_dequeue_datagram+0x58>)
 800ba62:	f008 fb37 	bl	80140d4 <iprintf>
    prev->next = ipr->next;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ba6e:	6879      	ldr	r1, [r7, #4]
 800ba70:	2004      	movs	r0, #4
 800ba72:	f001 f83b 	bl	800caec <memp_free>
}
 800ba76:	bf00      	nop
 800ba78:	3708      	adds	r7, #8
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	200041a0 	.word	0x200041a0
 800ba84:	08016618 	.word	0x08016618
 800ba88:	080166d8 	.word	0x080166d8
 800ba8c:	08016660 	.word	0x08016660

0800ba90 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b08c      	sub	sp, #48	; 0x30
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800baa0:	2301      	movs	r3, #1
 800baa2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800baaa:	69fb      	ldr	r3, [r7, #28]
 800baac:	885b      	ldrh	r3, [r3, #2]
 800baae:	b29b      	uxth	r3, r3
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fe f969 	bl	8009d88 <lwip_htons>
 800bab6:	4603      	mov	r3, r0
 800bab8:	461a      	mov	r2, r3
 800baba:	69fb      	ldr	r3, [r7, #28]
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	b29b      	uxth	r3, r3
 800bac0:	f003 030f 	and.w	r3, r3, #15
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	b29b      	uxth	r3, r3
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	88db      	ldrh	r3, [r3, #6]
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7fe f957 	bl	8009d88 <lwip_htons>
 800bada:	4603      	mov	r3, r0
 800badc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	00db      	lsls	r3, r3, #3
 800bae4:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800baec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baee:	2200      	movs	r2, #0
 800baf0:	701a      	strb	r2, [r3, #0]
 800baf2:	2200      	movs	r2, #0
 800baf4:	705a      	strb	r2, [r3, #1]
 800baf6:	2200      	movs	r2, #0
 800baf8:	709a      	strb	r2, [r3, #2]
 800bafa:	2200      	movs	r2, #0
 800bafc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800bafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb00:	8b3a      	ldrh	r2, [r7, #24]
 800bb02:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800bb04:	8b3a      	ldrh	r2, [r7, #24]
 800bb06:	8b7b      	ldrh	r3, [r7, #26]
 800bb08:	4413      	add	r3, r2
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0e:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	627b      	str	r3, [r7, #36]	; 0x24
 800bb16:	e061      	b.n	800bbdc <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800bb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb20:	889b      	ldrh	r3, [r3, #4]
 800bb22:	b29a      	uxth	r2, r3
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	889b      	ldrh	r3, [r3, #4]
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d232      	bcs.n	800bb94 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800bb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb32:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d01f      	beq.n	800bb7a <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800bb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3c:	889b      	ldrh	r3, [r3, #4]
 800bb3e:	b29a      	uxth	r2, r3
 800bb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb42:	88db      	ldrh	r3, [r3, #6]
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	429a      	cmp	r2, r3
 800bb48:	f0c0 80e8 	bcc.w	800bd1c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
 800bb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4e:	88db      	ldrh	r3, [r3, #6]
 800bb50:	b29a      	uxth	r2, r3
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	889b      	ldrh	r3, [r3, #4]
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	f200 80df 	bhi.w	800bd1c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800bb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb60:	68ba      	ldr	r2, [r7, #8]
 800bb62:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800bb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb66:	88db      	ldrh	r3, [r3, #6]
 800bb68:	b29a      	uxth	r2, r3
 800bb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6c:	889b      	ldrh	r3, [r3, #4]
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d037      	beq.n	800bbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800bb74:	2300      	movs	r3, #0
 800bb76:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800bb78:	e034      	b.n	800bbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800bb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7c:	88db      	ldrh	r3, [r3, #6]
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	889b      	ldrh	r3, [r3, #4]
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	429a      	cmp	r2, r3
 800bb88:	f200 80c3 	bhi.w	800bd12 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
        ipr->p = new_p;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	605a      	str	r2, [r3, #4]
      break;
 800bb92:	e027      	b.n	800bbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800bb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb96:	889b      	ldrh	r3, [r3, #4]
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	889b      	ldrh	r3, [r3, #4]
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	429a      	cmp	r2, r3
 800bba2:	f000 80b8 	beq.w	800bd16 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800bba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba8:	889b      	ldrh	r3, [r3, #4]
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	88db      	ldrh	r3, [r3, #6]
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	f0c0 80b1 	bcc.w	800bd1a <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800bbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d009      	beq.n	800bbd2 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800bbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc0:	88db      	ldrh	r3, [r3, #6]
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	889b      	ldrh	r3, [r3, #4]
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d001      	beq.n	800bbd2 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800bbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d19a      	bne.n	800bb18 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800bbe2:	e000      	b.n	800bbe6 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800bbe4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d12d      	bne.n	800bc48 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800bbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d01c      	beq.n	800bc2c <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800bbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf4:	88db      	ldrh	r3, [r3, #6]
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfa:	889b      	ldrh	r3, [r3, #4]
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d906      	bls.n	800bc10 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800bc02:	4b50      	ldr	r3, [pc, #320]	; (800bd44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800bc04:	f240 12ab 	movw	r2, #427	; 0x1ab
 800bc08:	494f      	ldr	r1, [pc, #316]	; (800bd48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800bc0a:	4850      	ldr	r0, [pc, #320]	; (800bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bc0c:	f008 fa62 	bl	80140d4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800bc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc12:	68ba      	ldr	r2, [r7, #8]
 800bc14:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800bc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc18:	88db      	ldrh	r3, [r3, #6]
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1e:	889b      	ldrh	r3, [r3, #4]
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d010      	beq.n	800bc48 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800bc26:	2300      	movs	r3, #0
 800bc28:	623b      	str	r3, [r7, #32]
 800bc2a:	e00d      	b.n	800bc48 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d006      	beq.n	800bc42 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800bc34:	4b43      	ldr	r3, [pc, #268]	; (800bd44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800bc36:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800bc3a:	4945      	ldr	r1, [pc, #276]	; (800bd50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800bc3c:	4843      	ldr	r0, [pc, #268]	; (800bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bc3e:	f008 fa49 	bl	80140d4 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d105      	bne.n	800bc5a <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	7f9b      	ldrb	r3, [r3, #30]
 800bc52:	f003 0301 	and.w	r3, r3, #1
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d059      	beq.n	800bd0e <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d04f      	beq.n	800bd00 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d006      	beq.n	800bc76 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	889b      	ldrh	r3, [r3, #4]
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d002      	beq.n	800bc7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	623b      	str	r3, [r7, #32]
 800bc7a:	e041      	b.n	800bd00 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800bc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800bc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800bc86:	e012      	b.n	800bcae <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800bc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc90:	88db      	ldrh	r3, [r3, #6]
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc96:	889b      	ldrh	r3, [r3, #4]
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d002      	beq.n	800bca4 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	623b      	str	r3, [r7, #32]
            break;
 800bca2:	e007      	b.n	800bcb4 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800bca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800bca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d1e9      	bne.n	800bc88 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800bcb4:	6a3b      	ldr	r3, [r7, #32]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d022      	beq.n	800bd00 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d106      	bne.n	800bcd0 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800bcc2:	4b20      	ldr	r3, [pc, #128]	; (800bd44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800bcc4:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800bcc8:	4922      	ldr	r1, [pc, #136]	; (800bd54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bcca:	4820      	ldr	r0, [pc, #128]	; (800bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bccc:	f008 fa02 	bl	80140d4 <iprintf>
          LWIP_ASSERT("sanity check",
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	685a      	ldr	r2, [r3, #4]
 800bcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d106      	bne.n	800bcea <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800bcdc:	4b19      	ldr	r3, [pc, #100]	; (800bd44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800bcde:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800bce2:	491c      	ldr	r1, [pc, #112]	; (800bd54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bce4:	4819      	ldr	r0, [pc, #100]	; (800bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bce6:	f008 f9f5 	bl	80140d4 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800bcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d006      	beq.n	800bd00 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800bcf2:	4b14      	ldr	r3, [pc, #80]	; (800bd44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800bcf4:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800bcf8:	4917      	ldr	r1, [pc, #92]	; (800bd58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800bcfa:	4814      	ldr	r0, [pc, #80]	; (800bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bcfc:	f008 f9ea 	bl	80140d4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800bd00:	6a3b      	ldr	r3, [r7, #32]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	bf14      	ite	ne
 800bd06:	2301      	movne	r3, #1
 800bd08:	2300      	moveq	r3, #0
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	e016      	b.n	800bd3c <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800bd0e:	2300      	movs	r3, #0
 800bd10:	e014      	b.n	800bd3c <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
          goto freepbuf;
 800bd12:	bf00      	nop
 800bd14:	e002      	b.n	800bd1c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 800bd16:	bf00      	nop
 800bd18:	e000      	b.n	800bd1c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 800bd1a:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800bd1c:	68b8      	ldr	r0, [r7, #8]
 800bd1e:	f001 fd33 	bl	800d788 <pbuf_clen>
 800bd22:	4603      	mov	r3, r0
 800bd24:	461a      	mov	r2, r3
 800bd26:	4b0d      	ldr	r3, [pc, #52]	; (800bd5c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	1a9b      	subs	r3, r3, r2
 800bd2c:	b29a      	uxth	r2, r3
 800bd2e:	4b0b      	ldr	r3, [pc, #44]	; (800bd5c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800bd30:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800bd32:	68b8      	ldr	r0, [r7, #8]
 800bd34:	f001 fc8e 	bl	800d654 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bd38:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3730      	adds	r7, #48	; 0x30
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	08016618 	.word	0x08016618
 800bd48:	080166f4 	.word	0x080166f4
 800bd4c:	08016660 	.word	0x08016660
 800bd50:	08016714 	.word	0x08016714
 800bd54:	0801674c 	.word	0x0801674c
 800bd58:	0801675c 	.word	0x0801675c
 800bd5c:	200041a4 	.word	0x200041a4

0800bd60 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b08e      	sub	sp, #56	; 0x38
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800bd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	f003 030f 	and.w	r3, r3, #15
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	2b14      	cmp	r3, #20
 800bd7a:	f040 8131 	bne.w	800bfe0 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800bd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd80:	88db      	ldrh	r3, [r3, #6]
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7fd ffff 	bl	8009d88 <lwip_htons>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	00db      	lsls	r3, r3, #3
 800bd94:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800bd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd98:	885b      	ldrh	r3, [r3, #2]
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7fd fff3 	bl	8009d88 <lwip_htons>
 800bda2:	4603      	mov	r3, r0
 800bda4:	461a      	mov	r2, r3
 800bda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	f003 030f 	and.w	r3, r3, #15
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	1ad3      	subs	r3, r2, r3
 800bdb8:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f001 fce4 	bl	800d788 <pbuf_clen>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800bdc4:	4b8c      	ldr	r3, [pc, #560]	; (800bff8 <ip4_reass+0x298>)
 800bdc6:	881b      	ldrh	r3, [r3, #0]
 800bdc8:	461a      	mov	r2, r3
 800bdca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdcc:	4413      	add	r3, r2
 800bdce:	2b0a      	cmp	r3, #10
 800bdd0:	dd10      	ble.n	800bdf4 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bdd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdd8:	f7ff fd90 	bl	800b8fc <ip_reass_remove_oldest_datagram>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	f000 8101 	beq.w	800bfe6 <ip4_reass+0x286>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800bde4:	4b84      	ldr	r3, [pc, #528]	; (800bff8 <ip4_reass+0x298>)
 800bde6:	881b      	ldrh	r3, [r3, #0]
 800bde8:	461a      	mov	r2, r3
 800bdea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdec:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bdee:	2b0a      	cmp	r3, #10
 800bdf0:	f300 80f9 	bgt.w	800bfe6 <ip4_reass+0x286>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800bdf4:	4b81      	ldr	r3, [pc, #516]	; (800bffc <ip4_reass+0x29c>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	633b      	str	r3, [r7, #48]	; 0x30
 800bdfa:	e015      	b.n	800be28 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800bdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfe:	695a      	ldr	r2, [r3, #20]
 800be00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	429a      	cmp	r2, r3
 800be06:	d10c      	bne.n	800be22 <ip4_reass+0xc2>
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	699a      	ldr	r2, [r3, #24]
 800be0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	429a      	cmp	r2, r3
 800be12:	d106      	bne.n	800be22 <ip4_reass+0xc2>
 800be14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be16:	899a      	ldrh	r2, [r3, #12]
 800be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1a:	889b      	ldrh	r3, [r3, #4]
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	429a      	cmp	r2, r3
 800be20:	d006      	beq.n	800be30 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800be22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	633b      	str	r3, [r7, #48]	; 0x30
 800be28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1e6      	bne.n	800bdfc <ip4_reass+0x9c>
 800be2e:	e000      	b.n	800be32 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800be30:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	2b00      	cmp	r3, #0
 800be36:	d109      	bne.n	800be4c <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800be38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be3a:	4619      	mov	r1, r3
 800be3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be3e:	f7ff fdbf 	bl	800b9c0 <ip_reass_enqueue_new_datagram>
 800be42:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800be44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be46:	2b00      	cmp	r3, #0
 800be48:	d11c      	bne.n	800be84 <ip4_reass+0x124>
      goto nullreturn;
 800be4a:	e0cc      	b.n	800bfe6 <ip4_reass+0x286>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800be4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4e:	88db      	ldrh	r3, [r3, #6]
 800be50:	b29b      	uxth	r3, r3
 800be52:	4618      	mov	r0, r3
 800be54:	f7fd ff98 	bl	8009d88 <lwip_htons>
 800be58:	4603      	mov	r3, r0
 800be5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d110      	bne.n	800be84 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	89db      	ldrh	r3, [r3, #14]
 800be66:	4618      	mov	r0, r3
 800be68:	f7fd ff8e 	bl	8009d88 <lwip_htons>
 800be6c:	4603      	mov	r3, r0
 800be6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800be72:	2b00      	cmp	r3, #0
 800be74:	d006      	beq.n	800be84 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	3308      	adds	r3, #8
 800be7a:	2214      	movs	r2, #20
 800be7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be7e:	4618      	mov	r0, r3
 800be80:	f008 f8e7 	bl	8014052 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800be84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be86:	88db      	ldrh	r3, [r3, #6]
 800be88:	b29b      	uxth	r3, r3
 800be8a:	f003 0320 	and.w	r3, r3, #32
 800be8e:	2b00      	cmp	r3, #0
 800be90:	bf0c      	ite	eq
 800be92:	2301      	moveq	r3, #1
 800be94:	2300      	movne	r3, #0
 800be96:	b2db      	uxtb	r3, r3
 800be98:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00e      	beq.n	800bebe <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800bea0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bea2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bea4:	4413      	add	r3, r2
 800bea6:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800bea8:	8b7a      	ldrh	r2, [r7, #26]
 800beaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800beac:	429a      	cmp	r2, r3
 800beae:	f0c0 809a 	bcc.w	800bfe6 <ip4_reass+0x286>
 800beb2:	8b7b      	ldrh	r3, [r7, #26]
 800beb4:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800beb8:	4293      	cmp	r3, r2
 800beba:	f200 8094 	bhi.w	800bfe6 <ip4_reass+0x286>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800bebe:	69fa      	ldr	r2, [r7, #28]
 800bec0:	6879      	ldr	r1, [r7, #4]
 800bec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bec4:	f7ff fde4 	bl	800ba90 <ip_reass_chain_frag_into_datagram_and_validate>
 800bec8:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed0:	f000 8088 	beq.w	800bfe4 <ip4_reass+0x284>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800bed4:	4b48      	ldr	r3, [pc, #288]	; (800bff8 <ip4_reass+0x298>)
 800bed6:	881a      	ldrh	r2, [r3, #0]
 800bed8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800beda:	4413      	add	r3, r2
 800bedc:	b29a      	uxth	r2, r3
 800bede:	4b46      	ldr	r3, [pc, #280]	; (800bff8 <ip4_reass+0x298>)
 800bee0:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00d      	beq.n	800bf04 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800bee8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800beea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beec:	4413      	add	r3, r2
 800beee:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800bef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef2:	8a7a      	ldrh	r2, [r7, #18]
 800bef4:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef8:	7f9b      	ldrb	r3, [r3, #30]
 800befa:	f043 0301 	orr.w	r3, r3, #1
 800befe:	b2da      	uxtb	r2, r3
 800bf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf02:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d168      	bne.n	800bfdc <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0c:	8b9b      	ldrh	r3, [r3, #28]
 800bf0e:	3314      	adds	r3, #20
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800bf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800bf20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800bf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2a:	3308      	adds	r3, #8
 800bf2c:	2214      	movs	r2, #20
 800bf2e:	4619      	mov	r1, r3
 800bf30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf32:	f008 f88e 	bl	8014052 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800bf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf38:	8b9b      	ldrh	r3, [r3, #28]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fd ff24 	bl	8009d88 <lwip_htons>
 800bf40:	4603      	mov	r3, r0
 800bf42:	461a      	mov	r2, r3
 800bf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf46:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800bf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	719a      	strb	r2, [r3, #6]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800bf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf54:	2200      	movs	r2, #0
 800bf56:	729a      	strb	r2, [r3, #10]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800bf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800bf62:	e00e      	b.n	800bf82 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800bf64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800bf6a:	f06f 0113 	mvn.w	r1, #19
 800bf6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bf70:	f001 fb4c 	bl	800d60c <pbuf_header>
      pbuf_cat(p, r);
 800bf74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f001 fc44 	bl	800d804 <pbuf_cat>
      r = iprh->next_pbuf;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800bf82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1ed      	bne.n	800bf64 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800bf88:	4b1c      	ldr	r3, [pc, #112]	; (800bffc <ip4_reass+0x29c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d102      	bne.n	800bf98 <ip4_reass+0x238>
      ipr_prev = NULL;
 800bf92:	2300      	movs	r3, #0
 800bf94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf96:	e010      	b.n	800bfba <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bf98:	4b18      	ldr	r3, [pc, #96]	; (800bffc <ip4_reass+0x29c>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf9e:	e007      	b.n	800bfb0 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800bfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d006      	beq.n	800bfb8 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d1f4      	bne.n	800bfa0 <ip4_reass+0x240>
 800bfb6:	e000      	b.n	800bfba <ip4_reass+0x25a>
          break;
 800bfb8:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800bfba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfbe:	f7ff fd39 	bl	800ba34 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f001 fbe0 	bl	800d788 <pbuf_clen>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	461a      	mov	r2, r3
 800bfcc:	4b0a      	ldr	r3, [pc, #40]	; (800bff8 <ip4_reass+0x298>)
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	1a9b      	subs	r3, r3, r2
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	4b08      	ldr	r3, [pc, #32]	; (800bff8 <ip4_reass+0x298>)
 800bfd6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	e008      	b.n	800bfee <ip4_reass+0x28e>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	e006      	b.n	800bfee <ip4_reass+0x28e>
    goto nullreturn;
 800bfe0:	bf00      	nop
 800bfe2:	e000      	b.n	800bfe6 <ip4_reass+0x286>
    goto nullreturn;
 800bfe4:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f001 fb34 	bl	800d654 <pbuf_free>
  return NULL;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3738      	adds	r7, #56	; 0x38
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	200041a4 	.word	0x200041a4
 800bffc:	200041a0 	.word	0x200041a0

0800c000 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800c004:	2005      	movs	r0, #5
 800c006:	f000 fd1f 	bl	800ca48 <memp_malloc>
 800c00a:	4603      	mov	r3, r0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d106      	bne.n	800c02c <ip_frag_free_pbuf_custom_ref+0x1c>
 800c01e:	4b07      	ldr	r3, [pc, #28]	; (800c03c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800c020:	f240 22ae 	movw	r2, #686	; 0x2ae
 800c024:	4906      	ldr	r1, [pc, #24]	; (800c040 <ip_frag_free_pbuf_custom_ref+0x30>)
 800c026:	4807      	ldr	r0, [pc, #28]	; (800c044 <ip_frag_free_pbuf_custom_ref+0x34>)
 800c028:	f008 f854 	bl	80140d4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800c02c:	6879      	ldr	r1, [r7, #4]
 800c02e:	2005      	movs	r0, #5
 800c030:	f000 fd5c 	bl	800caec <memp_free>
}
 800c034:	bf00      	nop
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	08016618 	.word	0x08016618
 800c040:	08016780 	.word	0x08016780
 800c044:	08016660 	.word	0x08016660

0800c048 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d106      	bne.n	800c068 <ipfrag_free_pbuf_custom+0x20>
 800c05a:	4b11      	ldr	r3, [pc, #68]	; (800c0a0 <ipfrag_free_pbuf_custom+0x58>)
 800c05c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800c060:	4910      	ldr	r1, [pc, #64]	; (800c0a4 <ipfrag_free_pbuf_custom+0x5c>)
 800c062:	4811      	ldr	r0, [pc, #68]	; (800c0a8 <ipfrag_free_pbuf_custom+0x60>)
 800c064:	f008 f836 	bl	80140d4 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d006      	beq.n	800c07e <ipfrag_free_pbuf_custom+0x36>
 800c070:	4b0b      	ldr	r3, [pc, #44]	; (800c0a0 <ipfrag_free_pbuf_custom+0x58>)
 800c072:	f240 22b9 	movw	r2, #697	; 0x2b9
 800c076:	490d      	ldr	r1, [pc, #52]	; (800c0ac <ipfrag_free_pbuf_custom+0x64>)
 800c078:	480b      	ldr	r0, [pc, #44]	; (800c0a8 <ipfrag_free_pbuf_custom+0x60>)
 800c07a:	f008 f82b 	bl	80140d4 <iprintf>
  if (pcr->original != NULL) {
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	695b      	ldr	r3, [r3, #20]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d004      	beq.n	800c090 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	695b      	ldr	r3, [r3, #20]
 800c08a:	4618      	mov	r0, r3
 800c08c:	f001 fae2 	bl	800d654 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f7ff ffbd 	bl	800c010 <ip_frag_free_pbuf_custom_ref>
}
 800c096:	bf00      	nop
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	08016618 	.word	0x08016618
 800c0a4:	0801678c 	.word	0x0801678c
 800c0a8:	08016660 	.word	0x08016660
 800c0ac:	08016798 	.word	0x08016798

0800c0b0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b092      	sub	sp, #72	; 0x48
 800c0b4:	af02      	add	r7, sp, #8
 800c0b6:	60f8      	str	r0, [r7, #12]
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c0c4:	3b14      	subs	r3, #20
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	da00      	bge.n	800c0cc <ip4_frag+0x1c>
 800c0ca:	3307      	adds	r3, #7
 800c0cc:	10db      	asrs	r3, r3, #3
 800c0ce:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800c0d0:	2314      	movs	r3, #20
 800c0d2:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800c0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0dc:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800c0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	f003 030f 	and.w	r3, r3, #15
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	2b14      	cmp	r3, #20
 800c0ea:	d009      	beq.n	800c100 <ip4_frag+0x50>
 800c0ec:	4b79      	ldr	r3, [pc, #484]	; (800c2d4 <ip4_frag+0x224>)
 800c0ee:	f240 22e1 	movw	r2, #737	; 0x2e1
 800c0f2:	4979      	ldr	r1, [pc, #484]	; (800c2d8 <ip4_frag+0x228>)
 800c0f4:	4879      	ldr	r0, [pc, #484]	; (800c2dc <ip4_frag+0x22c>)
 800c0f6:	f007 ffed 	bl	80140d4 <iprintf>
 800c0fa:	f06f 0305 	mvn.w	r3, #5
 800c0fe:	e0e5      	b.n	800c2cc <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800c100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c102:	88db      	ldrh	r3, [r3, #6]
 800c104:	b29b      	uxth	r3, r3
 800c106:	4618      	mov	r0, r3
 800c108:	f7fd fe3e 	bl	8009d88 <lwip_htons>
 800c10c:	4603      	mov	r3, r0
 800c10e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800c110:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c112:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c116:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800c118:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c11a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d009      	beq.n	800c136 <ip4_frag+0x86>
 800c122:	4b6c      	ldr	r3, [pc, #432]	; (800c2d4 <ip4_frag+0x224>)
 800c124:	f240 22e6 	movw	r2, #742	; 0x2e6
 800c128:	496d      	ldr	r1, [pc, #436]	; (800c2e0 <ip4_frag+0x230>)
 800c12a:	486c      	ldr	r0, [pc, #432]	; (800c2dc <ip4_frag+0x22c>)
 800c12c:	f007 ffd2 	bl	80140d4 <iprintf>
 800c130:	f06f 0305 	mvn.w	r3, #5
 800c134:	e0ca      	b.n	800c2cc <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	891b      	ldrh	r3, [r3, #8]
 800c13a:	3b14      	subs	r3, #20
 800c13c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800c13e:	e0bc      	b.n	800c2ba <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800c140:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c142:	00da      	lsls	r2, r3, #3
 800c144:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c146:	4293      	cmp	r3, r2
 800c148:	bfa8      	it	ge
 800c14a:	4613      	movge	r3, r2
 800c14c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c14e:	2200      	movs	r2, #0
 800c150:	2114      	movs	r1, #20
 800c152:	2002      	movs	r0, #2
 800c154:	f000 ff0c 	bl	800cf70 <pbuf_alloc>
 800c158:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800c15a:	6a3b      	ldr	r3, [r7, #32]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f000 80b2 	beq.w	800c2c6 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	895b      	ldrh	r3, [r3, #10]
 800c166:	2b13      	cmp	r3, #19
 800c168:	d806      	bhi.n	800c178 <ip4_frag+0xc8>
 800c16a:	4b5a      	ldr	r3, [pc, #360]	; (800c2d4 <ip4_frag+0x224>)
 800c16c:	f240 3209 	movw	r2, #777	; 0x309
 800c170:	495c      	ldr	r1, [pc, #368]	; (800c2e4 <ip4_frag+0x234>)
 800c172:	485a      	ldr	r0, [pc, #360]	; (800c2dc <ip4_frag+0x22c>)
 800c174:	f007 ffae 	bl	80140d4 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c178:	6a3b      	ldr	r3, [r7, #32]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	2214      	movs	r2, #20
 800c17e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c180:	4618      	mov	r0, r3
 800c182:	f007 ff66 	bl	8014052 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c186:	6a3b      	ldr	r3, [r7, #32]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800c18c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c18e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800c190:	e04f      	b.n	800c232 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	895a      	ldrh	r2, [r3, #10]
 800c196:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c198:	1ad3      	subs	r3, r2, r3
 800c19a:	83fb      	strh	r3, [r7, #30]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c19c:	8bfa      	ldrh	r2, [r7, #30]
 800c19e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	bf28      	it	cs
 800c1a4:	4613      	movcs	r3, r2
 800c1a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800c1a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d105      	bne.n	800c1ba <ip4_frag+0x10a>
        poff = 0;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	60fb      	str	r3, [r7, #12]
        continue;
 800c1b8:	e03b      	b.n	800c232 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c1ba:	f7ff ff21 	bl	800c000 <ip_frag_alloc_pbuf_custom_ref>
 800c1be:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d103      	bne.n	800c1ce <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800c1c6:	6a38      	ldr	r0, [r7, #32]
 800c1c8:	f001 fa44 	bl	800d654 <pbuf_free>
        goto memerr;
 800c1cc:	e07c      	b.n	800c2c8 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c1ce:	69b8      	ldr	r0, [r7, #24]
        (u8_t*)p->payload + poff, newpbuflen);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c1d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c1d6:	4413      	add	r3, r2
 800c1d8:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800c1da:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c1dc:	9201      	str	r2, [sp, #4]
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2202      	movs	r2, #2
 800c1e4:	2004      	movs	r0, #4
 800c1e6:	f001 f857 	bl	800d298 <pbuf_alloced_custom>
 800c1ea:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d106      	bne.n	800c200 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800c1f2:	69b8      	ldr	r0, [r7, #24]
 800c1f4:	f7ff ff0c 	bl	800c010 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800c1f8:	6a38      	ldr	r0, [r7, #32]
 800c1fa:	f001 fa2b 	bl	800d654 <pbuf_free>
        goto memerr;
 800c1fe:	e063      	b.n	800c2c8 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f001 fad7 	bl	800d7b4 <pbuf_ref>
      pcr->original = p;
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	4a36      	ldr	r2, [pc, #216]	; (800c2e8 <ip4_frag+0x238>)
 800c210:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800c212:	6979      	ldr	r1, [r7, #20]
 800c214:	6a38      	ldr	r0, [r7, #32]
 800c216:	f001 faf5 	bl	800d804 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800c21a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800c21c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800c222:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c224:	2b00      	cmp	r3, #0
 800c226:	d004      	beq.n	800c232 <ip4_frag+0x182>
        poff = 0;
 800c228:	2300      	movs	r3, #0
 800c22a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800c232:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1ac      	bne.n	800c192 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800c238:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c23a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c23c:	4413      	add	r3, r2
 800c23e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800c240:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c246:	3b14      	subs	r3, #20
 800c248:	429a      	cmp	r2, r3
 800c24a:	bfd4      	ite	le
 800c24c:	2301      	movle	r3, #1
 800c24e:	2300      	movgt	r3, #0
 800c250:	b2db      	uxtb	r3, r3
 800c252:	613b      	str	r3, [r7, #16]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800c254:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c256:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c25a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d103      	bne.n	800c26a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800c262:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c264:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c268:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800c26a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fd fd8b 	bl	8009d88 <lwip_htons>
 800c272:	4603      	mov	r3, r0
 800c274:	461a      	mov	r2, r3
 800c276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c278:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800c27a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c27c:	3314      	adds	r3, #20
 800c27e:	b29b      	uxth	r3, r3
 800c280:	4618      	mov	r0, r3
 800c282:	f7fd fd81 	bl	8009d88 <lwip_htons>
 800c286:	4603      	mov	r3, r0
 800c288:	461a      	mov	r2, r3
 800c28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	2200      	movs	r2, #0
 800c292:	729a      	strb	r2, [r3, #10]
 800c294:	2200      	movs	r2, #0
 800c296:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	695b      	ldr	r3, [r3, #20]
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	6a39      	ldr	r1, [r7, #32]
 800c2a0:	68b8      	ldr	r0, [r7, #8]
 800c2a2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800c2a4:	6a38      	ldr	r0, [r7, #32]
 800c2a6:	f001 f9d5 	bl	800d654 <pbuf_free>
    left -= fragsize;
 800c2aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c2ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2ae:	1ad3      	subs	r3, r2, r3
 800c2b0:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800c2b2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800c2b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c2b6:	4413      	add	r3, r2
 800c2b8:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800c2ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f47f af3f 	bne.w	800c140 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	e002      	b.n	800c2cc <ip4_frag+0x21c>
      goto memerr;
 800c2c6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800c2c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3740      	adds	r7, #64	; 0x40
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	08016618 	.word	0x08016618
 800c2d8:	080167a4 	.word	0x080167a4
 800c2dc:	08016660 	.word	0x08016660
 800c2e0:	080167cc 	.word	0x080167cc
 800c2e4:	080167e8 	.word	0x080167e8
 800c2e8:	0800c049 	.word	0x0800c049

0800c2ec <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c2f4:	4b40      	ldr	r3, [pc, #256]	; (800c3f8 <plug_holes+0x10c>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d206      	bcs.n	800c30c <plug_holes+0x20>
 800c2fe:	4b3f      	ldr	r3, [pc, #252]	; (800c3fc <plug_holes+0x110>)
 800c300:	f240 125d 	movw	r2, #349	; 0x15d
 800c304:	493e      	ldr	r1, [pc, #248]	; (800c400 <plug_holes+0x114>)
 800c306:	483f      	ldr	r0, [pc, #252]	; (800c404 <plug_holes+0x118>)
 800c308:	f007 fee4 	bl	80140d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c30c:	4b3e      	ldr	r3, [pc, #248]	; (800c408 <plug_holes+0x11c>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	429a      	cmp	r2, r3
 800c314:	d306      	bcc.n	800c324 <plug_holes+0x38>
 800c316:	4b39      	ldr	r3, [pc, #228]	; (800c3fc <plug_holes+0x110>)
 800c318:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c31c:	493b      	ldr	r1, [pc, #236]	; (800c40c <plug_holes+0x120>)
 800c31e:	4839      	ldr	r0, [pc, #228]	; (800c404 <plug_holes+0x118>)
 800c320:	f007 fed8 	bl	80140d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	791b      	ldrb	r3, [r3, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d006      	beq.n	800c33a <plug_holes+0x4e>
 800c32c:	4b33      	ldr	r3, [pc, #204]	; (800c3fc <plug_holes+0x110>)
 800c32e:	f240 125f 	movw	r2, #351	; 0x15f
 800c332:	4937      	ldr	r1, [pc, #220]	; (800c410 <plug_holes+0x124>)
 800c334:	4833      	ldr	r0, [pc, #204]	; (800c404 <plug_holes+0x118>)
 800c336:	f007 fecd 	bl	80140d4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	881b      	ldrh	r3, [r3, #0]
 800c33e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c342:	d906      	bls.n	800c352 <plug_holes+0x66>
 800c344:	4b2d      	ldr	r3, [pc, #180]	; (800c3fc <plug_holes+0x110>)
 800c346:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800c34a:	4932      	ldr	r1, [pc, #200]	; (800c414 <plug_holes+0x128>)
 800c34c:	482d      	ldr	r0, [pc, #180]	; (800c404 <plug_holes+0x118>)
 800c34e:	f007 fec1 	bl	80140d4 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800c352:	4b29      	ldr	r3, [pc, #164]	; (800c3f8 <plug_holes+0x10c>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	8812      	ldrh	r2, [r2, #0]
 800c35a:	4413      	add	r3, r2
 800c35c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	429a      	cmp	r2, r3
 800c364:	d01f      	beq.n	800c3a6 <plug_holes+0xba>
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	791b      	ldrb	r3, [r3, #4]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d11b      	bne.n	800c3a6 <plug_holes+0xba>
 800c36e:	4b26      	ldr	r3, [pc, #152]	; (800c408 <plug_holes+0x11c>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	429a      	cmp	r2, r3
 800c376:	d016      	beq.n	800c3a6 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c378:	4b27      	ldr	r3, [pc, #156]	; (800c418 <plug_holes+0x12c>)
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d102      	bne.n	800c388 <plug_holes+0x9c>
      lfree = mem;
 800c382:	4a25      	ldr	r2, [pc, #148]	; (800c418 <plug_holes+0x12c>)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	881a      	ldrh	r2, [r3, #0]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800c390:	4b19      	ldr	r3, [pc, #100]	; (800c3f8 <plug_holes+0x10c>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	8812      	ldrh	r2, [r2, #0]
 800c398:	4413      	add	r3, r2
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	4916      	ldr	r1, [pc, #88]	; (800c3f8 <plug_holes+0x10c>)
 800c39e:	6809      	ldr	r1, [r1, #0]
 800c3a0:	1a52      	subs	r2, r2, r1
 800c3a2:	b292      	uxth	r2, r2
 800c3a4:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800c3a6:	4b14      	ldr	r3, [pc, #80]	; (800c3f8 <plug_holes+0x10c>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	8852      	ldrh	r2, [r2, #2]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c3b2:	68ba      	ldr	r2, [r7, #8]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d01a      	beq.n	800c3f0 <plug_holes+0x104>
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	791b      	ldrb	r3, [r3, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d116      	bne.n	800c3f0 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c3c2:	4b15      	ldr	r3, [pc, #84]	; (800c418 <plug_holes+0x12c>)
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d102      	bne.n	800c3d2 <plug_holes+0xe6>
      lfree = pmem;
 800c3cc:	4a12      	ldr	r2, [pc, #72]	; (800c418 <plug_holes+0x12c>)
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	881a      	ldrh	r2, [r3, #0]
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800c3da:	4b07      	ldr	r3, [pc, #28]	; (800c3f8 <plug_holes+0x10c>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	8812      	ldrh	r2, [r2, #0]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	68ba      	ldr	r2, [r7, #8]
 800c3e6:	4904      	ldr	r1, [pc, #16]	; (800c3f8 <plug_holes+0x10c>)
 800c3e8:	6809      	ldr	r1, [r1, #0]
 800c3ea:	1a52      	subs	r2, r2, r1
 800c3ec:	b292      	uxth	r2, r2
 800c3ee:	805a      	strh	r2, [r3, #2]
  }
}
 800c3f0:	bf00      	nop
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	200041a8 	.word	0x200041a8
 800c3fc:	08016808 	.word	0x08016808
 800c400:	08016838 	.word	0x08016838
 800c404:	08016850 	.word	0x08016850
 800c408:	200041ac 	.word	0x200041ac
 800c40c:	08016878 	.word	0x08016878
 800c410:	08016894 	.word	0x08016894
 800c414:	080168b0 	.word	0x080168b0
 800c418:	200041b0 	.word	0x200041b0

0800c41c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c422:	4b1e      	ldr	r3, [pc, #120]	; (800c49c <mem_init+0x80>)
 800c424:	3303      	adds	r3, #3
 800c426:	f023 0303 	bic.w	r3, r3, #3
 800c42a:	461a      	mov	r2, r3
 800c42c:	4b1c      	ldr	r3, [pc, #112]	; (800c4a0 <mem_init+0x84>)
 800c42e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c430:	4b1b      	ldr	r3, [pc, #108]	; (800c4a0 <mem_init+0x84>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c43c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800c44a:	4b15      	ldr	r3, [pc, #84]	; (800c4a0 <mem_init+0x84>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800c452:	4a14      	ldr	r2, [pc, #80]	; (800c4a4 <mem_init+0x88>)
 800c454:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c456:	4b13      	ldr	r3, [pc, #76]	; (800c4a4 <mem_init+0x88>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2201      	movs	r2, #1
 800c45c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c45e:	4b11      	ldr	r3, [pc, #68]	; (800c4a4 <mem_init+0x88>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c466:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c468:	4b0e      	ldr	r3, [pc, #56]	; (800c4a4 <mem_init+0x88>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c470:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c472:	4b0b      	ldr	r3, [pc, #44]	; (800c4a0 <mem_init+0x84>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a0c      	ldr	r2, [pc, #48]	; (800c4a8 <mem_init+0x8c>)
 800c478:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c47a:	480c      	ldr	r0, [pc, #48]	; (800c4ac <mem_init+0x90>)
 800c47c:	f007 fd10 	bl	8013ea0 <sys_mutex_new>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	d006      	beq.n	800c494 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c486:	4b0a      	ldr	r3, [pc, #40]	; (800c4b0 <mem_init+0x94>)
 800c488:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c48c:	4909      	ldr	r1, [pc, #36]	; (800c4b4 <mem_init+0x98>)
 800c48e:	480a      	ldr	r0, [pc, #40]	; (800c4b8 <mem_init+0x9c>)
 800c490:	f007 fe20 	bl	80140d4 <iprintf>
  }
}
 800c494:	bf00      	nop
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	2000743c 	.word	0x2000743c
 800c4a0:	200041a8 	.word	0x200041a8
 800c4a4:	200041ac 	.word	0x200041ac
 800c4a8:	200041b0 	.word	0x200041b0
 800c4ac:	200041b4 	.word	0x200041b4
 800c4b0:	08016808 	.word	0x08016808
 800c4b4:	080168dc 	.word	0x080168dc
 800c4b8:	08016850 	.word	0x08016850

0800c4bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d050      	beq.n	800c56c <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f003 0303 	and.w	r3, r3, #3
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d006      	beq.n	800c4e2 <mem_free+0x26>
 800c4d4:	4b27      	ldr	r3, [pc, #156]	; (800c574 <mem_free+0xb8>)
 800c4d6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800c4da:	4927      	ldr	r1, [pc, #156]	; (800c578 <mem_free+0xbc>)
 800c4dc:	4827      	ldr	r0, [pc, #156]	; (800c57c <mem_free+0xc0>)
 800c4de:	f007 fdf9 	bl	80140d4 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c4e2:	4b27      	ldr	r3, [pc, #156]	; (800c580 <mem_free+0xc4>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d304      	bcc.n	800c4f6 <mem_free+0x3a>
 800c4ec:	4b25      	ldr	r3, [pc, #148]	; (800c584 <mem_free+0xc8>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d306      	bcc.n	800c504 <mem_free+0x48>
 800c4f6:	4b1f      	ldr	r3, [pc, #124]	; (800c574 <mem_free+0xb8>)
 800c4f8:	f240 12af 	movw	r2, #431	; 0x1af
 800c4fc:	4922      	ldr	r1, [pc, #136]	; (800c588 <mem_free+0xcc>)
 800c4fe:	481f      	ldr	r0, [pc, #124]	; (800c57c <mem_free+0xc0>)
 800c500:	f007 fde8 	bl	80140d4 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c504:	4b1e      	ldr	r3, [pc, #120]	; (800c580 <mem_free+0xc4>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d304      	bcc.n	800c518 <mem_free+0x5c>
 800c50e:	4b1d      	ldr	r3, [pc, #116]	; (800c584 <mem_free+0xc8>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	429a      	cmp	r2, r3
 800c516:	d306      	bcc.n	800c526 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800c518:	f007 fd20 	bl	8013f5c <sys_arch_protect>
 800c51c:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800c51e:	68b8      	ldr	r0, [r7, #8]
 800c520:	f007 fd2a 	bl	8013f78 <sys_arch_unprotect>
    return;
 800c524:	e023      	b.n	800c56e <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c526:	4819      	ldr	r0, [pc, #100]	; (800c58c <mem_free+0xd0>)
 800c528:	f007 fcd6 	bl	8013ed8 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	3b08      	subs	r3, #8
 800c530:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	791b      	ldrb	r3, [r3, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d106      	bne.n	800c548 <mem_free+0x8c>
 800c53a:	4b0e      	ldr	r3, [pc, #56]	; (800c574 <mem_free+0xb8>)
 800c53c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800c540:	4913      	ldr	r1, [pc, #76]	; (800c590 <mem_free+0xd4>)
 800c542:	480e      	ldr	r0, [pc, #56]	; (800c57c <mem_free+0xc0>)
 800c544:	f007 fdc6 	bl	80140d4 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2200      	movs	r2, #0
 800c54c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c54e:	4b11      	ldr	r3, [pc, #68]	; (800c594 <mem_free+0xd8>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	429a      	cmp	r2, r3
 800c556:	d202      	bcs.n	800c55e <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c558:	4a0e      	ldr	r2, [pc, #56]	; (800c594 <mem_free+0xd8>)
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c55e:	68f8      	ldr	r0, [r7, #12]
 800c560:	f7ff fec4 	bl	800c2ec <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c564:	4809      	ldr	r0, [pc, #36]	; (800c58c <mem_free+0xd0>)
 800c566:	f007 fcc6 	bl	8013ef6 <sys_mutex_unlock>
 800c56a:	e000      	b.n	800c56e <mem_free+0xb2>
    return;
 800c56c:	bf00      	nop
}
 800c56e:	3710      	adds	r7, #16
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	08016808 	.word	0x08016808
 800c578:	080168f8 	.word	0x080168f8
 800c57c:	08016850 	.word	0x08016850
 800c580:	200041a8 	.word	0x200041a8
 800c584:	200041ac 	.word	0x200041ac
 800c588:	0801691c 	.word	0x0801691c
 800c58c:	200041b4 	.word	0x200041b4
 800c590:	08016934 	.word	0x08016934
 800c594:	200041b0 	.word	0x200041b0

0800c598 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b088      	sub	sp, #32
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800c5a4:	887b      	ldrh	r3, [r7, #2]
 800c5a6:	3303      	adds	r3, #3
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	f023 0303 	bic.w	r3, r3, #3
 800c5ae:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800c5b0:	887b      	ldrh	r3, [r7, #2]
 800c5b2:	2b0b      	cmp	r3, #11
 800c5b4:	d801      	bhi.n	800c5ba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c5b6:	230c      	movs	r3, #12
 800c5b8:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800c5ba:	887b      	ldrh	r3, [r7, #2]
 800c5bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c5c0:	d901      	bls.n	800c5c6 <mem_trim+0x2e>
    return NULL;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	e0bd      	b.n	800c742 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c5c6:	4b61      	ldr	r3, [pc, #388]	; (800c74c <mem_trim+0x1b4>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d304      	bcc.n	800c5da <mem_trim+0x42>
 800c5d0:	4b5f      	ldr	r3, [pc, #380]	; (800c750 <mem_trim+0x1b8>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d306      	bcc.n	800c5e8 <mem_trim+0x50>
 800c5da:	4b5e      	ldr	r3, [pc, #376]	; (800c754 <mem_trim+0x1bc>)
 800c5dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c5e0:	495d      	ldr	r1, [pc, #372]	; (800c758 <mem_trim+0x1c0>)
 800c5e2:	485e      	ldr	r0, [pc, #376]	; (800c75c <mem_trim+0x1c4>)
 800c5e4:	f007 fd76 	bl	80140d4 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c5e8:	4b58      	ldr	r3, [pc, #352]	; (800c74c <mem_trim+0x1b4>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d304      	bcc.n	800c5fc <mem_trim+0x64>
 800c5f2:	4b57      	ldr	r3, [pc, #348]	; (800c750 <mem_trim+0x1b8>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d307      	bcc.n	800c60c <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800c5fc:	f007 fcae 	bl	8013f5c <sys_arch_protect>
 800c600:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f007 fcb8 	bl	8013f78 <sys_arch_unprotect>
    return rmem;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	e09a      	b.n	800c742 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	3b08      	subs	r3, #8
 800c610:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	4a4d      	ldr	r2, [pc, #308]	; (800c74c <mem_trim+0x1b4>)
 800c616:	6812      	ldr	r2, [r2, #0]
 800c618:	1a9b      	subs	r3, r3, r2
 800c61a:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	881a      	ldrh	r2, [r3, #0]
 800c620:	8b7b      	ldrh	r3, [r7, #26]
 800c622:	1ad3      	subs	r3, r2, r3
 800c624:	b29b      	uxth	r3, r3
 800c626:	3b08      	subs	r3, #8
 800c628:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c62a:	887a      	ldrh	r2, [r7, #2]
 800c62c:	8b3b      	ldrh	r3, [r7, #24]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d906      	bls.n	800c640 <mem_trim+0xa8>
 800c632:	4b48      	ldr	r3, [pc, #288]	; (800c754 <mem_trim+0x1bc>)
 800c634:	f240 2206 	movw	r2, #518	; 0x206
 800c638:	4949      	ldr	r1, [pc, #292]	; (800c760 <mem_trim+0x1c8>)
 800c63a:	4848      	ldr	r0, [pc, #288]	; (800c75c <mem_trim+0x1c4>)
 800c63c:	f007 fd4a 	bl	80140d4 <iprintf>
  if (newsize > size) {
 800c640:	887a      	ldrh	r2, [r7, #2]
 800c642:	8b3b      	ldrh	r3, [r7, #24]
 800c644:	429a      	cmp	r2, r3
 800c646:	d901      	bls.n	800c64c <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800c648:	2300      	movs	r3, #0
 800c64a:	e07a      	b.n	800c742 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800c64c:	887a      	ldrh	r2, [r7, #2]
 800c64e:	8b3b      	ldrh	r3, [r7, #24]
 800c650:	429a      	cmp	r2, r3
 800c652:	d101      	bne.n	800c658 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	e074      	b.n	800c742 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c658:	4842      	ldr	r0, [pc, #264]	; (800c764 <mem_trim+0x1cc>)
 800c65a:	f007 fc3d 	bl	8013ed8 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800c65e:	4b3b      	ldr	r3, [pc, #236]	; (800c74c <mem_trim+0x1b4>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	69fa      	ldr	r2, [r7, #28]
 800c664:	8812      	ldrh	r2, [r2, #0]
 800c666:	4413      	add	r3, r2
 800c668:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	791b      	ldrb	r3, [r3, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d131      	bne.n	800c6d6 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	881b      	ldrh	r3, [r3, #0]
 800c676:	827b      	strh	r3, [r7, #18]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800c678:	8b7a      	ldrh	r2, [r7, #26]
 800c67a:	887b      	ldrh	r3, [r7, #2]
 800c67c:	4413      	add	r3, r2
 800c67e:	b29b      	uxth	r3, r3
 800c680:	3308      	adds	r3, #8
 800c682:	823b      	strh	r3, [r7, #16]
    if (lfree == mem2) {
 800c684:	4b38      	ldr	r3, [pc, #224]	; (800c768 <mem_trim+0x1d0>)
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d105      	bne.n	800c69a <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800c68e:	4b2f      	ldr	r3, [pc, #188]	; (800c74c <mem_trim+0x1b4>)
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	8a3b      	ldrh	r3, [r7, #16]
 800c694:	4413      	add	r3, r2
 800c696:	4a34      	ldr	r2, [pc, #208]	; (800c768 <mem_trim+0x1d0>)
 800c698:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800c69a:	4b2c      	ldr	r3, [pc, #176]	; (800c74c <mem_trim+0x1b4>)
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	8a3b      	ldrh	r3, [r7, #16]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	8a7a      	ldrh	r2, [r7, #18]
 800c6ae:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	8b7a      	ldrh	r2, [r7, #26]
 800c6b4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	8a3a      	ldrh	r2, [r7, #16]
 800c6ba:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	881b      	ldrh	r3, [r3, #0]
 800c6c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c6c4:	d039      	beq.n	800c73a <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c6c6:	4b21      	ldr	r3, [pc, #132]	; (800c74c <mem_trim+0x1b4>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	697a      	ldr	r2, [r7, #20]
 800c6cc:	8812      	ldrh	r2, [r2, #0]
 800c6ce:	4413      	add	r3, r2
 800c6d0:	8a3a      	ldrh	r2, [r7, #16]
 800c6d2:	805a      	strh	r2, [r3, #2]
 800c6d4:	e031      	b.n	800c73a <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c6d6:	887b      	ldrh	r3, [r7, #2]
 800c6d8:	f103 0214 	add.w	r2, r3, #20
 800c6dc:	8b3b      	ldrh	r3, [r7, #24]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d82b      	bhi.n	800c73a <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800c6e2:	8b7a      	ldrh	r2, [r7, #26]
 800c6e4:	887b      	ldrh	r3, [r7, #2]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	3308      	adds	r3, #8
 800c6ec:	823b      	strh	r3, [r7, #16]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800c6ee:	4b17      	ldr	r3, [pc, #92]	; (800c74c <mem_trim+0x1b4>)
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	8a3b      	ldrh	r3, [r7, #16]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800c6f8:	4b1b      	ldr	r3, [pc, #108]	; (800c768 <mem_trim+0x1d0>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	697a      	ldr	r2, [r7, #20]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d202      	bcs.n	800c708 <mem_trim+0x170>
      lfree = mem2;
 800c702:	4a19      	ldr	r2, [pc, #100]	; (800c768 <mem_trim+0x1d0>)
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	2200      	movs	r2, #0
 800c70c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	881a      	ldrh	r2, [r3, #0]
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	8b7a      	ldrh	r2, [r7, #26]
 800c71a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	8a3a      	ldrh	r2, [r7, #16]
 800c720:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	881b      	ldrh	r3, [r3, #0]
 800c726:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c72a:	d006      	beq.n	800c73a <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c72c:	4b07      	ldr	r3, [pc, #28]	; (800c74c <mem_trim+0x1b4>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	697a      	ldr	r2, [r7, #20]
 800c732:	8812      	ldrh	r2, [r2, #0]
 800c734:	4413      	add	r3, r2
 800c736:	8a3a      	ldrh	r2, [r7, #16]
 800c738:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c73a:	480a      	ldr	r0, [pc, #40]	; (800c764 <mem_trim+0x1cc>)
 800c73c:	f007 fbdb 	bl	8013ef6 <sys_mutex_unlock>
  return rmem;
 800c740:	687b      	ldr	r3, [r7, #4]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3720      	adds	r7, #32
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	200041a8 	.word	0x200041a8
 800c750:	200041ac 	.word	0x200041ac
 800c754:	08016808 	.word	0x08016808
 800c758:	08016948 	.word	0x08016948
 800c75c:	08016850 	.word	0x08016850
 800c760:	08016960 	.word	0x08016960
 800c764:	200041b4 	.word	0x200041b4
 800c768:	200041b0 	.word	0x200041b0

0800c76c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b088      	sub	sp, #32
 800c770:	af00      	add	r7, sp, #0
 800c772:	4603      	mov	r3, r0
 800c774:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800c776:	88fb      	ldrh	r3, [r7, #6]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d101      	bne.n	800c780 <mem_malloc+0x14>
    return NULL;
 800c77c:	2300      	movs	r3, #0
 800c77e:	e0d1      	b.n	800c924 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800c780:	88fb      	ldrh	r3, [r7, #6]
 800c782:	3303      	adds	r3, #3
 800c784:	b29b      	uxth	r3, r3
 800c786:	f023 0303 	bic.w	r3, r3, #3
 800c78a:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800c78c:	88fb      	ldrh	r3, [r7, #6]
 800c78e:	2b0b      	cmp	r3, #11
 800c790:	d801      	bhi.n	800c796 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c792:	230c      	movs	r3, #12
 800c794:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800c796:	88fb      	ldrh	r3, [r7, #6]
 800c798:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c79c:	d901      	bls.n	800c7a2 <mem_malloc+0x36>
    return NULL;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	e0c0      	b.n	800c924 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c7a2:	4862      	ldr	r0, [pc, #392]	; (800c92c <mem_malloc+0x1c0>)
 800c7a4:	f007 fb98 	bl	8013ed8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800c7a8:	4b61      	ldr	r3, [pc, #388]	; (800c930 <mem_malloc+0x1c4>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	4b61      	ldr	r3, [pc, #388]	; (800c934 <mem_malloc+0x1c8>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	1ad3      	subs	r3, r2, r3
 800c7b4:	83fb      	strh	r3, [r7, #30]
 800c7b6:	e0aa      	b.n	800c90e <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800c7b8:	4b5e      	ldr	r3, [pc, #376]	; (800c934 <mem_malloc+0x1c8>)
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	8bfb      	ldrh	r3, [r7, #30]
 800c7be:	4413      	add	r3, r2
 800c7c0:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	791b      	ldrb	r3, [r3, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f040 809b 	bne.w	800c902 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	881b      	ldrh	r3, [r3, #0]
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	8bfb      	ldrh	r3, [r7, #30]
 800c7d4:	1ad3      	subs	r3, r2, r3
 800c7d6:	f1a3 0208 	sub.w	r2, r3, #8
 800c7da:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	f0c0 8090 	bcc.w	800c902 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	881b      	ldrh	r3, [r3, #0]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	8bfb      	ldrh	r3, [r7, #30]
 800c7ea:	1ad3      	subs	r3, r2, r3
 800c7ec:	f1a3 0208 	sub.w	r2, r3, #8
 800c7f0:	88fb      	ldrh	r3, [r7, #6]
 800c7f2:	3314      	adds	r3, #20
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d327      	bcc.n	800c848 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800c7f8:	8bfa      	ldrh	r2, [r7, #30]
 800c7fa:	88fb      	ldrh	r3, [r7, #6]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	3308      	adds	r3, #8
 800c802:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800c804:	4b4b      	ldr	r3, [pc, #300]	; (800c934 <mem_malloc+0x1c8>)
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	8a7b      	ldrh	r3, [r7, #18]
 800c80a:	4413      	add	r3, r2
 800c80c:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2200      	movs	r2, #0
 800c812:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	881a      	ldrh	r2, [r3, #0]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	8bfa      	ldrh	r2, [r7, #30]
 800c820:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	8a7a      	ldrh	r2, [r7, #18]
 800c826:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	2201      	movs	r2, #1
 800c82c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	881b      	ldrh	r3, [r3, #0]
 800c832:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c836:	d00a      	beq.n	800c84e <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c838:	4b3e      	ldr	r3, [pc, #248]	; (800c934 <mem_malloc+0x1c8>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	8812      	ldrh	r2, [r2, #0]
 800c840:	4413      	add	r3, r2
 800c842:	8a7a      	ldrh	r2, [r7, #18]
 800c844:	805a      	strh	r2, [r3, #2]
 800c846:	e002      	b.n	800c84e <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	2201      	movs	r2, #1
 800c84c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c84e:	4b38      	ldr	r3, [pc, #224]	; (800c930 <mem_malloc+0x1c4>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	697a      	ldr	r2, [r7, #20]
 800c854:	429a      	cmp	r2, r3
 800c856:	d127      	bne.n	800c8a8 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800c858:	4b35      	ldr	r3, [pc, #212]	; (800c930 <mem_malloc+0x1c4>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c85e:	e005      	b.n	800c86c <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800c860:	4b34      	ldr	r3, [pc, #208]	; (800c934 <mem_malloc+0x1c8>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	69ba      	ldr	r2, [r7, #24]
 800c866:	8812      	ldrh	r2, [r2, #0]
 800c868:	4413      	add	r3, r2
 800c86a:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	791b      	ldrb	r3, [r3, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d004      	beq.n	800c87e <mem_malloc+0x112>
 800c874:	4b30      	ldr	r3, [pc, #192]	; (800c938 <mem_malloc+0x1cc>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	69ba      	ldr	r2, [r7, #24]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d1f0      	bne.n	800c860 <mem_malloc+0xf4>
          }
          lfree = cur;
 800c87e:	4a2c      	ldr	r2, [pc, #176]	; (800c930 <mem_malloc+0x1c4>)
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c884:	4b2a      	ldr	r3, [pc, #168]	; (800c930 <mem_malloc+0x1c4>)
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	4b2b      	ldr	r3, [pc, #172]	; (800c938 <mem_malloc+0x1cc>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d00b      	beq.n	800c8a8 <mem_malloc+0x13c>
 800c890:	4b27      	ldr	r3, [pc, #156]	; (800c930 <mem_malloc+0x1c4>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	791b      	ldrb	r3, [r3, #4]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d006      	beq.n	800c8a8 <mem_malloc+0x13c>
 800c89a:	4b28      	ldr	r3, [pc, #160]	; (800c93c <mem_malloc+0x1d0>)
 800c89c:	f240 22cf 	movw	r2, #719	; 0x2cf
 800c8a0:	4927      	ldr	r1, [pc, #156]	; (800c940 <mem_malloc+0x1d4>)
 800c8a2:	4828      	ldr	r0, [pc, #160]	; (800c944 <mem_malloc+0x1d8>)
 800c8a4:	f007 fc16 	bl	80140d4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c8a8:	4820      	ldr	r0, [pc, #128]	; (800c92c <mem_malloc+0x1c0>)
 800c8aa:	f007 fb24 	bl	8013ef6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c8ae:	88fa      	ldrh	r2, [r7, #6]
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	3308      	adds	r3, #8
 800c8b6:	4a20      	ldr	r2, [pc, #128]	; (800c938 <mem_malloc+0x1cc>)
 800c8b8:	6812      	ldr	r2, [r2, #0]
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d906      	bls.n	800c8cc <mem_malloc+0x160>
 800c8be:	4b1f      	ldr	r3, [pc, #124]	; (800c93c <mem_malloc+0x1d0>)
 800c8c0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c8c4:	4920      	ldr	r1, [pc, #128]	; (800c948 <mem_malloc+0x1dc>)
 800c8c6:	481f      	ldr	r0, [pc, #124]	; (800c944 <mem_malloc+0x1d8>)
 800c8c8:	f007 fc04 	bl	80140d4 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	f003 0303 	and.w	r3, r3, #3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d006      	beq.n	800c8e4 <mem_malloc+0x178>
 800c8d6:	4b19      	ldr	r3, [pc, #100]	; (800c93c <mem_malloc+0x1d0>)
 800c8d8:	f240 22d6 	movw	r2, #726	; 0x2d6
 800c8dc:	491b      	ldr	r1, [pc, #108]	; (800c94c <mem_malloc+0x1e0>)
 800c8de:	4819      	ldr	r0, [pc, #100]	; (800c944 <mem_malloc+0x1d8>)
 800c8e0:	f007 fbf8 	bl	80140d4 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	f003 0303 	and.w	r3, r3, #3
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d006      	beq.n	800c8fc <mem_malloc+0x190>
 800c8ee:	4b13      	ldr	r3, [pc, #76]	; (800c93c <mem_malloc+0x1d0>)
 800c8f0:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800c8f4:	4916      	ldr	r1, [pc, #88]	; (800c950 <mem_malloc+0x1e4>)
 800c8f6:	4813      	ldr	r0, [pc, #76]	; (800c944 <mem_malloc+0x1d8>)
 800c8f8:	f007 fbec 	bl	80140d4 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	3308      	adds	r3, #8
 800c900:	e010      	b.n	800c924 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800c902:	4b0c      	ldr	r3, [pc, #48]	; (800c934 <mem_malloc+0x1c8>)
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	8bfb      	ldrh	r3, [r7, #30]
 800c908:	4413      	add	r3, r2
 800c90a:	881b      	ldrh	r3, [r3, #0]
 800c90c:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800c90e:	8bfa      	ldrh	r2, [r7, #30]
 800c910:	88fb      	ldrh	r3, [r7, #6]
 800c912:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c916:	429a      	cmp	r2, r3
 800c918:	f4ff af4e 	bcc.w	800c7b8 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c91c:	4803      	ldr	r0, [pc, #12]	; (800c92c <mem_malloc+0x1c0>)
 800c91e:	f007 faea 	bl	8013ef6 <sys_mutex_unlock>
  return NULL;
 800c922:	2300      	movs	r3, #0
}
 800c924:	4618      	mov	r0, r3
 800c926:	3720      	adds	r7, #32
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	200041b4 	.word	0x200041b4
 800c930:	200041b0 	.word	0x200041b0
 800c934:	200041a8 	.word	0x200041a8
 800c938:	200041ac 	.word	0x200041ac
 800c93c:	08016808 	.word	0x08016808
 800c940:	08016980 	.word	0x08016980
 800c944:	08016850 	.word	0x08016850
 800c948:	0801699c 	.word	0x0801699c
 800c94c:	080169cc 	.word	0x080169cc
 800c950:	080169fc 	.word	0x080169fc

0800c954 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c954:	b480      	push	{r7}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	2200      	movs	r2, #0
 800c962:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	3303      	adds	r3, #3
 800c96a:	f023 0303 	bic.w	r3, r3, #3
 800c96e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c970:	2300      	movs	r3, #0
 800c972:	60fb      	str	r3, [r7, #12]
 800c974:	e011      	b.n	800c99a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	881b      	ldrh	r3, [r3, #0]
 800c98c:	461a      	mov	r2, r3
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	4413      	add	r3, r2
 800c992:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	3301      	adds	r3, #1
 800c998:	60fb      	str	r3, [r7, #12]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	885b      	ldrh	r3, [r3, #2]
 800c99e:	461a      	mov	r2, r3
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	dce7      	bgt.n	800c976 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c9a6:	bf00      	nop
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bc80      	pop	{r7}
 800c9ae:	4770      	bx	lr

0800c9b0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	80fb      	strh	r3, [r7, #6]
 800c9ba:	e009      	b.n	800c9d0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c9bc:	88fb      	ldrh	r3, [r7, #6]
 800c9be:	4a08      	ldr	r2, [pc, #32]	; (800c9e0 <memp_init+0x30>)
 800c9c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7ff ffc5 	bl	800c954 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c9ca:	88fb      	ldrh	r3, [r7, #6]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	80fb      	strh	r3, [r7, #6]
 800c9d0:	88fb      	ldrh	r3, [r7, #6]
 800c9d2:	2b0c      	cmp	r3, #12
 800c9d4:	d9f2      	bls.n	800c9bc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c9d6:	bf00      	nop
 800c9d8:	3708      	adds	r7, #8
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	08017f9c 	.word	0x08017f9c

0800c9e4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c9ec:	f007 fab6 	bl	8013f5c <sys_arch_protect>
 800c9f0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d015      	beq.n	800ca2c <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	68ba      	ldr	r2, [r7, #8]
 800ca06:	6812      	ldr	r2, [r2, #0]
 800ca08:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	f003 0303 	and.w	r3, r3, #3
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d006      	beq.n	800ca22 <do_memp_malloc_pool+0x3e>
 800ca14:	4b09      	ldr	r3, [pc, #36]	; (800ca3c <do_memp_malloc_pool+0x58>)
 800ca16:	f240 1249 	movw	r2, #329	; 0x149
 800ca1a:	4909      	ldr	r1, [pc, #36]	; (800ca40 <do_memp_malloc_pool+0x5c>)
 800ca1c:	4809      	ldr	r0, [pc, #36]	; (800ca44 <do_memp_malloc_pool+0x60>)
 800ca1e:	f007 fb59 	bl	80140d4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f007 faa8 	bl	8013f78 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	e003      	b.n	800ca34 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f007 faa3 	bl	8013f78 <sys_arch_unprotect>
  return NULL;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3710      	adds	r7, #16
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	08016a20 	.word	0x08016a20
 800ca40:	08016a50 	.word	0x08016a50
 800ca44:	08016a74 	.word	0x08016a74

0800ca48 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	4603      	mov	r3, r0
 800ca50:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ca52:	79fb      	ldrb	r3, [r7, #7]
 800ca54:	2b0c      	cmp	r3, #12
 800ca56:	d908      	bls.n	800ca6a <memp_malloc+0x22>
 800ca58:	4b0a      	ldr	r3, [pc, #40]	; (800ca84 <memp_malloc+0x3c>)
 800ca5a:	f240 1287 	movw	r2, #391	; 0x187
 800ca5e:	490a      	ldr	r1, [pc, #40]	; (800ca88 <memp_malloc+0x40>)
 800ca60:	480a      	ldr	r0, [pc, #40]	; (800ca8c <memp_malloc+0x44>)
 800ca62:	f007 fb37 	bl	80140d4 <iprintf>
 800ca66:	2300      	movs	r3, #0
 800ca68:	e008      	b.n	800ca7c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ca6a:	79fb      	ldrb	r3, [r7, #7]
 800ca6c:	4a08      	ldr	r2, [pc, #32]	; (800ca90 <memp_malloc+0x48>)
 800ca6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7ff ffb6 	bl	800c9e4 <do_memp_malloc_pool>
 800ca78:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3710      	adds	r7, #16
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	08016a20 	.word	0x08016a20
 800ca88:	08016ab0 	.word	0x08016ab0
 800ca8c:	08016a74 	.word	0x08016a74
 800ca90:	08017f9c 	.word	0x08017f9c

0800ca94 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	f003 0303 	and.w	r3, r3, #3
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d006      	beq.n	800cab6 <do_memp_free_pool+0x22>
 800caa8:	4b0d      	ldr	r3, [pc, #52]	; (800cae0 <do_memp_free_pool+0x4c>)
 800caaa:	f240 129d 	movw	r2, #413	; 0x19d
 800caae:	490d      	ldr	r1, [pc, #52]	; (800cae4 <do_memp_free_pool+0x50>)
 800cab0:	480d      	ldr	r0, [pc, #52]	; (800cae8 <do_memp_free_pool+0x54>)
 800cab2:	f007 fb0f 	bl	80140d4 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800caba:	f007 fa4f 	bl	8013f5c <sys_arch_protect>
 800cabe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	68fa      	ldr	r2, [r7, #12]
 800cad0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800cad2:	68b8      	ldr	r0, [r7, #8]
 800cad4:	f007 fa50 	bl	8013f78 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800cad8:	bf00      	nop
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	08016a20 	.word	0x08016a20
 800cae4:	08016ad0 	.word	0x08016ad0
 800cae8:	08016a74 	.word	0x08016a74

0800caec <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	4603      	mov	r3, r0
 800caf4:	6039      	str	r1, [r7, #0]
 800caf6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800caf8:	79fb      	ldrb	r3, [r7, #7]
 800cafa:	2b0c      	cmp	r3, #12
 800cafc:	d907      	bls.n	800cb0e <memp_free+0x22>
 800cafe:	4b0c      	ldr	r3, [pc, #48]	; (800cb30 <memp_free+0x44>)
 800cb00:	f240 12db 	movw	r2, #475	; 0x1db
 800cb04:	490b      	ldr	r1, [pc, #44]	; (800cb34 <memp_free+0x48>)
 800cb06:	480c      	ldr	r0, [pc, #48]	; (800cb38 <memp_free+0x4c>)
 800cb08:	f007 fae4 	bl	80140d4 <iprintf>
 800cb0c:	e00c      	b.n	800cb28 <memp_free+0x3c>

  if (mem == NULL) {
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d008      	beq.n	800cb26 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cb14:	79fb      	ldrb	r3, [r7, #7]
 800cb16:	4a09      	ldr	r2, [pc, #36]	; (800cb3c <memp_free+0x50>)
 800cb18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb1c:	6839      	ldr	r1, [r7, #0]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7ff ffb8 	bl	800ca94 <do_memp_free_pool>
 800cb24:	e000      	b.n	800cb28 <memp_free+0x3c>
    return;
 800cb26:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	08016a20 	.word	0x08016a20
 800cb34:	08016af0 	.word	0x08016af0
 800cb38:	08016a74 	.word	0x08016a74
 800cb3c:	08017f9c 	.word	0x08017f9c

0800cb40 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cb40:	b480      	push	{r7}
 800cb42:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cb44:	bf00      	nop
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bc80      	pop	{r7}
 800cb4a:	4770      	bx	lr

0800cb4c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
 800cb58:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d105      	bne.n	800cb6c <netif_add+0x20>
 800cb60:	4b21      	ldr	r3, [pc, #132]	; (800cbe8 <netif_add+0x9c>)
 800cb62:	22fb      	movs	r2, #251	; 0xfb
 800cb64:	4921      	ldr	r1, [pc, #132]	; (800cbec <netif_add+0xa0>)
 800cb66:	4822      	ldr	r0, [pc, #136]	; (800cbf0 <netif_add+0xa4>)
 800cb68:	f007 fab4 	bl	80140d4 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2200      	movs	r2, #0
 800cb82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2203      	movs	r2, #3
 800cb8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2200      	movs	r2, #0
 800cb92:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	69ba      	ldr	r2, [r7, #24]
 800cb98:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 800cb9a:	4b16      	ldr	r3, [pc, #88]	; (800cbf4 <netif_add+0xa8>)
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	1c5a      	adds	r2, r3, #1
 800cba0:	b2d1      	uxtb	r1, r2
 800cba2:	4a14      	ldr	r2, [pc, #80]	; (800cbf4 <netif_add+0xa8>)
 800cba4:	7011      	strb	r1, [r2, #0]
 800cba6:	68fa      	ldr	r2, [r7, #12]
 800cba8:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	6a3a      	ldr	r2, [r7, #32]
 800cbb0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	68b9      	ldr	r1, [r7, #8]
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	f000 f81f 	bl	800cbfc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	4798      	blx	r3
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d001      	beq.n	800cbce <netif_add+0x82>
    return NULL;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	e007      	b.n	800cbde <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cbce:	4b0a      	ldr	r3, [pc, #40]	; (800cbf8 <netif_add+0xac>)
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cbd6:	4a08      	ldr	r2, [pc, #32]	; (800cbf8 <netif_add+0xac>)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	08016b0c 	.word	0x08016b0c
 800cbec:	08016b40 	.word	0x08016b40
 800cbf0:	08016b58 	.word	0x08016b58
 800cbf4:	200041ec 	.word	0x200041ec
 800cbf8:	2000ab24 	.word	0x2000ab24

0800cbfc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	607a      	str	r2, [r7, #4]
 800cc08:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d003      	beq.n	800cc18 <netif_set_addr+0x1c>
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d10c      	bne.n	800cc32 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800cc18:	68b9      	ldr	r1, [r7, #8]
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	f000 f81a 	bl	800cc54 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800cc20:	6879      	ldr	r1, [r7, #4]
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	f000 f861 	bl	800ccea <netif_set_netmask>
    netif_set_gw(netif, gw);
 800cc28:	6839      	ldr	r1, [r7, #0]
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f000 f84a 	bl	800ccc4 <netif_set_gw>
 800cc30:	e00b      	b.n	800cc4a <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800cc32:	6879      	ldr	r1, [r7, #4]
 800cc34:	68f8      	ldr	r0, [r7, #12]
 800cc36:	f000 f858 	bl	800ccea <netif_set_netmask>
    netif_set_gw(netif, gw);
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f000 f841 	bl	800ccc4 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800cc42:	68b9      	ldr	r1, [r7, #8]
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f000 f805 	bl	800cc54 <netif_set_ipaddr>
  }
}
 800cc4a:	bf00      	nop
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
	...

0800cc54 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d003      	beq.n	800cc6c <netif_set_ipaddr+0x18>
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	60fb      	str	r3, [r7, #12]
 800cc6a:	e002      	b.n	800cc72 <netif_set_ipaddr+0x1e>
 800cc6c:	4b14      	ldr	r3, [pc, #80]	; (800ccc0 <netif_set_ipaddr+0x6c>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	3304      	adds	r3, #4
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d01c      	beq.n	800ccb8 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	3304      	adds	r3, #4
 800cc82:	f107 020c 	add.w	r2, r7, #12
 800cc86:	4611      	mov	r1, r2
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f002 fb2f 	bl	800f2ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3304      	adds	r3, #4
 800cc92:	f107 020c 	add.w	r2, r7, #12
 800cc96:	4611      	mov	r1, r2
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f006 fe81 	bl	80139a0 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d002      	beq.n	800ccaa <netif_set_ipaddr+0x56>
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	e000      	b.n	800ccac <netif_set_ipaddr+0x58>
 800ccaa:	2300      	movs	r3, #0
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ccb0:	2101      	movs	r1, #1
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 f85d 	bl	800cd72 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800ccb8:	bf00      	nop
 800ccba:	3710      	adds	r7, #16
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	08017efc 	.word	0x08017efc

0800ccc4 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d002      	beq.n	800ccda <netif_set_gw+0x16>
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	e000      	b.n	800ccdc <netif_set_gw+0x18>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800cce0:	bf00      	nop
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bc80      	pop	{r7}
 800cce8:	4770      	bx	lr

0800ccea <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800ccea:	b480      	push	{r7}
 800ccec:	b083      	sub	sp, #12
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6078      	str	r0, [r7, #4]
 800ccf2:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d002      	beq.n	800cd00 <netif_set_netmask+0x16>
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	e000      	b.n	800cd02 <netif_set_netmask+0x18>
 800cd00:	2300      	movs	r3, #0
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800cd06:	bf00      	nop
 800cd08:	370c      	adds	r7, #12
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bc80      	pop	{r7}
 800cd0e:	4770      	bx	lr

0800cd10 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cd18:	4a03      	ldr	r2, [pc, #12]	; (800cd28 <netif_set_default+0x18>)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cd1e:	bf00      	nop
 800cd20:	370c      	adds	r7, #12
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bc80      	pop	{r7}
 800cd26:	4770      	bx	lr
 800cd28:	2000ab28 	.word	0x2000ab28

0800cd2c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cd3a:	f003 0301 	and.w	r3, r3, #1
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d113      	bne.n	800cd6a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cd48:	f043 0301 	orr.w	r3, r3, #1
 800cd4c:	b2da      	uxtb	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cd5a:	f003 0304 	and.w	r3, r3, #4
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d003      	beq.n	800cd6a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800cd62:	2103      	movs	r1, #3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 f804 	bl	800cd72 <netif_issue_reports>
    }
  }
}
 800cd6a:	bf00      	nop
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b082      	sub	sp, #8
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cd7e:	78fb      	ldrb	r3, [r7, #3]
 800cd80:	f003 0301 	and.w	r3, r3, #1
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d011      	beq.n	800cdac <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	3304      	adds	r3, #4
 800cd8c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d00c      	beq.n	800cdac <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cd98:	f003 0308 	and.w	r3, r3, #8
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d005      	beq.n	800cdac <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	3304      	adds	r3, #4
 800cda4:	4619      	mov	r1, r3
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f7fd ff2e 	bl	800ac08 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800cdac:	bf00      	nop
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cdc2:	f003 0301 	and.w	r3, r3, #1
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d012      	beq.n	800cdf0 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cdd0:	f023 0301 	bic.w	r3, r3, #1
 800cdd4:	b2da      	uxtb	r2, r3
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cde2:	f003 0308 	and.w	r3, r3, #8
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d002      	beq.n	800cdf0 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f7fd fad2 	bl	800a394 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cdf0:	bf00      	nop
 800cdf2:	3708      	adds	r7, #8
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce06:	f003 0304 	and.w	r3, r3, #4
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d11b      	bne.n	800ce46 <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce14:	f043 0304 	orr.w	r3, r3, #4
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce26:	f003 0301 	and.w	r3, r3, #1
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d003      	beq.n	800ce36 <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800ce2e:	2103      	movs	r1, #3
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f7ff ff9e 	bl	800cd72 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	69db      	ldr	r3, [r3, #28]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d003      	beq.n	800ce46 <netif_set_link_up+0x4e>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	69db      	ldr	r3, [r3, #28]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	4798      	blx	r3
  }
}
 800ce46:	bf00      	nop
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b082      	sub	sp, #8
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce5c:	f003 0304 	and.w	r3, r3, #4
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d010      	beq.n	800ce86 <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce6a:	f023 0304 	bic.w	r3, r3, #4
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    NETIF_LINK_CALLBACK(netif);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	69db      	ldr	r3, [r3, #28]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d003      	beq.n	800ce86 <netif_set_link_down+0x38>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	69db      	ldr	r3, [r3, #28]
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	4798      	blx	r3
  }
}
 800ce86:	bf00      	nop
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ce8e:	b480      	push	{r7}
 800ce90:	b083      	sub	sp, #12
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	6039      	str	r1, [r7, #0]
  if (netif) {
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d002      	beq.n	800cea4 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	683a      	ldr	r2, [r7, #0]
 800cea2:	61da      	str	r2, [r3, #28]
  }
}
 800cea4:	bf00      	nop
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bc80      	pop	{r7}
 800ceac:	4770      	bx	lr
	...

0800ceb0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ceb6:	f007 f851 	bl	8013f5c <sys_arch_protect>
 800ceba:	6038      	str	r0, [r7, #0]
 800cebc:	4b0f      	ldr	r3, [pc, #60]	; (800cefc <pbuf_free_ooseq+0x4c>)
 800cebe:	2200      	movs	r2, #0
 800cec0:	701a      	strb	r2, [r3, #0]
 800cec2:	6838      	ldr	r0, [r7, #0]
 800cec4:	f007 f858 	bl	8013f78 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cec8:	4b0d      	ldr	r3, [pc, #52]	; (800cf00 <pbuf_free_ooseq+0x50>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	607b      	str	r3, [r7, #4]
 800cece:	e00f      	b.n	800cef0 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d008      	beq.n	800ceea <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cedc:	4618      	mov	r0, r3
 800cede:	f001 fe86 	bl	800ebee <tcp_segs_free>
      pcb->ooseq = NULL;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800cee8:	e005      	b.n	800cef6 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	607b      	str	r3, [r7, #4]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d1ec      	bne.n	800ced0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	2000ab2c 	.word	0x2000ab2c
 800cf00:	2000ab34 	.word	0x2000ab34

0800cf04 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cf0c:	f7ff ffd0 	bl	800ceb0 <pbuf_free_ooseq>
}
 800cf10:	bf00      	nop
 800cf12:	3708      	adds	r7, #8
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cf1e:	f007 f81d 	bl	8013f5c <sys_arch_protect>
 800cf22:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cf24:	4b10      	ldr	r3, [pc, #64]	; (800cf68 <pbuf_pool_is_empty+0x50>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cf2a:	4b0f      	ldr	r3, [pc, #60]	; (800cf68 <pbuf_pool_is_empty+0x50>)
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f007 f821 	bl	8013f78 <sys_arch_unprotect>

  if (!queued) {
 800cf36:	78fb      	ldrb	r3, [r7, #3]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d110      	bne.n	800cf5e <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	2100      	movs	r1, #0
 800cf40:	480a      	ldr	r0, [pc, #40]	; (800cf6c <pbuf_pool_is_empty+0x54>)
 800cf42:	f7fc fe77 	bl	8009c34 <tcpip_callback_with_block>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d008      	beq.n	800cf5e <pbuf_pool_is_empty+0x46>
 800cf4c:	f007 f806 	bl	8013f5c <sys_arch_protect>
 800cf50:	6078      	str	r0, [r7, #4]
 800cf52:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <pbuf_pool_is_empty+0x50>)
 800cf54:	2200      	movs	r2, #0
 800cf56:	701a      	strb	r2, [r3, #0]
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f007 f80d 	bl	8013f78 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cf5e:	bf00      	nop
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	2000ab2c 	.word	0x2000ab2c
 800cf6c:	0800cf05 	.word	0x0800cf05

0800cf70 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b088      	sub	sp, #32
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	4603      	mov	r3, r0
 800cf78:	71fb      	strb	r3, [r7, #7]
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	80bb      	strh	r3, [r7, #4]
 800cf7e:	4613      	mov	r3, r2
 800cf80:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800cf82:	79fb      	ldrb	r3, [r7, #7]
 800cf84:	2b04      	cmp	r3, #4
 800cf86:	d81c      	bhi.n	800cfc2 <pbuf_alloc+0x52>
 800cf88:	a201      	add	r2, pc, #4	; (adr r2, 800cf90 <pbuf_alloc+0x20>)
 800cf8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf8e:	bf00      	nop
 800cf90:	0800cfa5 	.word	0x0800cfa5
 800cf94:	0800cfab 	.word	0x0800cfab
 800cf98:	0800cfb1 	.word	0x0800cfb1
 800cf9c:	0800cfb7 	.word	0x0800cfb7
 800cfa0:	0800cfbd 	.word	0x0800cfbd
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800cfa4:	2336      	movs	r3, #54	; 0x36
 800cfa6:	82fb      	strh	r3, [r7, #22]
    break;
 800cfa8:	e014      	b.n	800cfd4 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800cfaa:	2322      	movs	r3, #34	; 0x22
 800cfac:	82fb      	strh	r3, [r7, #22]
    break;
 800cfae:	e011      	b.n	800cfd4 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800cfb0:	230e      	movs	r3, #14
 800cfb2:	82fb      	strh	r3, [r7, #22]
    break;
 800cfb4:	e00e      	b.n	800cfd4 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	82fb      	strh	r3, [r7, #22]
    break;
 800cfba:	e00b      	b.n	800cfd4 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	82fb      	strh	r3, [r7, #22]
    break;
 800cfc0:	e008      	b.n	800cfd4 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800cfc2:	4ba5      	ldr	r3, [pc, #660]	; (800d258 <pbuf_alloc+0x2e8>)
 800cfc4:	f44f 728b 	mov.w	r2, #278	; 0x116
 800cfc8:	49a4      	ldr	r1, [pc, #656]	; (800d25c <pbuf_alloc+0x2ec>)
 800cfca:	48a5      	ldr	r0, [pc, #660]	; (800d260 <pbuf_alloc+0x2f0>)
 800cfcc:	f007 f882 	bl	80140d4 <iprintf>
    return NULL;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	e15d      	b.n	800d290 <pbuf_alloc+0x320>
  }

  switch (type) {
 800cfd4:	79bb      	ldrb	r3, [r7, #6]
 800cfd6:	2b03      	cmp	r3, #3
 800cfd8:	f200 8134 	bhi.w	800d244 <pbuf_alloc+0x2d4>
 800cfdc:	a201      	add	r2, pc, #4	; (adr r2, 800cfe4 <pbuf_alloc+0x74>)
 800cfde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe2:	bf00      	nop
 800cfe4:	0800d185 	.word	0x0800d185
 800cfe8:	0800d211 	.word	0x0800d211
 800cfec:	0800d211 	.word	0x0800d211
 800cff0:	0800cff5 	.word	0x0800cff5
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cff4:	200c      	movs	r0, #12
 800cff6:	f7ff fd27 	bl	800ca48 <memp_malloc>
 800cffa:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800cffc:	69fb      	ldr	r3, [r7, #28]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d103      	bne.n	800d00a <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800d002:	f7ff ff89 	bl	800cf18 <pbuf_pool_is_empty>
      return NULL;
 800d006:	2300      	movs	r3, #0
 800d008:	e142      	b.n	800d290 <pbuf_alloc+0x320>
    }
    p->type = type;
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	79ba      	ldrb	r2, [r7, #6]
 800d00e:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800d010:	69fb      	ldr	r3, [r7, #28]
 800d012:	2200      	movs	r2, #0
 800d014:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800d016:	8afb      	ldrh	r3, [r7, #22]
 800d018:	3310      	adds	r3, #16
 800d01a:	69fa      	ldr	r2, [r7, #28]
 800d01c:	4413      	add	r3, r2
 800d01e:	3303      	adds	r3, #3
 800d020:	f023 0303 	bic.w	r3, r3, #3
 800d024:	461a      	mov	r2, r3
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	f003 0303 	and.w	r3, r3, #3
 800d032:	2b00      	cmp	r3, #0
 800d034:	d006      	beq.n	800d044 <pbuf_alloc+0xd4>
 800d036:	4b88      	ldr	r3, [pc, #544]	; (800d258 <pbuf_alloc+0x2e8>)
 800d038:	f240 1229 	movw	r2, #297	; 0x129
 800d03c:	4989      	ldr	r1, [pc, #548]	; (800d264 <pbuf_alloc+0x2f4>)
 800d03e:	4888      	ldr	r0, [pc, #544]	; (800d260 <pbuf_alloc+0x2f0>)
 800d040:	f007 f848 	bl	80140d4 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	88ba      	ldrh	r2, [r7, #4]
 800d048:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800d04a:	8afb      	ldrh	r3, [r7, #22]
 800d04c:	3303      	adds	r3, #3
 800d04e:	f023 0303 	bic.w	r3, r3, #3
 800d052:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800d056:	88bb      	ldrh	r3, [r7, #4]
 800d058:	4293      	cmp	r3, r2
 800d05a:	bf28      	it	cs
 800d05c:	4613      	movcs	r3, r2
 800d05e:	b29a      	uxth	r2, r3
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	69fa      	ldr	r2, [r7, #28]
 800d06a:	8952      	ldrh	r2, [r2, #10]
 800d06c:	441a      	add	r2, r3
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d074:	429a      	cmp	r2, r3
 800d076:	d906      	bls.n	800d086 <pbuf_alloc+0x116>
 800d078:	4b77      	ldr	r3, [pc, #476]	; (800d258 <pbuf_alloc+0x2e8>)
 800d07a:	f44f 7298 	mov.w	r2, #304	; 0x130
 800d07e:	497a      	ldr	r1, [pc, #488]	; (800d268 <pbuf_alloc+0x2f8>)
 800d080:	4877      	ldr	r0, [pc, #476]	; (800d260 <pbuf_alloc+0x2f0>)
 800d082:	f007 f827 	bl	80140d4 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d086:	8afb      	ldrh	r3, [r7, #22]
 800d088:	3303      	adds	r3, #3
 800d08a:	f023 0303 	bic.w	r3, r3, #3
 800d08e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d092:	d106      	bne.n	800d0a2 <pbuf_alloc+0x132>
 800d094:	4b70      	ldr	r3, [pc, #448]	; (800d258 <pbuf_alloc+0x2e8>)
 800d096:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d09a:	4974      	ldr	r1, [pc, #464]	; (800d26c <pbuf_alloc+0x2fc>)
 800d09c:	4870      	ldr	r0, [pc, #448]	; (800d260 <pbuf_alloc+0x2f0>)
 800d09e:	f007 f819 	bl	80140d4 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800d0ac:	88bb      	ldrh	r3, [r7, #4]
 800d0ae:	69fa      	ldr	r2, [r7, #28]
 800d0b0:	8952      	ldrh	r2, [r2, #10]
 800d0b2:	1a9b      	subs	r3, r3, r2
 800d0b4:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800d0b6:	e061      	b.n	800d17c <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d0b8:	200c      	movs	r0, #12
 800d0ba:	f7ff fcc5 	bl	800ca48 <memp_malloc>
 800d0be:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d106      	bne.n	800d0d4 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800d0c6:	f7ff ff27 	bl	800cf18 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800d0ca:	69f8      	ldr	r0, [r7, #28]
 800d0cc:	f000 fac2 	bl	800d654 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	e0dd      	b.n	800d290 <pbuf_alloc+0x320>
      }
      q->type = type;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	79ba      	ldrb	r2, [r7, #6]
 800d0d8:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	dd06      	ble.n	800d104 <pbuf_alloc+0x194>
 800d0f6:	4b58      	ldr	r3, [pc, #352]	; (800d258 <pbuf_alloc+0x2e8>)
 800d0f8:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800d0fc:	495c      	ldr	r1, [pc, #368]	; (800d270 <pbuf_alloc+0x300>)
 800d0fe:	4858      	ldr	r0, [pc, #352]	; (800d260 <pbuf_alloc+0x2f0>)
 800d100:	f006 ffe8 	bl	80140d4 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	b29a      	uxth	r2, r3
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	b29b      	uxth	r3, r3
 800d110:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d114:	bf28      	it	cs
 800d116:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800d11a:	b29a      	uxth	r2, r3
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f103 0210 	add.w	r2, r3, #16
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	f003 0303 	and.w	r3, r3, #3
 800d132:	2b00      	cmp	r3, #0
 800d134:	d006      	beq.n	800d144 <pbuf_alloc+0x1d4>
 800d136:	4b48      	ldr	r3, [pc, #288]	; (800d258 <pbuf_alloc+0x2e8>)
 800d138:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800d13c:	494d      	ldr	r1, [pc, #308]	; (800d274 <pbuf_alloc+0x304>)
 800d13e:	4848      	ldr	r0, [pc, #288]	; (800d260 <pbuf_alloc+0x2f0>)
 800d140:	f006 ffc8 	bl	80140d4 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	69fa      	ldr	r2, [r7, #28]
 800d14a:	8952      	ldrh	r2, [r2, #10]
 800d14c:	441a      	add	r2, r3
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d154:	429a      	cmp	r2, r3
 800d156:	d906      	bls.n	800d166 <pbuf_alloc+0x1f6>
 800d158:	4b3f      	ldr	r3, [pc, #252]	; (800d258 <pbuf_alloc+0x2e8>)
 800d15a:	f240 1255 	movw	r2, #341	; 0x155
 800d15e:	4942      	ldr	r1, [pc, #264]	; (800d268 <pbuf_alloc+0x2f8>)
 800d160:	483f      	ldr	r0, [pc, #252]	; (800d260 <pbuf_alloc+0x2f0>)
 800d162:	f006 ffb7 	bl	80140d4 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2201      	movs	r2, #1
 800d16a:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	895b      	ldrh	r3, [r3, #10]
 800d170:	461a      	mov	r2, r3
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	1a9b      	subs	r3, r3, r2
 800d176:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	dc9a      	bgt.n	800d0b8 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800d182:	e07e      	b.n	800d282 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800d184:	8afb      	ldrh	r3, [r7, #22]
 800d186:	3313      	adds	r3, #19
 800d188:	b29b      	uxth	r3, r3
 800d18a:	f023 0303 	bic.w	r3, r3, #3
 800d18e:	b29a      	uxth	r2, r3
 800d190:	88bb      	ldrh	r3, [r7, #4]
 800d192:	3303      	adds	r3, #3
 800d194:	b29b      	uxth	r3, r3
 800d196:	f023 0303 	bic.w	r3, r3, #3
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	4413      	add	r3, r2
 800d19e:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800d1a0:	897a      	ldrh	r2, [r7, #10]
 800d1a2:	88bb      	ldrh	r3, [r7, #4]
 800d1a4:	3303      	adds	r3, #3
 800d1a6:	f023 0303 	bic.w	r3, r3, #3
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d201      	bcs.n	800d1b2 <pbuf_alloc+0x242>
        return NULL;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	e06e      	b.n	800d290 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800d1b2:	897b      	ldrh	r3, [r7, #10]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7ff fad9 	bl	800c76c <mem_malloc>
 800d1ba:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d101      	bne.n	800d1c6 <pbuf_alloc+0x256>
      return NULL;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	e064      	b.n	800d290 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800d1c6:	8afb      	ldrh	r3, [r7, #22]
 800d1c8:	3310      	adds	r3, #16
 800d1ca:	69fa      	ldr	r2, [r7, #28]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	3303      	adds	r3, #3
 800d1d0:	f023 0303 	bic.w	r3, r3, #3
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	88ba      	ldrh	r2, [r7, #4]
 800d1de:	811a      	strh	r2, [r3, #8]
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	891a      	ldrh	r2, [r3, #8]
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	601a      	str	r2, [r3, #0]
    p->type = type;
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	79ba      	ldrb	r2, [r7, #6]
 800d1f2:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	f003 0303 	and.w	r3, r3, #3
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d03f      	beq.n	800d280 <pbuf_alloc+0x310>
 800d200:	4b15      	ldr	r3, [pc, #84]	; (800d258 <pbuf_alloc+0x2e8>)
 800d202:	f240 1277 	movw	r2, #375	; 0x177
 800d206:	491c      	ldr	r1, [pc, #112]	; (800d278 <pbuf_alloc+0x308>)
 800d208:	4815      	ldr	r0, [pc, #84]	; (800d260 <pbuf_alloc+0x2f0>)
 800d20a:	f006 ff63 	bl	80140d4 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800d20e:	e037      	b.n	800d280 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d210:	200b      	movs	r0, #11
 800d212:	f7ff fc19 	bl	800ca48 <memp_malloc>
 800d216:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d101      	bne.n	800d222 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800d21e:	2300      	movs	r3, #0
 800d220:	e036      	b.n	800d290 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	2200      	movs	r2, #0
 800d226:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	88ba      	ldrh	r2, [r7, #4]
 800d22c:	811a      	strh	r2, [r3, #8]
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	891a      	ldrh	r2, [r3, #8]
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	2200      	movs	r2, #0
 800d23a:	601a      	str	r2, [r3, #0]
    p->type = type;
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	79ba      	ldrb	r2, [r7, #6]
 800d240:	731a      	strb	r2, [r3, #12]
    break;
 800d242:	e01e      	b.n	800d282 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d244:	4b04      	ldr	r3, [pc, #16]	; (800d258 <pbuf_alloc+0x2e8>)
 800d246:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800d24a:	490c      	ldr	r1, [pc, #48]	; (800d27c <pbuf_alloc+0x30c>)
 800d24c:	4804      	ldr	r0, [pc, #16]	; (800d260 <pbuf_alloc+0x2f0>)
 800d24e:	f006 ff41 	bl	80140d4 <iprintf>
    return NULL;
 800d252:	2300      	movs	r3, #0
 800d254:	e01c      	b.n	800d290 <pbuf_alloc+0x320>
 800d256:	bf00      	nop
 800d258:	08016b80 	.word	0x08016b80
 800d25c:	08016bb0 	.word	0x08016bb0
 800d260:	08016bcc 	.word	0x08016bcc
 800d264:	08016bf4 	.word	0x08016bf4
 800d268:	08016c24 	.word	0x08016c24
 800d26c:	08016c58 	.word	0x08016c58
 800d270:	08016c8c 	.word	0x08016c8c
 800d274:	08016ca0 	.word	0x08016ca0
 800d278:	08016cd0 	.word	0x08016cd0
 800d27c:	08016cfc 	.word	0x08016cfc
    break;
 800d280:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800d282:	69fb      	ldr	r3, [r7, #28]
 800d284:	2201      	movs	r2, #1
 800d286:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	2200      	movs	r2, #0
 800d28c:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d28e:	69fb      	ldr	r3, [r7, #28]
}
 800d290:	4618      	mov	r0, r3
 800d292:	3720      	adds	r7, #32
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	603b      	str	r3, [r7, #0]
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	71fb      	strb	r3, [r7, #7]
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	80bb      	strh	r3, [r7, #4]
 800d2a8:	4613      	mov	r3, r2
 800d2aa:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800d2ac:	79fb      	ldrb	r3, [r7, #7]
 800d2ae:	2b04      	cmp	r3, #4
 800d2b0:	d81b      	bhi.n	800d2ea <pbuf_alloced_custom+0x52>
 800d2b2:	a201      	add	r2, pc, #4	; (adr r2, 800d2b8 <pbuf_alloced_custom+0x20>)
 800d2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b8:	0800d2cd 	.word	0x0800d2cd
 800d2bc:	0800d2d3 	.word	0x0800d2d3
 800d2c0:	0800d2d9 	.word	0x0800d2d9
 800d2c4:	0800d2df 	.word	0x0800d2df
 800d2c8:	0800d2e5 	.word	0x0800d2e5
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800d2cc:	2336      	movs	r3, #54	; 0x36
 800d2ce:	81fb      	strh	r3, [r7, #14]
    break;
 800d2d0:	e014      	b.n	800d2fc <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800d2d2:	2322      	movs	r3, #34	; 0x22
 800d2d4:	81fb      	strh	r3, [r7, #14]
    break;
 800d2d6:	e011      	b.n	800d2fc <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800d2d8:	230e      	movs	r3, #14
 800d2da:	81fb      	strh	r3, [r7, #14]
    break;
 800d2dc:	e00e      	b.n	800d2fc <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	81fb      	strh	r3, [r7, #14]
    break;
 800d2e2:	e00b      	b.n	800d2fc <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	81fb      	strh	r3, [r7, #14]
    break;
 800d2e8:	e008      	b.n	800d2fc <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800d2ea:	4b1d      	ldr	r3, [pc, #116]	; (800d360 <pbuf_alloced_custom+0xc8>)
 800d2ec:	f240 12c5 	movw	r2, #453	; 0x1c5
 800d2f0:	491c      	ldr	r1, [pc, #112]	; (800d364 <pbuf_alloced_custom+0xcc>)
 800d2f2:	481d      	ldr	r0, [pc, #116]	; (800d368 <pbuf_alloced_custom+0xd0>)
 800d2f4:	f006 feee 	bl	80140d4 <iprintf>
    return NULL;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	e02d      	b.n	800d358 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d2fc:	89fb      	ldrh	r3, [r7, #14]
 800d2fe:	3303      	adds	r3, #3
 800d300:	f023 0203 	bic.w	r2, r3, #3
 800d304:	88bb      	ldrh	r3, [r7, #4]
 800d306:	441a      	add	r2, r3
 800d308:	8bbb      	ldrh	r3, [r7, #28]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d901      	bls.n	800d312 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d30e:	2300      	movs	r3, #0
 800d310:	e022      	b.n	800d358 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	2200      	movs	r2, #0
 800d316:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d008      	beq.n	800d330 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d31e:	89fb      	ldrh	r3, [r7, #14]
 800d320:	3303      	adds	r3, #3
 800d322:	f023 0303 	bic.w	r3, r3, #3
 800d326:	69ba      	ldr	r2, [r7, #24]
 800d328:	441a      	add	r2, r3
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	605a      	str	r2, [r3, #4]
 800d32e:	e002      	b.n	800d336 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	2200      	movs	r2, #0
 800d334:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	2202      	movs	r2, #2
 800d33a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	88ba      	ldrh	r2, [r7, #4]
 800d340:	811a      	strh	r2, [r3, #8]
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	891a      	ldrh	r2, [r3, #8]
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	79ba      	ldrb	r2, [r7, #6]
 800d34e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	2201      	movs	r2, #1
 800d354:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800d356:	683b      	ldr	r3, [r7, #0]
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3710      	adds	r7, #16
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	08016b80 	.word	0x08016b80
 800d364:	08016d18 	.word	0x08016d18
 800d368:	08016bcc 	.word	0x08016bcc

0800d36c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b086      	sub	sp, #24
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	460b      	mov	r3, r1
 800d376:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d106      	bne.n	800d38c <pbuf_realloc+0x20>
 800d37e:	4b4b      	ldr	r3, [pc, #300]	; (800d4ac <pbuf_realloc+0x140>)
 800d380:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d384:	494a      	ldr	r1, [pc, #296]	; (800d4b0 <pbuf_realloc+0x144>)
 800d386:	484b      	ldr	r0, [pc, #300]	; (800d4b4 <pbuf_realloc+0x148>)
 800d388:	f006 fea4 	bl	80140d4 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	7b1b      	ldrb	r3, [r3, #12]
 800d390:	2b03      	cmp	r3, #3
 800d392:	d012      	beq.n	800d3ba <pbuf_realloc+0x4e>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	7b1b      	ldrb	r3, [r3, #12]
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d00e      	beq.n	800d3ba <pbuf_realloc+0x4e>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	7b1b      	ldrb	r3, [r3, #12]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d00a      	beq.n	800d3ba <pbuf_realloc+0x4e>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	7b1b      	ldrb	r3, [r3, #12]
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d006      	beq.n	800d3ba <pbuf_realloc+0x4e>
 800d3ac:	4b3f      	ldr	r3, [pc, #252]	; (800d4ac <pbuf_realloc+0x140>)
 800d3ae:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d3b2:	4941      	ldr	r1, [pc, #260]	; (800d4b8 <pbuf_realloc+0x14c>)
 800d3b4:	483f      	ldr	r0, [pc, #252]	; (800d4b4 <pbuf_realloc+0x148>)
 800d3b6:	f006 fe8d 	bl	80140d4 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	891b      	ldrh	r3, [r3, #8]
 800d3be:	887a      	ldrh	r2, [r7, #2]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d26f      	bcs.n	800d4a4 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800d3c4:	887b      	ldrh	r3, [r7, #2]
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	8912      	ldrh	r2, [r2, #8]
 800d3ca:	1a9b      	subs	r3, r3, r2
 800d3cc:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d3ce:	887b      	ldrh	r3, [r7, #2]
 800d3d0:	827b      	strh	r3, [r7, #18]
  q = p;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d3d6:	e025      	b.n	800d424 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	895b      	ldrh	r3, [r3, #10]
 800d3dc:	8a7a      	ldrh	r2, [r7, #18]
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	dd06      	ble.n	800d3fa <pbuf_realloc+0x8e>
 800d3ec:	4b2f      	ldr	r3, [pc, #188]	; (800d4ac <pbuf_realloc+0x140>)
 800d3ee:	f240 220b 	movw	r2, #523	; 0x20b
 800d3f2:	4932      	ldr	r1, [pc, #200]	; (800d4bc <pbuf_realloc+0x150>)
 800d3f4:	482f      	ldr	r0, [pc, #188]	; (800d4b4 <pbuf_realloc+0x148>)
 800d3f6:	f006 fe6d 	bl	80140d4 <iprintf>
    q->tot_len += (u16_t)grow;
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	891a      	ldrh	r2, [r3, #8]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	b29b      	uxth	r3, r3
 800d402:	4413      	add	r3, r2
 800d404:	b29a      	uxth	r2, r3
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d106      	bne.n	800d424 <pbuf_realloc+0xb8>
 800d416:	4b25      	ldr	r3, [pc, #148]	; (800d4ac <pbuf_realloc+0x140>)
 800d418:	f240 220f 	movw	r2, #527	; 0x20f
 800d41c:	4928      	ldr	r1, [pc, #160]	; (800d4c0 <pbuf_realloc+0x154>)
 800d41e:	4825      	ldr	r0, [pc, #148]	; (800d4b4 <pbuf_realloc+0x148>)
 800d420:	f006 fe58 	bl	80140d4 <iprintf>
  while (rem_len > q->len) {
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	895b      	ldrh	r3, [r3, #10]
 800d428:	8a7a      	ldrh	r2, [r7, #18]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d8d4      	bhi.n	800d3d8 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	7b1b      	ldrb	r3, [r3, #12]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d122      	bne.n	800d47c <pbuf_realloc+0x110>
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	895b      	ldrh	r3, [r3, #10]
 800d43a:	8a7a      	ldrh	r2, [r7, #18]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d01d      	beq.n	800d47c <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	7b5b      	ldrb	r3, [r3, #13]
 800d444:	f003 0302 	and.w	r3, r3, #2
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d117      	bne.n	800d47c <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	461a      	mov	r2, r3
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	1ad3      	subs	r3, r2, r3
 800d456:	b29a      	uxth	r2, r3
 800d458:	8a7b      	ldrh	r3, [r7, #18]
 800d45a:	4413      	add	r3, r2
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	4619      	mov	r1, r3
 800d460:	6978      	ldr	r0, [r7, #20]
 800d462:	f7ff f899 	bl	800c598 <mem_trim>
 800d466:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d106      	bne.n	800d47c <pbuf_realloc+0x110>
 800d46e:	4b0f      	ldr	r3, [pc, #60]	; (800d4ac <pbuf_realloc+0x140>)
 800d470:	f240 221d 	movw	r2, #541	; 0x21d
 800d474:	4913      	ldr	r1, [pc, #76]	; (800d4c4 <pbuf_realloc+0x158>)
 800d476:	480f      	ldr	r0, [pc, #60]	; (800d4b4 <pbuf_realloc+0x148>)
 800d478:	f006 fe2c 	bl	80140d4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	8a7a      	ldrh	r2, [r7, #18]
 800d480:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	895a      	ldrh	r2, [r3, #10]
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d004      	beq.n	800d49c <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	4618      	mov	r0, r3
 800d498:	f000 f8dc 	bl	800d654 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	601a      	str	r2, [r3, #0]
 800d4a2:	e000      	b.n	800d4a6 <pbuf_realloc+0x13a>
    return;
 800d4a4:	bf00      	nop

}
 800d4a6:	3718      	adds	r7, #24
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	08016b80 	.word	0x08016b80
 800d4b0:	08016d3c 	.word	0x08016d3c
 800d4b4:	08016bcc 	.word	0x08016bcc
 800d4b8:	08016d54 	.word	0x08016d54
 800d4bc:	08016d70 	.word	0x08016d70
 800d4c0:	08016d84 	.word	0x08016d84
 800d4c4:	08016d9c 	.word	0x08016d9c

0800d4c8 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	807b      	strh	r3, [r7, #2]
 800d4d4:	4613      	mov	r3, r2
 800d4d6:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d106      	bne.n	800d4ec <pbuf_header_impl+0x24>
 800d4de:	4b46      	ldr	r3, [pc, #280]	; (800d5f8 <pbuf_header_impl+0x130>)
 800d4e0:	f240 223f 	movw	r2, #575	; 0x23f
 800d4e4:	4945      	ldr	r1, [pc, #276]	; (800d5fc <pbuf_header_impl+0x134>)
 800d4e6:	4846      	ldr	r0, [pc, #280]	; (800d600 <pbuf_header_impl+0x138>)
 800d4e8:	f006 fdf4 	bl	80140d4 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800d4ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d002      	beq.n	800d4fa <pbuf_header_impl+0x32>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d101      	bne.n	800d4fe <pbuf_header_impl+0x36>
    return 0;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	e078      	b.n	800d5f0 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800d4fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d502:	2b00      	cmp	r3, #0
 800d504:	da10      	bge.n	800d528 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800d506:	887b      	ldrh	r3, [r7, #2]
 800d508:	425b      	negs	r3, r3
 800d50a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	895b      	ldrh	r3, [r3, #10]
 800d510:	89fa      	ldrh	r2, [r7, #14]
 800d512:	429a      	cmp	r2, r3
 800d514:	d90a      	bls.n	800d52c <pbuf_header_impl+0x64>
 800d516:	4b38      	ldr	r3, [pc, #224]	; (800d5f8 <pbuf_header_impl+0x130>)
 800d518:	f240 2247 	movw	r2, #583	; 0x247
 800d51c:	4939      	ldr	r1, [pc, #228]	; (800d604 <pbuf_header_impl+0x13c>)
 800d51e:	4838      	ldr	r0, [pc, #224]	; (800d600 <pbuf_header_impl+0x138>)
 800d520:	f006 fdd8 	bl	80140d4 <iprintf>
 800d524:	2301      	movs	r3, #1
 800d526:	e063      	b.n	800d5f0 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800d528:	887b      	ldrh	r3, [r7, #2]
 800d52a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	7b1b      	ldrb	r3, [r3, #12]
 800d530:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800d538:	89bb      	ldrh	r3, [r7, #12]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d002      	beq.n	800d544 <pbuf_header_impl+0x7c>
 800d53e:	89bb      	ldrh	r3, [r7, #12]
 800d540:	2b03      	cmp	r3, #3
 800d542:	d112      	bne.n	800d56a <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	685a      	ldr	r2, [r3, #4]
 800d548:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d54c:	425b      	negs	r3, r3
 800d54e:	441a      	add	r2, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	685a      	ldr	r2, [r3, #4]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	3310      	adds	r3, #16
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d238      	bcs.n	800d5d2 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	68ba      	ldr	r2, [r7, #8]
 800d564:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800d566:	2301      	movs	r3, #1
 800d568:	e042      	b.n	800d5f0 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800d56a:	89bb      	ldrh	r3, [r7, #12]
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	d002      	beq.n	800d576 <pbuf_header_impl+0xae>
 800d570:	89bb      	ldrh	r3, [r7, #12]
 800d572:	2b01      	cmp	r3, #1
 800d574:	d124      	bne.n	800d5c0 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800d576:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	da0d      	bge.n	800d59a <pbuf_header_impl+0xd2>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	895b      	ldrh	r3, [r3, #10]
 800d582:	89fa      	ldrh	r2, [r7, #14]
 800d584:	429a      	cmp	r2, r3
 800d586:	d808      	bhi.n	800d59a <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	685a      	ldr	r2, [r3, #4]
 800d58c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d590:	425b      	negs	r3, r3
 800d592:	441a      	add	r2, r3
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	605a      	str	r2, [r3, #4]
 800d598:	e011      	b.n	800d5be <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800d59a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	dd0b      	ble.n	800d5ba <pbuf_header_impl+0xf2>
 800d5a2:	787b      	ldrb	r3, [r7, #1]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d008      	beq.n	800d5ba <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	685a      	ldr	r2, [r3, #4]
 800d5ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d5b0:	425b      	negs	r3, r3
 800d5b2:	441a      	add	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	605a      	str	r2, [r3, #4]
 800d5b8:	e001      	b.n	800d5be <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e018      	b.n	800d5f0 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800d5be:	e008      	b.n	800d5d2 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800d5c0:	4b0d      	ldr	r3, [pc, #52]	; (800d5f8 <pbuf_header_impl+0x130>)
 800d5c2:	f240 2277 	movw	r2, #631	; 0x277
 800d5c6:	4910      	ldr	r1, [pc, #64]	; (800d608 <pbuf_header_impl+0x140>)
 800d5c8:	480d      	ldr	r0, [pc, #52]	; (800d600 <pbuf_header_impl+0x138>)
 800d5ca:	f006 fd83 	bl	80140d4 <iprintf>
    return 1;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e00e      	b.n	800d5f0 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	895a      	ldrh	r2, [r3, #10]
 800d5d6:	887b      	ldrh	r3, [r7, #2]
 800d5d8:	4413      	add	r3, r2
 800d5da:	b29a      	uxth	r2, r3
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	891a      	ldrh	r2, [r3, #8]
 800d5e4:	887b      	ldrh	r3, [r7, #2]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	b29a      	uxth	r2, r3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800d5ee:	2300      	movs	r3, #0
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	08016b80 	.word	0x08016b80
 800d5fc:	08016db8 	.word	0x08016db8
 800d600:	08016bcc 	.word	0x08016bcc
 800d604:	08016dc4 	.word	0x08016dc4
 800d608:	08016de4 	.word	0x08016de4

0800d60c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	460b      	mov	r3, r1
 800d616:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800d618:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d61c:	2200      	movs	r2, #0
 800d61e:	4619      	mov	r1, r3
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f7ff ff51 	bl	800d4c8 <pbuf_header_impl>
 800d626:	4603      	mov	r3, r0
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	460b      	mov	r3, r1
 800d63a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800d63c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d640:	2201      	movs	r2, #1
 800d642:	4619      	mov	r1, r3
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f7ff ff3f 	bl	800d4c8 <pbuf_header_impl>
 800d64a:	4603      	mov	r3, r0
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b088      	sub	sp, #32
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d10b      	bne.n	800d67a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d106      	bne.n	800d676 <pbuf_free+0x22>
 800d668:	4b41      	ldr	r3, [pc, #260]	; (800d770 <pbuf_free+0x11c>)
 800d66a:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d66e:	4941      	ldr	r1, [pc, #260]	; (800d774 <pbuf_free+0x120>)
 800d670:	4841      	ldr	r0, [pc, #260]	; (800d778 <pbuf_free+0x124>)
 800d672:	f006 fd2f 	bl	80140d4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d676:	2300      	movs	r3, #0
 800d678:	e076      	b.n	800d768 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	7b1b      	ldrb	r3, [r3, #12]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d012      	beq.n	800d6a8 <pbuf_free+0x54>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	7b1b      	ldrb	r3, [r3, #12]
 800d686:	2b01      	cmp	r3, #1
 800d688:	d00e      	beq.n	800d6a8 <pbuf_free+0x54>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	7b1b      	ldrb	r3, [r3, #12]
 800d68e:	2b02      	cmp	r3, #2
 800d690:	d00a      	beq.n	800d6a8 <pbuf_free+0x54>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	7b1b      	ldrb	r3, [r3, #12]
 800d696:	2b03      	cmp	r3, #3
 800d698:	d006      	beq.n	800d6a8 <pbuf_free+0x54>
 800d69a:	4b35      	ldr	r3, [pc, #212]	; (800d770 <pbuf_free+0x11c>)
 800d69c:	f240 22de 	movw	r2, #734	; 0x2de
 800d6a0:	4936      	ldr	r1, [pc, #216]	; (800d77c <pbuf_free+0x128>)
 800d6a2:	4835      	ldr	r0, [pc, #212]	; (800d778 <pbuf_free+0x124>)
 800d6a4:	f006 fd16 	bl	80140d4 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d6ac:	e058      	b.n	800d760 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d6ae:	f006 fc55 	bl	8013f5c <sys_arch_protect>
 800d6b2:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	89db      	ldrh	r3, [r3, #14]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d106      	bne.n	800d6ca <pbuf_free+0x76>
 800d6bc:	4b2c      	ldr	r3, [pc, #176]	; (800d770 <pbuf_free+0x11c>)
 800d6be:	f240 22eb 	movw	r2, #747	; 0x2eb
 800d6c2:	492f      	ldr	r1, [pc, #188]	; (800d780 <pbuf_free+0x12c>)
 800d6c4:	482c      	ldr	r0, [pc, #176]	; (800d778 <pbuf_free+0x124>)
 800d6c6:	f006 fd05 	bl	80140d4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	89db      	ldrh	r3, [r3, #14]
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	b29a      	uxth	r2, r3
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	81da      	strh	r2, [r3, #14]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	89db      	ldrh	r3, [r3, #14]
 800d6da:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800d6dc:	69b8      	ldr	r0, [r7, #24]
 800d6de:	f006 fc4b 	bl	8013f78 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d6e2:	8afb      	ldrh	r3, [r7, #22]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d139      	bne.n	800d75c <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	7b1b      	ldrb	r3, [r3, #12]
 800d6f2:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	7b5b      	ldrb	r3, [r3, #13]
 800d6f8:	f003 0302 	and.w	r3, r3, #2
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d011      	beq.n	800d724 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	691b      	ldr	r3, [r3, #16]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d106      	bne.n	800d71a <pbuf_free+0xc6>
 800d70c:	4b18      	ldr	r3, [pc, #96]	; (800d770 <pbuf_free+0x11c>)
 800d70e:	f240 22f9 	movw	r2, #761	; 0x2f9
 800d712:	491c      	ldr	r1, [pc, #112]	; (800d784 <pbuf_free+0x130>)
 800d714:	4818      	ldr	r0, [pc, #96]	; (800d778 <pbuf_free+0x124>)
 800d716:	f006 fcdd 	bl	80140d4 <iprintf>
        pc->custom_free_function(p);
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	691b      	ldr	r3, [r3, #16]
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	4798      	blx	r3
 800d722:	e015      	b.n	800d750 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800d724:	89fb      	ldrh	r3, [r7, #14]
 800d726:	2b03      	cmp	r3, #3
 800d728:	d104      	bne.n	800d734 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800d72a:	6879      	ldr	r1, [r7, #4]
 800d72c:	200c      	movs	r0, #12
 800d72e:	f7ff f9dd 	bl	800caec <memp_free>
 800d732:	e00d      	b.n	800d750 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800d734:	89fb      	ldrh	r3, [r7, #14]
 800d736:	2b01      	cmp	r3, #1
 800d738:	d002      	beq.n	800d740 <pbuf_free+0xec>
 800d73a:	89fb      	ldrh	r3, [r7, #14]
 800d73c:	2b02      	cmp	r3, #2
 800d73e:	d104      	bne.n	800d74a <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800d740:	6879      	ldr	r1, [r7, #4]
 800d742:	200b      	movs	r0, #11
 800d744:	f7ff f9d2 	bl	800caec <memp_free>
 800d748:	e002      	b.n	800d750 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f7fe feb6 	bl	800c4bc <mem_free>
        }
      }
      count++;
 800d750:	7ffb      	ldrb	r3, [r7, #31]
 800d752:	3301      	adds	r3, #1
 800d754:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	607b      	str	r3, [r7, #4]
 800d75a:	e001      	b.n	800d760 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800d75c:	2300      	movs	r3, #0
 800d75e:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d1a3      	bne.n	800d6ae <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d766:	7ffb      	ldrb	r3, [r7, #31]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3720      	adds	r7, #32
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	08016b80 	.word	0x08016b80
 800d774:	08016db8 	.word	0x08016db8
 800d778:	08016bcc 	.word	0x08016bcc
 800d77c:	08016df4 	.word	0x08016df4
 800d780:	08016e0c 	.word	0x08016e0c
 800d784:	08016e24 	.word	0x08016e24

0800d788 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d790:	2300      	movs	r3, #0
 800d792:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d794:	e005      	b.n	800d7a2 <pbuf_clen+0x1a>
    ++len;
 800d796:	89fb      	ldrh	r3, [r7, #14]
 800d798:	3301      	adds	r3, #1
 800d79a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d1f6      	bne.n	800d796 <pbuf_clen+0xe>
  }
  return len;
 800d7a8:	89fb      	ldrh	r3, [r7, #14]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3714      	adds	r7, #20
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bc80      	pop	{r7}
 800d7b2:	4770      	bx	lr

0800d7b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d016      	beq.n	800d7f0 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800d7c2:	f006 fbcb 	bl	8013f5c <sys_arch_protect>
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	89db      	ldrh	r3, [r3, #14]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	b29a      	uxth	r2, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	81da      	strh	r2, [r3, #14]
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f006 fbcf 	bl	8013f78 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	89db      	ldrh	r3, [r3, #14]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d106      	bne.n	800d7f0 <pbuf_ref+0x3c>
 800d7e2:	4b05      	ldr	r3, [pc, #20]	; (800d7f8 <pbuf_ref+0x44>)
 800d7e4:	f240 3239 	movw	r2, #825	; 0x339
 800d7e8:	4904      	ldr	r1, [pc, #16]	; (800d7fc <pbuf_ref+0x48>)
 800d7ea:	4805      	ldr	r0, [pc, #20]	; (800d800 <pbuf_ref+0x4c>)
 800d7ec:	f006 fc72 	bl	80140d4 <iprintf>
  }
}
 800d7f0:	bf00      	nop
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	08016b80 	.word	0x08016b80
 800d7fc:	08016e48 	.word	0x08016e48
 800d800:	08016bcc 	.word	0x08016bcc

0800d804 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b084      	sub	sp, #16
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d002      	beq.n	800d81a <pbuf_cat+0x16>
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d107      	bne.n	800d82a <pbuf_cat+0x26>
 800d81a:	4b20      	ldr	r3, [pc, #128]	; (800d89c <pbuf_cat+0x98>)
 800d81c:	f240 324d 	movw	r2, #845	; 0x34d
 800d820:	491f      	ldr	r1, [pc, #124]	; (800d8a0 <pbuf_cat+0x9c>)
 800d822:	4820      	ldr	r0, [pc, #128]	; (800d8a4 <pbuf_cat+0xa0>)
 800d824:	f006 fc56 	bl	80140d4 <iprintf>
 800d828:	e034      	b.n	800d894 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	60fb      	str	r3, [r7, #12]
 800d82e:	e00a      	b.n	800d846 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	891a      	ldrh	r2, [r3, #8]
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	891b      	ldrh	r3, [r3, #8]
 800d838:	4413      	add	r3, r2
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	60fb      	str	r3, [r7, #12]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d1f0      	bne.n	800d830 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	891a      	ldrh	r2, [r3, #8]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	895b      	ldrh	r3, [r3, #10]
 800d856:	429a      	cmp	r2, r3
 800d858:	d006      	beq.n	800d868 <pbuf_cat+0x64>
 800d85a:	4b10      	ldr	r3, [pc, #64]	; (800d89c <pbuf_cat+0x98>)
 800d85c:	f240 3255 	movw	r2, #853	; 0x355
 800d860:	4911      	ldr	r1, [pc, #68]	; (800d8a8 <pbuf_cat+0xa4>)
 800d862:	4810      	ldr	r0, [pc, #64]	; (800d8a4 <pbuf_cat+0xa0>)
 800d864:	f006 fc36 	bl	80140d4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d006      	beq.n	800d87e <pbuf_cat+0x7a>
 800d870:	4b0a      	ldr	r3, [pc, #40]	; (800d89c <pbuf_cat+0x98>)
 800d872:	f240 3256 	movw	r2, #854	; 0x356
 800d876:	490d      	ldr	r1, [pc, #52]	; (800d8ac <pbuf_cat+0xa8>)
 800d878:	480a      	ldr	r0, [pc, #40]	; (800d8a4 <pbuf_cat+0xa0>)
 800d87a:	f006 fc2b 	bl	80140d4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	891a      	ldrh	r2, [r3, #8]
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	891b      	ldrh	r3, [r3, #8]
 800d886:	4413      	add	r3, r2
 800d888:	b29a      	uxth	r2, r3
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	683a      	ldr	r2, [r7, #0]
 800d892:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	08016b80 	.word	0x08016b80
 800d8a0:	08016e5c 	.word	0x08016e5c
 800d8a4:	08016bcc 	.word	0x08016bcc
 800d8a8:	08016e94 	.word	0x08016e94
 800d8ac:	08016ec4 	.word	0x08016ec4

0800d8b0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d8ba:	6839      	ldr	r1, [r7, #0]
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f7ff ffa1 	bl	800d804 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d8c2:	6838      	ldr	r0, [r7, #0]
 800d8c4:	f7ff ff76 	bl	800d7b4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d8c8:	bf00      	nop
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	81fb      	strh	r3, [r7, #14]
 800d8de:	2300      	movs	r3, #0
 800d8e0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d008      	beq.n	800d8fa <pbuf_copy+0x2a>
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d005      	beq.n	800d8fa <pbuf_copy+0x2a>
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	891a      	ldrh	r2, [r3, #8]
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	891b      	ldrh	r3, [r3, #8]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d209      	bcs.n	800d90e <pbuf_copy+0x3e>
 800d8fa:	4b54      	ldr	r3, [pc, #336]	; (800da4c <pbuf_copy+0x17c>)
 800d8fc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d900:	4953      	ldr	r1, [pc, #332]	; (800da50 <pbuf_copy+0x180>)
 800d902:	4854      	ldr	r0, [pc, #336]	; (800da54 <pbuf_copy+0x184>)
 800d904:	f006 fbe6 	bl	80140d4 <iprintf>
 800d908:	f06f 030f 	mvn.w	r3, #15
 800d90c:	e099      	b.n	800da42 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	895b      	ldrh	r3, [r3, #10]
 800d912:	461a      	mov	r2, r3
 800d914:	89fb      	ldrh	r3, [r7, #14]
 800d916:	1ad2      	subs	r2, r2, r3
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	895b      	ldrh	r3, [r3, #10]
 800d91c:	4619      	mov	r1, r3
 800d91e:	89bb      	ldrh	r3, [r7, #12]
 800d920:	1acb      	subs	r3, r1, r3
 800d922:	429a      	cmp	r2, r3
 800d924:	db05      	blt.n	800d932 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	895a      	ldrh	r2, [r3, #10]
 800d92a:	89bb      	ldrh	r3, [r7, #12]
 800d92c:	1ad3      	subs	r3, r2, r3
 800d92e:	817b      	strh	r3, [r7, #10]
 800d930:	e004      	b.n	800d93c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	895a      	ldrh	r2, [r3, #10]
 800d936:	89fb      	ldrh	r3, [r7, #14]
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	685a      	ldr	r2, [r3, #4]
 800d940:	89fb      	ldrh	r3, [r7, #14]
 800d942:	18d0      	adds	r0, r2, r3
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	685a      	ldr	r2, [r3, #4]
 800d948:	89bb      	ldrh	r3, [r7, #12]
 800d94a:	4413      	add	r3, r2
 800d94c:	897a      	ldrh	r2, [r7, #10]
 800d94e:	4619      	mov	r1, r3
 800d950:	f006 fb7f 	bl	8014052 <memcpy>
    offset_to += len;
 800d954:	89fa      	ldrh	r2, [r7, #14]
 800d956:	897b      	ldrh	r3, [r7, #10]
 800d958:	4413      	add	r3, r2
 800d95a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800d95c:	89ba      	ldrh	r2, [r7, #12]
 800d95e:	897b      	ldrh	r3, [r7, #10]
 800d960:	4413      	add	r3, r2
 800d962:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	895b      	ldrh	r3, [r3, #10]
 800d968:	89fa      	ldrh	r2, [r7, #14]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d906      	bls.n	800d97c <pbuf_copy+0xac>
 800d96e:	4b37      	ldr	r3, [pc, #220]	; (800da4c <pbuf_copy+0x17c>)
 800d970:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d974:	4938      	ldr	r1, [pc, #224]	; (800da58 <pbuf_copy+0x188>)
 800d976:	4837      	ldr	r0, [pc, #220]	; (800da54 <pbuf_copy+0x184>)
 800d978:	f006 fbac 	bl	80140d4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	895b      	ldrh	r3, [r3, #10]
 800d980:	89ba      	ldrh	r2, [r7, #12]
 800d982:	429a      	cmp	r2, r3
 800d984:	d906      	bls.n	800d994 <pbuf_copy+0xc4>
 800d986:	4b31      	ldr	r3, [pc, #196]	; (800da4c <pbuf_copy+0x17c>)
 800d988:	f240 32ce 	movw	r2, #974	; 0x3ce
 800d98c:	4933      	ldr	r1, [pc, #204]	; (800da5c <pbuf_copy+0x18c>)
 800d98e:	4831      	ldr	r0, [pc, #196]	; (800da54 <pbuf_copy+0x184>)
 800d990:	f006 fba0 	bl	80140d4 <iprintf>
    if (offset_from >= p_from->len) {
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	895b      	ldrh	r3, [r3, #10]
 800d998:	89ba      	ldrh	r2, [r7, #12]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d304      	bcc.n	800d9a8 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	895b      	ldrh	r3, [r3, #10]
 800d9ac:	89fa      	ldrh	r2, [r7, #14]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d114      	bne.n	800d9dc <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d10c      	bne.n	800d9dc <pbuf_copy+0x10c>
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d009      	beq.n	800d9dc <pbuf_copy+0x10c>
 800d9c8:	4b20      	ldr	r3, [pc, #128]	; (800da4c <pbuf_copy+0x17c>)
 800d9ca:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d9ce:	4924      	ldr	r1, [pc, #144]	; (800da60 <pbuf_copy+0x190>)
 800d9d0:	4820      	ldr	r0, [pc, #128]	; (800da54 <pbuf_copy+0x184>)
 800d9d2:	f006 fb7f 	bl	80140d4 <iprintf>
 800d9d6:	f06f 030f 	mvn.w	r3, #15
 800d9da:	e032      	b.n	800da42 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d013      	beq.n	800da0a <pbuf_copy+0x13a>
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	895a      	ldrh	r2, [r3, #10]
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	891b      	ldrh	r3, [r3, #8]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d10d      	bne.n	800da0a <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d009      	beq.n	800da0a <pbuf_copy+0x13a>
 800d9f6:	4b15      	ldr	r3, [pc, #84]	; (800da4c <pbuf_copy+0x17c>)
 800d9f8:	f240 32de 	movw	r2, #990	; 0x3de
 800d9fc:	4919      	ldr	r1, [pc, #100]	; (800da64 <pbuf_copy+0x194>)
 800d9fe:	4815      	ldr	r0, [pc, #84]	; (800da54 <pbuf_copy+0x184>)
 800da00:	f006 fb68 	bl	80140d4 <iprintf>
 800da04:	f06f 0305 	mvn.w	r3, #5
 800da08:	e01b      	b.n	800da42 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d013      	beq.n	800da38 <pbuf_copy+0x168>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	895a      	ldrh	r2, [r3, #10]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	891b      	ldrh	r3, [r3, #8]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d10d      	bne.n	800da38 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d009      	beq.n	800da38 <pbuf_copy+0x168>
 800da24:	4b09      	ldr	r3, [pc, #36]	; (800da4c <pbuf_copy+0x17c>)
 800da26:	f240 32e3 	movw	r2, #995	; 0x3e3
 800da2a:	490e      	ldr	r1, [pc, #56]	; (800da64 <pbuf_copy+0x194>)
 800da2c:	4809      	ldr	r0, [pc, #36]	; (800da54 <pbuf_copy+0x184>)
 800da2e:	f006 fb51 	bl	80140d4 <iprintf>
 800da32:	f06f 0305 	mvn.w	r3, #5
 800da36:	e004      	b.n	800da42 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f47f af67 	bne.w	800d90e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800da40:	2300      	movs	r3, #0
}
 800da42:	4618      	mov	r0, r3
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	08016b80 	.word	0x08016b80
 800da50:	08016f10 	.word	0x08016f10
 800da54:	08016bcc 	.word	0x08016bcc
 800da58:	08016f40 	.word	0x08016f40
 800da5c:	08016f58 	.word	0x08016f58
 800da60:	08016f74 	.word	0x08016f74
 800da64:	08016f84 	.word	0x08016f84

0800da68 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b088      	sub	sp, #32
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	4611      	mov	r1, r2
 800da74:	461a      	mov	r2, r3
 800da76:	460b      	mov	r3, r1
 800da78:	80fb      	strh	r3, [r7, #6]
 800da7a:	4613      	mov	r3, r2
 800da7c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800da7e:	2300      	movs	r3, #0
 800da80:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d108      	bne.n	800da9a <pbuf_copy_partial+0x32>
 800da88:	4b30      	ldr	r3, [pc, #192]	; (800db4c <pbuf_copy_partial+0xe4>)
 800da8a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800da8e:	4930      	ldr	r1, [pc, #192]	; (800db50 <pbuf_copy_partial+0xe8>)
 800da90:	4830      	ldr	r0, [pc, #192]	; (800db54 <pbuf_copy_partial+0xec>)
 800da92:	f006 fb1f 	bl	80140d4 <iprintf>
 800da96:	2300      	movs	r3, #0
 800da98:	e054      	b.n	800db44 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d108      	bne.n	800dab2 <pbuf_copy_partial+0x4a>
 800daa0:	4b2a      	ldr	r3, [pc, #168]	; (800db4c <pbuf_copy_partial+0xe4>)
 800daa2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800daa6:	492c      	ldr	r1, [pc, #176]	; (800db58 <pbuf_copy_partial+0xf0>)
 800daa8:	482a      	ldr	r0, [pc, #168]	; (800db54 <pbuf_copy_partial+0xec>)
 800daaa:	f006 fb13 	bl	80140d4 <iprintf>
 800daae:	2300      	movs	r3, #0
 800dab0:	e048      	b.n	800db44 <pbuf_copy_partial+0xdc>

  left = 0;
 800dab2:	2300      	movs	r3, #0
 800dab4:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d002      	beq.n	800dac2 <pbuf_copy_partial+0x5a>
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d101      	bne.n	800dac6 <pbuf_copy_partial+0x5e>
    return 0;
 800dac2:	2300      	movs	r3, #0
 800dac4:	e03e      	b.n	800db44 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	61fb      	str	r3, [r7, #28]
 800daca:	e034      	b.n	800db36 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800dacc:	88bb      	ldrh	r3, [r7, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d00a      	beq.n	800dae8 <pbuf_copy_partial+0x80>
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	895b      	ldrh	r3, [r3, #10]
 800dad6:	88ba      	ldrh	r2, [r7, #4]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d305      	bcc.n	800dae8 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	895b      	ldrh	r3, [r3, #10]
 800dae0:	88ba      	ldrh	r2, [r7, #4]
 800dae2:	1ad3      	subs	r3, r2, r3
 800dae4:	80bb      	strh	r3, [r7, #4]
 800dae6:	e023      	b.n	800db30 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800dae8:	69fb      	ldr	r3, [r7, #28]
 800daea:	895a      	ldrh	r2, [r3, #10]
 800daec:	88bb      	ldrh	r3, [r7, #4]
 800daee:	1ad3      	subs	r3, r2, r3
 800daf0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800daf2:	8b3a      	ldrh	r2, [r7, #24]
 800daf4:	88fb      	ldrh	r3, [r7, #6]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d901      	bls.n	800dafe <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800dafa:	88fb      	ldrh	r3, [r7, #6]
 800dafc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800dafe:	8b7b      	ldrh	r3, [r7, #26]
 800db00:	68ba      	ldr	r2, [r7, #8]
 800db02:	18d0      	adds	r0, r2, r3
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	685a      	ldr	r2, [r3, #4]
 800db08:	88bb      	ldrh	r3, [r7, #4]
 800db0a:	4413      	add	r3, r2
 800db0c:	8b3a      	ldrh	r2, [r7, #24]
 800db0e:	4619      	mov	r1, r3
 800db10:	f006 fa9f 	bl	8014052 <memcpy>
      copied_total += buf_copy_len;
 800db14:	8afa      	ldrh	r2, [r7, #22]
 800db16:	8b3b      	ldrh	r3, [r7, #24]
 800db18:	4413      	add	r3, r2
 800db1a:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800db1c:	8b7a      	ldrh	r2, [r7, #26]
 800db1e:	8b3b      	ldrh	r3, [r7, #24]
 800db20:	4413      	add	r3, r2
 800db22:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800db24:	88fa      	ldrh	r2, [r7, #6]
 800db26:	8b3b      	ldrh	r3, [r7, #24]
 800db28:	1ad3      	subs	r3, r2, r3
 800db2a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800db2c:	2300      	movs	r3, #0
 800db2e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	61fb      	str	r3, [r7, #28]
 800db36:	88fb      	ldrh	r3, [r7, #6]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d002      	beq.n	800db42 <pbuf_copy_partial+0xda>
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1c4      	bne.n	800dacc <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800db42:	8afb      	ldrh	r3, [r7, #22]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3720      	adds	r7, #32
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	08016b80 	.word	0x08016b80
 800db50:	08016fb0 	.word	0x08016fb0
 800db54:	08016bcc 	.word	0x08016bcc
 800db58:	08016fd0 	.word	0x08016fd0

0800db5c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800db5c:	b480      	push	{r7}
 800db5e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800db60:	bf00      	nop
 800db62:	46bd      	mov	sp, r7
 800db64:	bc80      	pop	{r7}
 800db66:	4770      	bx	lr

0800db68 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800db6c:	f000 ff72 	bl	800ea54 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800db70:	4b07      	ldr	r3, [pc, #28]	; (800db90 <tcp_tmr+0x28>)
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	3301      	adds	r3, #1
 800db76:	b2da      	uxtb	r2, r3
 800db78:	4b05      	ldr	r3, [pc, #20]	; (800db90 <tcp_tmr+0x28>)
 800db7a:	701a      	strb	r2, [r3, #0]
 800db7c:	4b04      	ldr	r3, [pc, #16]	; (800db90 <tcp_tmr+0x28>)
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	f003 0301 	and.w	r3, r3, #1
 800db84:	2b00      	cmp	r3, #0
 800db86:	d001      	beq.n	800db8c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800db88:	f000 fca4 	bl	800e4d4 <tcp_slowtmr>
  }
}
 800db8c:	bf00      	nop
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	200041ed 	.word	0x200041ed

0800db94 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	60fb      	str	r3, [r7, #12]
 800dba2:	e00a      	b.n	800dbba <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d102      	bne.n	800dbb4 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	60fb      	str	r3, [r7, #12]
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d1f1      	bne.n	800dba4 <tcp_remove_listener+0x10>
      }
   }
}
 800dbc0:	bf00      	nop
 800dbc2:	3714      	adds	r7, #20
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bc80      	pop	{r7}
 800dbc8:	4770      	bx	lr
	...

0800dbcc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d105      	bne.n	800dbe6 <tcp_listen_closed+0x1a>
 800dbda:	4b13      	ldr	r3, [pc, #76]	; (800dc28 <tcp_listen_closed+0x5c>)
 800dbdc:	22c0      	movs	r2, #192	; 0xc0
 800dbde:	4913      	ldr	r1, [pc, #76]	; (800dc2c <tcp_listen_closed+0x60>)
 800dbe0:	4813      	ldr	r0, [pc, #76]	; (800dc30 <tcp_listen_closed+0x64>)
 800dbe2:	f006 fa77 	bl	80140d4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	7d1b      	ldrb	r3, [r3, #20]
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d005      	beq.n	800dbfa <tcp_listen_closed+0x2e>
 800dbee:	4b0e      	ldr	r3, [pc, #56]	; (800dc28 <tcp_listen_closed+0x5c>)
 800dbf0:	22c1      	movs	r2, #193	; 0xc1
 800dbf2:	4910      	ldr	r1, [pc, #64]	; (800dc34 <tcp_listen_closed+0x68>)
 800dbf4:	480e      	ldr	r0, [pc, #56]	; (800dc30 <tcp_listen_closed+0x64>)
 800dbf6:	f006 fa6d 	bl	80140d4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	60fb      	str	r3, [r7, #12]
 800dbfe:	e00b      	b.n	800dc18 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800dc00:	4a0d      	ldr	r2, [pc, #52]	; (800dc38 <tcp_listen_closed+0x6c>)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	6879      	ldr	r1, [r7, #4]
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7ff ffc1 	bl	800db94 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	3301      	adds	r3, #1
 800dc16:	60fb      	str	r3, [r7, #12]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2b03      	cmp	r3, #3
 800dc1c:	d9f0      	bls.n	800dc00 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dc1e:	bf00      	nop
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	08017104 	.word	0x08017104
 800dc2c:	08017134 	.word	0x08017134
 800dc30:	08017140 	.word	0x08017140
 800dc34:	08017168 	.word	0x08017168
 800dc38:	08017fe8 	.word	0x08017fe8

0800dc3c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800dc3c:	b5b0      	push	{r4, r5, r7, lr}
 800dc3e:	b086      	sub	sp, #24
 800dc40:	af02      	add	r7, sp, #8
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	460b      	mov	r3, r1
 800dc46:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800dc48:	78fb      	ldrb	r3, [r7, #3]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d075      	beq.n	800dd3a <tcp_close_shutdown+0xfe>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	7d1b      	ldrb	r3, [r3, #20]
 800dc52:	2b04      	cmp	r3, #4
 800dc54:	d003      	beq.n	800dc5e <tcp_close_shutdown+0x22>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	7d1b      	ldrb	r3, [r3, #20]
 800dc5a:	2b07      	cmp	r3, #7
 800dc5c:	d16d      	bne.n	800dd3a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d104      	bne.n	800dc70 <tcp_close_shutdown+0x34>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc6a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dc6e:	d064      	beq.n	800dd3a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	7e9b      	ldrb	r3, [r3, #26]
 800dc74:	f003 0310 	and.w	r3, r3, #16
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d106      	bne.n	800dc8a <tcp_close_shutdown+0x4e>
 800dc7c:	4b59      	ldr	r3, [pc, #356]	; (800dde4 <tcp_close_shutdown+0x1a8>)
 800dc7e:	f240 120f 	movw	r2, #271	; 0x10f
 800dc82:	4959      	ldr	r1, [pc, #356]	; (800dde8 <tcp_close_shutdown+0x1ac>)
 800dc84:	4859      	ldr	r0, [pc, #356]	; (800ddec <tcp_close_shutdown+0x1b0>)
 800dc86:	f006 fa25 	bl	80140d4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800dc92:	687c      	ldr	r4, [r7, #4]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	1d1d      	adds	r5, r3, #4
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	8adb      	ldrh	r3, [r3, #22]
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	8b12      	ldrh	r2, [r2, #24]
 800dca0:	9201      	str	r2, [sp, #4]
 800dca2:	9300      	str	r3, [sp, #0]
 800dca4:	462b      	mov	r3, r5
 800dca6:	4622      	mov	r2, r4
 800dca8:	f004 fece 	bl	8012a48 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f001 fa03 	bl	800f0b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800dcb2:	4b4f      	ldr	r3, [pc, #316]	; (800ddf0 <tcp_close_shutdown+0x1b4>)
 800dcb4:	681a      	ldr	r2, [r3, #0]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d105      	bne.n	800dcc8 <tcp_close_shutdown+0x8c>
 800dcbc:	4b4c      	ldr	r3, [pc, #304]	; (800ddf0 <tcp_close_shutdown+0x1b4>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	4a4b      	ldr	r2, [pc, #300]	; (800ddf0 <tcp_close_shutdown+0x1b4>)
 800dcc4:	6013      	str	r3, [r2, #0]
 800dcc6:	e013      	b.n	800dcf0 <tcp_close_shutdown+0xb4>
 800dcc8:	4b49      	ldr	r3, [pc, #292]	; (800ddf0 <tcp_close_shutdown+0x1b4>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	60fb      	str	r3, [r7, #12]
 800dcce:	e00c      	b.n	800dcea <tcp_close_shutdown+0xae>
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	68da      	ldr	r2, [r3, #12]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d104      	bne.n	800dce4 <tcp_close_shutdown+0xa8>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	68da      	ldr	r2, [r3, #12]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	60da      	str	r2, [r3, #12]
 800dce2:	e005      	b.n	800dcf0 <tcp_close_shutdown+0xb4>
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	60fb      	str	r3, [r7, #12]
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d1ef      	bne.n	800dcd0 <tcp_close_shutdown+0x94>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	60da      	str	r2, [r3, #12]
 800dcf6:	4b3f      	ldr	r3, [pc, #252]	; (800ddf4 <tcp_close_shutdown+0x1b8>)
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	7d1b      	ldrb	r3, [r3, #20]
 800dd00:	2b04      	cmp	r3, #4
 800dd02:	d10c      	bne.n	800dd1e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	220a      	movs	r2, #10
 800dd08:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800dd0a:	4b3b      	ldr	r3, [pc, #236]	; (800ddf8 <tcp_close_shutdown+0x1bc>)
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	60da      	str	r2, [r3, #12]
 800dd12:	4a39      	ldr	r2, [pc, #228]	; (800ddf8 <tcp_close_shutdown+0x1bc>)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6013      	str	r3, [r2, #0]
 800dd18:	f005 f8e6 	bl	8012ee8 <tcp_timer_needed>
 800dd1c:	e00b      	b.n	800dd36 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800dd1e:	4b37      	ldr	r3, [pc, #220]	; (800ddfc <tcp_close_shutdown+0x1c0>)
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d102      	bne.n	800dd2e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800dd28:	f003 fd24 	bl	8011774 <tcp_trigger_input_pcb_close>
 800dd2c:	e003      	b.n	800dd36 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800dd2e:	6879      	ldr	r1, [r7, #4]
 800dd30:	2001      	movs	r0, #1
 800dd32:	f7fe fedb 	bl	800caec <memp_free>
        }
      }
      return ERR_OK;
 800dd36:	2300      	movs	r3, #0
 800dd38:	e050      	b.n	800dddc <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	7d1b      	ldrb	r3, [r3, #20]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d02e      	beq.n	800dda0 <tcp_close_shutdown+0x164>
 800dd42:	2b02      	cmp	r3, #2
 800dd44:	d038      	beq.n	800ddb8 <tcp_close_shutdown+0x17c>
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d142      	bne.n	800ddd0 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	8adb      	ldrh	r3, [r3, #22]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d021      	beq.n	800dd96 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd52:	4b2b      	ldr	r3, [pc, #172]	; (800de00 <tcp_close_shutdown+0x1c4>)
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d105      	bne.n	800dd68 <tcp_close_shutdown+0x12c>
 800dd5c:	4b28      	ldr	r3, [pc, #160]	; (800de00 <tcp_close_shutdown+0x1c4>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	4a27      	ldr	r2, [pc, #156]	; (800de00 <tcp_close_shutdown+0x1c4>)
 800dd64:	6013      	str	r3, [r2, #0]
 800dd66:	e013      	b.n	800dd90 <tcp_close_shutdown+0x154>
 800dd68:	4b25      	ldr	r3, [pc, #148]	; (800de00 <tcp_close_shutdown+0x1c4>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	60bb      	str	r3, [r7, #8]
 800dd6e:	e00c      	b.n	800dd8a <tcp_close_shutdown+0x14e>
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	68da      	ldr	r2, [r3, #12]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d104      	bne.n	800dd84 <tcp_close_shutdown+0x148>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	68da      	ldr	r2, [r3, #12]
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	60da      	str	r2, [r3, #12]
 800dd82:	e005      	b.n	800dd90 <tcp_close_shutdown+0x154>
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	60bb      	str	r3, [r7, #8]
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d1ef      	bne.n	800dd70 <tcp_close_shutdown+0x134>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2200      	movs	r2, #0
 800dd94:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800dd96:	6879      	ldr	r1, [r7, #4]
 800dd98:	2001      	movs	r0, #1
 800dd9a:	f7fe fea7 	bl	800caec <memp_free>
    break;
 800dd9e:	e01c      	b.n	800ddda <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f7ff ff13 	bl	800dbcc <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dda6:	6879      	ldr	r1, [r7, #4]
 800dda8:	4816      	ldr	r0, [pc, #88]	; (800de04 <tcp_close_shutdown+0x1c8>)
 800ddaa:	f001 f9c7 	bl	800f13c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ddae:	6879      	ldr	r1, [r7, #4]
 800ddb0:	2002      	movs	r0, #2
 800ddb2:	f7fe fe9b 	bl	800caec <memp_free>
    break;
 800ddb6:	e010      	b.n	800ddda <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800ddb8:	6879      	ldr	r1, [r7, #4]
 800ddba:	480d      	ldr	r0, [pc, #52]	; (800ddf0 <tcp_close_shutdown+0x1b4>)
 800ddbc:	f001 f9be 	bl	800f13c <tcp_pcb_remove>
 800ddc0:	4b0c      	ldr	r3, [pc, #48]	; (800ddf4 <tcp_close_shutdown+0x1b8>)
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800ddc6:	6879      	ldr	r1, [r7, #4]
 800ddc8:	2001      	movs	r0, #1
 800ddca:	f7fe fe8f 	bl	800caec <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800ddce:	e004      	b.n	800ddda <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f000 f819 	bl	800de08 <tcp_close_shutdown_fin>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	e000      	b.n	800dddc <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3710      	adds	r7, #16
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bdb0      	pop	{r4, r5, r7, pc}
 800dde4:	08017104 	.word	0x08017104
 800dde8:	08017180 	.word	0x08017180
 800ddec:	08017140 	.word	0x08017140
 800ddf0:	2000ab34 	.word	0x2000ab34
 800ddf4:	2000ab30 	.word	0x2000ab30
 800ddf8:	2000ab44 	.word	0x2000ab44
 800ddfc:	2000ab48 	.word	0x2000ab48
 800de00:	2000ab40 	.word	0x2000ab40
 800de04:	2000ab3c 	.word	0x2000ab3c

0800de08 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d106      	bne.n	800de24 <tcp_close_shutdown_fin+0x1c>
 800de16:	4b2c      	ldr	r3, [pc, #176]	; (800dec8 <tcp_close_shutdown_fin+0xc0>)
 800de18:	f240 124d 	movw	r2, #333	; 0x14d
 800de1c:	492b      	ldr	r1, [pc, #172]	; (800decc <tcp_close_shutdown_fin+0xc4>)
 800de1e:	482c      	ldr	r0, [pc, #176]	; (800ded0 <tcp_close_shutdown_fin+0xc8>)
 800de20:	f006 f958 	bl	80140d4 <iprintf>

  switch (pcb->state) {
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	7d1b      	ldrb	r3, [r3, #20]
 800de28:	2b04      	cmp	r3, #4
 800de2a:	d010      	beq.n	800de4e <tcp_close_shutdown_fin+0x46>
 800de2c:	2b07      	cmp	r3, #7
 800de2e:	d01b      	beq.n	800de68 <tcp_close_shutdown_fin+0x60>
 800de30:	2b03      	cmp	r3, #3
 800de32:	d126      	bne.n	800de82 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f003 fd29 	bl	801188c <tcp_send_fin>
 800de3a:	4603      	mov	r3, r0
 800de3c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800de3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d11f      	bne.n	800de86 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2205      	movs	r2, #5
 800de4a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800de4c:	e01b      	b.n	800de86 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f003 fd1c 	bl	801188c <tcp_send_fin>
 800de54:	4603      	mov	r3, r0
 800de56:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800de58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d114      	bne.n	800de8a <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2205      	movs	r2, #5
 800de64:	751a      	strb	r2, [r3, #20]
    }
    break;
 800de66:	e010      	b.n	800de8a <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f003 fd0f 	bl	801188c <tcp_send_fin>
 800de6e:	4603      	mov	r3, r0
 800de70:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800de72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d109      	bne.n	800de8e <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2209      	movs	r2, #9
 800de7e:	751a      	strb	r2, [r3, #20]
    }
    break;
 800de80:	e005      	b.n	800de8e <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800de82:	2300      	movs	r3, #0
 800de84:	e01c      	b.n	800dec0 <tcp_close_shutdown_fin+0xb8>
    break;
 800de86:	bf00      	nop
 800de88:	e002      	b.n	800de90 <tcp_close_shutdown_fin+0x88>
    break;
 800de8a:	bf00      	nop
 800de8c:	e000      	b.n	800de90 <tcp_close_shutdown_fin+0x88>
    break;
 800de8e:	bf00      	nop
  }

  if (err == ERR_OK) {
 800de90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d103      	bne.n	800dea0 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f004 fb4d 	bl	8012538 <tcp_output>
 800de9e:	e00d      	b.n	800debc <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800dea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dea8:	d108      	bne.n	800debc <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	7e9b      	ldrb	r3, [r3, #26]
 800deae:	f043 0308 	orr.w	r3, r3, #8
 800deb2:	b2da      	uxtb	r2, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800deb8:	2300      	movs	r3, #0
 800deba:	e001      	b.n	800dec0 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800debc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3710      	adds	r7, #16
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	08017104 	.word	0x08017104
 800decc:	08017134 	.word	0x08017134
 800ded0:	08017140 	.word	0x08017140

0800ded4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	7d1b      	ldrb	r3, [r3, #20]
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d006      	beq.n	800def2 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	7e9b      	ldrb	r3, [r3, #26]
 800dee8:	f043 0310 	orr.w	r3, r3, #16
 800deec:	b2da      	uxtb	r2, r3
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800def2:	2101      	movs	r1, #1
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7ff fea1 	bl	800dc3c <tcp_close_shutdown>
 800defa:	4603      	mov	r3, r0
}
 800defc:	4618      	mov	r0, r3
 800defe:	3708      	adds	r7, #8
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	7d1b      	ldrb	r3, [r3, #20]
 800df14:	2b01      	cmp	r3, #1
 800df16:	d102      	bne.n	800df1e <tcp_shutdown+0x1a>
    return ERR_CONN;
 800df18:	f06f 030a 	mvn.w	r3, #10
 800df1c:	e035      	b.n	800df8a <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d01b      	beq.n	800df5c <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	7e9b      	ldrb	r3, [r3, #26]
 800df28:	f043 0310 	orr.w	r3, r3, #16
 800df2c:	b2da      	uxtb	r2, r3
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d005      	beq.n	800df44 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800df38:	2101      	movs	r1, #1
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f7ff fe7e 	bl	800dc3c <tcp_close_shutdown>
 800df40:	4603      	mov	r3, r0
 800df42:	e022      	b.n	800df8a <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d007      	beq.n	800df5c <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df50:	4618      	mov	r0, r3
 800df52:	f7ff fb7f 	bl	800d654 <pbuf_free>
      pcb->refused_data = NULL;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2200      	movs	r2, #0
 800df5a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d012      	beq.n	800df88 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	7d1b      	ldrb	r3, [r3, #20]
 800df66:	2b03      	cmp	r3, #3
 800df68:	db0b      	blt.n	800df82 <tcp_shutdown+0x7e>
 800df6a:	2b04      	cmp	r3, #4
 800df6c:	dd01      	ble.n	800df72 <tcp_shutdown+0x6e>
 800df6e:	2b07      	cmp	r3, #7
 800df70:	d107      	bne.n	800df82 <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	b2db      	uxtb	r3, r3
 800df76:	4619      	mov	r1, r3
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f7ff fe5f 	bl	800dc3c <tcp_close_shutdown>
 800df7e:	4603      	mov	r3, r0
 800df80:	e003      	b.n	800df8a <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800df82:	f06f 030a 	mvn.w	r3, #10
 800df86:	e000      	b.n	800df8a <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 800df88:	2300      	movs	r3, #0
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
	...

0800df94 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b08c      	sub	sp, #48	; 0x30
 800df98:	af02      	add	r7, sp, #8
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	7d1b      	ldrb	r3, [r3, #20]
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d106      	bne.n	800dfb4 <tcp_abandon+0x20>
 800dfa6:	4b4d      	ldr	r3, [pc, #308]	; (800e0dc <tcp_abandon+0x148>)
 800dfa8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dfac:	494c      	ldr	r1, [pc, #304]	; (800e0e0 <tcp_abandon+0x14c>)
 800dfae:	484d      	ldr	r0, [pc, #308]	; (800e0e4 <tcp_abandon+0x150>)
 800dfb0:	f006 f890 	bl	80140d4 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	7d1b      	ldrb	r3, [r3, #20]
 800dfb8:	2b0a      	cmp	r3, #10
 800dfba:	d108      	bne.n	800dfce <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dfbc:	6879      	ldr	r1, [r7, #4]
 800dfbe:	484a      	ldr	r0, [pc, #296]	; (800e0e8 <tcp_abandon+0x154>)
 800dfc0:	f001 f8bc 	bl	800f13c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800dfc4:	6879      	ldr	r1, [r7, #4]
 800dfc6:	2001      	movs	r0, #1
 800dfc8:	f7fe fd90 	bl	800caec <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800dfcc:	e081      	b.n	800e0d2 <tcp_abandon+0x13e>
    int send_rst = 0;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfda:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe0:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfe8:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	691b      	ldr	r3, [r3, #16]
 800dfee:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	7d1b      	ldrb	r3, [r3, #20]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d126      	bne.n	800e046 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	8adb      	ldrh	r3, [r3, #22]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d02e      	beq.n	800e05e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e000:	4b3a      	ldr	r3, [pc, #232]	; (800e0ec <tcp_abandon+0x158>)
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	429a      	cmp	r2, r3
 800e008:	d105      	bne.n	800e016 <tcp_abandon+0x82>
 800e00a:	4b38      	ldr	r3, [pc, #224]	; (800e0ec <tcp_abandon+0x158>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	4a36      	ldr	r2, [pc, #216]	; (800e0ec <tcp_abandon+0x158>)
 800e012:	6013      	str	r3, [r2, #0]
 800e014:	e013      	b.n	800e03e <tcp_abandon+0xaa>
 800e016:	4b35      	ldr	r3, [pc, #212]	; (800e0ec <tcp_abandon+0x158>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	61fb      	str	r3, [r7, #28]
 800e01c:	e00c      	b.n	800e038 <tcp_abandon+0xa4>
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	68da      	ldr	r2, [r3, #12]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	429a      	cmp	r2, r3
 800e026:	d104      	bne.n	800e032 <tcp_abandon+0x9e>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	68da      	ldr	r2, [r3, #12]
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	60da      	str	r2, [r3, #12]
 800e030:	e005      	b.n	800e03e <tcp_abandon+0xaa>
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	68db      	ldr	r3, [r3, #12]
 800e036:	61fb      	str	r3, [r7, #28]
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d1ef      	bne.n	800e01e <tcp_abandon+0x8a>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2200      	movs	r2, #0
 800e042:	60da      	str	r2, [r3, #12]
 800e044:	e00b      	b.n	800e05e <tcp_abandon+0xca>
      send_rst = reset;
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	8adb      	ldrh	r3, [r3, #22]
 800e04e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e050:	6879      	ldr	r1, [r7, #4]
 800e052:	4827      	ldr	r0, [pc, #156]	; (800e0f0 <tcp_abandon+0x15c>)
 800e054:	f001 f872 	bl	800f13c <tcp_pcb_remove>
 800e058:	4b26      	ldr	r3, [pc, #152]	; (800e0f4 <tcp_abandon+0x160>)
 800e05a:	2201      	movs	r2, #1
 800e05c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e062:	2b00      	cmp	r3, #0
 800e064:	d004      	beq.n	800e070 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e06a:	4618      	mov	r0, r3
 800e06c:	f000 fdbf 	bl	800ebee <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e074:	2b00      	cmp	r3, #0
 800e076:	d004      	beq.n	800e082 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e07c:	4618      	mov	r0, r3
 800e07e:	f000 fdb6 	bl	800ebee <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e086:	2b00      	cmp	r3, #0
 800e088:	d004      	beq.n	800e094 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e08e:	4618      	mov	r0, r3
 800e090:	f000 fdad 	bl	800ebee <tcp_segs_free>
    if (send_rst) {
 800e094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e096:	2b00      	cmp	r3, #0
 800e098:	d00c      	beq.n	800e0b4 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	1d19      	adds	r1, r3, #4
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	8b1b      	ldrh	r3, [r3, #24]
 800e0a4:	9301      	str	r3, [sp, #4]
 800e0a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0a8:	9300      	str	r3, [sp, #0]
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	6979      	ldr	r1, [r7, #20]
 800e0ae:	69b8      	ldr	r0, [r7, #24]
 800e0b0:	f004 fcca 	bl	8012a48 <tcp_rst>
    last_state = pcb->state;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	7d1b      	ldrb	r3, [r3, #20]
 800e0b8:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800e0ba:	6879      	ldr	r1, [r7, #4]
 800e0bc:	2001      	movs	r0, #1
 800e0be:	f7fe fd15 	bl	800caec <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d004      	beq.n	800e0d2 <tcp_abandon+0x13e>
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	f06f 010c 	mvn.w	r1, #12
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	4798      	blx	r3
}
 800e0d2:	bf00      	nop
 800e0d4:	3728      	adds	r7, #40	; 0x28
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	08017104 	.word	0x08017104
 800e0e0:	0801719c 	.word	0x0801719c
 800e0e4:	08017140 	.word	0x08017140
 800e0e8:	2000ab44 	.word	0x2000ab44
 800e0ec:	2000ab40 	.word	0x2000ab40
 800e0f0:	2000ab34 	.word	0x2000ab34
 800e0f4:	2000ab30 	.word	0x2000ab30

0800e0f8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e100:	2101      	movs	r1, #1
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f7ff ff46 	bl	800df94 <tcp_abandon>
}
 800e108:	bf00      	nop
 800e10a:	3708      	adds	r7, #8
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e120:	4413      	add	r3, r2
 800e122:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e12c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e130:	d802      	bhi.n	800e138 <tcp_update_rcv_ann_wnd+0x28>
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e136:	e001      	b.n	800e13c <tcp_update_rcv_ann_wnd+0x2c>
 800e138:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e13c:	4413      	add	r3, r2
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	2b00      	cmp	r3, #0
 800e144:	db08      	blt.n	800e158 <tcp_update_rcv_ann_wnd+0x48>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e152:	68fa      	ldr	r2, [r7, #12]
 800e154:	1ad3      	subs	r3, r2, r3
 800e156:	e020      	b.n	800e19a <tcp_update_rcv_ann_wnd+0x8a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	2b00      	cmp	r3, #0
 800e164:	dd03      	ble.n	800e16e <tcp_update_rcv_ann_wnd+0x5e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2200      	movs	r2, #0
 800e16a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e16c:	e014      	b.n	800e198 <tcp_update_rcv_ann_wnd+0x88>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e176:	1ad3      	subs	r3, r2, r3
 800e178:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e180:	d306      	bcc.n	800e190 <tcp_update_rcv_ann_wnd+0x80>
 800e182:	4b08      	ldr	r3, [pc, #32]	; (800e1a4 <tcp_update_rcv_ann_wnd+0x94>)
 800e184:	f44f 7242 	mov.w	r2, #776	; 0x308
 800e188:	4907      	ldr	r1, [pc, #28]	; (800e1a8 <tcp_update_rcv_ann_wnd+0x98>)
 800e18a:	4808      	ldr	r0, [pc, #32]	; (800e1ac <tcp_update_rcv_ann_wnd+0x9c>)
 800e18c:	f005 ffa2 	bl	80140d4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	b29a      	uxth	r2, r3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e198:	2300      	movs	r3, #0
  }
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3710      	adds	r7, #16
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	08017104 	.word	0x08017104
 800e1a8:	0801721c 	.word	0x0801721c
 800e1ac:	08017140 	.word	0x08017140

0800e1b0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	7d1b      	ldrb	r3, [r3, #20]
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d106      	bne.n	800e1d2 <tcp_recved+0x22>
 800e1c4:	4b23      	ldr	r3, [pc, #140]	; (800e254 <tcp_recved+0xa4>)
 800e1c6:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e1ca:	4923      	ldr	r1, [pc, #140]	; (800e258 <tcp_recved+0xa8>)
 800e1cc:	4823      	ldr	r0, [pc, #140]	; (800e25c <tcp_recved+0xac>)
 800e1ce:	f005 ff81 	bl	80140d4 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e1d6:	887b      	ldrh	r3, [r7, #2]
 800e1d8:	4413      	add	r3, r2
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1e4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e1e8:	d904      	bls.n	800e1f4 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e1f0:	851a      	strh	r2, [r3, #40]	; 0x28
 800e1f2:	e017      	b.n	800e224 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d113      	bne.n	800e224 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	7d1b      	ldrb	r3, [r3, #20]
 800e200:	2b07      	cmp	r3, #7
 800e202:	d003      	beq.n	800e20c <tcp_recved+0x5c>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	7d1b      	ldrb	r3, [r3, #20]
 800e208:	2b09      	cmp	r3, #9
 800e20a:	d104      	bne.n	800e216 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e212:	851a      	strh	r2, [r3, #40]	; 0x28
 800e214:	e006      	b.n	800e224 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800e216:	4b0f      	ldr	r3, [pc, #60]	; (800e254 <tcp_recved+0xa4>)
 800e218:	f240 322d 	movw	r2, #813	; 0x32d
 800e21c:	4910      	ldr	r1, [pc, #64]	; (800e260 <tcp_recved+0xb0>)
 800e21e:	480f      	ldr	r0, [pc, #60]	; (800e25c <tcp_recved+0xac>)
 800e220:	f005 ff58 	bl	80140d4 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f7ff ff73 	bl	800e110 <tcp_update_rcv_ann_wnd>
 800e22a:	4603      	mov	r3, r0
 800e22c:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e234:	db09      	blt.n	800e24a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	7e9b      	ldrb	r3, [r3, #26]
 800e23a:	f043 0302 	orr.w	r3, r3, #2
 800e23e:	b2da      	uxtb	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f004 f977 	bl	8012538 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e24a:	bf00      	nop
 800e24c:	3710      	adds	r7, #16
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	08017104 	.word	0x08017104
 800e258:	08017238 	.word	0x08017238
 800e25c:	08017140 	.word	0x08017140
 800e260:	08017260 	.word	0x08017260

0800e264 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e264:	b480      	push	{r7}
 800e266:	b083      	sub	sp, #12
 800e268:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e26a:	2300      	movs	r3, #0
 800e26c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800e26e:	4b1d      	ldr	r3, [pc, #116]	; (800e2e4 <tcp_new_port+0x80>)
 800e270:	881b      	ldrh	r3, [r3, #0]
 800e272:	1c5a      	adds	r2, r3, #1
 800e274:	b291      	uxth	r1, r2
 800e276:	4a1b      	ldr	r2, [pc, #108]	; (800e2e4 <tcp_new_port+0x80>)
 800e278:	8011      	strh	r1, [r2, #0]
 800e27a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e27e:	4293      	cmp	r3, r2
 800e280:	d103      	bne.n	800e28a <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e282:	4b18      	ldr	r3, [pc, #96]	; (800e2e4 <tcp_new_port+0x80>)
 800e284:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e288:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e28a:	2300      	movs	r3, #0
 800e28c:	71fb      	strb	r3, [r7, #7]
 800e28e:	e01e      	b.n	800e2ce <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e290:	79fb      	ldrb	r3, [r7, #7]
 800e292:	4a15      	ldr	r2, [pc, #84]	; (800e2e8 <tcp_new_port+0x84>)
 800e294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	603b      	str	r3, [r7, #0]
 800e29c:	e011      	b.n	800e2c2 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	8ada      	ldrh	r2, [r3, #22]
 800e2a2:	4b10      	ldr	r3, [pc, #64]	; (800e2e4 <tcp_new_port+0x80>)
 800e2a4:	881b      	ldrh	r3, [r3, #0]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d108      	bne.n	800e2bc <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e2aa:	88bb      	ldrh	r3, [r7, #4]
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	80bb      	strh	r3, [r7, #4]
 800e2b0:	88bb      	ldrh	r3, [r7, #4]
 800e2b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2b6:	d3da      	bcc.n	800e26e <tcp_new_port+0xa>
          return 0;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	e00d      	b.n	800e2d8 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	603b      	str	r3, [r7, #0]
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d1ea      	bne.n	800e29e <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e2c8:	79fb      	ldrb	r3, [r7, #7]
 800e2ca:	3301      	adds	r3, #1
 800e2cc:	71fb      	strb	r3, [r7, #7]
 800e2ce:	79fb      	ldrb	r3, [r7, #7]
 800e2d0:	2b03      	cmp	r3, #3
 800e2d2:	d9dd      	bls.n	800e290 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e2d4:	4b03      	ldr	r3, [pc, #12]	; (800e2e4 <tcp_new_port+0x80>)
 800e2d6:	881b      	ldrh	r3, [r3, #0]
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bc80      	pop	{r7}
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop
 800e2e4:	20000010 	.word	0x20000010
 800e2e8:	08017fe8 	.word	0x08017fe8

0800e2ec <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b08a      	sub	sp, #40	; 0x28
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	603b      	str	r3, [r7, #0]
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	80fb      	strh	r3, [r7, #6]
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d002      	beq.n	800e308 <tcp_connect+0x1c>
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d102      	bne.n	800e30e <tcp_connect+0x22>
    return ERR_VAL;
 800e308:	f06f 0305 	mvn.w	r3, #5
 800e30c:	e0d1      	b.n	800e4b2 <tcp_connect+0x1c6>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	7d1b      	ldrb	r3, [r3, #20]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d009      	beq.n	800e32a <tcp_connect+0x3e>
 800e316:	4b69      	ldr	r3, [pc, #420]	; (800e4bc <tcp_connect+0x1d0>)
 800e318:	f44f 725e 	mov.w	r2, #888	; 0x378
 800e31c:	4968      	ldr	r1, [pc, #416]	; (800e4c0 <tcp_connect+0x1d4>)
 800e31e:	4869      	ldr	r0, [pc, #420]	; (800e4c4 <tcp_connect+0x1d8>)
 800e320:	f005 fed8 	bl	80140d4 <iprintf>
 800e324:	f06f 0309 	mvn.w	r3, #9
 800e328:	e0c3      	b.n	800e4b2 <tcp_connect+0x1c6>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d002      	beq.n	800e336 <tcp_connect+0x4a>
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	e000      	b.n	800e338 <tcp_connect+0x4c>
 800e336:	2300      	movs	r3, #0
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	88fa      	ldrh	r2, [r7, #6]
 800e340:	831a      	strh	r2, [r3, #24]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d003      	beq.n	800e350 <tcp_connect+0x64>
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d11a      	bne.n	800e386 <tcp_connect+0x9a>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	3304      	adds	r3, #4
 800e354:	4618      	mov	r0, r3
 800e356:	f7fc fdf7 	bl	800af48 <ip4_route>
 800e35a:	6238      	str	r0, [r7, #32]
 800e35c:	6a3b      	ldr	r3, [r7, #32]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d002      	beq.n	800e368 <tcp_connect+0x7c>
 800e362:	6a3b      	ldr	r3, [r7, #32]
 800e364:	3304      	adds	r3, #4
 800e366:	e000      	b.n	800e36a <tcp_connect+0x7e>
 800e368:	2300      	movs	r3, #0
 800e36a:	61fb      	str	r3, [r7, #28]
    if ((netif == NULL) || (local_ip == NULL)) {
 800e36c:	6a3b      	ldr	r3, [r7, #32]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d002      	beq.n	800e378 <tcp_connect+0x8c>
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d102      	bne.n	800e37e <tcp_connect+0x92>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 800e378:	f06f 0303 	mvn.w	r3, #3
 800e37c:	e099      	b.n	800e4b2 <tcp_connect+0x1c6>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e37e:	69fb      	ldr	r3, [r7, #28]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	601a      	str	r2, [r3, #0]
  }

  old_local_port = pcb->local_port;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	8adb      	ldrh	r3, [r3, #22]
 800e38a:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	8adb      	ldrh	r3, [r3, #22]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d10c      	bne.n	800e3ae <tcp_connect+0xc2>
    pcb->local_port = tcp_new_port();
 800e394:	f7ff ff66 	bl	800e264 <tcp_new_port>
 800e398:	4603      	mov	r3, r0
 800e39a:	461a      	mov	r2, r3
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	8adb      	ldrh	r3, [r3, #22]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d102      	bne.n	800e3ae <tcp_connect+0xc2>
      return ERR_BUF;
 800e3a8:	f06f 0301 	mvn.w	r3, #1
 800e3ac:	e081      	b.n	800e4b2 <tcp_connect+0x1c6>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e3ae:	68f8      	ldr	r0, [r7, #12]
 800e3b0:	f000 ff40 	bl	800f234 <tcp_next_iss>
 800e3b4:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	697a      	ldr	r2, [r7, #20]
 800e3c0:	64da      	str	r2, [r3, #76]	; 0x4c
  pcb->lastack = iss - 1;
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	1e5a      	subs	r2, r3, #1
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	1e5a      	subs	r2, r3, #1
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	655a      	str	r2, [r3, #84]	; 0x54
  pcb->snd_lbb = iss - 1;
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	1e5a      	subs	r2, r3, #1
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	659a      	str	r2, [r3, #88]	; 0x58
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e3e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e3f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e402:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	3304      	adds	r3, #4
 800e40c:	4619      	mov	r1, r3
 800e40e:	4610      	mov	r0, r2
 800e410:	f000 ff26 	bl	800f260 <tcp_eff_send_mss_impl>
 800e414:	4603      	mov	r3, r0
 800e416:	461a      	mov	r2, r3
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2201      	movs	r2, #1
 800e420:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	683a      	ldr	r2, [r7, #0]
 800e428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e42c:	2102      	movs	r1, #2
 800e42e:	68f8      	ldr	r0, [r7, #12]
 800e430:	f003 ff28 	bl	8012284 <tcp_enqueue_flags>
 800e434:	4603      	mov	r3, r0
 800e436:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e438:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d136      	bne.n	800e4ae <tcp_connect+0x1c2>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	2202      	movs	r2, #2
 800e444:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e446:	8b7b      	ldrh	r3, [r7, #26]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d021      	beq.n	800e490 <tcp_connect+0x1a4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e44c:	4b1e      	ldr	r3, [pc, #120]	; (800e4c8 <tcp_connect+0x1dc>)
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	429a      	cmp	r2, r3
 800e454:	d105      	bne.n	800e462 <tcp_connect+0x176>
 800e456:	4b1c      	ldr	r3, [pc, #112]	; (800e4c8 <tcp_connect+0x1dc>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	4a1a      	ldr	r2, [pc, #104]	; (800e4c8 <tcp_connect+0x1dc>)
 800e45e:	6013      	str	r3, [r2, #0]
 800e460:	e013      	b.n	800e48a <tcp_connect+0x19e>
 800e462:	4b19      	ldr	r3, [pc, #100]	; (800e4c8 <tcp_connect+0x1dc>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	627b      	str	r3, [r7, #36]	; 0x24
 800e468:	e00c      	b.n	800e484 <tcp_connect+0x198>
 800e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46c:	68da      	ldr	r2, [r3, #12]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	429a      	cmp	r2, r3
 800e472:	d104      	bne.n	800e47e <tcp_connect+0x192>
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	68da      	ldr	r2, [r3, #12]
 800e478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47a:	60da      	str	r2, [r3, #12]
 800e47c:	e005      	b.n	800e48a <tcp_connect+0x19e>
 800e47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e480:	68db      	ldr	r3, [r3, #12]
 800e482:	627b      	str	r3, [r7, #36]	; 0x24
 800e484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e486:	2b00      	cmp	r3, #0
 800e488:	d1ef      	bne.n	800e46a <tcp_connect+0x17e>
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2200      	movs	r2, #0
 800e48e:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e490:	4b0e      	ldr	r3, [pc, #56]	; (800e4cc <tcp_connect+0x1e0>)
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	60da      	str	r2, [r3, #12]
 800e498:	4a0c      	ldr	r2, [pc, #48]	; (800e4cc <tcp_connect+0x1e0>)
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	6013      	str	r3, [r2, #0]
 800e49e:	f004 fd23 	bl	8012ee8 <tcp_timer_needed>
 800e4a2:	4b0b      	ldr	r3, [pc, #44]	; (800e4d0 <tcp_connect+0x1e4>)
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e4a8:	68f8      	ldr	r0, [r7, #12]
 800e4aa:	f004 f845 	bl	8012538 <tcp_output>
  }
  return ret;
 800e4ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3728      	adds	r7, #40	; 0x28
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	08017104 	.word	0x08017104
 800e4c0:	08017284 	.word	0x08017284
 800e4c4:	08017140 	.word	0x08017140
 800e4c8:	2000ab40 	.word	0x2000ab40
 800e4cc:	2000ab34 	.word	0x2000ab34
 800e4d0:	2000ab30 	.word	0x2000ab30

0800e4d4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e4d4:	b5b0      	push	{r4, r5, r7, lr}
 800e4d6:	b08c      	sub	sp, #48	; 0x30
 800e4d8:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800e4de:	4b97      	ldr	r3, [pc, #604]	; (800e73c <tcp_slowtmr+0x268>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	4a95      	ldr	r2, [pc, #596]	; (800e73c <tcp_slowtmr+0x268>)
 800e4e6:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e4e8:	4b95      	ldr	r3, [pc, #596]	; (800e740 <tcp_slowtmr+0x26c>)
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	b2da      	uxtb	r2, r3
 800e4f0:	4b93      	ldr	r3, [pc, #588]	; (800e740 <tcp_slowtmr+0x26c>)
 800e4f2:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800e4f8:	4b92      	ldr	r3, [pc, #584]	; (800e744 <tcp_slowtmr+0x270>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e4fe:	e227      	b.n	800e950 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e502:	7d1b      	ldrb	r3, [r3, #20]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d106      	bne.n	800e516 <tcp_slowtmr+0x42>
 800e508:	4b8f      	ldr	r3, [pc, #572]	; (800e748 <tcp_slowtmr+0x274>)
 800e50a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800e50e:	498f      	ldr	r1, [pc, #572]	; (800e74c <tcp_slowtmr+0x278>)
 800e510:	488f      	ldr	r0, [pc, #572]	; (800e750 <tcp_slowtmr+0x27c>)
 800e512:	f005 fddf 	bl	80140d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e518:	7d1b      	ldrb	r3, [r3, #20]
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d106      	bne.n	800e52c <tcp_slowtmr+0x58>
 800e51e:	4b8a      	ldr	r3, [pc, #552]	; (800e748 <tcp_slowtmr+0x274>)
 800e520:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e524:	498b      	ldr	r1, [pc, #556]	; (800e754 <tcp_slowtmr+0x280>)
 800e526:	488a      	ldr	r0, [pc, #552]	; (800e750 <tcp_slowtmr+0x27c>)
 800e528:	f005 fdd4 	bl	80140d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52e:	7d1b      	ldrb	r3, [r3, #20]
 800e530:	2b0a      	cmp	r3, #10
 800e532:	d106      	bne.n	800e542 <tcp_slowtmr+0x6e>
 800e534:	4b84      	ldr	r3, [pc, #528]	; (800e748 <tcp_slowtmr+0x274>)
 800e536:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800e53a:	4987      	ldr	r1, [pc, #540]	; (800e758 <tcp_slowtmr+0x284>)
 800e53c:	4884      	ldr	r0, [pc, #528]	; (800e750 <tcp_slowtmr+0x27c>)
 800e53e:	f005 fdc9 	bl	80140d4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e544:	7f5a      	ldrb	r2, [r3, #29]
 800e546:	4b7e      	ldr	r3, [pc, #504]	; (800e740 <tcp_slowtmr+0x26c>)
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d103      	bne.n	800e556 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800e54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e550:	68db      	ldr	r3, [r3, #12]
 800e552:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800e554:	e1fc      	b.n	800e950 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e556:	4b7a      	ldr	r3, [pc, #488]	; (800e740 <tcp_slowtmr+0x26c>)
 800e558:	781a      	ldrb	r2, [r3, #0]
 800e55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800e55e:	2300      	movs	r3, #0
 800e560:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800e562:	2300      	movs	r3, #0
 800e564:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e568:	7d1b      	ldrb	r3, [r3, #20]
 800e56a:	2b02      	cmp	r3, #2
 800e56c:	d108      	bne.n	800e580 <tcp_slowtmr+0xac>
 800e56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e570:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e574:	2b05      	cmp	r3, #5
 800e576:	d903      	bls.n	800e580 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800e578:	7ffb      	ldrb	r3, [r7, #31]
 800e57a:	3301      	adds	r3, #1
 800e57c:	77fb      	strb	r3, [r7, #31]
 800e57e:	e0a2      	b.n	800e6c6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800e580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e586:	2b0b      	cmp	r3, #11
 800e588:	d903      	bls.n	800e592 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e58a:	7ffb      	ldrb	r3, [r7, #31]
 800e58c:	3301      	adds	r3, #1
 800e58e:	77fb      	strb	r3, [r7, #31]
 800e590:	e099      	b.n	800e6c6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e594:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d032      	beq.n	800e602 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800e59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e5a2:	3b01      	subs	r3, #1
 800e5a4:	4a6d      	ldr	r2, [pc, #436]	; (800e75c <tcp_slowtmr+0x288>)
 800e5a6:	5cd3      	ldrb	r3, [r2, r3]
 800e5a8:	773b      	strb	r3, [r7, #28]
        if (pcb->persist_cnt < backoff_cnt) {
 800e5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ac:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e5b0:	7f3a      	ldrb	r2, [r7, #28]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d907      	bls.n	800e5c6 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800e5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e5bc:	3301      	adds	r3, #1
 800e5be:	b2da      	uxtb	r2, r3
 800e5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800e5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e5cc:	7f3a      	ldrb	r2, [r7, #28]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d879      	bhi.n	800e6c6 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800e5d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5d4:	f004 fbc8 	bl	8012d68 <tcp_zero_window_probe>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d173      	bne.n	800e6c6 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800e5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e5ec:	2b06      	cmp	r3, #6
 800e5ee:	d86a      	bhi.n	800e6c6 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800e600:	e061      	b.n	800e6c6 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800e602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e604:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e608:	2b00      	cmp	r3, #0
 800e60a:	db08      	blt.n	800e61e <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800e60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e612:	b29b      	uxth	r3, r3
 800e614:	3301      	adds	r3, #1
 800e616:	b29b      	uxth	r3, r3
 800e618:	b21a      	sxth	r2, r3
 800e61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61c:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800e61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e622:	2b00      	cmp	r3, #0
 800e624:	d04f      	beq.n	800e6c6 <tcp_slowtmr+0x1f2>
 800e626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e628:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e632:	429a      	cmp	r2, r3
 800e634:	db47      	blt.n	800e6c6 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800e636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e638:	7d1b      	ldrb	r3, [r3, #20]
 800e63a:	2b02      	cmp	r3, #2
 800e63c:	d018      	beq.n	800e670 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800e63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e640:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e644:	2b0c      	cmp	r3, #12
 800e646:	bf28      	it	cs
 800e648:	230c      	movcs	r3, #12
 800e64a:	76fb      	strb	r3, [r7, #27]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e652:	10db      	asrs	r3, r3, #3
 800e654:	b21b      	sxth	r3, r3
 800e656:	461a      	mov	r2, r3
 800e658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e65e:	4413      	add	r3, r2
 800e660:	7efa      	ldrb	r2, [r7, #27]
 800e662:	493f      	ldr	r1, [pc, #252]	; (800e760 <tcp_slowtmr+0x28c>)
 800e664:	5c8a      	ldrb	r2, [r1, r2]
 800e666:	4093      	lsls	r3, r2
 800e668:	b21a      	sxth	r2, r3
 800e66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e672:	2200      	movs	r2, #0
 800e674:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e678:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e682:	4293      	cmp	r3, r2
 800e684:	bf28      	it	cs
 800e686:	4613      	movcs	r3, r2
 800e688:	833b      	strh	r3, [r7, #24]
          pcb->ssthresh = eff_wnd >> 1;
 800e68a:	8b3b      	ldrh	r3, [r7, #24]
 800e68c:	085b      	lsrs	r3, r3, #1
 800e68e:	b29a      	uxth	r2, r3
 800e690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e692:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e698:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6a0:	005b      	lsls	r3, r3, #1
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d206      	bcs.n	800e6b6 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800e6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6ac:	005b      	lsls	r3, r3, #1
 800e6ae:	b29a      	uxth	r2, r3
 800e6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800e6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800e6c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6c2:	f004 fa37 	bl	8012b34 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c8:	7d1b      	ldrb	r3, [r3, #20]
 800e6ca:	2b06      	cmp	r3, #6
 800e6cc:	d10f      	bne.n	800e6ee <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d0:	7e9b      	ldrb	r3, [r3, #26]
 800e6d2:	f003 0310 	and.w	r3, r3, #16
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d009      	beq.n	800e6ee <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6da:	4b18      	ldr	r3, [pc, #96]	; (800e73c <tcp_slowtmr+0x268>)
 800e6dc:	681a      	ldr	r2, [r3, #0]
 800e6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e0:	6a1b      	ldr	r3, [r3, #32]
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	2b28      	cmp	r3, #40	; 0x28
 800e6e6:	d902      	bls.n	800e6ee <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e6e8:	7ffb      	ldrb	r3, [r7, #31]
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f0:	7a1b      	ldrb	r3, [r3, #8]
 800e6f2:	f003 0308 	and.w	r3, r3, #8
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d05d      	beq.n	800e7b6 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800e6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fc:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e6fe:	2b04      	cmp	r3, #4
 800e700:	d003      	beq.n	800e70a <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800e702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e704:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800e706:	2b07      	cmp	r3, #7
 800e708:	d155      	bne.n	800e7b6 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e70a:	4b0c      	ldr	r3, [pc, #48]	; (800e73c <tcp_slowtmr+0x268>)
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e710:	6a1b      	ldr	r3, [r3, #32]
 800e712:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800e714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e71a:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e71e:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e722:	4910      	ldr	r1, [pc, #64]	; (800e764 <tcp_slowtmr+0x290>)
 800e724:	fba1 1303 	umull	r1, r3, r1, r3
 800e728:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d91c      	bls.n	800e768 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e72e:	7ffb      	ldrb	r3, [r7, #31]
 800e730:	3301      	adds	r3, #1
 800e732:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800e734:	7fbb      	ldrb	r3, [r7, #30]
 800e736:	3301      	adds	r3, #1
 800e738:	77bb      	strb	r3, [r7, #30]
 800e73a:	e03c      	b.n	800e7b6 <tcp_slowtmr+0x2e2>
 800e73c:	2000ab38 	.word	0x2000ab38
 800e740:	200041ee 	.word	0x200041ee
 800e744:	2000ab34 	.word	0x2000ab34
 800e748:	08017104 	.word	0x08017104
 800e74c:	080172b4 	.word	0x080172b4
 800e750:	08017140 	.word	0x08017140
 800e754:	080172e0 	.word	0x080172e0
 800e758:	0801730c 	.word	0x0801730c
 800e75c:	08017fe0 	.word	0x08017fe0
 800e760:	08017fd0 	.word	0x08017fd0
 800e764:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e768:	4b97      	ldr	r3, [pc, #604]	; (800e9c8 <tcp_slowtmr+0x4f4>)
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76e:	6a1b      	ldr	r3, [r3, #32]
 800e770:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e774:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800e778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800e77e:	4618      	mov	r0, r3
 800e780:	4b92      	ldr	r3, [pc, #584]	; (800e9cc <tcp_slowtmr+0x4f8>)
 800e782:	fb03 f300 	mul.w	r3, r3, r0
 800e786:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800e788:	4991      	ldr	r1, [pc, #580]	; (800e9d0 <tcp_slowtmr+0x4fc>)
 800e78a:	fba1 1303 	umull	r1, r3, r1, r3
 800e78e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e790:	429a      	cmp	r2, r3
 800e792:	d910      	bls.n	800e7b6 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800e794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e796:	f004 faaa 	bl	8012cee <tcp_keepalive>
 800e79a:	4603      	mov	r3, r0
 800e79c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800e79e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d107      	bne.n	800e7b6 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800e7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	b2da      	uxtb	r2, r3
 800e7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d016      	beq.n	800e7ec <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800e7be:	4b82      	ldr	r3, [pc, #520]	; (800e9c8 <tcp_slowtmr+0x4f4>)
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c4:	6a1b      	ldr	r3, [r3, #32]
 800e7c6:	1ad2      	subs	r2, r2, r3
 800e7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	005b      	lsls	r3, r3, #1
 800e7d4:	440b      	add	r3, r1
 800e7d6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d307      	bcc.n	800e7ec <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800e7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f000 fa04 	bl	800ebee <tcp_segs_free>
      pcb->ooseq = NULL;
 800e7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ee:	7d1b      	ldrb	r3, [r3, #20]
 800e7f0:	2b03      	cmp	r3, #3
 800e7f2:	d109      	bne.n	800e808 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7f4:	4b74      	ldr	r3, [pc, #464]	; (800e9c8 <tcp_slowtmr+0x4f4>)
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fa:	6a1b      	ldr	r3, [r3, #32]
 800e7fc:	1ad3      	subs	r3, r2, r3
 800e7fe:	2b28      	cmp	r3, #40	; 0x28
 800e800:	d902      	bls.n	800e808 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e802:	7ffb      	ldrb	r3, [r7, #31]
 800e804:	3301      	adds	r3, #1
 800e806:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80a:	7d1b      	ldrb	r3, [r3, #20]
 800e80c:	2b09      	cmp	r3, #9
 800e80e:	d109      	bne.n	800e824 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e810:	4b6d      	ldr	r3, [pc, #436]	; (800e9c8 <tcp_slowtmr+0x4f4>)
 800e812:	681a      	ldr	r2, [r3, #0]
 800e814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e816:	6a1b      	ldr	r3, [r3, #32]
 800e818:	1ad3      	subs	r3, r2, r3
 800e81a:	2bf0      	cmp	r3, #240	; 0xf0
 800e81c:	d902      	bls.n	800e824 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800e81e:	7ffb      	ldrb	r3, [r7, #31]
 800e820:	3301      	adds	r3, #1
 800e822:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e824:	7ffb      	ldrb	r3, [r7, #31]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d05d      	beq.n	800e8e6 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e830:	617b      	str	r3, [r7, #20]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e832:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e834:	f000 fc40 	bl	800f0b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e838:	6a3b      	ldr	r3, [r7, #32]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d010      	beq.n	800e860 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e83e:	4b65      	ldr	r3, [pc, #404]	; (800e9d4 <tcp_slowtmr+0x500>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e844:	429a      	cmp	r2, r3
 800e846:	d106      	bne.n	800e856 <tcp_slowtmr+0x382>
 800e848:	4b63      	ldr	r3, [pc, #396]	; (800e9d8 <tcp_slowtmr+0x504>)
 800e84a:	f240 4289 	movw	r2, #1161	; 0x489
 800e84e:	4963      	ldr	r1, [pc, #396]	; (800e9dc <tcp_slowtmr+0x508>)
 800e850:	4863      	ldr	r0, [pc, #396]	; (800e9e0 <tcp_slowtmr+0x50c>)
 800e852:	f005 fc3f 	bl	80140d4 <iprintf>
        prev->next = pcb->next;
 800e856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e858:	68da      	ldr	r2, [r3, #12]
 800e85a:	6a3b      	ldr	r3, [r7, #32]
 800e85c:	60da      	str	r2, [r3, #12]
 800e85e:	e00f      	b.n	800e880 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e860:	4b5c      	ldr	r3, [pc, #368]	; (800e9d4 <tcp_slowtmr+0x500>)
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e866:	429a      	cmp	r2, r3
 800e868:	d006      	beq.n	800e878 <tcp_slowtmr+0x3a4>
 800e86a:	4b5b      	ldr	r3, [pc, #364]	; (800e9d8 <tcp_slowtmr+0x504>)
 800e86c:	f240 428d 	movw	r2, #1165	; 0x48d
 800e870:	495c      	ldr	r1, [pc, #368]	; (800e9e4 <tcp_slowtmr+0x510>)
 800e872:	485b      	ldr	r0, [pc, #364]	; (800e9e0 <tcp_slowtmr+0x50c>)
 800e874:	f005 fc2e 	bl	80140d4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	4a55      	ldr	r2, [pc, #340]	; (800e9d4 <tcp_slowtmr+0x500>)
 800e87e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e880:	7fbb      	ldrb	r3, [r7, #30]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d010      	beq.n	800e8a8 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e888:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e88e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	1d1d      	adds	r5, r3, #4
 800e894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e896:	8adb      	ldrh	r3, [r3, #22]
 800e898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e89a:	8b12      	ldrh	r2, [r2, #24]
 800e89c:	9201      	str	r2, [sp, #4]
 800e89e:	9300      	str	r3, [sp, #0]
 800e8a0:	462b      	mov	r3, r5
 800e8a2:	4622      	mov	r2, r4
 800e8a4:	f004 f8d0 	bl	8012a48 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8aa:	691b      	ldr	r3, [r3, #16]
 800e8ac:	613b      	str	r3, [r7, #16]
      last_state = pcb->state;
 800e8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b0:	7d1b      	ldrb	r3, [r3, #20]
 800e8b2:	73fb      	strb	r3, [r7, #15]
      pcb2 = pcb;
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b6:	60bb      	str	r3, [r7, #8]
      pcb = pcb->next;
 800e8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800e8be:	68b9      	ldr	r1, [r7, #8]
 800e8c0:	2001      	movs	r0, #1
 800e8c2:	f7fe f913 	bl	800caec <memp_free>

      tcp_active_pcbs_changed = 0;
 800e8c6:	4b48      	ldr	r3, [pc, #288]	; (800e9e8 <tcp_slowtmr+0x514>)
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d004      	beq.n	800e8dc <tcp_slowtmr+0x408>
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	f06f 010c 	mvn.w	r1, #12
 800e8d8:	6938      	ldr	r0, [r7, #16]
 800e8da:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e8dc:	4b42      	ldr	r3, [pc, #264]	; (800e9e8 <tcp_slowtmr+0x514>)
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d035      	beq.n	800e950 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800e8e4:	e606      	b.n	800e4f4 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e8:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800e8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ec:	68db      	ldr	r3, [r3, #12]
 800e8ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e8f0:	6a3b      	ldr	r3, [r7, #32]
 800e8f2:	7edb      	ldrb	r3, [r3, #27]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	b2da      	uxtb	r2, r3
 800e8f8:	6a3b      	ldr	r3, [r7, #32]
 800e8fa:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
 800e8fe:	7eda      	ldrb	r2, [r3, #27]
 800e900:	6a3b      	ldr	r3, [r7, #32]
 800e902:	7f1b      	ldrb	r3, [r3, #28]
 800e904:	429a      	cmp	r2, r3
 800e906:	d323      	bcc.n	800e950 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800e908:	6a3b      	ldr	r3, [r7, #32]
 800e90a:	2200      	movs	r2, #0
 800e90c:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e90e:	4b36      	ldr	r3, [pc, #216]	; (800e9e8 <tcp_slowtmr+0x514>)
 800e910:	2200      	movs	r2, #0
 800e912:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e914:	6a3b      	ldr	r3, [r7, #32]
 800e916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d00a      	beq.n	800e934 <tcp_slowtmr+0x460>
 800e91e:	6a3b      	ldr	r3, [r7, #32]
 800e920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e924:	6a3a      	ldr	r2, [r7, #32]
 800e926:	6912      	ldr	r2, [r2, #16]
 800e928:	6a39      	ldr	r1, [r7, #32]
 800e92a:	4610      	mov	r0, r2
 800e92c:	4798      	blx	r3
 800e92e:	4603      	mov	r3, r0
 800e930:	777b      	strb	r3, [r7, #29]
 800e932:	e001      	b.n	800e938 <tcp_slowtmr+0x464>
 800e934:	2300      	movs	r3, #0
 800e936:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800e938:	4b2b      	ldr	r3, [pc, #172]	; (800e9e8 <tcp_slowtmr+0x514>)
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d000      	beq.n	800e942 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800e940:	e5d8      	b.n	800e4f4 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e942:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d102      	bne.n	800e950 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800e94a:	6a38      	ldr	r0, [r7, #32]
 800e94c:	f003 fdf4 	bl	8012538 <tcp_output>
  while (pcb != NULL) {
 800e950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e952:	2b00      	cmp	r3, #0
 800e954:	f47f add4 	bne.w	800e500 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e958:	2300      	movs	r3, #0
 800e95a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800e95c:	4b23      	ldr	r3, [pc, #140]	; (800e9ec <tcp_slowtmr+0x518>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800e962:	e068      	b.n	800ea36 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e966:	7d1b      	ldrb	r3, [r3, #20]
 800e968:	2b0a      	cmp	r3, #10
 800e96a:	d006      	beq.n	800e97a <tcp_slowtmr+0x4a6>
 800e96c:	4b1a      	ldr	r3, [pc, #104]	; (800e9d8 <tcp_slowtmr+0x504>)
 800e96e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800e972:	491f      	ldr	r1, [pc, #124]	; (800e9f0 <tcp_slowtmr+0x51c>)
 800e974:	481a      	ldr	r0, [pc, #104]	; (800e9e0 <tcp_slowtmr+0x50c>)
 800e976:	f005 fbad 	bl	80140d4 <iprintf>
    pcb_remove = 0;
 800e97a:	2300      	movs	r3, #0
 800e97c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e97e:	4b12      	ldr	r3, [pc, #72]	; (800e9c8 <tcp_slowtmr+0x4f4>)
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e984:	6a1b      	ldr	r3, [r3, #32]
 800e986:	1ad3      	subs	r3, r2, r3
 800e988:	2bf0      	cmp	r3, #240	; 0xf0
 800e98a:	d902      	bls.n	800e992 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800e98c:	7ffb      	ldrb	r3, [r7, #31]
 800e98e:	3301      	adds	r3, #1
 800e990:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e992:	7ffb      	ldrb	r3, [r7, #31]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d049      	beq.n	800ea2c <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e99a:	f000 fb8d 	bl	800f0b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e99e:	6a3b      	ldr	r3, [r7, #32]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d029      	beq.n	800e9f8 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e9a4:	4b11      	ldr	r3, [pc, #68]	; (800e9ec <tcp_slowtmr+0x518>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d106      	bne.n	800e9bc <tcp_slowtmr+0x4e8>
 800e9ae:	4b0a      	ldr	r3, [pc, #40]	; (800e9d8 <tcp_slowtmr+0x504>)
 800e9b0:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800e9b4:	490f      	ldr	r1, [pc, #60]	; (800e9f4 <tcp_slowtmr+0x520>)
 800e9b6:	480a      	ldr	r0, [pc, #40]	; (800e9e0 <tcp_slowtmr+0x50c>)
 800e9b8:	f005 fb8c 	bl	80140d4 <iprintf>
        prev->next = pcb->next;
 800e9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9be:	68da      	ldr	r2, [r3, #12]
 800e9c0:	6a3b      	ldr	r3, [r7, #32]
 800e9c2:	60da      	str	r2, [r3, #12]
 800e9c4:	e028      	b.n	800ea18 <tcp_slowtmr+0x544>
 800e9c6:	bf00      	nop
 800e9c8:	2000ab38 	.word	0x2000ab38
 800e9cc:	000124f8 	.word	0x000124f8
 800e9d0:	10624dd3 	.word	0x10624dd3
 800e9d4:	2000ab34 	.word	0x2000ab34
 800e9d8:	08017104 	.word	0x08017104
 800e9dc:	0801733c 	.word	0x0801733c
 800e9e0:	08017140 	.word	0x08017140
 800e9e4:	08017368 	.word	0x08017368
 800e9e8:	2000ab30 	.word	0x2000ab30
 800e9ec:	2000ab44 	.word	0x2000ab44
 800e9f0:	08017394 	.word	0x08017394
 800e9f4:	080173c4 	.word	0x080173c4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e9f8:	4b12      	ldr	r3, [pc, #72]	; (800ea44 <tcp_slowtmr+0x570>)
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d006      	beq.n	800ea10 <tcp_slowtmr+0x53c>
 800ea02:	4b11      	ldr	r3, [pc, #68]	; (800ea48 <tcp_slowtmr+0x574>)
 800ea04:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800ea08:	4910      	ldr	r1, [pc, #64]	; (800ea4c <tcp_slowtmr+0x578>)
 800ea0a:	4811      	ldr	r0, [pc, #68]	; (800ea50 <tcp_slowtmr+0x57c>)
 800ea0c:	f005 fb62 	bl	80140d4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ea10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	4a0b      	ldr	r2, [pc, #44]	; (800ea44 <tcp_slowtmr+0x570>)
 800ea16:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ea18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1a:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800ea1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1e:	68db      	ldr	r3, [r3, #12]
 800ea20:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800ea22:	6879      	ldr	r1, [r7, #4]
 800ea24:	2001      	movs	r0, #1
 800ea26:	f7fe f861 	bl	800caec <memp_free>
 800ea2a:	e004      	b.n	800ea36 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800ea2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800ea30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800ea36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d193      	bne.n	800e964 <tcp_slowtmr+0x490>
    }
  }
}
 800ea3c:	bf00      	nop
 800ea3e:	3728      	adds	r7, #40	; 0x28
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bdb0      	pop	{r4, r5, r7, pc}
 800ea44:	2000ab44 	.word	0x2000ab44
 800ea48:	08017104 	.word	0x08017104
 800ea4c:	080173ec 	.word	0x080173ec
 800ea50:	08017140 	.word	0x08017140

0800ea54 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ea5a:	4b2d      	ldr	r3, [pc, #180]	; (800eb10 <tcp_fasttmr+0xbc>)
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	3301      	adds	r3, #1
 800ea60:	b2da      	uxtb	r2, r3
 800ea62:	4b2b      	ldr	r3, [pc, #172]	; (800eb10 <tcp_fasttmr+0xbc>)
 800ea64:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ea66:	4b2b      	ldr	r3, [pc, #172]	; (800eb14 <tcp_fasttmr+0xc0>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ea6c:	e048      	b.n	800eb00 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	7f5a      	ldrb	r2, [r3, #29]
 800ea72:	4b27      	ldr	r3, [pc, #156]	; (800eb10 <tcp_fasttmr+0xbc>)
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d03f      	beq.n	800eafa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ea7a:	4b25      	ldr	r3, [pc, #148]	; (800eb10 <tcp_fasttmr+0xbc>)
 800ea7c:	781a      	ldrb	r2, [r3, #0]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	7e9b      	ldrb	r3, [r3, #26]
 800ea86:	f003 0301 	and.w	r3, r3, #1
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d010      	beq.n	800eab0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	7e9b      	ldrb	r3, [r3, #26]
 800ea92:	f043 0302 	orr.w	r3, r3, #2
 800ea96:	b2da      	uxtb	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f003 fd4b 	bl	8012538 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	7e9b      	ldrb	r3, [r3, #26]
 800eaa6:	f023 0303 	bic.w	r3, r3, #3
 800eaaa:	b2da      	uxtb	r2, r3
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	7e9b      	ldrb	r3, [r3, #26]
 800eab4:	f003 0308 	and.w	r3, r3, #8
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d009      	beq.n	800ead0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	7e9b      	ldrb	r3, [r3, #26]
 800eac0:	f023 0308 	bic.w	r3, r3, #8
 800eac4:	b2da      	uxtb	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f7ff f99c 	bl	800de08 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	68db      	ldr	r3, [r3, #12]
 800ead4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d00a      	beq.n	800eaf4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eade:	4b0e      	ldr	r3, [pc, #56]	; (800eb18 <tcp_fasttmr+0xc4>)
 800eae0:	2200      	movs	r2, #0
 800eae2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f000 f819 	bl	800eb1c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800eaea:	4b0b      	ldr	r3, [pc, #44]	; (800eb18 <tcp_fasttmr+0xc4>)
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d000      	beq.n	800eaf4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800eaf2:	e7b8      	b.n	800ea66 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	607b      	str	r3, [r7, #4]
 800eaf8:	e002      	b.n	800eb00 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	68db      	ldr	r3, [r3, #12]
 800eafe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1b3      	bne.n	800ea6e <tcp_fasttmr+0x1a>
    }
  }
}
 800eb06:	bf00      	nop
 800eb08:	3708      	adds	r7, #8
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	200041ee 	.word	0x200041ee
 800eb14:	2000ab34 	.word	0x2000ab34
 800eb18:	2000ab30 	.word	0x2000ab30

0800eb1c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800eb1c:	b590      	push	{r4, r7, lr}
 800eb1e:	b085      	sub	sp, #20
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb28:	7b5b      	ldrb	r3, [r3, #13]
 800eb2a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb30:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2200      	movs	r2, #0
 800eb36:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d00b      	beq.n	800eb5a <tcp_process_refused_data+0x3e>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6918      	ldr	r0, [r3, #16]
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	68ba      	ldr	r2, [r7, #8]
 800eb50:	6879      	ldr	r1, [r7, #4]
 800eb52:	47a0      	blx	r4
 800eb54:	4603      	mov	r3, r0
 800eb56:	73fb      	strb	r3, [r7, #15]
 800eb58:	e007      	b.n	800eb6a <tcp_process_refused_data+0x4e>
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	68ba      	ldr	r2, [r7, #8]
 800eb5e:	6879      	ldr	r1, [r7, #4]
 800eb60:	2000      	movs	r0, #0
 800eb62:	f000 f88c 	bl	800ec7e <tcp_recv_null>
 800eb66:	4603      	mov	r3, r0
 800eb68:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800eb6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d12a      	bne.n	800ebc8 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800eb72:	7bbb      	ldrb	r3, [r7, #14]
 800eb74:	f003 0320 	and.w	r3, r3, #32
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d033      	beq.n	800ebe4 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb80:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eb84:	d005      	beq.n	800eb92 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	b29a      	uxth	r2, r3
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d00b      	beq.n	800ebb4 <tcp_process_refused_data+0x98>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6918      	ldr	r0, [r3, #16]
 800eba6:	2300      	movs	r3, #0
 800eba8:	2200      	movs	r2, #0
 800ebaa:	6879      	ldr	r1, [r7, #4]
 800ebac:	47a0      	blx	r4
 800ebae:	4603      	mov	r3, r0
 800ebb0:	73fb      	strb	r3, [r7, #15]
 800ebb2:	e001      	b.n	800ebb8 <tcp_process_refused_data+0x9c>
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ebb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebbc:	f113 0f0d 	cmn.w	r3, #13
 800ebc0:	d110      	bne.n	800ebe4 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800ebc2:	f06f 030c 	mvn.w	r3, #12
 800ebc6:	e00e      	b.n	800ebe6 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800ebc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebcc:	f113 0f0d 	cmn.w	r3, #13
 800ebd0:	d102      	bne.n	800ebd8 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ebd2:	f06f 030c 	mvn.w	r3, #12
 800ebd6:	e006      	b.n	800ebe6 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800ebde:	f06f 0304 	mvn.w	r3, #4
 800ebe2:	e000      	b.n	800ebe6 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3714      	adds	r7, #20
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd90      	pop	{r4, r7, pc}

0800ebee <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b084      	sub	sp, #16
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ebf6:	e007      	b.n	800ec08 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 f809 	bl	800ec16 <tcp_seg_free>
    seg = next;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d1f4      	bne.n	800ebf8 <tcp_segs_free+0xa>
  }
}
 800ec0e:	bf00      	nop
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}

0800ec16 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b082      	sub	sp, #8
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d00c      	beq.n	800ec3e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d004      	beq.n	800ec36 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7fe fd0f 	bl	800d654 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ec36:	6879      	ldr	r1, [r7, #4]
 800ec38:	2003      	movs	r0, #3
 800ec3a:	f7fd ff57 	bl	800caec <memp_free>
  }
}
 800ec3e:	bf00      	nop
 800ec40:	3708      	adds	r7, #8
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}

0800ec46 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b084      	sub	sp, #16
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ec4e:	2003      	movs	r0, #3
 800ec50:	f7fd fefa 	bl	800ca48 <memp_malloc>
 800ec54:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d101      	bne.n	800ec60 <tcp_seg_copy+0x1a>
    return NULL;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	e00a      	b.n	800ec76 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ec60:	2210      	movs	r2, #16
 800ec62:	6879      	ldr	r1, [r7, #4]
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f005 f9f4 	bl	8014052 <memcpy>
  pbuf_ref(cseg->p);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7fe fda0 	bl	800d7b4 <pbuf_ref>
  return cseg;
 800ec74:	68fb      	ldr	r3, [r7, #12]
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3710      	adds	r7, #16
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b084      	sub	sp, #16
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	60f8      	str	r0, [r7, #12]
 800ec86:	60b9      	str	r1, [r7, #8]
 800ec88:	607a      	str	r2, [r7, #4]
 800ec8a:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d009      	beq.n	800eca6 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	891b      	ldrh	r3, [r3, #8]
 800ec96:	4619      	mov	r1, r3
 800ec98:	68b8      	ldr	r0, [r7, #8]
 800ec9a:	f7ff fa89 	bl	800e1b0 <tcp_recved>
    pbuf_free(p);
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f7fe fcd8 	bl	800d654 <pbuf_free>
 800eca4:	e008      	b.n	800ecb8 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800eca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d104      	bne.n	800ecb8 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800ecae:	68b8      	ldr	r0, [r7, #8]
 800ecb0:	f7ff f910 	bl	800ded4 <tcp_close>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	e000      	b.n	800ecba <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
	...

0800ecc4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b086      	sub	sp, #24
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	4603      	mov	r3, r0
 800eccc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ecce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	db01      	blt.n	800ecda <tcp_kill_prio+0x16>
 800ecd6:	79fb      	ldrb	r3, [r7, #7]
 800ecd8:	e000      	b.n	800ecdc <tcp_kill_prio+0x18>
 800ecda:	237f      	movs	r3, #127	; 0x7f
 800ecdc:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800ecde:	2300      	movs	r3, #0
 800ece0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ece2:	2300      	movs	r3, #0
 800ece4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ece6:	4b16      	ldr	r3, [pc, #88]	; (800ed40 <tcp_kill_prio+0x7c>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	617b      	str	r3, [r7, #20]
 800ecec:	e01a      	b.n	800ed24 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	7d5b      	ldrb	r3, [r3, #21]
 800ecf2:	7afa      	ldrb	r2, [r7, #11]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d312      	bcc.n	800ed1e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ecf8:	4b12      	ldr	r3, [pc, #72]	; (800ed44 <tcp_kill_prio+0x80>)
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	6a1b      	ldr	r3, [r3, #32]
 800ed00:	1ad2      	subs	r2, r2, r3
    if (pcb->prio <= mprio &&
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d30a      	bcc.n	800ed1e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800ed08:	4b0e      	ldr	r3, [pc, #56]	; (800ed44 <tcp_kill_prio+0x80>)
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	6a1b      	ldr	r3, [r3, #32]
 800ed10:	1ad3      	subs	r3, r2, r3
 800ed12:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	7d5b      	ldrb	r3, [r3, #21]
 800ed1c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	68db      	ldr	r3, [r3, #12]
 800ed22:	617b      	str	r3, [r7, #20]
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d1e1      	bne.n	800ecee <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d002      	beq.n	800ed36 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed30:	6938      	ldr	r0, [r7, #16]
 800ed32:	f7ff f9e1 	bl	800e0f8 <tcp_abort>
  }
}
 800ed36:	bf00      	nop
 800ed38:	3718      	adds	r7, #24
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	2000ab34 	.word	0x2000ab34
 800ed44:	2000ab38 	.word	0x2000ab38

0800ed48 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b086      	sub	sp, #24
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	4603      	mov	r3, r0
 800ed50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ed52:	79fb      	ldrb	r3, [r7, #7]
 800ed54:	2b08      	cmp	r3, #8
 800ed56:	d009      	beq.n	800ed6c <tcp_kill_state+0x24>
 800ed58:	79fb      	ldrb	r3, [r7, #7]
 800ed5a:	2b09      	cmp	r3, #9
 800ed5c:	d006      	beq.n	800ed6c <tcp_kill_state+0x24>
 800ed5e:	4b1a      	ldr	r3, [pc, #104]	; (800edc8 <tcp_kill_state+0x80>)
 800ed60:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ed64:	4919      	ldr	r1, [pc, #100]	; (800edcc <tcp_kill_state+0x84>)
 800ed66:	481a      	ldr	r0, [pc, #104]	; (800edd0 <tcp_kill_state+0x88>)
 800ed68:	f005 f9b4 	bl	80140d4 <iprintf>

  inactivity = 0;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ed70:	2300      	movs	r3, #0
 800ed72:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed74:	4b17      	ldr	r3, [pc, #92]	; (800edd4 <tcp_kill_state+0x8c>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	617b      	str	r3, [r7, #20]
 800ed7a:	e017      	b.n	800edac <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	7d1b      	ldrb	r3, [r3, #20]
 800ed80:	79fa      	ldrb	r2, [r7, #7]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d10f      	bne.n	800eda6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ed86:	4b14      	ldr	r3, [pc, #80]	; (800edd8 <tcp_kill_state+0x90>)
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	6a1b      	ldr	r3, [r3, #32]
 800ed8e:	1ad2      	subs	r2, r2, r3
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d307      	bcc.n	800eda6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ed96:	4b10      	ldr	r3, [pc, #64]	; (800edd8 <tcp_kill_state+0x90>)
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	6a1b      	ldr	r3, [r3, #32]
 800ed9e:	1ad3      	subs	r3, r2, r3
 800eda0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	68db      	ldr	r3, [r3, #12]
 800edaa:	617b      	str	r3, [r7, #20]
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d1e4      	bne.n	800ed7c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d003      	beq.n	800edc0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800edb8:	2100      	movs	r1, #0
 800edba:	6938      	ldr	r0, [r7, #16]
 800edbc:	f7ff f8ea 	bl	800df94 <tcp_abandon>
  }
}
 800edc0:	bf00      	nop
 800edc2:	3718      	adds	r7, #24
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	08017104 	.word	0x08017104
 800edcc:	08017414 	.word	0x08017414
 800edd0:	08017140 	.word	0x08017140
 800edd4:	2000ab34 	.word	0x2000ab34
 800edd8:	2000ab38 	.word	0x2000ab38

0800eddc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ede2:	2300      	movs	r3, #0
 800ede4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ede6:	2300      	movs	r3, #0
 800ede8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800edea:	4b12      	ldr	r3, [pc, #72]	; (800ee34 <tcp_kill_timewait+0x58>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	60fb      	str	r3, [r7, #12]
 800edf0:	e012      	b.n	800ee18 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800edf2:	4b11      	ldr	r3, [pc, #68]	; (800ee38 <tcp_kill_timewait+0x5c>)
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6a1b      	ldr	r3, [r3, #32]
 800edfa:	1ad2      	subs	r2, r2, r3
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d307      	bcc.n	800ee12 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ee02:	4b0d      	ldr	r3, [pc, #52]	; (800ee38 <tcp_kill_timewait+0x5c>)
 800ee04:	681a      	ldr	r2, [r3, #0]
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	6a1b      	ldr	r3, [r3, #32]
 800ee0a:	1ad3      	subs	r3, r2, r3
 800ee0c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	60fb      	str	r3, [r7, #12]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d1e9      	bne.n	800edf2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d002      	beq.n	800ee2a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ee24:	68b8      	ldr	r0, [r7, #8]
 800ee26:	f7ff f967 	bl	800e0f8 <tcp_abort>
  }
}
 800ee2a:	bf00      	nop
 800ee2c:	3710      	adds	r7, #16
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	2000ab44 	.word	0x2000ab44
 800ee38:	2000ab38 	.word	0x2000ab38

0800ee3c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	4603      	mov	r3, r0
 800ee44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee46:	2001      	movs	r0, #1
 800ee48:	f7fd fdfe 	bl	800ca48 <memp_malloc>
 800ee4c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d124      	bne.n	800ee9e <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ee54:	f7ff ffc2 	bl	800eddc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee58:	2001      	movs	r0, #1
 800ee5a:	f7fd fdf5 	bl	800ca48 <memp_malloc>
 800ee5e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d11b      	bne.n	800ee9e <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ee66:	2009      	movs	r0, #9
 800ee68:	f7ff ff6e 	bl	800ed48 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee6c:	2001      	movs	r0, #1
 800ee6e:	f7fd fdeb 	bl	800ca48 <memp_malloc>
 800ee72:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d111      	bne.n	800ee9e <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ee7a:	2008      	movs	r0, #8
 800ee7c:	f7ff ff64 	bl	800ed48 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee80:	2001      	movs	r0, #1
 800ee82:	f7fd fde1 	bl	800ca48 <memp_malloc>
 800ee86:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d107      	bne.n	800ee9e <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ee8e:	79fb      	ldrb	r3, [r7, #7]
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7ff ff17 	bl	800ecc4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee96:	2001      	movs	r0, #1
 800ee98:	f7fd fdd6 	bl	800ca48 <memp_malloc>
 800ee9c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d03f      	beq.n	800ef24 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800eea4:	2298      	movs	r2, #152	; 0x98
 800eea6:	2100      	movs	r1, #0
 800eea8:	68f8      	ldr	r0, [r7, #12]
 800eeaa:	f005 f8dd 	bl	8014068 <memset>
    pcb->prio = prio;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	79fa      	ldrb	r2, [r7, #7]
 800eeb2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800eeba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800eec4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	22ff      	movs	r2, #255	; 0xff
 800eed2:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800eeda:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	2206      	movs	r2, #6
 800eee0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2206      	movs	r2, #6
 800eee8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eef0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2201      	movs	r2, #1
 800eef6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800eefa:	4b0d      	ldr	r3, [pc, #52]	; (800ef30 <tcp_alloc+0xf4>)
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ef02:	4b0c      	ldr	r3, [pc, #48]	; (800ef34 <tcp_alloc+0xf8>)
 800ef04:	781a      	ldrb	r2, [r3, #0]
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ef10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	4a08      	ldr	r2, [pc, #32]	; (800ef38 <tcp_alloc+0xfc>)
 800ef18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	4a07      	ldr	r2, [pc, #28]	; (800ef3c <tcp_alloc+0x100>)
 800ef20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ef24:	68fb      	ldr	r3, [r7, #12]
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3710      	adds	r7, #16
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
 800ef2e:	bf00      	nop
 800ef30:	2000ab38 	.word	0x2000ab38
 800ef34:	200041ee 	.word	0x200041ee
 800ef38:	0800ec7f 	.word	0x0800ec7f
 800ef3c:	006ddd00 	.word	0x006ddd00

0800ef40 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	4603      	mov	r3, r0
 800ef48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ef4a:	2040      	movs	r0, #64	; 0x40
 800ef4c:	f7ff ff76 	bl	800ee3c <tcp_alloc>
 800ef50:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ef52:	68fb      	ldr	r3, [r7, #12]
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3710      	adds	r7, #16
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d002      	beq.n	800ef72 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	683a      	ldr	r2, [r7, #0]
 800ef70:	611a      	str	r2, [r3, #16]
  }
}
 800ef72:	bf00      	nop
 800ef74:	370c      	adds	r7, #12
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bc80      	pop	{r7}
 800ef7a:	4770      	bx	lr

0800ef7c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b082      	sub	sp, #8
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00e      	beq.n	800efaa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	7d1b      	ldrb	r3, [r3, #20]
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d106      	bne.n	800efa2 <tcp_recv+0x26>
 800ef94:	4b07      	ldr	r3, [pc, #28]	; (800efb4 <tcp_recv+0x38>)
 800ef96:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800ef9a:	4907      	ldr	r1, [pc, #28]	; (800efb8 <tcp_recv+0x3c>)
 800ef9c:	4807      	ldr	r0, [pc, #28]	; (800efbc <tcp_recv+0x40>)
 800ef9e:	f005 f899 	bl	80140d4 <iprintf>
    pcb->recv = recv;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	683a      	ldr	r2, [r7, #0]
 800efa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800efaa:	bf00      	nop
 800efac:	3708      	adds	r7, #8
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	08017104 	.word	0x08017104
 800efb8:	08017424 	.word	0x08017424
 800efbc:	08017140 	.word	0x08017140

0800efc0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d00d      	beq.n	800efec <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	7d1b      	ldrb	r3, [r3, #20]
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	d106      	bne.n	800efe6 <tcp_sent+0x26>
 800efd8:	4b06      	ldr	r3, [pc, #24]	; (800eff4 <tcp_sent+0x34>)
 800efda:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800efde:	4906      	ldr	r1, [pc, #24]	; (800eff8 <tcp_sent+0x38>)
 800efe0:	4806      	ldr	r0, [pc, #24]	; (800effc <tcp_sent+0x3c>)
 800efe2:	f005 f877 	bl	80140d4 <iprintf>
    pcb->sent = sent;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	683a      	ldr	r2, [r7, #0]
 800efea:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800efec:	bf00      	nop
 800efee:	3708      	adds	r7, #8
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	08017104 	.word	0x08017104
 800eff8:	0801744c 	.word	0x0801744c
 800effc:	08017140 	.word	0x08017140

0800f000 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d00e      	beq.n	800f02e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	7d1b      	ldrb	r3, [r3, #20]
 800f014:	2b01      	cmp	r3, #1
 800f016:	d106      	bne.n	800f026 <tcp_err+0x26>
 800f018:	4b07      	ldr	r3, [pc, #28]	; (800f038 <tcp_err+0x38>)
 800f01a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800f01e:	4907      	ldr	r1, [pc, #28]	; (800f03c <tcp_err+0x3c>)
 800f020:	4807      	ldr	r0, [pc, #28]	; (800f040 <tcp_err+0x40>)
 800f022:	f005 f857 	bl	80140d4 <iprintf>
    pcb->errf = err;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	683a      	ldr	r2, [r7, #0]
 800f02a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800f02e:	bf00      	nop
 800f030:	3708      	adds	r7, #8
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	bf00      	nop
 800f038:	08017104 	.word	0x08017104
 800f03c:	08017474 	.word	0x08017474
 800f040:	08017140 	.word	0x08017140

0800f044 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f044:	b480      	push	{r7}
 800f046:	b085      	sub	sp, #20
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d008      	beq.n	800f066 <tcp_accept+0x22>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	7d1b      	ldrb	r3, [r3, #20]
 800f058:	2b01      	cmp	r3, #1
 800f05a:	d104      	bne.n	800f066 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	683a      	ldr	r2, [r7, #0]
 800f064:	619a      	str	r2, [r3, #24]
  }
}
 800f066:	bf00      	nop
 800f068:	3714      	adds	r7, #20
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bc80      	pop	{r7}
 800f06e:	4770      	bx	lr

0800f070 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	4613      	mov	r3, r2
 800f07c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	7d1b      	ldrb	r3, [r3, #20]
 800f082:	2b01      	cmp	r3, #1
 800f084:	d106      	bne.n	800f094 <tcp_poll+0x24>
 800f086:	4b09      	ldr	r3, [pc, #36]	; (800f0ac <tcp_poll+0x3c>)
 800f088:	f240 7203 	movw	r2, #1795	; 0x703
 800f08c:	4908      	ldr	r1, [pc, #32]	; (800f0b0 <tcp_poll+0x40>)
 800f08e:	4809      	ldr	r0, [pc, #36]	; (800f0b4 <tcp_poll+0x44>)
 800f090:	f005 f820 	bl	80140d4 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	68ba      	ldr	r2, [r7, #8]
 800f098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	79fa      	ldrb	r2, [r7, #7]
 800f0a0:	771a      	strb	r2, [r3, #28]
}
 800f0a2:	bf00      	nop
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	08017104 	.word	0x08017104
 800f0b0:	0801749c 	.word	0x0801749c
 800f0b4:	08017140 	.word	0x08017140

0800f0b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	7d1b      	ldrb	r3, [r3, #20]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d034      	beq.n	800f132 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f0cc:	2b0a      	cmp	r3, #10
 800f0ce:	d030      	beq.n	800f132 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d02c      	beq.n	800f132 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d007      	beq.n	800f0f0 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7fe fab5 	bl	800d654 <pbuf_free>
      pcb->refused_data = NULL;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7ff fd7a 	bl	800ebee <tcp_segs_free>
    pcb->ooseq = NULL;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f106:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7ff fd6e 	bl	800ebee <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f116:	4618      	mov	r0, r3
 800f118:	f7ff fd69 	bl	800ebee <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2200      	movs	r2, #0
 800f120:	669a      	str	r2, [r3, #104]	; 0x68
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2200      	movs	r2, #0
 800f12e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800f132:	bf00      	nop
 800f134:	3708      	adds	r7, #8
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
	...

0800f13c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681a      	ldr	r2, [r3, #0]
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d105      	bne.n	800f15c <tcp_pcb_remove+0x20>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	68da      	ldr	r2, [r3, #12]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	601a      	str	r2, [r3, #0]
 800f15a:	e013      	b.n	800f184 <tcp_pcb_remove+0x48>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	60fb      	str	r3, [r7, #12]
 800f162:	e00c      	b.n	800f17e <tcp_pcb_remove+0x42>
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	68da      	ldr	r2, [r3, #12]
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d104      	bne.n	800f178 <tcp_pcb_remove+0x3c>
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	68da      	ldr	r2, [r3, #12]
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	60da      	str	r2, [r3, #12]
 800f176:	e005      	b.n	800f184 <tcp_pcb_remove+0x48>
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	68db      	ldr	r3, [r3, #12]
 800f17c:	60fb      	str	r3, [r7, #12]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d1ef      	bne.n	800f164 <tcp_pcb_remove+0x28>
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	2200      	movs	r2, #0
 800f188:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f18a:	6838      	ldr	r0, [r7, #0]
 800f18c:	f7ff ff94 	bl	800f0b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	7d1b      	ldrb	r3, [r3, #20]
 800f194:	2b0a      	cmp	r3, #10
 800f196:	d013      	beq.n	800f1c0 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d00f      	beq.n	800f1c0 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	7e9b      	ldrb	r3, [r3, #26]
 800f1a4:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d009      	beq.n	800f1c0 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	7e9b      	ldrb	r3, [r3, #26]
 800f1b0:	f043 0302 	orr.w	r3, r3, #2
 800f1b4:	b2da      	uxtb	r2, r3
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800f1ba:	6838      	ldr	r0, [r7, #0]
 800f1bc:	f003 f9bc 	bl	8012538 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	7d1b      	ldrb	r3, [r3, #20]
 800f1c4:	2b01      	cmp	r3, #1
 800f1c6:	d020      	beq.n	800f20a <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d006      	beq.n	800f1de <tcp_pcb_remove+0xa2>
 800f1d0:	4b13      	ldr	r3, [pc, #76]	; (800f220 <tcp_pcb_remove+0xe4>)
 800f1d2:	f240 7253 	movw	r2, #1875	; 0x753
 800f1d6:	4913      	ldr	r1, [pc, #76]	; (800f224 <tcp_pcb_remove+0xe8>)
 800f1d8:	4813      	ldr	r0, [pc, #76]	; (800f228 <tcp_pcb_remove+0xec>)
 800f1da:	f004 ff7b 	bl	80140d4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d006      	beq.n	800f1f4 <tcp_pcb_remove+0xb8>
 800f1e6:	4b0e      	ldr	r3, [pc, #56]	; (800f220 <tcp_pcb_remove+0xe4>)
 800f1e8:	f240 7254 	movw	r2, #1876	; 0x754
 800f1ec:	490f      	ldr	r1, [pc, #60]	; (800f22c <tcp_pcb_remove+0xf0>)
 800f1ee:	480e      	ldr	r0, [pc, #56]	; (800f228 <tcp_pcb_remove+0xec>)
 800f1f0:	f004 ff70 	bl	80140d4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d006      	beq.n	800f20a <tcp_pcb_remove+0xce>
 800f1fc:	4b08      	ldr	r3, [pc, #32]	; (800f220 <tcp_pcb_remove+0xe4>)
 800f1fe:	f240 7256 	movw	r2, #1878	; 0x756
 800f202:	490b      	ldr	r1, [pc, #44]	; (800f230 <tcp_pcb_remove+0xf4>)
 800f204:	4808      	ldr	r0, [pc, #32]	; (800f228 <tcp_pcb_remove+0xec>)
 800f206:	f004 ff65 	bl	80140d4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	2200      	movs	r2, #0
 800f20e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	2200      	movs	r2, #0
 800f214:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f216:	bf00      	nop
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	08017104 	.word	0x08017104
 800f224:	080174bc 	.word	0x080174bc
 800f228:	08017140 	.word	0x08017140
 800f22c:	080174d4 	.word	0x080174d4
 800f230:	080174f0 	.word	0x080174f0

0800f234 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f234:	b480      	push	{r7}
 800f236:	b083      	sub	sp, #12
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f23c:	4b06      	ldr	r3, [pc, #24]	; (800f258 <tcp_next_iss+0x24>)
 800f23e:	681a      	ldr	r2, [r3, #0]
 800f240:	4b06      	ldr	r3, [pc, #24]	; (800f25c <tcp_next_iss+0x28>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4413      	add	r3, r2
 800f246:	4a04      	ldr	r2, [pc, #16]	; (800f258 <tcp_next_iss+0x24>)
 800f248:	6013      	str	r3, [r2, #0]
  return iss;
 800f24a:	4b03      	ldr	r3, [pc, #12]	; (800f258 <tcp_next_iss+0x24>)
 800f24c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f24e:	4618      	mov	r0, r3
 800f250:	370c      	adds	r7, #12
 800f252:	46bd      	mov	sp, r7
 800f254:	bc80      	pop	{r7}
 800f256:	4770      	bx	lr
 800f258:	20000014 	.word	0x20000014
 800f25c:	2000ab38 	.word	0x2000ab38

0800f260 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	4603      	mov	r3, r0
 800f268:	6039      	str	r1, [r7, #0]
 800f26a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800f26c:	6838      	ldr	r0, [r7, #0]
 800f26e:	f7fb fe6b 	bl	800af48 <ip4_route>
 800f272:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d101      	bne.n	800f27e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800f27a:	88fb      	ldrh	r3, [r7, #6]
 800f27c:	e010      	b.n	800f2a0 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f282:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f284:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d008      	beq.n	800f29e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800f28c:	897b      	ldrh	r3, [r7, #10]
 800f28e:	3b28      	subs	r3, #40	; 0x28
 800f290:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f292:	893a      	ldrh	r2, [r7, #8]
 800f294:	88fb      	ldrh	r3, [r7, #6]
 800f296:	4293      	cmp	r3, r2
 800f298:	bf28      	it	cs
 800f29a:	4613      	movcs	r3, r2
 800f29c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800f29e:	88fb      	ldrh	r3, [r7, #6]
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3710      	adds	r7, #16
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f2b6:	e011      	b.n	800f2dc <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d108      	bne.n	800f2d6 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	68db      	ldr	r3, [r3, #12]
 800f2c8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f2ca:	68f8      	ldr	r0, [r7, #12]
 800f2cc:	f7fe ff14 	bl	800e0f8 <tcp_abort>
      pcb = next;
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	60fb      	str	r3, [r7, #12]
 800f2d4:	e002      	b.n	800f2dc <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	68db      	ldr	r3, [r3, #12]
 800f2da:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d1ea      	bne.n	800f2b8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800f2e2:	bf00      	nop
 800f2e4:	3710      	adds	r7, #16
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
	...

0800f2ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d02c      	beq.n	800f356 <tcp_netif_ip_addr_changed+0x6a>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d028      	beq.n	800f356 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f304:	4b16      	ldr	r3, [pc, #88]	; (800f360 <tcp_netif_ip_addr_changed+0x74>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4619      	mov	r1, r3
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7ff ffcc 	bl	800f2a8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f310:	4b14      	ldr	r3, [pc, #80]	; (800f364 <tcp_netif_ip_addr_changed+0x78>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4619      	mov	r1, r3
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f7ff ffc6 	bl	800f2a8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d019      	beq.n	800f356 <tcp_netif_ip_addr_changed+0x6a>
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d015      	beq.n	800f356 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800f32a:	4b0f      	ldr	r3, [pc, #60]	; (800f368 <tcp_netif_ip_addr_changed+0x7c>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	60fb      	str	r3, [r7, #12]
 800f330:	e00e      	b.n	800f350 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	68db      	ldr	r3, [r3, #12]
 800f336:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681a      	ldr	r2, [r3, #0]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	429a      	cmp	r2, r3
 800f342:	d103      	bne.n	800f34c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	681a      	ldr	r2, [r3, #0]
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	60fb      	str	r3, [r7, #12]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d1ed      	bne.n	800f332 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f356:	bf00      	nop
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	2000ab34 	.word	0x2000ab34
 800f364:	2000ab40 	.word	0x2000ab40
 800f368:	2000ab3c 	.word	0x2000ab3c

0800f36c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f36c:	b590      	push	{r4, r7, lr}
 800f36e:	b08b      	sub	sp, #44	; 0x2c
 800f370:	af02      	add	r7, sp, #8
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	4a82      	ldr	r2, [pc, #520]	; (800f584 <tcp_input+0x218>)
 800f37c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	895b      	ldrh	r3, [r3, #10]
 800f382:	2b13      	cmp	r3, #19
 800f384:	f240 8388 	bls.w	800fa98 <tcp_input+0x72c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f388:	4b7f      	ldr	r3, [pc, #508]	; (800f588 <tcp_input+0x21c>)
 800f38a:	695a      	ldr	r2, [r3, #20]
 800f38c:	4b7e      	ldr	r3, [pc, #504]	; (800f588 <tcp_input+0x21c>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	4619      	mov	r1, r3
 800f392:	4610      	mov	r0, r2
 800f394:	f7fc f84c 	bl	800b430 <ip4_addr_isbroadcast_u32>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	f040 837f 	bne.w	800fa9e <tcp_input+0x732>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f3a0:	4b79      	ldr	r3, [pc, #484]	; (800f588 <tcp_input+0x21c>)
 800f3a2:	695b      	ldr	r3, [r3, #20]
 800f3a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f3a8:	2be0      	cmp	r3, #224	; 0xe0
 800f3aa:	f000 8378 	beq.w	800fa9e <tcp_input+0x732>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800f3ae:	4b75      	ldr	r3, [pc, #468]	; (800f584 <tcp_input+0x218>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	899b      	ldrh	r3, [r3, #12]
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7fa fce6 	bl	8009d88 <lwip_htons>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	0b1b      	lsrs	r3, r3, #12
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	b2db      	uxtb	r3, r3
 800f3c4:	009b      	lsls	r3, r3, #2
 800f3c6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f3c8:	7cbb      	ldrb	r3, [r7, #18]
 800f3ca:	2b13      	cmp	r3, #19
 800f3cc:	f240 8367 	bls.w	800fa9e <tcp_input+0x732>
 800f3d0:	7cbb      	ldrb	r3, [r7, #18]
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	891b      	ldrh	r3, [r3, #8]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	f200 8360 	bhi.w	800fa9e <tcp_input+0x732>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800f3de:	7cbb      	ldrb	r3, [r7, #18]
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	3b14      	subs	r3, #20
 800f3e4:	b29a      	uxth	r2, r3
 800f3e6:	4b69      	ldr	r3, [pc, #420]	; (800f58c <tcp_input+0x220>)
 800f3e8:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f3ea:	4b69      	ldr	r3, [pc, #420]	; (800f590 <tcp_input+0x224>)
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	895a      	ldrh	r2, [r3, #10]
 800f3f4:	7cbb      	ldrb	r3, [r7, #18]
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d30d      	bcc.n	800f418 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f3fc:	4b63      	ldr	r3, [pc, #396]	; (800f58c <tcp_input+0x220>)
 800f3fe:	881a      	ldrh	r2, [r3, #0]
 800f400:	4b64      	ldr	r3, [pc, #400]	; (800f594 <tcp_input+0x228>)
 800f402:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800f404:	7cbb      	ldrb	r3, [r7, #18]
 800f406:	b29b      	uxth	r3, r3
 800f408:	425b      	negs	r3, r3
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	b21b      	sxth	r3, r3
 800f40e:	4619      	mov	r1, r3
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7fe f8fb 	bl	800d60c <pbuf_header>
 800f416:	e055      	b.n	800f4c4 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d105      	bne.n	800f42c <tcp_input+0xc0>
 800f420:	4b5d      	ldr	r3, [pc, #372]	; (800f598 <tcp_input+0x22c>)
 800f422:	22b2      	movs	r2, #178	; 0xb2
 800f424:	495d      	ldr	r1, [pc, #372]	; (800f59c <tcp_input+0x230>)
 800f426:	485e      	ldr	r0, [pc, #376]	; (800f5a0 <tcp_input+0x234>)
 800f428:	f004 fe54 	bl	80140d4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800f42c:	f06f 0113 	mvn.w	r1, #19
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f7fe f8eb 	bl	800d60c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	895a      	ldrh	r2, [r3, #10]
 800f43a:	4b56      	ldr	r3, [pc, #344]	; (800f594 <tcp_input+0x228>)
 800f43c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800f43e:	4b53      	ldr	r3, [pc, #332]	; (800f58c <tcp_input+0x220>)
 800f440:	881a      	ldrh	r2, [r3, #0]
 800f442:	4b54      	ldr	r3, [pc, #336]	; (800f594 <tcp_input+0x228>)
 800f444:	881b      	ldrh	r3, [r3, #0]
 800f446:	1ad3      	subs	r3, r2, r3
 800f448:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800f44a:	4b52      	ldr	r3, [pc, #328]	; (800f594 <tcp_input+0x228>)
 800f44c:	881b      	ldrh	r3, [r3, #0]
 800f44e:	425b      	negs	r3, r3
 800f450:	b29b      	uxth	r3, r3
 800f452:	b21b      	sxth	r3, r3
 800f454:	4619      	mov	r1, r3
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7fe f8d8 	bl	800d60c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	895b      	ldrh	r3, [r3, #10]
 800f462:	8a3a      	ldrh	r2, [r7, #16]
 800f464:	429a      	cmp	r2, r3
 800f466:	f200 8319 	bhi.w	800fa9c <tcp_input+0x730>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	4a47      	ldr	r2, [pc, #284]	; (800f590 <tcp_input+0x224>)
 800f472:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	8a3b      	ldrh	r3, [r7, #16]
 800f47a:	425b      	negs	r3, r3
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	b21b      	sxth	r3, r3
 800f480:	4619      	mov	r1, r3
 800f482:	4610      	mov	r0, r2
 800f484:	f7fe f8c2 	bl	800d60c <pbuf_header>
    p->tot_len -= opt2len;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	891a      	ldrh	r2, [r3, #8]
 800f48c:	8a3b      	ldrh	r3, [r7, #16]
 800f48e:	1ad3      	subs	r3, r2, r3
 800f490:	b29a      	uxth	r2, r3
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	895b      	ldrh	r3, [r3, #10]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d005      	beq.n	800f4aa <tcp_input+0x13e>
 800f49e:	4b3e      	ldr	r3, [pc, #248]	; (800f598 <tcp_input+0x22c>)
 800f4a0:	22cf      	movs	r2, #207	; 0xcf
 800f4a2:	4940      	ldr	r1, [pc, #256]	; (800f5a4 <tcp_input+0x238>)
 800f4a4:	483e      	ldr	r0, [pc, #248]	; (800f5a0 <tcp_input+0x234>)
 800f4a6:	f004 fe15 	bl	80140d4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	891a      	ldrh	r2, [r3, #8]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	891b      	ldrh	r3, [r3, #8]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d005      	beq.n	800f4c4 <tcp_input+0x158>
 800f4b8:	4b37      	ldr	r3, [pc, #220]	; (800f598 <tcp_input+0x22c>)
 800f4ba:	22d0      	movs	r2, #208	; 0xd0
 800f4bc:	493a      	ldr	r1, [pc, #232]	; (800f5a8 <tcp_input+0x23c>)
 800f4be:	4838      	ldr	r0, [pc, #224]	; (800f5a0 <tcp_input+0x234>)
 800f4c0:	f004 fe08 	bl	80140d4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f4c4:	4b2f      	ldr	r3, [pc, #188]	; (800f584 <tcp_input+0x218>)
 800f4c6:	681c      	ldr	r4, [r3, #0]
 800f4c8:	4b2e      	ldr	r3, [pc, #184]	; (800f584 <tcp_input+0x218>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	881b      	ldrh	r3, [r3, #0]
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7fa fc59 	bl	8009d88 <lwip_htons>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f4da:	4b2a      	ldr	r3, [pc, #168]	; (800f584 <tcp_input+0x218>)
 800f4dc:	681c      	ldr	r4, [r3, #0]
 800f4de:	4b29      	ldr	r3, [pc, #164]	; (800f584 <tcp_input+0x218>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	885b      	ldrh	r3, [r3, #2]
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7fa fc4e 	bl	8009d88 <lwip_htons>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f4f0:	4b24      	ldr	r3, [pc, #144]	; (800f584 <tcp_input+0x218>)
 800f4f2:	681c      	ldr	r4, [r3, #0]
 800f4f4:	4b23      	ldr	r3, [pc, #140]	; (800f584 <tcp_input+0x218>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7fa fc51 	bl	8009da2 <lwip_htonl>
 800f500:	4603      	mov	r3, r0
 800f502:	6063      	str	r3, [r4, #4]
 800f504:	6863      	ldr	r3, [r4, #4]
 800f506:	4a29      	ldr	r2, [pc, #164]	; (800f5ac <tcp_input+0x240>)
 800f508:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f50a:	4b1e      	ldr	r3, [pc, #120]	; (800f584 <tcp_input+0x218>)
 800f50c:	681c      	ldr	r4, [r3, #0]
 800f50e:	4b1d      	ldr	r3, [pc, #116]	; (800f584 <tcp_input+0x218>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	689b      	ldr	r3, [r3, #8]
 800f514:	4618      	mov	r0, r3
 800f516:	f7fa fc44 	bl	8009da2 <lwip_htonl>
 800f51a:	4603      	mov	r3, r0
 800f51c:	60a3      	str	r3, [r4, #8]
 800f51e:	68a3      	ldr	r3, [r4, #8]
 800f520:	4a23      	ldr	r2, [pc, #140]	; (800f5b0 <tcp_input+0x244>)
 800f522:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f524:	4b17      	ldr	r3, [pc, #92]	; (800f584 <tcp_input+0x218>)
 800f526:	681c      	ldr	r4, [r3, #0]
 800f528:	4b16      	ldr	r3, [pc, #88]	; (800f584 <tcp_input+0x218>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	89db      	ldrh	r3, [r3, #14]
 800f52e:	b29b      	uxth	r3, r3
 800f530:	4618      	mov	r0, r3
 800f532:	f7fa fc29 	bl	8009d88 <lwip_htons>
 800f536:	4603      	mov	r3, r0
 800f538:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f53a:	4b12      	ldr	r3, [pc, #72]	; (800f584 <tcp_input+0x218>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	899b      	ldrh	r3, [r3, #12]
 800f540:	b29b      	uxth	r3, r3
 800f542:	4618      	mov	r0, r3
 800f544:	f7fa fc20 	bl	8009d88 <lwip_htons>
 800f548:	4603      	mov	r3, r0
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f550:	b2da      	uxtb	r2, r3
 800f552:	4b18      	ldr	r3, [pc, #96]	; (800f5b4 <tcp_input+0x248>)
 800f554:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	891a      	ldrh	r2, [r3, #8]
 800f55a:	4b16      	ldr	r3, [pc, #88]	; (800f5b4 <tcp_input+0x248>)
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	f003 0303 	and.w	r3, r3, #3
 800f562:	2b00      	cmp	r3, #0
 800f564:	bf14      	ite	ne
 800f566:	2301      	movne	r3, #1
 800f568:	2300      	moveq	r3, #0
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	4413      	add	r3, r2
 800f570:	b29a      	uxth	r2, r3
 800f572:	4b11      	ldr	r3, [pc, #68]	; (800f5b8 <tcp_input+0x24c>)
 800f574:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f576:	2300      	movs	r3, #0
 800f578:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f57a:	4b10      	ldr	r3, [pc, #64]	; (800f5bc <tcp_input+0x250>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	61fb      	str	r3, [r7, #28]
 800f580:	e082      	b.n	800f688 <tcp_input+0x31c>
 800f582:	bf00      	nop
 800f584:	20004200 	.word	0x20004200
 800f588:	20007424 	.word	0x20007424
 800f58c:	20004204 	.word	0x20004204
 800f590:	20004208 	.word	0x20004208
 800f594:	20004206 	.word	0x20004206
 800f598:	08017508 	.word	0x08017508
 800f59c:	0801753c 	.word	0x0801753c
 800f5a0:	0801754c 	.word	0x0801754c
 800f5a4:	08017574 	.word	0x08017574
 800f5a8:	08017580 	.word	0x08017580
 800f5ac:	20004210 	.word	0x20004210
 800f5b0:	20004214 	.word	0x20004214
 800f5b4:	2000421c 	.word	0x2000421c
 800f5b8:	2000421a 	.word	0x2000421a
 800f5bc:	2000ab34 	.word	0x2000ab34
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f5c0:	69fb      	ldr	r3, [r7, #28]
 800f5c2:	7d1b      	ldrb	r3, [r3, #20]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d105      	bne.n	800f5d4 <tcp_input+0x268>
 800f5c8:	4b8f      	ldr	r3, [pc, #572]	; (800f808 <tcp_input+0x49c>)
 800f5ca:	22e2      	movs	r2, #226	; 0xe2
 800f5cc:	498f      	ldr	r1, [pc, #572]	; (800f80c <tcp_input+0x4a0>)
 800f5ce:	4890      	ldr	r0, [pc, #576]	; (800f810 <tcp_input+0x4a4>)
 800f5d0:	f004 fd80 	bl	80140d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	7d1b      	ldrb	r3, [r3, #20]
 800f5d8:	2b0a      	cmp	r3, #10
 800f5da:	d105      	bne.n	800f5e8 <tcp_input+0x27c>
 800f5dc:	4b8a      	ldr	r3, [pc, #552]	; (800f808 <tcp_input+0x49c>)
 800f5de:	22e3      	movs	r2, #227	; 0xe3
 800f5e0:	498c      	ldr	r1, [pc, #560]	; (800f814 <tcp_input+0x4a8>)
 800f5e2:	488b      	ldr	r0, [pc, #556]	; (800f810 <tcp_input+0x4a4>)
 800f5e4:	f004 fd76 	bl	80140d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f5e8:	69fb      	ldr	r3, [r7, #28]
 800f5ea:	7d1b      	ldrb	r3, [r3, #20]
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d105      	bne.n	800f5fc <tcp_input+0x290>
 800f5f0:	4b85      	ldr	r3, [pc, #532]	; (800f808 <tcp_input+0x49c>)
 800f5f2:	22e4      	movs	r2, #228	; 0xe4
 800f5f4:	4988      	ldr	r1, [pc, #544]	; (800f818 <tcp_input+0x4ac>)
 800f5f6:	4886      	ldr	r0, [pc, #536]	; (800f810 <tcp_input+0x4a4>)
 800f5f8:	f004 fd6c 	bl	80140d4 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	8b1a      	ldrh	r2, [r3, #24]
 800f600:	4b86      	ldr	r3, [pc, #536]	; (800f81c <tcp_input+0x4b0>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	881b      	ldrh	r3, [r3, #0]
 800f606:	b29b      	uxth	r3, r3
 800f608:	429a      	cmp	r2, r3
 800f60a:	d138      	bne.n	800f67e <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	8ada      	ldrh	r2, [r3, #22]
 800f610:	4b82      	ldr	r3, [pc, #520]	; (800f81c <tcp_input+0x4b0>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	885b      	ldrh	r3, [r3, #2]
 800f616:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f618:	429a      	cmp	r2, r3
 800f61a:	d130      	bne.n	800f67e <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	685a      	ldr	r2, [r3, #4]
 800f620:	4b7f      	ldr	r3, [pc, #508]	; (800f820 <tcp_input+0x4b4>)
 800f622:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f624:	429a      	cmp	r2, r3
 800f626:	d12a      	bne.n	800f67e <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	4b7c      	ldr	r3, [pc, #496]	; (800f820 <tcp_input+0x4b4>)
 800f62e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f630:	429a      	cmp	r2, r3
 800f632:	d124      	bne.n	800f67e <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	68da      	ldr	r2, [r3, #12]
 800f638:	69fb      	ldr	r3, [r7, #28]
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d105      	bne.n	800f64a <tcp_input+0x2de>
 800f63e:	4b72      	ldr	r3, [pc, #456]	; (800f808 <tcp_input+0x49c>)
 800f640:	22ec      	movs	r2, #236	; 0xec
 800f642:	4978      	ldr	r1, [pc, #480]	; (800f824 <tcp_input+0x4b8>)
 800f644:	4872      	ldr	r0, [pc, #456]	; (800f810 <tcp_input+0x4a4>)
 800f646:	f004 fd45 	bl	80140d4 <iprintf>
      if (prev != NULL) {
 800f64a:	69bb      	ldr	r3, [r7, #24]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d00a      	beq.n	800f666 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800f650:	69fb      	ldr	r3, [r7, #28]
 800f652:	68da      	ldr	r2, [r3, #12]
 800f654:	69bb      	ldr	r3, [r7, #24]
 800f656:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f658:	4b73      	ldr	r3, [pc, #460]	; (800f828 <tcp_input+0x4bc>)
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f660:	4a71      	ldr	r2, [pc, #452]	; (800f828 <tcp_input+0x4bc>)
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	68da      	ldr	r2, [r3, #12]
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d10f      	bne.n	800f690 <tcp_input+0x324>
 800f670:	4b65      	ldr	r3, [pc, #404]	; (800f808 <tcp_input+0x49c>)
 800f672:	22f4      	movs	r2, #244	; 0xf4
 800f674:	496d      	ldr	r1, [pc, #436]	; (800f82c <tcp_input+0x4c0>)
 800f676:	4866      	ldr	r0, [pc, #408]	; (800f810 <tcp_input+0x4a4>)
 800f678:	f004 fd2c 	bl	80140d4 <iprintf>
      break;
 800f67c:	e008      	b.n	800f690 <tcp_input+0x324>
    }
    prev = pcb;
 800f67e:	69fb      	ldr	r3, [r7, #28]
 800f680:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f682:	69fb      	ldr	r3, [r7, #28]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	61fb      	str	r3, [r7, #28]
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d198      	bne.n	800f5c0 <tcp_input+0x254>
 800f68e:	e000      	b.n	800f692 <tcp_input+0x326>
      break;
 800f690:	bf00      	nop
  }

  if (pcb == NULL) {
 800f692:	69fb      	ldr	r3, [r7, #28]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d173      	bne.n	800f780 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f698:	4b65      	ldr	r3, [pc, #404]	; (800f830 <tcp_input+0x4c4>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	61fb      	str	r3, [r7, #28]
 800f69e:	e02f      	b.n	800f700 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f6a0:	69fb      	ldr	r3, [r7, #28]
 800f6a2:	7d1b      	ldrb	r3, [r3, #20]
 800f6a4:	2b0a      	cmp	r3, #10
 800f6a6:	d005      	beq.n	800f6b4 <tcp_input+0x348>
 800f6a8:	4b57      	ldr	r3, [pc, #348]	; (800f808 <tcp_input+0x49c>)
 800f6aa:	22fe      	movs	r2, #254	; 0xfe
 800f6ac:	4961      	ldr	r1, [pc, #388]	; (800f834 <tcp_input+0x4c8>)
 800f6ae:	4858      	ldr	r0, [pc, #352]	; (800f810 <tcp_input+0x4a4>)
 800f6b0:	f004 fd10 	bl	80140d4 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800f6b4:	69fb      	ldr	r3, [r7, #28]
 800f6b6:	8b1a      	ldrh	r2, [r3, #24]
 800f6b8:	4b58      	ldr	r3, [pc, #352]	; (800f81c <tcp_input+0x4b0>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	881b      	ldrh	r3, [r3, #0]
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d11a      	bne.n	800f6fa <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	8ada      	ldrh	r2, [r3, #22]
 800f6c8:	4b54      	ldr	r3, [pc, #336]	; (800f81c <tcp_input+0x4b0>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	885b      	ldrh	r3, [r3, #2]
 800f6ce:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d112      	bne.n	800f6fa <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	685a      	ldr	r2, [r3, #4]
 800f6d8:	4b51      	ldr	r3, [pc, #324]	; (800f820 <tcp_input+0x4b4>)
 800f6da:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d10c      	bne.n	800f6fa <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	4b4e      	ldr	r3, [pc, #312]	; (800f820 <tcp_input+0x4b4>)
 800f6e6:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d106      	bne.n	800f6fa <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800f6ec:	69f8      	ldr	r0, [r7, #28]
 800f6ee:	f000 fb11 	bl	800fd14 <tcp_timewait_input>
        pbuf_free(p);
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f7fd ffae 	bl	800d654 <pbuf_free>
        return;
 800f6f8:	e1d6      	b.n	800faa8 <tcp_input+0x73c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6fa:	69fb      	ldr	r3, [r7, #28]
 800f6fc:	68db      	ldr	r3, [r3, #12]
 800f6fe:	61fb      	str	r3, [r7, #28]
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d1cc      	bne.n	800f6a0 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f706:	2300      	movs	r3, #0
 800f708:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f70a:	4b4b      	ldr	r3, [pc, #300]	; (800f838 <tcp_input+0x4cc>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	617b      	str	r3, [r7, #20]
 800f710:	e019      	b.n	800f746 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	8ada      	ldrh	r2, [r3, #22]
 800f716:	4b41      	ldr	r3, [pc, #260]	; (800f81c <tcp_input+0x4b0>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	885b      	ldrh	r3, [r3, #2]
 800f71c:	b29b      	uxth	r3, r3
 800f71e:	429a      	cmp	r2, r3
 800f720:	d10c      	bne.n	800f73c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	681a      	ldr	r2, [r3, #0]
 800f726:	4b3e      	ldr	r3, [pc, #248]	; (800f820 <tcp_input+0x4b4>)
 800f728:	695b      	ldr	r3, [r3, #20]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d00f      	beq.n	800f74e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d00d      	beq.n	800f750 <tcp_input+0x3e4>
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d009      	beq.n	800f750 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	617b      	str	r3, [r7, #20]
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d1e2      	bne.n	800f712 <tcp_input+0x3a6>
 800f74c:	e000      	b.n	800f750 <tcp_input+0x3e4>
            break;
 800f74e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d014      	beq.n	800f780 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f756:	69bb      	ldr	r3, [r7, #24]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d00a      	beq.n	800f772 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	68da      	ldr	r2, [r3, #12]
 800f760:	69bb      	ldr	r3, [r7, #24]
 800f762:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f764:	4b34      	ldr	r3, [pc, #208]	; (800f838 <tcp_input+0x4cc>)
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f76c:	4a32      	ldr	r2, [pc, #200]	; (800f838 <tcp_input+0x4cc>)
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800f772:	6978      	ldr	r0, [r7, #20]
 800f774:	f000 f9ec 	bl	800fb50 <tcp_listen_input>
      pbuf_free(p);
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f7fd ff6b 	bl	800d654 <pbuf_free>
      return;
 800f77e:	e193      	b.n	800faa8 <tcp_input+0x73c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	2b00      	cmp	r3, #0
 800f784:	f000 8162 	beq.w	800fa4c <tcp_input+0x6e0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f788:	4b2c      	ldr	r3, [pc, #176]	; (800f83c <tcp_input+0x4d0>)
 800f78a:	2200      	movs	r2, #0
 800f78c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	891a      	ldrh	r2, [r3, #8]
 800f792:	4b2a      	ldr	r3, [pc, #168]	; (800f83c <tcp_input+0x4d0>)
 800f794:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f796:	4a29      	ldr	r2, [pc, #164]	; (800f83c <tcp_input+0x4d0>)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f79c:	4b1f      	ldr	r3, [pc, #124]	; (800f81c <tcp_input+0x4b0>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4a26      	ldr	r2, [pc, #152]	; (800f83c <tcp_input+0x4d0>)
 800f7a2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f7a4:	4b26      	ldr	r3, [pc, #152]	; (800f840 <tcp_input+0x4d4>)
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f7aa:	4b26      	ldr	r3, [pc, #152]	; (800f844 <tcp_input+0x4d8>)
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f7b0:	4b25      	ldr	r3, [pc, #148]	; (800f848 <tcp_input+0x4dc>)
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f7b6:	4b25      	ldr	r3, [pc, #148]	; (800f84c <tcp_input+0x4e0>)
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	f003 0308 	and.w	r3, r3, #8
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d006      	beq.n	800f7d0 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	7b5b      	ldrb	r3, [r3, #13]
 800f7c6:	f043 0301 	orr.w	r3, r3, #1
 800f7ca:	b2da      	uxtb	r2, r3
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f7d0:	69fb      	ldr	r3, [r7, #28]
 800f7d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d03d      	beq.n	800f854 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f7d8:	69f8      	ldr	r0, [r7, #28]
 800f7da:	f7ff f99f 	bl	800eb1c <tcp_process_refused_data>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	f113 0f0d 	cmn.w	r3, #13
 800f7e4:	d007      	beq.n	800f7f6 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f7e6:	69fb      	ldr	r3, [r7, #28]
 800f7e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d032      	beq.n	800f854 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f7ee:	4b18      	ldr	r3, [pc, #96]	; (800f850 <tcp_input+0x4e4>)
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d02e      	beq.n	800f854 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f7f6:	69fb      	ldr	r3, [r7, #28]
 800f7f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f040 8108 	bne.w	800fa10 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f800:	69f8      	ldr	r0, [r7, #28]
 800f802:	f002 fe3d 	bl	8012480 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f806:	e103      	b.n	800fa10 <tcp_input+0x6a4>
 800f808:	08017508 	.word	0x08017508
 800f80c:	080175a0 	.word	0x080175a0
 800f810:	0801754c 	.word	0x0801754c
 800f814:	080175c8 	.word	0x080175c8
 800f818:	080175f4 	.word	0x080175f4
 800f81c:	20004200 	.word	0x20004200
 800f820:	20007424 	.word	0x20007424
 800f824:	0801761c 	.word	0x0801761c
 800f828:	2000ab34 	.word	0x2000ab34
 800f82c:	08017648 	.word	0x08017648
 800f830:	2000ab44 	.word	0x2000ab44
 800f834:	08017674 	.word	0x08017674
 800f838:	2000ab3c 	.word	0x2000ab3c
 800f83c:	200041f0 	.word	0x200041f0
 800f840:	20004220 	.word	0x20004220
 800f844:	2000421d 	.word	0x2000421d
 800f848:	20004218 	.word	0x20004218
 800f84c:	2000421c 	.word	0x2000421c
 800f850:	2000421a 	.word	0x2000421a
      }
    }
    tcp_input_pcb = pcb;
 800f854:	4a96      	ldr	r2, [pc, #600]	; (800fab0 <tcp_input+0x744>)
 800f856:	69fb      	ldr	r3, [r7, #28]
 800f858:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f85a:	69f8      	ldr	r0, [r7, #28]
 800f85c:	f000 fac2 	bl	800fde4 <tcp_process>
 800f860:	4603      	mov	r3, r0
 800f862:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f864:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f868:	f113 0f0d 	cmn.w	r3, #13
 800f86c:	f000 80db 	beq.w	800fa26 <tcp_input+0x6ba>
      if (recv_flags & TF_RESET) {
 800f870:	4b90      	ldr	r3, [pc, #576]	; (800fab4 <tcp_input+0x748>)
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	f003 0308 	and.w	r3, r3, #8
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d016      	beq.n	800f8aa <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f882:	2b00      	cmp	r3, #0
 800f884:	d008      	beq.n	800f898 <tcp_input+0x52c>
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f88c:	69fa      	ldr	r2, [r7, #28]
 800f88e:	6912      	ldr	r2, [r2, #16]
 800f890:	f06f 010d 	mvn.w	r1, #13
 800f894:	4610      	mov	r0, r2
 800f896:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f898:	69f9      	ldr	r1, [r7, #28]
 800f89a:	4887      	ldr	r0, [pc, #540]	; (800fab8 <tcp_input+0x74c>)
 800f89c:	f7ff fc4e 	bl	800f13c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800f8a0:	69f9      	ldr	r1, [r7, #28]
 800f8a2:	2001      	movs	r0, #1
 800f8a4:	f7fd f922 	bl	800caec <memp_free>
 800f8a8:	e0bd      	b.n	800fa26 <tcp_input+0x6ba>
      } else {
        err = ERR_OK;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f8ae:	4b83      	ldr	r3, [pc, #524]	; (800fabc <tcp_input+0x750>)
 800f8b0:	881b      	ldrh	r3, [r3, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d01b      	beq.n	800f8ee <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f8b6:	4b81      	ldr	r3, [pc, #516]	; (800fabc <tcp_input+0x750>)
 800f8b8:	881b      	ldrh	r3, [r3, #0]
 800f8ba:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d009      	beq.n	800f8d8 <tcp_input+0x56c>
 800f8c4:	69fb      	ldr	r3, [r7, #28]
 800f8c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8c8:	69fa      	ldr	r2, [r7, #28]
 800f8ca:	6910      	ldr	r0, [r2, #16]
 800f8cc:	89fa      	ldrh	r2, [r7, #14]
 800f8ce:	69f9      	ldr	r1, [r7, #28]
 800f8d0:	4798      	blx	r3
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	74fb      	strb	r3, [r7, #19]
 800f8d6:	e001      	b.n	800f8dc <tcp_input+0x570>
 800f8d8:	2300      	movs	r3, #0
 800f8da:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f8dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8e0:	f113 0f0d 	cmn.w	r3, #13
 800f8e4:	f000 8096 	beq.w	800fa14 <tcp_input+0x6a8>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f8e8:	4b74      	ldr	r3, [pc, #464]	; (800fabc <tcp_input+0x750>)
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f8ee:	69f8      	ldr	r0, [r7, #28]
 800f8f0:	f000 f8fc 	bl	800faec <tcp_input_delayed_close>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	f040 808e 	bne.w	800fa18 <tcp_input+0x6ac>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f8fc:	4b70      	ldr	r3, [pc, #448]	; (800fac0 <tcp_input+0x754>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d041      	beq.n	800f988 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d006      	beq.n	800f91a <tcp_input+0x5ae>
 800f90c:	4b6d      	ldr	r3, [pc, #436]	; (800fac4 <tcp_input+0x758>)
 800f90e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800f912:	496d      	ldr	r1, [pc, #436]	; (800fac8 <tcp_input+0x75c>)
 800f914:	486d      	ldr	r0, [pc, #436]	; (800facc <tcp_input+0x760>)
 800f916:	f004 fbdd 	bl	80140d4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	7e9b      	ldrb	r3, [r3, #26]
 800f91e:	f003 0310 	and.w	r3, r3, #16
 800f922:	2b00      	cmp	r3, #0
 800f924:	d008      	beq.n	800f938 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f926:	4b66      	ldr	r3, [pc, #408]	; (800fac0 <tcp_input+0x754>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7fd fe92 	bl	800d654 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f930:	69f8      	ldr	r0, [r7, #28]
 800f932:	f7fe fbe1 	bl	800e0f8 <tcp_abort>
            goto aborted;
 800f936:	e076      	b.n	800fa26 <tcp_input+0x6ba>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d00c      	beq.n	800f95c <tcp_input+0x5f0>
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	6918      	ldr	r0, [r3, #16]
 800f94c:	4b5c      	ldr	r3, [pc, #368]	; (800fac0 <tcp_input+0x754>)
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	2300      	movs	r3, #0
 800f952:	69f9      	ldr	r1, [r7, #28]
 800f954:	47a0      	blx	r4
 800f956:	4603      	mov	r3, r0
 800f958:	74fb      	strb	r3, [r7, #19]
 800f95a:	e008      	b.n	800f96e <tcp_input+0x602>
 800f95c:	4b58      	ldr	r3, [pc, #352]	; (800fac0 <tcp_input+0x754>)
 800f95e:	681a      	ldr	r2, [r3, #0]
 800f960:	2300      	movs	r3, #0
 800f962:	69f9      	ldr	r1, [r7, #28]
 800f964:	2000      	movs	r0, #0
 800f966:	f7ff f98a 	bl	800ec7e <tcp_recv_null>
 800f96a:	4603      	mov	r3, r0
 800f96c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f96e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f972:	f113 0f0d 	cmn.w	r3, #13
 800f976:	d051      	beq.n	800fa1c <tcp_input+0x6b0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f978:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d003      	beq.n	800f988 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f980:	4b4f      	ldr	r3, [pc, #316]	; (800fac0 <tcp_input+0x754>)
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f988:	4b4a      	ldr	r3, [pc, #296]	; (800fab4 <tcp_input+0x748>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	f003 0320 	and.w	r3, r3, #32
 800f990:	2b00      	cmp	r3, #0
 800f992:	d030      	beq.n	800f9f6 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800f994:	69fb      	ldr	r3, [r7, #28]
 800f996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d009      	beq.n	800f9b0 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9a0:	69fa      	ldr	r2, [r7, #28]
 800f9a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800f9a4:	7b52      	ldrb	r2, [r2, #13]
 800f9a6:	f042 0220 	orr.w	r2, r2, #32
 800f9aa:	b2d2      	uxtb	r2, r2
 800f9ac:	735a      	strb	r2, [r3, #13]
 800f9ae:	e022      	b.n	800f9f6 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f9b0:	69fb      	ldr	r3, [r7, #28]
 800f9b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9b4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f9b8:	d005      	beq.n	800f9c6 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800f9ba:	69fb      	ldr	r3, [r7, #28]
 800f9bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9be:	3301      	adds	r3, #1
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	69fb      	ldr	r3, [r7, #28]
 800f9c4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d00b      	beq.n	800f9e8 <tcp_input+0x67c>
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800f9d6:	69fb      	ldr	r3, [r7, #28]
 800f9d8:	6918      	ldr	r0, [r3, #16]
 800f9da:	2300      	movs	r3, #0
 800f9dc:	2200      	movs	r2, #0
 800f9de:	69f9      	ldr	r1, [r7, #28]
 800f9e0:	47a0      	blx	r4
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	74fb      	strb	r3, [r7, #19]
 800f9e6:	e001      	b.n	800f9ec <tcp_input+0x680>
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f9ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9f0:	f113 0f0d 	cmn.w	r3, #13
 800f9f4:	d014      	beq.n	800fa20 <tcp_input+0x6b4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f9f6:	4b2e      	ldr	r3, [pc, #184]	; (800fab0 <tcp_input+0x744>)
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f9fc:	69f8      	ldr	r0, [r7, #28]
 800f9fe:	f000 f875 	bl	800faec <tcp_input_delayed_close>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d10d      	bne.n	800fa24 <tcp_input+0x6b8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fa08:	69f8      	ldr	r0, [r7, #28]
 800fa0a:	f002 fd95 	bl	8012538 <tcp_output>
 800fa0e:	e00a      	b.n	800fa26 <tcp_input+0x6ba>
        goto aborted;
 800fa10:	bf00      	nop
 800fa12:	e008      	b.n	800fa26 <tcp_input+0x6ba>
              goto aborted;
 800fa14:	bf00      	nop
 800fa16:	e006      	b.n	800fa26 <tcp_input+0x6ba>
          goto aborted;
 800fa18:	bf00      	nop
 800fa1a:	e004      	b.n	800fa26 <tcp_input+0x6ba>
            goto aborted;
 800fa1c:	bf00      	nop
 800fa1e:	e002      	b.n	800fa26 <tcp_input+0x6ba>
              goto aborted;
 800fa20:	bf00      	nop
 800fa22:	e000      	b.n	800fa26 <tcp_input+0x6ba>
          goto aborted;
 800fa24:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 800fa26:	4b22      	ldr	r3, [pc, #136]	; (800fab0 <tcp_input+0x744>)
 800fa28:	2200      	movs	r2, #0
 800fa2a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fa2c:	4b24      	ldr	r3, [pc, #144]	; (800fac0 <tcp_input+0x754>)
 800fa2e:	2200      	movs	r2, #0
 800fa30:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800fa32:	4b27      	ldr	r3, [pc, #156]	; (800fad0 <tcp_input+0x764>)
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d035      	beq.n	800faa6 <tcp_input+0x73a>
    {
      pbuf_free(inseg.p);
 800fa3a:	4b25      	ldr	r3, [pc, #148]	; (800fad0 <tcp_input+0x764>)
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f7fd fe08 	bl	800d654 <pbuf_free>
      inseg.p = NULL;
 800fa44:	4b22      	ldr	r3, [pc, #136]	; (800fad0 <tcp_input+0x764>)
 800fa46:	2200      	movs	r2, #0
 800fa48:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fa4a:	e02c      	b.n	800faa6 <tcp_input+0x73a>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fa4c:	4b21      	ldr	r3, [pc, #132]	; (800fad4 <tcp_input+0x768>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	899b      	ldrh	r3, [r3, #12]
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7fa f997 	bl	8009d88 <lwip_htons>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	f003 0304 	and.w	r3, r3, #4
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d115      	bne.n	800fa90 <tcp_input+0x724>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa64:	4b1c      	ldr	r3, [pc, #112]	; (800fad8 <tcp_input+0x76c>)
 800fa66:	6818      	ldr	r0, [r3, #0]
 800fa68:	4b1c      	ldr	r3, [pc, #112]	; (800fadc <tcp_input+0x770>)
 800fa6a:	881b      	ldrh	r3, [r3, #0]
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	4b1c      	ldr	r3, [pc, #112]	; (800fae0 <tcp_input+0x774>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa74:	4b17      	ldr	r3, [pc, #92]	; (800fad4 <tcp_input+0x768>)
 800fa76:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa78:	885b      	ldrh	r3, [r3, #2]
 800fa7a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa7c:	4a15      	ldr	r2, [pc, #84]	; (800fad4 <tcp_input+0x768>)
 800fa7e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa80:	8812      	ldrh	r2, [r2, #0]
 800fa82:	b292      	uxth	r2, r2
 800fa84:	9201      	str	r2, [sp, #4]
 800fa86:	9300      	str	r3, [sp, #0]
 800fa88:	4b16      	ldr	r3, [pc, #88]	; (800fae4 <tcp_input+0x778>)
 800fa8a:	4a17      	ldr	r2, [pc, #92]	; (800fae8 <tcp_input+0x77c>)
 800fa8c:	f002 ffdc 	bl	8012a48 <tcp_rst>
    pbuf_free(p);
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f7fd fddf 	bl	800d654 <pbuf_free>
  return;
 800fa96:	e006      	b.n	800faa6 <tcp_input+0x73a>
    goto dropped;
 800fa98:	bf00      	nop
 800fa9a:	e000      	b.n	800fa9e <tcp_input+0x732>
      goto dropped;
 800fa9c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f7fd fdd8 	bl	800d654 <pbuf_free>
 800faa4:	e000      	b.n	800faa8 <tcp_input+0x73c>
  return;
 800faa6:	bf00      	nop
}
 800faa8:	3724      	adds	r7, #36	; 0x24
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd90      	pop	{r4, r7, pc}
 800faae:	bf00      	nop
 800fab0:	2000ab48 	.word	0x2000ab48
 800fab4:	2000421d 	.word	0x2000421d
 800fab8:	2000ab34 	.word	0x2000ab34
 800fabc:	20004218 	.word	0x20004218
 800fac0:	20004220 	.word	0x20004220
 800fac4:	08017508 	.word	0x08017508
 800fac8:	080176a4 	.word	0x080176a4
 800facc:	0801754c 	.word	0x0801754c
 800fad0:	200041f0 	.word	0x200041f0
 800fad4:	20004200 	.word	0x20004200
 800fad8:	20004214 	.word	0x20004214
 800fadc:	2000421a 	.word	0x2000421a
 800fae0:	20004210 	.word	0x20004210
 800fae4:	20007434 	.word	0x20007434
 800fae8:	20007438 	.word	0x20007438

0800faec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800faf4:	4b14      	ldr	r3, [pc, #80]	; (800fb48 <tcp_input_delayed_close+0x5c>)
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	f003 0310 	and.w	r3, r3, #16
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d01d      	beq.n	800fb3c <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	7e9b      	ldrb	r3, [r3, #26]
 800fb04:	f003 0310 	and.w	r3, r3, #16
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d10d      	bne.n	800fb28 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d008      	beq.n	800fb28 <tcp_input_delayed_close+0x3c>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb1c:	687a      	ldr	r2, [r7, #4]
 800fb1e:	6912      	ldr	r2, [r2, #16]
 800fb20:	f06f 010e 	mvn.w	r1, #14
 800fb24:	4610      	mov	r0, r2
 800fb26:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fb28:	6879      	ldr	r1, [r7, #4]
 800fb2a:	4808      	ldr	r0, [pc, #32]	; (800fb4c <tcp_input_delayed_close+0x60>)
 800fb2c:	f7ff fb06 	bl	800f13c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800fb30:	6879      	ldr	r1, [r7, #4]
 800fb32:	2001      	movs	r0, #1
 800fb34:	f7fc ffda 	bl	800caec <memp_free>
    return 1;
 800fb38:	2301      	movs	r3, #1
 800fb3a:	e000      	b.n	800fb3e <tcp_input_delayed_close+0x52>
  }
  return 0;
 800fb3c:	2300      	movs	r3, #0
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3708      	adds	r7, #8
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	2000421d 	.word	0x2000421d
 800fb4c:	2000ab34 	.word	0x2000ab34

0800fb50 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b088      	sub	sp, #32
 800fb54:	af02      	add	r7, sp, #8
 800fb56:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fb58:	4b64      	ldr	r3, [pc, #400]	; (800fcec <tcp_listen_input+0x19c>)
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	f003 0304 	and.w	r3, r3, #4
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	f040 80bc 	bne.w	800fcde <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fb66:	4b61      	ldr	r3, [pc, #388]	; (800fcec <tcp_listen_input+0x19c>)
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	f003 0310 	and.w	r3, r3, #16
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d016      	beq.n	800fba0 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb72:	4b5f      	ldr	r3, [pc, #380]	; (800fcf0 <tcp_listen_input+0x1a0>)
 800fb74:	6818      	ldr	r0, [r3, #0]
 800fb76:	4b5f      	ldr	r3, [pc, #380]	; (800fcf4 <tcp_listen_input+0x1a4>)
 800fb78:	881b      	ldrh	r3, [r3, #0]
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	4b5e      	ldr	r3, [pc, #376]	; (800fcf8 <tcp_listen_input+0x1a8>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb82:	4b5e      	ldr	r3, [pc, #376]	; (800fcfc <tcp_listen_input+0x1ac>)
 800fb84:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb86:	885b      	ldrh	r3, [r3, #2]
 800fb88:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb8a:	4a5c      	ldr	r2, [pc, #368]	; (800fcfc <tcp_listen_input+0x1ac>)
 800fb8c:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb8e:	8812      	ldrh	r2, [r2, #0]
 800fb90:	b292      	uxth	r2, r2
 800fb92:	9201      	str	r2, [sp, #4]
 800fb94:	9300      	str	r3, [sp, #0]
 800fb96:	4b5a      	ldr	r3, [pc, #360]	; (800fd00 <tcp_listen_input+0x1b0>)
 800fb98:	4a5a      	ldr	r2, [pc, #360]	; (800fd04 <tcp_listen_input+0x1b4>)
 800fb9a:	f002 ff55 	bl	8012a48 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fb9e:	e0a0      	b.n	800fce2 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800fba0:	4b52      	ldr	r3, [pc, #328]	; (800fcec <tcp_listen_input+0x19c>)
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	f003 0302 	and.w	r3, r3, #2
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	f000 809a 	beq.w	800fce2 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	7d5b      	ldrb	r3, [r3, #21]
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7ff f942 	bl	800ee3c <tcp_alloc>
 800fbb8:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d111      	bne.n	800fbe4 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	699b      	ldr	r3, [r3, #24]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d00a      	beq.n	800fbde <tcp_listen_input+0x8e>
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	699b      	ldr	r3, [r3, #24]
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	6910      	ldr	r0, [r2, #16]
 800fbd0:	f04f 32ff 	mov.w	r2, #4294967295
 800fbd4:	2100      	movs	r1, #0
 800fbd6:	4798      	blx	r3
 800fbd8:	4603      	mov	r3, r0
 800fbda:	74fb      	strb	r3, [r7, #19]
      return;
 800fbdc:	e082      	b.n	800fce4 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fbde:	23f0      	movs	r3, #240	; 0xf0
 800fbe0:	74fb      	strb	r3, [r7, #19]
      return;
 800fbe2:	e07f      	b.n	800fce4 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fbe4:	4b48      	ldr	r3, [pc, #288]	; (800fd08 <tcp_listen_input+0x1b8>)
 800fbe6:	695a      	ldr	r2, [r3, #20]
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fbec:	4b46      	ldr	r3, [pc, #280]	; (800fd08 <tcp_listen_input+0x1b8>)
 800fbee:	691a      	ldr	r2, [r3, #16]
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	8ada      	ldrh	r2, [r3, #22]
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fbfc:	4b3f      	ldr	r3, [pc, #252]	; (800fcfc <tcp_listen_input+0x1ac>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	881b      	ldrh	r3, [r3, #0]
 800fc02:	b29a      	uxth	r2, r3
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	2203      	movs	r2, #3
 800fc0c:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fc0e:	4b3a      	ldr	r3, [pc, #232]	; (800fcf8 <tcp_listen_input+0x1a8>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	1c5a      	adds	r2, r3, #1
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fc20:	6978      	ldr	r0, [r7, #20]
 800fc22:	f7ff fb07 	bl	800f234 <tcp_next_iss>
 800fc26:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	68fa      	ldr	r2, [r7, #12]
 800fc2c:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	68fa      	ldr	r2, [r7, #12]
 800fc32:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	68fa      	ldr	r2, [r7, #12]
 800fc38:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	68fa      	ldr	r2, [r7, #12]
 800fc3e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fc40:	4b2d      	ldr	r3, [pc, #180]	; (800fcf8 <tcp_listen_input+0x1a8>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	1e5a      	subs	r2, r3, #1
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	691a      	ldr	r2, [r3, #16]
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	687a      	ldr	r2, [r7, #4]
 800fc56:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	7a1b      	ldrb	r3, [r3, #8]
 800fc5c:	f003 030c 	and.w	r3, r3, #12
 800fc60:	b2da      	uxtb	r2, r3
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fc66:	4b29      	ldr	r3, [pc, #164]	; (800fd0c <tcp_listen_input+0x1bc>)
 800fc68:	681a      	ldr	r2, [r3, #0]
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	60da      	str	r2, [r3, #12]
 800fc6e:	4a27      	ldr	r2, [pc, #156]	; (800fd0c <tcp_listen_input+0x1bc>)
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	6013      	str	r3, [r2, #0]
 800fc74:	f003 f938 	bl	8012ee8 <tcp_timer_needed>
 800fc78:	4b25      	ldr	r3, [pc, #148]	; (800fd10 <tcp_listen_input+0x1c0>)
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fc7e:	6978      	ldr	r0, [r7, #20]
 800fc80:	f001 fd14 	bl	80116ac <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fc84:	4b1d      	ldr	r3, [pc, #116]	; (800fcfc <tcp_listen_input+0x1ac>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	89db      	ldrh	r3, [r3, #14]
 800fc8a:	b29a      	uxth	r2, r3
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	3304      	adds	r3, #4
 800fca6:	4619      	mov	r1, r3
 800fca8:	4610      	mov	r0, r2
 800fcaa:	f7ff fad9 	bl	800f260 <tcp_eff_send_mss_impl>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fcb6:	2112      	movs	r1, #18
 800fcb8:	6978      	ldr	r0, [r7, #20]
 800fcba:	f002 fae3 	bl	8012284 <tcp_enqueue_flags>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 800fcc2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d004      	beq.n	800fcd4 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800fcca:	2100      	movs	r1, #0
 800fccc:	6978      	ldr	r0, [r7, #20]
 800fcce:	f7fe f961 	bl	800df94 <tcp_abandon>
      return;
 800fcd2:	e007      	b.n	800fce4 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800fcd4:	6978      	ldr	r0, [r7, #20]
 800fcd6:	f002 fc2f 	bl	8012538 <tcp_output>
  return;
 800fcda:	bf00      	nop
 800fcdc:	e001      	b.n	800fce2 <tcp_listen_input+0x192>
    return;
 800fcde:	bf00      	nop
 800fce0:	e000      	b.n	800fce4 <tcp_listen_input+0x194>
  return;
 800fce2:	bf00      	nop
}
 800fce4:	3718      	adds	r7, #24
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop
 800fcec:	2000421c 	.word	0x2000421c
 800fcf0:	20004214 	.word	0x20004214
 800fcf4:	2000421a 	.word	0x2000421a
 800fcf8:	20004210 	.word	0x20004210
 800fcfc:	20004200 	.word	0x20004200
 800fd00:	20007434 	.word	0x20007434
 800fd04:	20007438 	.word	0x20007438
 800fd08:	20007424 	.word	0x20007424
 800fd0c:	2000ab34 	.word	0x2000ab34
 800fd10:	2000ab30 	.word	0x2000ab30

0800fd14 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af02      	add	r7, sp, #8
 800fd1a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fd1c:	4b29      	ldr	r3, [pc, #164]	; (800fdc4 <tcp_timewait_input+0xb0>)
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	f003 0304 	and.w	r3, r3, #4
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d147      	bne.n	800fdb8 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fd28:	4b26      	ldr	r3, [pc, #152]	; (800fdc4 <tcp_timewait_input+0xb0>)
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	f003 0302 	and.w	r3, r3, #2
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d027      	beq.n	800fd84 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fd34:	4b24      	ldr	r3, [pc, #144]	; (800fdc8 <tcp_timewait_input+0xb4>)
 800fd36:	681a      	ldr	r2, [r3, #0]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd3c:	1ad3      	subs	r3, r2, r3
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	db2a      	blt.n	800fd98 <tcp_timewait_input+0x84>
 800fd42:	4b21      	ldr	r3, [pc, #132]	; (800fdc8 <tcp_timewait_input+0xb4>)
 800fd44:	681a      	ldr	r2, [r3, #0]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd4a:	6879      	ldr	r1, [r7, #4]
 800fd4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd4e:	440b      	add	r3, r1
 800fd50:	1ad3      	subs	r3, r2, r3
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	dc20      	bgt.n	800fd98 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd56:	4b1d      	ldr	r3, [pc, #116]	; (800fdcc <tcp_timewait_input+0xb8>)
 800fd58:	6818      	ldr	r0, [r3, #0]
 800fd5a:	4b1d      	ldr	r3, [pc, #116]	; (800fdd0 <tcp_timewait_input+0xbc>)
 800fd5c:	881b      	ldrh	r3, [r3, #0]
 800fd5e:	461a      	mov	r2, r3
 800fd60:	4b19      	ldr	r3, [pc, #100]	; (800fdc8 <tcp_timewait_input+0xb4>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd66:	4b1b      	ldr	r3, [pc, #108]	; (800fdd4 <tcp_timewait_input+0xc0>)
 800fd68:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd6a:	885b      	ldrh	r3, [r3, #2]
 800fd6c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd6e:	4a19      	ldr	r2, [pc, #100]	; (800fdd4 <tcp_timewait_input+0xc0>)
 800fd70:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd72:	8812      	ldrh	r2, [r2, #0]
 800fd74:	b292      	uxth	r2, r2
 800fd76:	9201      	str	r2, [sp, #4]
 800fd78:	9300      	str	r3, [sp, #0]
 800fd7a:	4b17      	ldr	r3, [pc, #92]	; (800fdd8 <tcp_timewait_input+0xc4>)
 800fd7c:	4a17      	ldr	r2, [pc, #92]	; (800fddc <tcp_timewait_input+0xc8>)
 800fd7e:	f002 fe63 	bl	8012a48 <tcp_rst>
      return;
 800fd82:	e01c      	b.n	800fdbe <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800fd84:	4b0f      	ldr	r3, [pc, #60]	; (800fdc4 <tcp_timewait_input+0xb0>)
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	f003 0301 	and.w	r3, r3, #1
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d003      	beq.n	800fd98 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fd90:	4b13      	ldr	r3, [pc, #76]	; (800fde0 <tcp_timewait_input+0xcc>)
 800fd92:	681a      	ldr	r2, [r3, #0]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fd98:	4b0d      	ldr	r3, [pc, #52]	; (800fdd0 <tcp_timewait_input+0xbc>)
 800fd9a:	881b      	ldrh	r3, [r3, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d00d      	beq.n	800fdbc <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	7e9b      	ldrb	r3, [r3, #26]
 800fda4:	f043 0302 	orr.w	r3, r3, #2
 800fda8:	b2da      	uxtb	r2, r3
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f002 fbc2 	bl	8012538 <tcp_output>
  }
  return;
 800fdb4:	bf00      	nop
 800fdb6:	e001      	b.n	800fdbc <tcp_timewait_input+0xa8>
    return;
 800fdb8:	bf00      	nop
 800fdba:	e000      	b.n	800fdbe <tcp_timewait_input+0xaa>
  return;
 800fdbc:	bf00      	nop
}
 800fdbe:	3708      	adds	r7, #8
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	2000421c 	.word	0x2000421c
 800fdc8:	20004210 	.word	0x20004210
 800fdcc:	20004214 	.word	0x20004214
 800fdd0:	2000421a 	.word	0x2000421a
 800fdd4:	20004200 	.word	0x20004200
 800fdd8:	20007434 	.word	0x20007434
 800fddc:	20007438 	.word	0x20007438
 800fde0:	2000ab38 	.word	0x2000ab38

0800fde4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b08a      	sub	sp, #40	; 0x28
 800fde8:	af02      	add	r7, sp, #8
 800fdea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fdec:	2300      	movs	r3, #0
 800fdee:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fdf4:	4ba4      	ldr	r3, [pc, #656]	; (8010088 <tcp_process+0x2a4>)
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	f003 0304 	and.w	r3, r3, #4
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d04e      	beq.n	800fe9e <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	7d1b      	ldrb	r3, [r3, #20]
 800fe04:	2b02      	cmp	r3, #2
 800fe06:	d108      	bne.n	800fe1a <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fe0c:	4b9f      	ldr	r3, [pc, #636]	; (801008c <tcp_process+0x2a8>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	429a      	cmp	r2, r3
 800fe12:	d123      	bne.n	800fe5c <tcp_process+0x78>
        acceptable = 1;
 800fe14:	2301      	movs	r3, #1
 800fe16:	76fb      	strb	r3, [r7, #27]
 800fe18:	e020      	b.n	800fe5c <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe1e:	4b9c      	ldr	r3, [pc, #624]	; (8010090 <tcp_process+0x2ac>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d102      	bne.n	800fe2c <tcp_process+0x48>
        acceptable = 1;
 800fe26:	2301      	movs	r3, #1
 800fe28:	76fb      	strb	r3, [r7, #27]
 800fe2a:	e017      	b.n	800fe5c <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe2c:	4b98      	ldr	r3, [pc, #608]	; (8010090 <tcp_process+0x2ac>)
 800fe2e:	681a      	ldr	r2, [r3, #0]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe34:	1ad3      	subs	r3, r2, r3
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	db10      	blt.n	800fe5c <tcp_process+0x78>
 800fe3a:	4b95      	ldr	r3, [pc, #596]	; (8010090 <tcp_process+0x2ac>)
 800fe3c:	681a      	ldr	r2, [r3, #0]
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe42:	6879      	ldr	r1, [r7, #4]
 800fe44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe46:	440b      	add	r3, r1
 800fe48:	1ad3      	subs	r3, r2, r3
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	dc06      	bgt.n	800fe5c <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	7e9b      	ldrb	r3, [r3, #26]
 800fe52:	f043 0302 	orr.w	r3, r3, #2
 800fe56:	b2da      	uxtb	r2, r3
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fe5c:	7efb      	ldrb	r3, [r7, #27]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d01b      	beq.n	800fe9a <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	7d1b      	ldrb	r3, [r3, #20]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d106      	bne.n	800fe78 <tcp_process+0x94>
 800fe6a:	4b8a      	ldr	r3, [pc, #552]	; (8010094 <tcp_process+0x2b0>)
 800fe6c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800fe70:	4989      	ldr	r1, [pc, #548]	; (8010098 <tcp_process+0x2b4>)
 800fe72:	488a      	ldr	r0, [pc, #552]	; (801009c <tcp_process+0x2b8>)
 800fe74:	f004 f92e 	bl	80140d4 <iprintf>
      recv_flags |= TF_RESET;
 800fe78:	4b89      	ldr	r3, [pc, #548]	; (80100a0 <tcp_process+0x2bc>)
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	f043 0308 	orr.w	r3, r3, #8
 800fe80:	b2da      	uxtb	r2, r3
 800fe82:	4b87      	ldr	r3, [pc, #540]	; (80100a0 <tcp_process+0x2bc>)
 800fe84:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	7e9b      	ldrb	r3, [r3, #26]
 800fe8a:	f023 0301 	bic.w	r3, r3, #1
 800fe8e:	b2da      	uxtb	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800fe94:	f06f 030d 	mvn.w	r3, #13
 800fe98:	e34d      	b.n	8010536 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	e34b      	b.n	8010536 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fe9e:	4b7a      	ldr	r3, [pc, #488]	; (8010088 <tcp_process+0x2a4>)
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	f003 0302 	and.w	r3, r3, #2
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d010      	beq.n	800fecc <tcp_process+0xe8>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	7d1b      	ldrb	r3, [r3, #20]
 800feae:	2b02      	cmp	r3, #2
 800feb0:	d00c      	beq.n	800fecc <tcp_process+0xe8>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	7d1b      	ldrb	r3, [r3, #20]
 800feb6:	2b03      	cmp	r3, #3
 800feb8:	d008      	beq.n	800fecc <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	7e9b      	ldrb	r3, [r3, #26]
 800febe:	f043 0302 	orr.w	r3, r3, #2
 800fec2:	b2da      	uxtb	r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800fec8:	2300      	movs	r3, #0
 800feca:	e334      	b.n	8010536 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	7e9b      	ldrb	r3, [r3, #26]
 800fed0:	f003 0310 	and.w	r3, r3, #16
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d103      	bne.n	800fee0 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fed8:	4b72      	ldr	r3, [pc, #456]	; (80100a4 <tcp_process+0x2c0>)
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2200      	movs	r2, #0
 800fee4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f001 fbdf 	bl	80116ac <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	7d1b      	ldrb	r3, [r3, #20]
 800fef2:	3b02      	subs	r3, #2
 800fef4:	2b07      	cmp	r3, #7
 800fef6:	f200 830e 	bhi.w	8010516 <tcp_process+0x732>
 800fefa:	a201      	add	r2, pc, #4	; (adr r2, 800ff00 <tcp_process+0x11c>)
 800fefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff00:	0800ff21 	.word	0x0800ff21
 800ff04:	08010119 	.word	0x08010119
 800ff08:	08010271 	.word	0x08010271
 800ff0c:	0801029b 	.word	0x0801029b
 800ff10:	080103c5 	.word	0x080103c5
 800ff14:	08010271 	.word	0x08010271
 800ff18:	08010451 	.word	0x08010451
 800ff1c:	080104e1 	.word	0x080104e1
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ff20:	4b59      	ldr	r3, [pc, #356]	; (8010088 <tcp_process+0x2a4>)
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	f003 0310 	and.w	r3, r3, #16
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	f000 80cb 	beq.w	80100c4 <tcp_process+0x2e0>
 800ff2e:	4b56      	ldr	r3, [pc, #344]	; (8010088 <tcp_process+0x2a4>)
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	f003 0302 	and.w	r3, r3, #2
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	f000 80c4 	beq.w	80100c4 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff40:	1c5a      	adds	r2, r3, #1
 800ff42:	4b52      	ldr	r3, [pc, #328]	; (801008c <tcp_process+0x2a8>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	429a      	cmp	r2, r3
 800ff48:	f040 80bc 	bne.w	80100c4 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800ff4c:	4b50      	ldr	r3, [pc, #320]	; (8010090 <tcp_process+0x2ac>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	1c5a      	adds	r2, r3, #1
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800ff5e:	4b4b      	ldr	r3, [pc, #300]	; (801008c <tcp_process+0x2a8>)
 800ff60:	681a      	ldr	r2, [r3, #0]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800ff66:	4b50      	ldr	r3, [pc, #320]	; (80100a8 <tcp_process+0x2c4>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	89db      	ldrh	r3, [r3, #14]
 800ff6c:	b29a      	uxth	r2, r3
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ff80:	4b43      	ldr	r3, [pc, #268]	; (8010090 <tcp_process+0x2ac>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	1e5a      	subs	r2, r3, #1
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2204      	movs	r2, #4
 800ff8e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	3304      	adds	r3, #4
 800ff98:	4619      	mov	r1, r3
 800ff9a:	4610      	mov	r0, r2
 800ff9c:	f7ff f960 	bl	800f260 <tcp_eff_send_mss_impl>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffac:	005b      	lsls	r3, r3, #1
 800ffae:	f241 121c 	movw	r2, #4380	; 0x111c
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	bf38      	it	cc
 800ffb6:	461a      	movcc	r2, r3
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffbc:	009b      	lsls	r3, r3, #2
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	bf28      	it	cs
 800ffc2:	4613      	movcs	r3, r2
 800ffc4:	b29a      	uxth	r2, r3
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d106      	bne.n	800ffe4 <tcp_process+0x200>
 800ffd6:	4b2f      	ldr	r3, [pc, #188]	; (8010094 <tcp_process+0x2b0>)
 800ffd8:	f240 321a 	movw	r2, #794	; 0x31a
 800ffdc:	4933      	ldr	r1, [pc, #204]	; (80100ac <tcp_process+0x2c8>)
 800ffde:	482f      	ldr	r0, [pc, #188]	; (801009c <tcp_process+0x2b8>)
 800ffe0:	f004 f878 	bl	80140d4 <iprintf>
      --pcb->snd_queuelen;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ffea:	3b01      	subs	r3, #1
 800ffec:	b29a      	uxth	r2, r3
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fff8:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800fffa:	69fb      	ldr	r3, [r7, #28]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d111      	bne.n	8010024 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010004:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8010006:	69fb      	ldr	r3, [r7, #28]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d106      	bne.n	801001a <tcp_process+0x236>
 801000c:	4b21      	ldr	r3, [pc, #132]	; (8010094 <tcp_process+0x2b0>)
 801000e:	f240 3222 	movw	r2, #802	; 0x322
 8010012:	4927      	ldr	r1, [pc, #156]	; (80100b0 <tcp_process+0x2cc>)
 8010014:	4821      	ldr	r0, [pc, #132]	; (801009c <tcp_process+0x2b8>)
 8010016:	f004 f85d 	bl	80140d4 <iprintf>
        pcb->unsent = rseg->next;
 801001a:	69fb      	ldr	r3, [r7, #28]
 801001c:	681a      	ldr	r2, [r3, #0]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	669a      	str	r2, [r3, #104]	; 0x68
 8010022:	e003      	b.n	801002c <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8010024:	69fb      	ldr	r3, [r7, #28]
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 801002c:	69f8      	ldr	r0, [r7, #28]
 801002e:	f7fe fdf2 	bl	800ec16 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010036:	2b00      	cmp	r3, #0
 8010038:	d104      	bne.n	8010044 <tcp_process+0x260>
        pcb->rtime = -1;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010040:	861a      	strh	r2, [r3, #48]	; 0x30
 8010042:	e006      	b.n	8010052 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2200      	movs	r2, #0
 8010048:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2200      	movs	r2, #0
 801004e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010058:	2b00      	cmp	r3, #0
 801005a:	d00a      	beq.n	8010072 <tcp_process+0x28e>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010062:	687a      	ldr	r2, [r7, #4]
 8010064:	6910      	ldr	r0, [r2, #16]
 8010066:	2200      	movs	r2, #0
 8010068:	6879      	ldr	r1, [r7, #4]
 801006a:	4798      	blx	r3
 801006c:	4603      	mov	r3, r0
 801006e:	76bb      	strb	r3, [r7, #26]
 8010070:	e001      	b.n	8010076 <tcp_process+0x292>
 8010072:	2300      	movs	r3, #0
 8010074:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8010076:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801007a:	f113 0f0d 	cmn.w	r3, #13
 801007e:	d119      	bne.n	80100b4 <tcp_process+0x2d0>
        return ERR_ABRT;
 8010080:	f06f 030c 	mvn.w	r3, #12
 8010084:	e257      	b.n	8010536 <tcp_process+0x752>
 8010086:	bf00      	nop
 8010088:	2000421c 	.word	0x2000421c
 801008c:	20004214 	.word	0x20004214
 8010090:	20004210 	.word	0x20004210
 8010094:	08017508 	.word	0x08017508
 8010098:	080176c0 	.word	0x080176c0
 801009c:	0801754c 	.word	0x0801754c
 80100a0:	2000421d 	.word	0x2000421d
 80100a4:	2000ab38 	.word	0x2000ab38
 80100a8:	20004200 	.word	0x20004200
 80100ac:	080176e0 	.word	0x080176e0
 80100b0:	080176f8 	.word	0x080176f8
      }
      tcp_ack_now(pcb);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	7e9b      	ldrb	r3, [r3, #26]
 80100b8:	f043 0302 	orr.w	r3, r3, #2
 80100bc:	b2da      	uxtb	r2, r3
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 80100c2:	e22a      	b.n	801051a <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 80100c4:	4b9f      	ldr	r3, [pc, #636]	; (8010344 <tcp_process+0x560>)
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	f003 0310 	and.w	r3, r3, #16
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	f000 8224 	beq.w	801051a <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80100d2:	4b9d      	ldr	r3, [pc, #628]	; (8010348 <tcp_process+0x564>)
 80100d4:	6818      	ldr	r0, [r3, #0]
 80100d6:	4b9d      	ldr	r3, [pc, #628]	; (801034c <tcp_process+0x568>)
 80100d8:	881b      	ldrh	r3, [r3, #0]
 80100da:	461a      	mov	r2, r3
 80100dc:	4b9c      	ldr	r3, [pc, #624]	; (8010350 <tcp_process+0x56c>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100e2:	4b9c      	ldr	r3, [pc, #624]	; (8010354 <tcp_process+0x570>)
 80100e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80100e6:	885b      	ldrh	r3, [r3, #2]
 80100e8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100ea:	4a9a      	ldr	r2, [pc, #616]	; (8010354 <tcp_process+0x570>)
 80100ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80100ee:	8812      	ldrh	r2, [r2, #0]
 80100f0:	b292      	uxth	r2, r2
 80100f2:	9201      	str	r2, [sp, #4]
 80100f4:	9300      	str	r3, [sp, #0]
 80100f6:	4b98      	ldr	r3, [pc, #608]	; (8010358 <tcp_process+0x574>)
 80100f8:	4a98      	ldr	r2, [pc, #608]	; (801035c <tcp_process+0x578>)
 80100fa:	f002 fca5 	bl	8012a48 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010104:	2b05      	cmp	r3, #5
 8010106:	f200 8208 	bhi.w	801051a <tcp_process+0x736>
        pcb->rtime = 0;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2200      	movs	r2, #0
 801010e:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f002 fd0f 	bl	8012b34 <tcp_rexmit_rto>
    break;
 8010116:	e200      	b.n	801051a <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8010118:	4b8a      	ldr	r3, [pc, #552]	; (8010344 <tcp_process+0x560>)
 801011a:	781b      	ldrb	r3, [r3, #0]
 801011c:	f003 0310 	and.w	r3, r3, #16
 8010120:	2b00      	cmp	r3, #0
 8010122:	f000 8091 	beq.w	8010248 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8010126:	4b88      	ldr	r3, [pc, #544]	; (8010348 <tcp_process+0x564>)
 8010128:	681a      	ldr	r2, [r3, #0]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801012e:	1ad3      	subs	r3, r2, r3
 8010130:	3b01      	subs	r3, #1
 8010132:	2b00      	cmp	r3, #0
 8010134:	db71      	blt.n	801021a <tcp_process+0x436>
 8010136:	4b84      	ldr	r3, [pc, #528]	; (8010348 <tcp_process+0x564>)
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801013e:	1ad3      	subs	r3, r2, r3
 8010140:	2b00      	cmp	r3, #0
 8010142:	dc6a      	bgt.n	801021a <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2204      	movs	r2, #4
 8010148:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801014e:	2b00      	cmp	r3, #0
 8010150:	d00b      	beq.n	801016a <tcp_process+0x386>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010156:	699b      	ldr	r3, [r3, #24]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d106      	bne.n	801016a <tcp_process+0x386>
 801015c:	4b80      	ldr	r3, [pc, #512]	; (8010360 <tcp_process+0x57c>)
 801015e:	f240 3251 	movw	r2, #849	; 0x351
 8010162:	4980      	ldr	r1, [pc, #512]	; (8010364 <tcp_process+0x580>)
 8010164:	4880      	ldr	r0, [pc, #512]	; (8010368 <tcp_process+0x584>)
 8010166:	f003 ffb5 	bl	80140d4 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801016e:	2b00      	cmp	r3, #0
 8010170:	d102      	bne.n	8010178 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8010172:	23fa      	movs	r3, #250	; 0xfa
 8010174:	76bb      	strb	r3, [r7, #26]
 8010176:	e011      	b.n	801019c <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801017c:	699b      	ldr	r3, [r3, #24]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00a      	beq.n	8010198 <tcp_process+0x3b4>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010186:	699b      	ldr	r3, [r3, #24]
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	6910      	ldr	r0, [r2, #16]
 801018c:	2200      	movs	r2, #0
 801018e:	6879      	ldr	r1, [r7, #4]
 8010190:	4798      	blx	r3
 8010192:	4603      	mov	r3, r0
 8010194:	76bb      	strb	r3, [r7, #26]
 8010196:	e001      	b.n	801019c <tcp_process+0x3b8>
 8010198:	23f0      	movs	r3, #240	; 0xf0
 801019a:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 801019c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d00a      	beq.n	80101ba <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 80101a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80101a8:	f113 0f0d 	cmn.w	r3, #13
 80101ac:	d002      	beq.n	80101b4 <tcp_process+0x3d0>
            tcp_abort(pcb);
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f7fd ffa2 	bl	800e0f8 <tcp_abort>
          }
          return ERR_ABRT;
 80101b4:	f06f 030c 	mvn.w	r3, #12
 80101b8:	e1bd      	b.n	8010536 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f000 fa42 	bl	8010644 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80101c0:	4b6a      	ldr	r3, [pc, #424]	; (801036c <tcp_process+0x588>)
 80101c2:	881b      	ldrh	r3, [r3, #0]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d005      	beq.n	80101d4 <tcp_process+0x3f0>
          recv_acked--;
 80101c8:	4b68      	ldr	r3, [pc, #416]	; (801036c <tcp_process+0x588>)
 80101ca:	881b      	ldrh	r3, [r3, #0]
 80101cc:	3b01      	subs	r3, #1
 80101ce:	b29a      	uxth	r2, r3
 80101d0:	4b66      	ldr	r3, [pc, #408]	; (801036c <tcp_process+0x588>)
 80101d2:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101d8:	005b      	lsls	r3, r3, #1
 80101da:	f241 121c 	movw	r2, #4380	; 0x111c
 80101de:	429a      	cmp	r2, r3
 80101e0:	bf38      	it	cc
 80101e2:	461a      	movcc	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101e8:	009b      	lsls	r3, r3, #2
 80101ea:	4293      	cmp	r3, r2
 80101ec:	bf28      	it	cs
 80101ee:	4613      	movcs	r3, r2
 80101f0:	b29a      	uxth	r2, r3
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80101f8:	4b5d      	ldr	r3, [pc, #372]	; (8010370 <tcp_process+0x58c>)
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	f003 0320 	and.w	r3, r3, #32
 8010200:	2b00      	cmp	r3, #0
 8010202:	d034      	beq.n	801026e <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	7e9b      	ldrb	r3, [r3, #26]
 8010208:	f043 0302 	orr.w	r3, r3, #2
 801020c:	b2da      	uxtb	r2, r3
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2207      	movs	r2, #7
 8010216:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8010218:	e029      	b.n	801026e <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801021a:	4b4b      	ldr	r3, [pc, #300]	; (8010348 <tcp_process+0x564>)
 801021c:	6818      	ldr	r0, [r3, #0]
 801021e:	4b4b      	ldr	r3, [pc, #300]	; (801034c <tcp_process+0x568>)
 8010220:	881b      	ldrh	r3, [r3, #0]
 8010222:	461a      	mov	r2, r3
 8010224:	4b4a      	ldr	r3, [pc, #296]	; (8010350 <tcp_process+0x56c>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801022a:	4b4a      	ldr	r3, [pc, #296]	; (8010354 <tcp_process+0x570>)
 801022c:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801022e:	885b      	ldrh	r3, [r3, #2]
 8010230:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010232:	4a48      	ldr	r2, [pc, #288]	; (8010354 <tcp_process+0x570>)
 8010234:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8010236:	8812      	ldrh	r2, [r2, #0]
 8010238:	b292      	uxth	r2, r2
 801023a:	9201      	str	r2, [sp, #4]
 801023c:	9300      	str	r3, [sp, #0]
 801023e:	4b46      	ldr	r3, [pc, #280]	; (8010358 <tcp_process+0x574>)
 8010240:	4a46      	ldr	r2, [pc, #280]	; (801035c <tcp_process+0x578>)
 8010242:	f002 fc01 	bl	8012a48 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8010246:	e16a      	b.n	801051e <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010248:	4b3e      	ldr	r3, [pc, #248]	; (8010344 <tcp_process+0x560>)
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	f003 0302 	and.w	r3, r3, #2
 8010250:	2b00      	cmp	r3, #0
 8010252:	f000 8164 	beq.w	801051e <tcp_process+0x73a>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801025a:	1e5a      	subs	r2, r3, #1
 801025c:	4b3c      	ldr	r3, [pc, #240]	; (8010350 <tcp_process+0x56c>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	429a      	cmp	r2, r3
 8010262:	f040 815c 	bne.w	801051e <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f002 fc9a 	bl	8012ba0 <tcp_rexmit>
    break;
 801026c:	e157      	b.n	801051e <tcp_process+0x73a>
 801026e:	e156      	b.n	801051e <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f000 f9e7 	bl	8010644 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010276:	4b3e      	ldr	r3, [pc, #248]	; (8010370 <tcp_process+0x58c>)
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	f003 0320 	and.w	r3, r3, #32
 801027e:	2b00      	cmp	r3, #0
 8010280:	f000 814f 	beq.w	8010522 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	7e9b      	ldrb	r3, [r3, #26]
 8010288:	f043 0302 	orr.w	r3, r3, #2
 801028c:	b2da      	uxtb	r2, r3
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2207      	movs	r2, #7
 8010296:	751a      	strb	r2, [r3, #20]
    }
    break;
 8010298:	e143      	b.n	8010522 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 801029a:	6878      	ldr	r0, [r7, #4]
 801029c:	f000 f9d2 	bl	8010644 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80102a0:	4b33      	ldr	r3, [pc, #204]	; (8010370 <tcp_process+0x58c>)
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	f003 0320 	and.w	r3, r3, #32
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d074      	beq.n	8010396 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102ac:	4b25      	ldr	r3, [pc, #148]	; (8010344 <tcp_process+0x560>)
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	f003 0310 	and.w	r3, r3, #16
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d063      	beq.n	8010380 <tcp_process+0x59c>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102bc:	4b22      	ldr	r3, [pc, #136]	; (8010348 <tcp_process+0x564>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d15d      	bne.n	8010380 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d159      	bne.n	8010380 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	7e9b      	ldrb	r3, [r3, #26]
 80102d0:	f043 0302 	orr.w	r3, r3, #2
 80102d4:	b2da      	uxtb	r2, r3
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f7fe feec 	bl	800f0b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80102e0:	4b24      	ldr	r3, [pc, #144]	; (8010374 <tcp_process+0x590>)
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d105      	bne.n	80102f6 <tcp_process+0x512>
 80102ea:	4b22      	ldr	r3, [pc, #136]	; (8010374 <tcp_process+0x590>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	68db      	ldr	r3, [r3, #12]
 80102f0:	4a20      	ldr	r2, [pc, #128]	; (8010374 <tcp_process+0x590>)
 80102f2:	6013      	str	r3, [r2, #0]
 80102f4:	e013      	b.n	801031e <tcp_process+0x53a>
 80102f6:	4b1f      	ldr	r3, [pc, #124]	; (8010374 <tcp_process+0x590>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	617b      	str	r3, [r7, #20]
 80102fc:	e00c      	b.n	8010318 <tcp_process+0x534>
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	68da      	ldr	r2, [r3, #12]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	429a      	cmp	r2, r3
 8010306:	d104      	bne.n	8010312 <tcp_process+0x52e>
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	68da      	ldr	r2, [r3, #12]
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	60da      	str	r2, [r3, #12]
 8010310:	e005      	b.n	801031e <tcp_process+0x53a>
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	68db      	ldr	r3, [r3, #12]
 8010316:	617b      	str	r3, [r7, #20]
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d1ef      	bne.n	80102fe <tcp_process+0x51a>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2200      	movs	r2, #0
 8010322:	60da      	str	r2, [r3, #12]
 8010324:	4b14      	ldr	r3, [pc, #80]	; (8010378 <tcp_process+0x594>)
 8010326:	2201      	movs	r2, #1
 8010328:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	220a      	movs	r2, #10
 801032e:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010330:	4b12      	ldr	r3, [pc, #72]	; (801037c <tcp_process+0x598>)
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	60da      	str	r2, [r3, #12]
 8010338:	4a10      	ldr	r2, [pc, #64]	; (801037c <tcp_process+0x598>)
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6013      	str	r3, [r2, #0]
 801033e:	f002 fdd3 	bl	8012ee8 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8010342:	e0f0      	b.n	8010526 <tcp_process+0x742>
 8010344:	2000421c 	.word	0x2000421c
 8010348:	20004214 	.word	0x20004214
 801034c:	2000421a 	.word	0x2000421a
 8010350:	20004210 	.word	0x20004210
 8010354:	20004200 	.word	0x20004200
 8010358:	20007434 	.word	0x20007434
 801035c:	20007438 	.word	0x20007438
 8010360:	08017508 	.word	0x08017508
 8010364:	0801770c 	.word	0x0801770c
 8010368:	0801754c 	.word	0x0801754c
 801036c:	20004218 	.word	0x20004218
 8010370:	2000421d 	.word	0x2000421d
 8010374:	2000ab34 	.word	0x2000ab34
 8010378:	2000ab30 	.word	0x2000ab30
 801037c:	2000ab44 	.word	0x2000ab44
        tcp_ack_now(pcb);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	7e9b      	ldrb	r3, [r3, #26]
 8010384:	f043 0302 	orr.w	r3, r3, #2
 8010388:	b2da      	uxtb	r2, r3
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2208      	movs	r2, #8
 8010392:	751a      	strb	r2, [r3, #20]
    break;
 8010394:	e0c7      	b.n	8010526 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010396:	4b6a      	ldr	r3, [pc, #424]	; (8010540 <tcp_process+0x75c>)
 8010398:	781b      	ldrb	r3, [r3, #0]
 801039a:	f003 0310 	and.w	r3, r3, #16
 801039e:	2b00      	cmp	r3, #0
 80103a0:	f000 80c1 	beq.w	8010526 <tcp_process+0x742>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80103a8:	4b66      	ldr	r3, [pc, #408]	; (8010544 <tcp_process+0x760>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	f040 80ba 	bne.w	8010526 <tcp_process+0x742>
               pcb->unsent == NULL) {
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	f040 80b5 	bne.w	8010526 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2206      	movs	r2, #6
 80103c0:	751a      	strb	r2, [r3, #20]
    break;
 80103c2:	e0b0      	b.n	8010526 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f000 f93d 	bl	8010644 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80103ca:	4b5f      	ldr	r3, [pc, #380]	; (8010548 <tcp_process+0x764>)
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	f003 0320 	and.w	r3, r3, #32
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	f000 80a9 	beq.w	801052a <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	7e9b      	ldrb	r3, [r3, #26]
 80103dc:	f043 0302 	orr.w	r3, r3, #2
 80103e0:	b2da      	uxtb	r2, r3
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f7fe fe66 	bl	800f0b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80103ec:	4b57      	ldr	r3, [pc, #348]	; (801054c <tcp_process+0x768>)
 80103ee:	681a      	ldr	r2, [r3, #0]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d105      	bne.n	8010402 <tcp_process+0x61e>
 80103f6:	4b55      	ldr	r3, [pc, #340]	; (801054c <tcp_process+0x768>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	68db      	ldr	r3, [r3, #12]
 80103fc:	4a53      	ldr	r2, [pc, #332]	; (801054c <tcp_process+0x768>)
 80103fe:	6013      	str	r3, [r2, #0]
 8010400:	e013      	b.n	801042a <tcp_process+0x646>
 8010402:	4b52      	ldr	r3, [pc, #328]	; (801054c <tcp_process+0x768>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	613b      	str	r3, [r7, #16]
 8010408:	e00c      	b.n	8010424 <tcp_process+0x640>
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	68da      	ldr	r2, [r3, #12]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	429a      	cmp	r2, r3
 8010412:	d104      	bne.n	801041e <tcp_process+0x63a>
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	68da      	ldr	r2, [r3, #12]
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	60da      	str	r2, [r3, #12]
 801041c:	e005      	b.n	801042a <tcp_process+0x646>
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	68db      	ldr	r3, [r3, #12]
 8010422:	613b      	str	r3, [r7, #16]
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d1ef      	bne.n	801040a <tcp_process+0x626>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2200      	movs	r2, #0
 801042e:	60da      	str	r2, [r3, #12]
 8010430:	4b47      	ldr	r3, [pc, #284]	; (8010550 <tcp_process+0x76c>)
 8010432:	2201      	movs	r2, #1
 8010434:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	220a      	movs	r2, #10
 801043a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801043c:	4b45      	ldr	r3, [pc, #276]	; (8010554 <tcp_process+0x770>)
 801043e:	681a      	ldr	r2, [r3, #0]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	60da      	str	r2, [r3, #12]
 8010444:	4a43      	ldr	r2, [pc, #268]	; (8010554 <tcp_process+0x770>)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6013      	str	r3, [r2, #0]
 801044a:	f002 fd4d 	bl	8012ee8 <tcp_timer_needed>
    }
    break;
 801044e:	e06c      	b.n	801052a <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f000 f8f7 	bl	8010644 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010456:	4b3a      	ldr	r3, [pc, #232]	; (8010540 <tcp_process+0x75c>)
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	f003 0310 	and.w	r3, r3, #16
 801045e:	2b00      	cmp	r3, #0
 8010460:	d065      	beq.n	801052e <tcp_process+0x74a>
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010466:	4b37      	ldr	r3, [pc, #220]	; (8010544 <tcp_process+0x760>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	429a      	cmp	r2, r3
 801046c:	d15f      	bne.n	801052e <tcp_process+0x74a>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010472:	2b00      	cmp	r3, #0
 8010474:	d15b      	bne.n	801052e <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f7fe fe1e 	bl	800f0b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801047c:	4b33      	ldr	r3, [pc, #204]	; (801054c <tcp_process+0x768>)
 801047e:	681a      	ldr	r2, [r3, #0]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	429a      	cmp	r2, r3
 8010484:	d105      	bne.n	8010492 <tcp_process+0x6ae>
 8010486:	4b31      	ldr	r3, [pc, #196]	; (801054c <tcp_process+0x768>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	4a2f      	ldr	r2, [pc, #188]	; (801054c <tcp_process+0x768>)
 801048e:	6013      	str	r3, [r2, #0]
 8010490:	e013      	b.n	80104ba <tcp_process+0x6d6>
 8010492:	4b2e      	ldr	r3, [pc, #184]	; (801054c <tcp_process+0x768>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	60fb      	str	r3, [r7, #12]
 8010498:	e00c      	b.n	80104b4 <tcp_process+0x6d0>
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	68da      	ldr	r2, [r3, #12]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d104      	bne.n	80104ae <tcp_process+0x6ca>
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	68da      	ldr	r2, [r3, #12]
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	60da      	str	r2, [r3, #12]
 80104ac:	e005      	b.n	80104ba <tcp_process+0x6d6>
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	68db      	ldr	r3, [r3, #12]
 80104b2:	60fb      	str	r3, [r7, #12]
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d1ef      	bne.n	801049a <tcp_process+0x6b6>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2200      	movs	r2, #0
 80104be:	60da      	str	r2, [r3, #12]
 80104c0:	4b23      	ldr	r3, [pc, #140]	; (8010550 <tcp_process+0x76c>)
 80104c2:	2201      	movs	r2, #1
 80104c4:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	220a      	movs	r2, #10
 80104ca:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80104cc:	4b21      	ldr	r3, [pc, #132]	; (8010554 <tcp_process+0x770>)
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	60da      	str	r2, [r3, #12]
 80104d4:	4a1f      	ldr	r2, [pc, #124]	; (8010554 <tcp_process+0x770>)
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6013      	str	r3, [r2, #0]
 80104da:	f002 fd05 	bl	8012ee8 <tcp_timer_needed>
    }
    break;
 80104de:	e026      	b.n	801052e <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f000 f8af 	bl	8010644 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80104e6:	4b16      	ldr	r3, [pc, #88]	; (8010540 <tcp_process+0x75c>)
 80104e8:	781b      	ldrb	r3, [r3, #0]
 80104ea:	f003 0310 	and.w	r3, r3, #16
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d01f      	beq.n	8010532 <tcp_process+0x74e>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104f6:	4b13      	ldr	r3, [pc, #76]	; (8010544 <tcp_process+0x760>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d119      	bne.n	8010532 <tcp_process+0x74e>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010502:	2b00      	cmp	r3, #0
 8010504:	d115      	bne.n	8010532 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8010506:	4b10      	ldr	r3, [pc, #64]	; (8010548 <tcp_process+0x764>)
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	f043 0310 	orr.w	r3, r3, #16
 801050e:	b2da      	uxtb	r2, r3
 8010510:	4b0d      	ldr	r3, [pc, #52]	; (8010548 <tcp_process+0x764>)
 8010512:	701a      	strb	r2, [r3, #0]
    }
    break;
 8010514:	e00d      	b.n	8010532 <tcp_process+0x74e>
  default:
    break;
 8010516:	bf00      	nop
 8010518:	e00c      	b.n	8010534 <tcp_process+0x750>
    break;
 801051a:	bf00      	nop
 801051c:	e00a      	b.n	8010534 <tcp_process+0x750>
    break;
 801051e:	bf00      	nop
 8010520:	e008      	b.n	8010534 <tcp_process+0x750>
    break;
 8010522:	bf00      	nop
 8010524:	e006      	b.n	8010534 <tcp_process+0x750>
    break;
 8010526:	bf00      	nop
 8010528:	e004      	b.n	8010534 <tcp_process+0x750>
    break;
 801052a:	bf00      	nop
 801052c:	e002      	b.n	8010534 <tcp_process+0x750>
    break;
 801052e:	bf00      	nop
 8010530:	e000      	b.n	8010534 <tcp_process+0x750>
    break;
 8010532:	bf00      	nop
  }
  return ERR_OK;
 8010534:	2300      	movs	r3, #0
}
 8010536:	4618      	mov	r0, r3
 8010538:	3720      	adds	r7, #32
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}
 801053e:	bf00      	nop
 8010540:	2000421c 	.word	0x2000421c
 8010544:	20004214 	.word	0x20004214
 8010548:	2000421d 	.word	0x2000421d
 801054c:	2000ab34 	.word	0x2000ab34
 8010550:	2000ab30 	.word	0x2000ab30
 8010554:	2000ab44 	.word	0x2000ab44

08010558 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010558:	b5b0      	push	{r4, r5, r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	68db      	ldr	r3, [r3, #12]
 8010566:	899b      	ldrh	r3, [r3, #12]
 8010568:	b29b      	uxth	r3, r3
 801056a:	4618      	mov	r0, r3
 801056c:	f7f9 fc0c 	bl	8009d88 <lwip_htons>
 8010570:	4603      	mov	r3, r0
 8010572:	f003 0301 	and.w	r3, r3, #1
 8010576:	2b00      	cmp	r3, #0
 8010578:	d026      	beq.n	80105c8 <tcp_oos_insert_segment+0x70>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801057a:	6838      	ldr	r0, [r7, #0]
 801057c:	f7fe fb37 	bl	800ebee <tcp_segs_free>
    next = NULL;
 8010580:	2300      	movs	r3, #0
 8010582:	603b      	str	r3, [r7, #0]
 8010584:	e054      	b.n	8010630 <tcp_oos_insert_segment+0xd8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	68db      	ldr	r3, [r3, #12]
 801058a:	899b      	ldrh	r3, [r3, #12]
 801058c:	b29b      	uxth	r3, r3
 801058e:	4618      	mov	r0, r3
 8010590:	f7f9 fbfa 	bl	8009d88 <lwip_htons>
 8010594:	4603      	mov	r3, r0
 8010596:	f003 0301 	and.w	r3, r3, #1
 801059a:	2b00      	cmp	r3, #0
 801059c:	d00c      	beq.n	80105b8 <tcp_oos_insert_segment+0x60>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	68dc      	ldr	r4, [r3, #12]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	68db      	ldr	r3, [r3, #12]
 80105a6:	899b      	ldrh	r3, [r3, #12]
 80105a8:	b29d      	uxth	r5, r3
 80105aa:	2001      	movs	r0, #1
 80105ac:	f7f9 fbec 	bl	8009d88 <lwip_htons>
 80105b0:	4603      	mov	r3, r0
 80105b2:	432b      	orrs	r3, r5
 80105b4:	b29b      	uxth	r3, r3
 80105b6:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f7fe fb27 	bl	800ec16 <tcp_seg_free>
    while (next &&
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d00e      	beq.n	80105ec <tcp_oos_insert_segment+0x94>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	891b      	ldrh	r3, [r3, #8]
 80105d2:	461a      	mov	r2, r3
 80105d4:	4b1a      	ldr	r3, [pc, #104]	; (8010640 <tcp_oos_insert_segment+0xe8>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	441a      	add	r2, r3
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	68db      	ldr	r3, [r3, #12]
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	6839      	ldr	r1, [r7, #0]
 80105e2:	8909      	ldrh	r1, [r1, #8]
 80105e4:	440b      	add	r3, r1
 80105e6:	1ad3      	subs	r3, r2, r3
    while (next &&
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	dacc      	bge.n	8010586 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d01e      	beq.n	8010630 <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	891b      	ldrh	r3, [r3, #8]
 80105f6:	461a      	mov	r2, r3
 80105f8:	4b11      	ldr	r3, [pc, #68]	; (8010640 <tcp_oos_insert_segment+0xe8>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	441a      	add	r2, r3
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	68db      	ldr	r3, [r3, #12]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010606:	2b00      	cmp	r3, #0
 8010608:	dd12      	ble.n	8010630 <tcp_oos_insert_segment+0xd8>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	68db      	ldr	r3, [r3, #12]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	b29a      	uxth	r2, r3
 8010612:	4b0b      	ldr	r3, [pc, #44]	; (8010640 <tcp_oos_insert_segment+0xe8>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	b29b      	uxth	r3, r3
 8010618:	1ad3      	subs	r3, r2, r3
 801061a:	b29a      	uxth	r2, r3
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	685a      	ldr	r2, [r3, #4]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	891b      	ldrh	r3, [r3, #8]
 8010628:	4619      	mov	r1, r3
 801062a:	4610      	mov	r0, r2
 801062c:	f7fc fe9e 	bl	800d36c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	683a      	ldr	r2, [r7, #0]
 8010634:	601a      	str	r2, [r3, #0]
}
 8010636:	bf00      	nop
 8010638:	3710      	adds	r7, #16
 801063a:	46bd      	mov	sp, r7
 801063c:	bdb0      	pop	{r4, r5, r7, pc}
 801063e:	bf00      	nop
 8010640:	20004210 	.word	0x20004210

08010644 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010646:	b08d      	sub	sp, #52	; 0x34
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 801064c:	2300      	movs	r3, #0
 801064e:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	7d1b      	ldrb	r3, [r3, #20]
 8010654:	2b03      	cmp	r3, #3
 8010656:	d806      	bhi.n	8010666 <tcp_receive+0x22>
 8010658:	4b9a      	ldr	r3, [pc, #616]	; (80108c4 <tcp_receive+0x280>)
 801065a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 801065e:	499a      	ldr	r1, [pc, #616]	; (80108c8 <tcp_receive+0x284>)
 8010660:	489a      	ldr	r0, [pc, #616]	; (80108cc <tcp_receive+0x288>)
 8010662:	f003 fd37 	bl	80140d4 <iprintf>

  if (flags & TCP_ACK) {
 8010666:	4b9a      	ldr	r3, [pc, #616]	; (80108d0 <tcp_receive+0x28c>)
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	f003 0310 	and.w	r3, r3, #16
 801066e:	2b00      	cmp	r3, #0
 8010670:	f000 82c5 	beq.w	8010bfe <tcp_receive+0x5ba>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801067a:	461a      	mov	r2, r3
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010680:	4413      	add	r3, r2
 8010682:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010688:	4b92      	ldr	r3, [pc, #584]	; (80108d4 <tcp_receive+0x290>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	1ad3      	subs	r3, r2, r3
 801068e:	2b00      	cmp	r3, #0
 8010690:	db1b      	blt.n	80106ca <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010696:	4b8f      	ldr	r3, [pc, #572]	; (80108d4 <tcp_receive+0x290>)
 8010698:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801069a:	429a      	cmp	r2, r3
 801069c:	d106      	bne.n	80106ac <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80106a2:	4b8d      	ldr	r3, [pc, #564]	; (80108d8 <tcp_receive+0x294>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	1ad3      	subs	r3, r2, r3
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	db0e      	blt.n	80106ca <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80106b0:	4b89      	ldr	r3, [pc, #548]	; (80108d8 <tcp_receive+0x294>)
 80106b2:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d141      	bne.n	801073c <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80106b8:	4b88      	ldr	r3, [pc, #544]	; (80108dc <tcp_receive+0x298>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	89db      	ldrh	r3, [r3, #14]
 80106be:	b29a      	uxth	r2, r3
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d938      	bls.n	801073c <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80106ca:	4b84      	ldr	r3, [pc, #528]	; (80108dc <tcp_receive+0x298>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	89db      	ldrh	r3, [r3, #14]
 80106d0:	b29a      	uxth	r2, r3
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d205      	bcs.n	80106f4 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 80106f4:	4b77      	ldr	r3, [pc, #476]	; (80108d4 <tcp_receive+0x290>)
 80106f6:	681a      	ldr	r2, [r3, #0]
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 80106fc:	4b76      	ldr	r3, [pc, #472]	; (80108d8 <tcp_receive+0x294>)
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801070a:	2b00      	cmp	r3, #0
 801070c:	d10d      	bne.n	801072a <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010714:	2b00      	cmp	r3, #0
 8010716:	d111      	bne.n	801073c <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2200      	movs	r2, #0
 801071c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2201      	movs	r2, #1
 8010724:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8010728:	e008      	b.n	801073c <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010730:	2b00      	cmp	r3, #0
 8010732:	d003      	beq.n	801073c <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2200      	movs	r2, #0
 8010738:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801073c:	4b66      	ldr	r3, [pc, #408]	; (80108d8 <tcp_receive+0x294>)
 801073e:	681a      	ldr	r2, [r3, #0]
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010744:	1ad3      	subs	r3, r2, r3
 8010746:	2b00      	cmp	r3, #0
 8010748:	dc58      	bgt.n	80107fc <tcp_receive+0x1b8>
      /* Clause 2 */
      if (tcplen == 0) {
 801074a:	4b65      	ldr	r3, [pc, #404]	; (80108e0 <tcp_receive+0x29c>)
 801074c:	881b      	ldrh	r3, [r3, #0]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d14b      	bne.n	80107ea <tcp_receive+0x1a6>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 801075c:	441a      	add	r2, r3
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	429a      	cmp	r2, r3
 8010762:	d142      	bne.n	80107ea <tcp_receive+0x1a6>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801076a:	2b00      	cmp	r3, #0
 801076c:	db3d      	blt.n	80107ea <tcp_receive+0x1a6>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010772:	4b59      	ldr	r3, [pc, #356]	; (80108d8 <tcp_receive+0x294>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	429a      	cmp	r2, r3
 8010778:	d137      	bne.n	80107ea <tcp_receive+0x1a6>
              found_dupack = 1;
 801077a:	2301      	movs	r3, #1
 801077c:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010784:	3301      	adds	r3, #1
 8010786:	b2da      	uxtb	r2, r3
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801078e:	429a      	cmp	r2, r3
 8010790:	d907      	bls.n	80107a2 <tcp_receive+0x15e>
                ++pcb->dupacks;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010798:	3301      	adds	r3, #1
 801079a:	b2da      	uxtb	r2, r3
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80107a8:	2b03      	cmp	r3, #3
 80107aa:	d916      	bls.n	80107da <tcp_receive+0x196>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107b6:	4413      	add	r3, r2
 80107b8:	b29a      	uxth	r2, r3
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d912      	bls.n	80107ea <tcp_receive+0x1a6>
                  pcb->cwnd += pcb->mss;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107ce:	4413      	add	r3, r2
 80107d0:	b29a      	uxth	r2, r3
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80107d8:	e007      	b.n	80107ea <tcp_receive+0x1a6>
                }
              } else if (pcb->dupacks == 3) {
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80107e0:	2b03      	cmp	r3, #3
 80107e2:	d102      	bne.n	80107ea <tcp_receive+0x1a6>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f002 fa2b 	bl	8012c40 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80107ea:	69fb      	ldr	r3, [r7, #28]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	f040 8169 	bne.w	8010ac4 <tcp_receive+0x480>
        pcb->dupacks = 0;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80107fa:	e163      	b.n	8010ac4 <tcp_receive+0x480>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80107fc:	4b36      	ldr	r3, [pc, #216]	; (80108d8 <tcp_receive+0x294>)
 80107fe:	681a      	ldr	r2, [r3, #0]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010804:	1ad3      	subs	r3, r2, r3
 8010806:	3b01      	subs	r3, #1
 8010808:	2b00      	cmp	r3, #0
 801080a:	f2c0 8107 	blt.w	8010a1c <tcp_receive+0x3d8>
 801080e:	4b32      	ldr	r3, [pc, #200]	; (80108d8 <tcp_receive+0x294>)
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010816:	1ad3      	subs	r3, r2, r3
 8010818:	2b00      	cmp	r3, #0
 801081a:	f300 80ff 	bgt.w	8010a1c <tcp_receive+0x3d8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	7e9b      	ldrb	r3, [r3, #26]
 8010822:	f003 0304 	and.w	r3, r3, #4
 8010826:	2b00      	cmp	r3, #0
 8010828:	d00c      	beq.n	8010844 <tcp_receive+0x200>
        pcb->flags &= ~TF_INFR;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	7e9b      	ldrb	r3, [r3, #26]
 801082e:	f023 0304 	bic.w	r3, r3, #4
 8010832:	b2da      	uxtb	r2, r3
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2200      	movs	r2, #0
 8010848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010852:	10db      	asrs	r3, r3, #3
 8010854:	b21b      	sxth	r3, r3
 8010856:	b29a      	uxth	r2, r3
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801085e:	b29b      	uxth	r3, r3
 8010860:	4413      	add	r3, r2
 8010862:	b29b      	uxth	r3, r3
 8010864:	b21a      	sxth	r2, r3
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2200      	movs	r2, #0
 8010870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010874:	4b18      	ldr	r3, [pc, #96]	; (80108d8 <tcp_receive+0x294>)
 8010876:	681a      	ldr	r2, [r3, #0]
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	7d1b      	ldrb	r3, [r3, #20]
 8010880:	2b03      	cmp	r3, #3
 8010882:	f240 8094 	bls.w	80109ae <tcp_receive+0x36a>
        if (pcb->cwnd < pcb->ssthresh) {
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010892:	429a      	cmp	r2, r3
 8010894:	d226      	bcs.n	80108e4 <tcp_receive+0x2a0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108a0:	4413      	add	r3, r2
 80108a2:	b29a      	uxth	r2, r3
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d97f      	bls.n	80109ae <tcp_receive+0x36a>
            pcb->cwnd += pcb->mss;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108b8:	4413      	add	r3, r2
 80108ba:	b29a      	uxth	r2, r3
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80108c2:	e074      	b.n	80109ae <tcp_receive+0x36a>
 80108c4:	08017508 	.word	0x08017508
 80108c8:	0801772c 	.word	0x0801772c
 80108cc:	0801754c 	.word	0x0801754c
 80108d0:	2000421c 	.word	0x2000421c
 80108d4:	20004210 	.word	0x20004210
 80108d8:	20004214 	.word	0x20004214
 80108dc:	20004200 	.word	0x20004200
 80108e0:	2000421a 	.word	0x2000421a
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108ee:	4619      	mov	r1, r3
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108f4:	fb03 f301 	mul.w	r3, r3, r1
 80108f8:	6879      	ldr	r1, [r7, #4]
 80108fa:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 80108fe:	fb93 f3f1 	sdiv	r3, r3, r1
 8010902:	b29b      	uxth	r3, r3
 8010904:	4413      	add	r3, r2
 8010906:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801090e:	8a7a      	ldrh	r2, [r7, #18]
 8010910:	429a      	cmp	r2, r3
 8010912:	d94c      	bls.n	80109ae <tcp_receive+0x36a>
            pcb->cwnd = new_cwnd;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	8a7a      	ldrh	r2, [r7, #18]
 8010918:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 801091c:	e047      	b.n	80109ae <tcp_receive+0x36a>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010922:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8010934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	4618      	mov	r0, r3
 801093a:	f7fc ff25 	bl	800d788 <pbuf_clen>
 801093e:	4603      	mov	r3, r0
 8010940:	429c      	cmp	r4, r3
 8010942:	d206      	bcs.n	8010952 <tcp_receive+0x30e>
 8010944:	4b70      	ldr	r3, [pc, #448]	; (8010b08 <tcp_receive+0x4c4>)
 8010946:	f240 429e 	movw	r2, #1182	; 0x49e
 801094a:	4970      	ldr	r1, [pc, #448]	; (8010b0c <tcp_receive+0x4c8>)
 801094c:	4870      	ldr	r0, [pc, #448]	; (8010b10 <tcp_receive+0x4cc>)
 801094e:	f003 fbc1 	bl	80140d4 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8010952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	4618      	mov	r0, r3
 8010958:	f7fc ff16 	bl	800d788 <pbuf_clen>
 801095c:	4603      	mov	r3, r0
 801095e:	461a      	mov	r2, r3
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010966:	1a9b      	subs	r3, r3, r2
 8010968:	b29a      	uxth	r2, r3
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8010970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010972:	891a      	ldrh	r2, [r3, #8]
 8010974:	4b67      	ldr	r3, [pc, #412]	; (8010b14 <tcp_receive+0x4d0>)
 8010976:	881b      	ldrh	r3, [r3, #0]
 8010978:	4413      	add	r3, r2
 801097a:	b29a      	uxth	r2, r3
 801097c:	4b65      	ldr	r3, [pc, #404]	; (8010b14 <tcp_receive+0x4d0>)
 801097e:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8010980:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010982:	f7fe f948 	bl	800ec16 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801098c:	2b00      	cmp	r3, #0
 801098e:	d00e      	beq.n	80109ae <tcp_receive+0x36a>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010994:	2b00      	cmp	r3, #0
 8010996:	d10a      	bne.n	80109ae <tcp_receive+0x36a>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801099c:	2b00      	cmp	r3, #0
 801099e:	d106      	bne.n	80109ae <tcp_receive+0x36a>
 80109a0:	4b59      	ldr	r3, [pc, #356]	; (8010b08 <tcp_receive+0x4c4>)
 80109a2:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80109a6:	495c      	ldr	r1, [pc, #368]	; (8010b18 <tcp_receive+0x4d4>)
 80109a8:	4859      	ldr	r0, [pc, #356]	; (8010b10 <tcp_receive+0x4cc>)
 80109aa:	f003 fb93 	bl	80140d4 <iprintf>
      while (pcb->unacked != NULL &&
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d022      	beq.n	80109fc <tcp_receive+0x3b8>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109ba:	68db      	ldr	r3, [r3, #12]
 80109bc:	685b      	ldr	r3, [r3, #4]
 80109be:	4618      	mov	r0, r3
 80109c0:	f7f9 f9ef 	bl	8009da2 <lwip_htonl>
 80109c4:	4604      	mov	r4, r0
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109ca:	891b      	ldrh	r3, [r3, #8]
 80109cc:	461d      	mov	r5, r3
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109d2:	68db      	ldr	r3, [r3, #12]
 80109d4:	899b      	ldrh	r3, [r3, #12]
 80109d6:	b29b      	uxth	r3, r3
 80109d8:	4618      	mov	r0, r3
 80109da:	f7f9 f9d5 	bl	8009d88 <lwip_htons>
 80109de:	4603      	mov	r3, r0
 80109e0:	f003 0303 	and.w	r3, r3, #3
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d001      	beq.n	80109ec <tcp_receive+0x3a8>
 80109e8:	2301      	movs	r3, #1
 80109ea:	e000      	b.n	80109ee <tcp_receive+0x3aa>
 80109ec:	2300      	movs	r3, #0
 80109ee:	442b      	add	r3, r5
 80109f0:	18e2      	adds	r2, r4, r3
 80109f2:	4b4a      	ldr	r3, [pc, #296]	; (8010b1c <tcp_receive+0x4d8>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	dd90      	ble.n	801091e <tcp_receive+0x2da>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d104      	bne.n	8010a0e <tcp_receive+0x3ca>
        pcb->rtime = -1;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a0a:	861a      	strh	r2, [r3, #48]	; 0x30
 8010a0c:	e002      	b.n	8010a14 <tcp_receive+0x3d0>
      } else {
        pcb->rtime = 0;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2200      	movs	r2, #0
 8010a12:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2200      	movs	r2, #0
 8010a18:	76da      	strb	r2, [r3, #27]
 8010a1a:	e002      	b.n	8010a22 <tcp_receive+0x3de>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f001 fd2f 	bl	8012480 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8010a22:	e04f      	b.n	8010ac4 <tcp_receive+0x480>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a2e:	681a      	ldr	r2, [r3, #0]
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d103      	bne.n	8010a44 <tcp_receive+0x400>
        pcb->unsent_oversize = 0;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2200      	movs	r2, #0
 8010a40:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8010a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4c:	685b      	ldr	r3, [r3, #4]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7fc fe9a 	bl	800d788 <pbuf_clen>
 8010a54:	4603      	mov	r3, r0
 8010a56:	429c      	cmp	r4, r3
 8010a58:	d206      	bcs.n	8010a68 <tcp_receive+0x424>
 8010a5a:	4b2b      	ldr	r3, [pc, #172]	; (8010b08 <tcp_receive+0x4c4>)
 8010a5c:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010a60:	492a      	ldr	r1, [pc, #168]	; (8010b0c <tcp_receive+0x4c8>)
 8010a62:	482b      	ldr	r0, [pc, #172]	; (8010b10 <tcp_receive+0x4cc>)
 8010a64:	f003 fb36 	bl	80140d4 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8010a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a6a:	685b      	ldr	r3, [r3, #4]
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7fc fe8b 	bl	800d788 <pbuf_clen>
 8010a72:	4603      	mov	r3, r0
 8010a74:	461a      	mov	r2, r3
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a7c:	1a9b      	subs	r3, r3, r2
 8010a7e:	b29a      	uxth	r2, r3
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8010a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a88:	891a      	ldrh	r2, [r3, #8]
 8010a8a:	4b22      	ldr	r3, [pc, #136]	; (8010b14 <tcp_receive+0x4d0>)
 8010a8c:	881b      	ldrh	r3, [r3, #0]
 8010a8e:	4413      	add	r3, r2
 8010a90:	b29a      	uxth	r2, r3
 8010a92:	4b20      	ldr	r3, [pc, #128]	; (8010b14 <tcp_receive+0x4d0>)
 8010a94:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8010a96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a98:	f7fe f8bd 	bl	800ec16 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d00e      	beq.n	8010ac4 <tcp_receive+0x480>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d10a      	bne.n	8010ac4 <tcp_receive+0x480>
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d106      	bne.n	8010ac4 <tcp_receive+0x480>
 8010ab6:	4b14      	ldr	r3, [pc, #80]	; (8010b08 <tcp_receive+0x4c4>)
 8010ab8:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8010abc:	4916      	ldr	r1, [pc, #88]	; (8010b18 <tcp_receive+0x4d4>)
 8010abe:	4814      	ldr	r0, [pc, #80]	; (8010b10 <tcp_receive+0x4cc>)
 8010ac0:	f003 fb08 	bl	80140d4 <iprintf>
    while (pcb->unsent != NULL &&
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d037      	beq.n	8010b3c <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010acc:	4b13      	ldr	r3, [pc, #76]	; (8010b1c <tcp_receive+0x4d8>)
 8010ace:	681c      	ldr	r4, [r3, #0]
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ad4:	68db      	ldr	r3, [r3, #12]
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7f9 f962 	bl	8009da2 <lwip_htonl>
 8010ade:	4605      	mov	r5, r0
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ae4:	891b      	ldrh	r3, [r3, #8]
 8010ae6:	461e      	mov	r6, r3
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010aec:	68db      	ldr	r3, [r3, #12]
 8010aee:	899b      	ldrh	r3, [r3, #12]
 8010af0:	b29b      	uxth	r3, r3
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7f9 f948 	bl	8009d88 <lwip_htons>
 8010af8:	4603      	mov	r3, r0
 8010afa:	f003 0303 	and.w	r3, r3, #3
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d00e      	beq.n	8010b20 <tcp_receive+0x4dc>
 8010b02:	2301      	movs	r3, #1
 8010b04:	e00d      	b.n	8010b22 <tcp_receive+0x4de>
 8010b06:	bf00      	nop
 8010b08:	08017508 	.word	0x08017508
 8010b0c:	08017748 	.word	0x08017748
 8010b10:	0801754c 	.word	0x0801754c
 8010b14:	20004218 	.word	0x20004218
 8010b18:	08017770 	.word	0x08017770
 8010b1c:	20004214 	.word	0x20004214
 8010b20:	2300      	movs	r3, #0
 8010b22:	4433      	add	r3, r6
 8010b24:	442b      	add	r3, r5
 8010b26:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	db07      	blt.n	8010b3c <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010b2c:	4b8d      	ldr	r3, [pc, #564]	; (8010d64 <tcp_receive+0x720>)
 8010b2e:	681a      	ldr	r2, [r3, #0]
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b34:	1ad3      	subs	r3, r2, r3
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	f77f af74 	ble.w	8010a24 <tcp_receive+0x3e0>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b42:	4b89      	ldr	r3, [pc, #548]	; (8010d68 <tcp_receive+0x724>)
 8010b44:	881b      	ldrh	r3, [r3, #0]
 8010b46:	4413      	add	r3, r2
 8010b48:	b29a      	uxth	r2, r3
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d052      	beq.n	8010bfe <tcp_receive+0x5ba>
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b5c:	4b81      	ldr	r3, [pc, #516]	; (8010d64 <tcp_receive+0x720>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	1ad3      	subs	r3, r2, r3
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	da4b      	bge.n	8010bfe <tcp_receive+0x5ba>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010b66:	4b81      	ldr	r3, [pc, #516]	; (8010d6c <tcp_receive+0x728>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b70:	b29b      	uxth	r3, r3
 8010b72:	1ad3      	subs	r3, r2, r3
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8010b78:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010b80:	10db      	asrs	r3, r3, #3
 8010b82:	b21b      	sxth	r3, r3
 8010b84:	b29b      	uxth	r3, r3
 8010b86:	1ad3      	subs	r3, r2, r3
 8010b88:	b29b      	uxth	r3, r3
 8010b8a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010b92:	b29a      	uxth	r2, r3
 8010b94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b96:	4413      	add	r3, r2
 8010b98:	b29b      	uxth	r3, r3
 8010b9a:	b21a      	sxth	r2, r3
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010ba0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	da03      	bge.n	8010bb0 <tcp_receive+0x56c>
        m = -m;
 8010ba8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010baa:	425b      	negs	r3, r3
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8010bb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010bb8:	109b      	asrs	r3, r3, #2
 8010bba:	b21b      	sxth	r3, r3
 8010bbc:	b29b      	uxth	r3, r3
 8010bbe:	1ad3      	subs	r3, r2, r3
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010bca:	b29a      	uxth	r2, r3
 8010bcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010bce:	4413      	add	r3, r2
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	b21a      	sxth	r2, r3
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010bde:	10db      	asrs	r3, r3, #3
 8010be0:	b21b      	sxth	r3, r3
 8010be2:	b29a      	uxth	r2, r3
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010bea:	b29b      	uxth	r3, r3
 8010bec:	4413      	add	r3, r2
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	b21a      	sxth	r2, r3
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010bfe:	4b5c      	ldr	r3, [pc, #368]	; (8010d70 <tcp_receive+0x72c>)
 8010c00:	881b      	ldrh	r3, [r3, #0]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	f000 84ee 	beq.w	80115e4 <tcp_receive+0xfa0>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	7d1b      	ldrb	r3, [r3, #20]
 8010c0c:	2b06      	cmp	r3, #6
 8010c0e:	f200 84e9 	bhi.w	80115e4 <tcp_receive+0xfa0>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c16:	4b57      	ldr	r3, [pc, #348]	; (8010d74 <tcp_receive+0x730>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	1ad3      	subs	r3, r2, r3
 8010c1c:	3b01      	subs	r3, #1
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	f2c0 80b8 	blt.w	8010d94 <tcp_receive+0x750>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c28:	4b51      	ldr	r3, [pc, #324]	; (8010d70 <tcp_receive+0x72c>)
 8010c2a:	881b      	ldrh	r3, [r3, #0]
 8010c2c:	4619      	mov	r1, r3
 8010c2e:	4b51      	ldr	r3, [pc, #324]	; (8010d74 <tcp_receive+0x730>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	440b      	add	r3, r1
 8010c34:	1ad3      	subs	r3, r2, r3
 8010c36:	3301      	adds	r3, #1
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	f300 80ab 	bgt.w	8010d94 <tcp_receive+0x750>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010c3e:	4b4e      	ldr	r3, [pc, #312]	; (8010d78 <tcp_receive+0x734>)
 8010c40:	685b      	ldr	r3, [r3, #4]
 8010c42:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c48:	4b4a      	ldr	r3, [pc, #296]	; (8010d74 <tcp_receive+0x730>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	1ad3      	subs	r3, r2, r3
 8010c4e:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010c50:	4b49      	ldr	r3, [pc, #292]	; (8010d78 <tcp_receive+0x734>)
 8010c52:	685b      	ldr	r3, [r3, #4]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d106      	bne.n	8010c66 <tcp_receive+0x622>
 8010c58:	4b48      	ldr	r3, [pc, #288]	; (8010d7c <tcp_receive+0x738>)
 8010c5a:	f240 523c 	movw	r2, #1340	; 0x53c
 8010c5e:	4948      	ldr	r1, [pc, #288]	; (8010d80 <tcp_receive+0x73c>)
 8010c60:	4848      	ldr	r0, [pc, #288]	; (8010d84 <tcp_receive+0x740>)
 8010c62:	f003 fa37 	bl	80140d4 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8010c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c68:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	dd06      	ble.n	8010c7e <tcp_receive+0x63a>
 8010c70:	4b42      	ldr	r3, [pc, #264]	; (8010d7c <tcp_receive+0x738>)
 8010c72:	f240 523d 	movw	r2, #1341	; 0x53d
 8010c76:	4944      	ldr	r1, [pc, #272]	; (8010d88 <tcp_receive+0x744>)
 8010c78:	4842      	ldr	r0, [pc, #264]	; (8010d84 <tcp_receive+0x740>)
 8010c7a:	f003 fa2b 	bl	80140d4 <iprintf>
      if (inseg.p->len < off) {
 8010c7e:	4b3e      	ldr	r3, [pc, #248]	; (8010d78 <tcp_receive+0x734>)
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	895b      	ldrh	r3, [r3, #10]
 8010c84:	461a      	mov	r2, r3
 8010c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	da3e      	bge.n	8010d0a <tcp_receive+0x6c6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010c8c:	4b3a      	ldr	r3, [pc, #232]	; (8010d78 <tcp_receive+0x734>)
 8010c8e:	685b      	ldr	r3, [r3, #4]
 8010c90:	891b      	ldrh	r3, [r3, #8]
 8010c92:	461a      	mov	r2, r3
 8010c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c96:	429a      	cmp	r2, r3
 8010c98:	da06      	bge.n	8010ca8 <tcp_receive+0x664>
 8010c9a:	4b38      	ldr	r3, [pc, #224]	; (8010d7c <tcp_receive+0x738>)
 8010c9c:	f240 523f 	movw	r2, #1343	; 0x53f
 8010ca0:	493a      	ldr	r1, [pc, #232]	; (8010d8c <tcp_receive+0x748>)
 8010ca2:	4838      	ldr	r0, [pc, #224]	; (8010d84 <tcp_receive+0x740>)
 8010ca4:	f003 fa16 	bl	80140d4 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010ca8:	4b33      	ldr	r3, [pc, #204]	; (8010d78 <tcp_receive+0x734>)
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	891a      	ldrh	r2, [r3, #8]
 8010cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	1ad3      	subs	r3, r2, r3
 8010cb4:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8010cb6:	e00e      	b.n	8010cd6 <tcp_receive+0x692>
          off -= p->len;
 8010cb8:	69bb      	ldr	r3, [r7, #24]
 8010cba:	895b      	ldrh	r3, [r3, #10]
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc0:	1a9b      	subs	r3, r3, r2
 8010cc2:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8010cc4:	69bb      	ldr	r3, [r7, #24]
 8010cc6:	8a3a      	ldrh	r2, [r7, #16]
 8010cc8:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8010cca:	69bb      	ldr	r3, [r7, #24]
 8010ccc:	2200      	movs	r2, #0
 8010cce:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8010cd0:	69bb      	ldr	r3, [r7, #24]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8010cd6:	69bb      	ldr	r3, [r7, #24]
 8010cd8:	895b      	ldrh	r3, [r3, #10]
 8010cda:	461a      	mov	r2, r3
 8010cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cde:	429a      	cmp	r2, r3
 8010ce0:	dbea      	blt.n	8010cb8 <tcp_receive+0x674>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8010ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	425b      	negs	r3, r3
 8010ce8:	b29b      	uxth	r3, r3
 8010cea:	b21b      	sxth	r3, r3
 8010cec:	4619      	mov	r1, r3
 8010cee:	69b8      	ldr	r0, [r7, #24]
 8010cf0:	f7fc fc8c 	bl	800d60c <pbuf_header>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d01c      	beq.n	8010d34 <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8010cfa:	4b20      	ldr	r3, [pc, #128]	; (8010d7c <tcp_receive+0x738>)
 8010cfc:	f240 524c 	movw	r2, #1356	; 0x54c
 8010d00:	4923      	ldr	r1, [pc, #140]	; (8010d90 <tcp_receive+0x74c>)
 8010d02:	4820      	ldr	r0, [pc, #128]	; (8010d84 <tcp_receive+0x740>)
 8010d04:	f003 f9e6 	bl	80140d4 <iprintf>
 8010d08:	e014      	b.n	8010d34 <tcp_receive+0x6f0>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8010d0a:	4b1b      	ldr	r3, [pc, #108]	; (8010d78 <tcp_receive+0x734>)
 8010d0c:	685b      	ldr	r3, [r3, #4]
 8010d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d10:	b292      	uxth	r2, r2
 8010d12:	4252      	negs	r2, r2
 8010d14:	b292      	uxth	r2, r2
 8010d16:	b212      	sxth	r2, r2
 8010d18:	4611      	mov	r1, r2
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fc fc76 	bl	800d60c <pbuf_header>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d006      	beq.n	8010d34 <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8010d26:	4b15      	ldr	r3, [pc, #84]	; (8010d7c <tcp_receive+0x738>)
 8010d28:	f240 5251 	movw	r2, #1361	; 0x551
 8010d2c:	4918      	ldr	r1, [pc, #96]	; (8010d90 <tcp_receive+0x74c>)
 8010d2e:	4815      	ldr	r0, [pc, #84]	; (8010d84 <tcp_receive+0x740>)
 8010d30:	f003 f9d0 	bl	80140d4 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8010d34:	4b10      	ldr	r3, [pc, #64]	; (8010d78 <tcp_receive+0x734>)
 8010d36:	891a      	ldrh	r2, [r3, #8]
 8010d38:	4b0e      	ldr	r3, [pc, #56]	; (8010d74 <tcp_receive+0x730>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	b299      	uxth	r1, r3
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d42:	b29b      	uxth	r3, r3
 8010d44:	1acb      	subs	r3, r1, r3
 8010d46:	b29b      	uxth	r3, r3
 8010d48:	4413      	add	r3, r2
 8010d4a:	b29a      	uxth	r2, r3
 8010d4c:	4b0a      	ldr	r3, [pc, #40]	; (8010d78 <tcp_receive+0x734>)
 8010d4e:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010d50:	4b09      	ldr	r3, [pc, #36]	; (8010d78 <tcp_receive+0x734>)
 8010d52:	68db      	ldr	r3, [r3, #12]
 8010d54:	687a      	ldr	r2, [r7, #4]
 8010d56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010d58:	4906      	ldr	r1, [pc, #24]	; (8010d74 <tcp_receive+0x730>)
 8010d5a:	600a      	str	r2, [r1, #0]
 8010d5c:	4a05      	ldr	r2, [pc, #20]	; (8010d74 <tcp_receive+0x730>)
 8010d5e:	6812      	ldr	r2, [r2, #0]
 8010d60:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010d62:	e025      	b.n	8010db0 <tcp_receive+0x76c>
 8010d64:	20004214 	.word	0x20004214
 8010d68:	20004218 	.word	0x20004218
 8010d6c:	2000ab38 	.word	0x2000ab38
 8010d70:	2000421a 	.word	0x2000421a
 8010d74:	20004210 	.word	0x20004210
 8010d78:	200041f0 	.word	0x200041f0
 8010d7c:	08017508 	.word	0x08017508
 8010d80:	08017790 	.word	0x08017790
 8010d84:	0801754c 	.word	0x0801754c
 8010d88:	080177a0 	.word	0x080177a0
 8010d8c:	080177b0 	.word	0x080177b0
 8010d90:	080177c0 	.word	0x080177c0
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010d94:	4b86      	ldr	r3, [pc, #536]	; (8010fb0 <tcp_receive+0x96c>)
 8010d96:	681a      	ldr	r2, [r3, #0]
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d9c:	1ad3      	subs	r3, r2, r3
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	da06      	bge.n	8010db0 <tcp_receive+0x76c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	7e9b      	ldrb	r3, [r3, #26]
 8010da6:	f043 0302 	orr.w	r3, r3, #2
 8010daa:	b2da      	uxtb	r2, r3
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010db0:	4b7f      	ldr	r3, [pc, #508]	; (8010fb0 <tcp_receive+0x96c>)
 8010db2:	681a      	ldr	r2, [r3, #0]
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010db8:	1ad3      	subs	r3, r2, r3
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f2c0 840d 	blt.w	80115da <tcp_receive+0xf96>
 8010dc0:	4b7b      	ldr	r3, [pc, #492]	; (8010fb0 <tcp_receive+0x96c>)
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dc8:	6879      	ldr	r1, [r7, #4]
 8010dca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010dcc:	440b      	add	r3, r1
 8010dce:	1ad3      	subs	r3, r2, r3
 8010dd0:	3301      	adds	r3, #1
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	f300 8401 	bgt.w	80115da <tcp_receive+0xf96>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ddc:	4b74      	ldr	r3, [pc, #464]	; (8010fb0 <tcp_receive+0x96c>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	f040 8285 	bne.w	80112f0 <tcp_receive+0xcac>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010de6:	4b73      	ldr	r3, [pc, #460]	; (8010fb4 <tcp_receive+0x970>)
 8010de8:	891c      	ldrh	r4, [r3, #8]
 8010dea:	4b72      	ldr	r3, [pc, #456]	; (8010fb4 <tcp_receive+0x970>)
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	899b      	ldrh	r3, [r3, #12]
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7f8 ffc8 	bl	8009d88 <lwip_htons>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	f003 0303 	and.w	r3, r3, #3
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d001      	beq.n	8010e06 <tcp_receive+0x7c2>
 8010e02:	2301      	movs	r3, #1
 8010e04:	e000      	b.n	8010e08 <tcp_receive+0x7c4>
 8010e06:	2300      	movs	r3, #0
 8010e08:	4423      	add	r3, r4
 8010e0a:	b29a      	uxth	r2, r3
 8010e0c:	4b6a      	ldr	r3, [pc, #424]	; (8010fb8 <tcp_receive+0x974>)
 8010e0e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e14:	4b68      	ldr	r3, [pc, #416]	; (8010fb8 <tcp_receive+0x974>)
 8010e16:	881b      	ldrh	r3, [r3, #0]
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	d26d      	bcs.n	8010ef8 <tcp_receive+0x8b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010e1c:	4b65      	ldr	r3, [pc, #404]	; (8010fb4 <tcp_receive+0x970>)
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	899b      	ldrh	r3, [r3, #12]
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7f8 ffaf 	bl	8009d88 <lwip_htons>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	f003 0301 	and.w	r3, r3, #1
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d01a      	beq.n	8010e6a <tcp_receive+0x826>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010e34:	4b5f      	ldr	r3, [pc, #380]	; (8010fb4 <tcp_receive+0x970>)
 8010e36:	68dc      	ldr	r4, [r3, #12]
 8010e38:	4b5e      	ldr	r3, [pc, #376]	; (8010fb4 <tcp_receive+0x970>)
 8010e3a:	68db      	ldr	r3, [r3, #12]
 8010e3c:	899b      	ldrh	r3, [r3, #12]
 8010e3e:	b29b      	uxth	r3, r3
 8010e40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010e44:	b29d      	uxth	r5, r3
 8010e46:	4b5b      	ldr	r3, [pc, #364]	; (8010fb4 <tcp_receive+0x970>)
 8010e48:	68db      	ldr	r3, [r3, #12]
 8010e4a:	899b      	ldrh	r3, [r3, #12]
 8010e4c:	b29b      	uxth	r3, r3
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7f8 ff9a 	bl	8009d88 <lwip_htons>
 8010e54:	4603      	mov	r3, r0
 8010e56:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f7f8 ff93 	bl	8009d88 <lwip_htons>
 8010e62:	4603      	mov	r3, r0
 8010e64:	432b      	orrs	r3, r5
 8010e66:	b29b      	uxth	r3, r3
 8010e68:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e6e:	4b51      	ldr	r3, [pc, #324]	; (8010fb4 <tcp_receive+0x970>)
 8010e70:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010e72:	4b50      	ldr	r3, [pc, #320]	; (8010fb4 <tcp_receive+0x970>)
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	899b      	ldrh	r3, [r3, #12]
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7f8 ff84 	bl	8009d88 <lwip_htons>
 8010e80:	4603      	mov	r3, r0
 8010e82:	f003 0302 	and.w	r3, r3, #2
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d005      	beq.n	8010e96 <tcp_receive+0x852>
            inseg.len -= 1;
 8010e8a:	4b4a      	ldr	r3, [pc, #296]	; (8010fb4 <tcp_receive+0x970>)
 8010e8c:	891b      	ldrh	r3, [r3, #8]
 8010e8e:	3b01      	subs	r3, #1
 8010e90:	b29a      	uxth	r2, r3
 8010e92:	4b48      	ldr	r3, [pc, #288]	; (8010fb4 <tcp_receive+0x970>)
 8010e94:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010e96:	4b47      	ldr	r3, [pc, #284]	; (8010fb4 <tcp_receive+0x970>)
 8010e98:	685a      	ldr	r2, [r3, #4]
 8010e9a:	4b46      	ldr	r3, [pc, #280]	; (8010fb4 <tcp_receive+0x970>)
 8010e9c:	891b      	ldrh	r3, [r3, #8]
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	4610      	mov	r0, r2
 8010ea2:	f7fc fa63 	bl	800d36c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010ea6:	4b43      	ldr	r3, [pc, #268]	; (8010fb4 <tcp_receive+0x970>)
 8010ea8:	891c      	ldrh	r4, [r3, #8]
 8010eaa:	4b42      	ldr	r3, [pc, #264]	; (8010fb4 <tcp_receive+0x970>)
 8010eac:	68db      	ldr	r3, [r3, #12]
 8010eae:	899b      	ldrh	r3, [r3, #12]
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7f8 ff68 	bl	8009d88 <lwip_htons>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	f003 0303 	and.w	r3, r3, #3
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d001      	beq.n	8010ec6 <tcp_receive+0x882>
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	e000      	b.n	8010ec8 <tcp_receive+0x884>
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	4423      	add	r3, r4
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	4b3a      	ldr	r3, [pc, #232]	; (8010fb8 <tcp_receive+0x974>)
 8010ece:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010ed0:	4b39      	ldr	r3, [pc, #228]	; (8010fb8 <tcp_receive+0x974>)
 8010ed2:	881b      	ldrh	r3, [r3, #0]
 8010ed4:	461a      	mov	r2, r3
 8010ed6:	4b36      	ldr	r3, [pc, #216]	; (8010fb0 <tcp_receive+0x96c>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	441a      	add	r2, r3
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ee0:	6879      	ldr	r1, [r7, #4]
 8010ee2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010ee4:	440b      	add	r3, r1
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d006      	beq.n	8010ef8 <tcp_receive+0x8b4>
 8010eea:	4b34      	ldr	r3, [pc, #208]	; (8010fbc <tcp_receive+0x978>)
 8010eec:	f240 527f 	movw	r2, #1407	; 0x57f
 8010ef0:	4933      	ldr	r1, [pc, #204]	; (8010fc0 <tcp_receive+0x97c>)
 8010ef2:	4834      	ldr	r0, [pc, #208]	; (8010fc4 <tcp_receive+0x980>)
 8010ef4:	f003 f8ee 	bl	80140d4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	f000 80e0 	beq.w	80110c2 <tcp_receive+0xa7e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010f02:	4b2c      	ldr	r3, [pc, #176]	; (8010fb4 <tcp_receive+0x970>)
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	899b      	ldrh	r3, [r3, #12]
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7f8 ff3c 	bl	8009d88 <lwip_htons>
 8010f10:	4603      	mov	r3, r0
 8010f12:	f003 0301 	and.w	r3, r3, #1
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d010      	beq.n	8010f3c <tcp_receive+0x8f8>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010f1a:	e00a      	b.n	8010f32 <tcp_receive+0x8ee>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f20:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f26:	681a      	ldr	r2, [r3, #0]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8010f2c:	68f8      	ldr	r0, [r7, #12]
 8010f2e:	f7fd fe72 	bl	800ec16 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d1f0      	bne.n	8010f1c <tcp_receive+0x8d8>
 8010f3a:	e0c2      	b.n	80110c2 <tcp_receive+0xa7e>
            }
          } else {
            next = pcb->ooseq;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f40:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010f42:	e04e      	b.n	8010fe2 <tcp_receive+0x99e>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	899b      	ldrh	r3, [r3, #12]
 8010f4a:	b29b      	uxth	r3, r3
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7f8 ff1b 	bl	8009d88 <lwip_htons>
 8010f52:	4603      	mov	r3, r0
 8010f54:	f003 0301 	and.w	r3, r3, #1
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d03a      	beq.n	8010fd2 <tcp_receive+0x98e>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010f5c:	4b15      	ldr	r3, [pc, #84]	; (8010fb4 <tcp_receive+0x970>)
 8010f5e:	68db      	ldr	r3, [r3, #12]
 8010f60:	899b      	ldrh	r3, [r3, #12]
 8010f62:	b29b      	uxth	r3, r3
 8010f64:	4618      	mov	r0, r3
 8010f66:	f7f8 ff0f 	bl	8009d88 <lwip_htons>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d12e      	bne.n	8010fd2 <tcp_receive+0x98e>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010f74:	4b0f      	ldr	r3, [pc, #60]	; (8010fb4 <tcp_receive+0x970>)
 8010f76:	68dc      	ldr	r4, [r3, #12]
 8010f78:	4b0e      	ldr	r3, [pc, #56]	; (8010fb4 <tcp_receive+0x970>)
 8010f7a:	68db      	ldr	r3, [r3, #12]
 8010f7c:	899b      	ldrh	r3, [r3, #12]
 8010f7e:	b29d      	uxth	r5, r3
 8010f80:	2001      	movs	r0, #1
 8010f82:	f7f8 ff01 	bl	8009d88 <lwip_htons>
 8010f86:	4603      	mov	r3, r0
 8010f88:	432b      	orrs	r3, r5
 8010f8a:	b29b      	uxth	r3, r3
 8010f8c:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010f8e:	4b09      	ldr	r3, [pc, #36]	; (8010fb4 <tcp_receive+0x970>)
 8010f90:	891c      	ldrh	r4, [r3, #8]
 8010f92:	4b08      	ldr	r3, [pc, #32]	; (8010fb4 <tcp_receive+0x970>)
 8010f94:	68db      	ldr	r3, [r3, #12]
 8010f96:	899b      	ldrh	r3, [r3, #12]
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7f8 fef4 	bl	8009d88 <lwip_htons>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	f003 0303 	and.w	r3, r3, #3
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d00e      	beq.n	8010fc8 <tcp_receive+0x984>
 8010faa:	2301      	movs	r3, #1
 8010fac:	e00d      	b.n	8010fca <tcp_receive+0x986>
 8010fae:	bf00      	nop
 8010fb0:	20004210 	.word	0x20004210
 8010fb4:	200041f0 	.word	0x200041f0
 8010fb8:	2000421a 	.word	0x2000421a
 8010fbc:	08017508 	.word	0x08017508
 8010fc0:	080177d4 	.word	0x080177d4
 8010fc4:	0801754c 	.word	0x0801754c
 8010fc8:	2300      	movs	r3, #0
 8010fca:	4423      	add	r3, r4
 8010fcc:	b29a      	uxth	r2, r3
 8010fce:	4b95      	ldr	r3, [pc, #596]	; (8011224 <tcp_receive+0xbe0>)
 8010fd0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8010fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd4:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8010fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8010fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fde:	f7fd fe1a 	bl	800ec16 <tcp_seg_free>
            while (next &&
 8010fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d00e      	beq.n	8011006 <tcp_receive+0x9c2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010fe8:	4b8e      	ldr	r3, [pc, #568]	; (8011224 <tcp_receive+0xbe0>)
 8010fea:	881b      	ldrh	r3, [r3, #0]
 8010fec:	461a      	mov	r2, r3
 8010fee:	4b8e      	ldr	r3, [pc, #568]	; (8011228 <tcp_receive+0xbe4>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	441a      	add	r2, r3
 8010ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff6:	68db      	ldr	r3, [r3, #12]
 8010ff8:	685b      	ldr	r3, [r3, #4]
 8010ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ffc:	8909      	ldrh	r1, [r1, #8]
 8010ffe:	440b      	add	r3, r1
 8011000:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011002:	2b00      	cmp	r3, #0
 8011004:	da9e      	bge.n	8010f44 <tcp_receive+0x900>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011008:	2b00      	cmp	r3, #0
 801100a:	d057      	beq.n	80110bc <tcp_receive+0xa78>
                TCP_SEQ_GT(seqno + tcplen,
 801100c:	4b85      	ldr	r3, [pc, #532]	; (8011224 <tcp_receive+0xbe0>)
 801100e:	881b      	ldrh	r3, [r3, #0]
 8011010:	461a      	mov	r2, r3
 8011012:	4b85      	ldr	r3, [pc, #532]	; (8011228 <tcp_receive+0xbe4>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	441a      	add	r2, r3
 8011018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101a:	68db      	ldr	r3, [r3, #12]
 801101c:	685b      	ldr	r3, [r3, #4]
 801101e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011020:	2b00      	cmp	r3, #0
 8011022:	dd4b      	ble.n	80110bc <tcp_receive+0xa78>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011026:	68db      	ldr	r3, [r3, #12]
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	b29a      	uxth	r2, r3
 801102c:	4b7e      	ldr	r3, [pc, #504]	; (8011228 <tcp_receive+0xbe4>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	b29b      	uxth	r3, r3
 8011032:	1ad3      	subs	r3, r2, r3
 8011034:	b29a      	uxth	r2, r3
 8011036:	4b7d      	ldr	r3, [pc, #500]	; (801122c <tcp_receive+0xbe8>)
 8011038:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801103a:	4b7c      	ldr	r3, [pc, #496]	; (801122c <tcp_receive+0xbe8>)
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	899b      	ldrh	r3, [r3, #12]
 8011040:	b29b      	uxth	r3, r3
 8011042:	4618      	mov	r0, r3
 8011044:	f7f8 fea0 	bl	8009d88 <lwip_htons>
 8011048:	4603      	mov	r3, r0
 801104a:	f003 0302 	and.w	r3, r3, #2
 801104e:	2b00      	cmp	r3, #0
 8011050:	d005      	beq.n	801105e <tcp_receive+0xa1a>
                inseg.len -= 1;
 8011052:	4b76      	ldr	r3, [pc, #472]	; (801122c <tcp_receive+0xbe8>)
 8011054:	891b      	ldrh	r3, [r3, #8]
 8011056:	3b01      	subs	r3, #1
 8011058:	b29a      	uxth	r2, r3
 801105a:	4b74      	ldr	r3, [pc, #464]	; (801122c <tcp_receive+0xbe8>)
 801105c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801105e:	4b73      	ldr	r3, [pc, #460]	; (801122c <tcp_receive+0xbe8>)
 8011060:	685a      	ldr	r2, [r3, #4]
 8011062:	4b72      	ldr	r3, [pc, #456]	; (801122c <tcp_receive+0xbe8>)
 8011064:	891b      	ldrh	r3, [r3, #8]
 8011066:	4619      	mov	r1, r3
 8011068:	4610      	mov	r0, r2
 801106a:	f7fc f97f 	bl	800d36c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801106e:	4b6f      	ldr	r3, [pc, #444]	; (801122c <tcp_receive+0xbe8>)
 8011070:	891c      	ldrh	r4, [r3, #8]
 8011072:	4b6e      	ldr	r3, [pc, #440]	; (801122c <tcp_receive+0xbe8>)
 8011074:	68db      	ldr	r3, [r3, #12]
 8011076:	899b      	ldrh	r3, [r3, #12]
 8011078:	b29b      	uxth	r3, r3
 801107a:	4618      	mov	r0, r3
 801107c:	f7f8 fe84 	bl	8009d88 <lwip_htons>
 8011080:	4603      	mov	r3, r0
 8011082:	f003 0303 	and.w	r3, r3, #3
 8011086:	2b00      	cmp	r3, #0
 8011088:	d001      	beq.n	801108e <tcp_receive+0xa4a>
 801108a:	2301      	movs	r3, #1
 801108c:	e000      	b.n	8011090 <tcp_receive+0xa4c>
 801108e:	2300      	movs	r3, #0
 8011090:	4423      	add	r3, r4
 8011092:	b29a      	uxth	r2, r3
 8011094:	4b63      	ldr	r3, [pc, #396]	; (8011224 <tcp_receive+0xbe0>)
 8011096:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011098:	4b62      	ldr	r3, [pc, #392]	; (8011224 <tcp_receive+0xbe0>)
 801109a:	881b      	ldrh	r3, [r3, #0]
 801109c:	461a      	mov	r2, r3
 801109e:	4b62      	ldr	r3, [pc, #392]	; (8011228 <tcp_receive+0xbe4>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	441a      	add	r2, r3
 80110a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a6:	68db      	ldr	r3, [r3, #12]
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d006      	beq.n	80110bc <tcp_receive+0xa78>
 80110ae:	4b60      	ldr	r3, [pc, #384]	; (8011230 <tcp_receive+0xbec>)
 80110b0:	f240 52af 	movw	r2, #1455	; 0x5af
 80110b4:	495f      	ldr	r1, [pc, #380]	; (8011234 <tcp_receive+0xbf0>)
 80110b6:	4860      	ldr	r0, [pc, #384]	; (8011238 <tcp_receive+0xbf4>)
 80110b8:	f003 f80c 	bl	80140d4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110c0:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80110c2:	4b58      	ldr	r3, [pc, #352]	; (8011224 <tcp_receive+0xbe0>)
 80110c4:	881b      	ldrh	r3, [r3, #0]
 80110c6:	461a      	mov	r2, r3
 80110c8:	4b57      	ldr	r3, [pc, #348]	; (8011228 <tcp_receive+0xbe4>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	441a      	add	r2, r3
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80110d6:	4b53      	ldr	r3, [pc, #332]	; (8011224 <tcp_receive+0xbe0>)
 80110d8:	881b      	ldrh	r3, [r3, #0]
 80110da:	429a      	cmp	r2, r3
 80110dc:	d206      	bcs.n	80110ec <tcp_receive+0xaa8>
 80110de:	4b54      	ldr	r3, [pc, #336]	; (8011230 <tcp_receive+0xbec>)
 80110e0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80110e4:	4955      	ldr	r1, [pc, #340]	; (801123c <tcp_receive+0xbf8>)
 80110e6:	4854      	ldr	r0, [pc, #336]	; (8011238 <tcp_receive+0xbf4>)
 80110e8:	f002 fff4 	bl	80140d4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80110f0:	4b4c      	ldr	r3, [pc, #304]	; (8011224 <tcp_receive+0xbe0>)
 80110f2:	881b      	ldrh	r3, [r3, #0]
 80110f4:	1ad3      	subs	r3, r2, r3
 80110f6:	b29a      	uxth	r2, r3
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80110fc:	6878      	ldr	r0, [r7, #4]
 80110fe:	f7fd f807 	bl	800e110 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011102:	4b4a      	ldr	r3, [pc, #296]	; (801122c <tcp_receive+0xbe8>)
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	891b      	ldrh	r3, [r3, #8]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d006      	beq.n	801111a <tcp_receive+0xad6>
          recv_data = inseg.p;
 801110c:	4b47      	ldr	r3, [pc, #284]	; (801122c <tcp_receive+0xbe8>)
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	4a4b      	ldr	r2, [pc, #300]	; (8011240 <tcp_receive+0xbfc>)
 8011112:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011114:	4b45      	ldr	r3, [pc, #276]	; (801122c <tcp_receive+0xbe8>)
 8011116:	2200      	movs	r2, #0
 8011118:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801111a:	4b44      	ldr	r3, [pc, #272]	; (801122c <tcp_receive+0xbe8>)
 801111c:	68db      	ldr	r3, [r3, #12]
 801111e:	899b      	ldrh	r3, [r3, #12]
 8011120:	b29b      	uxth	r3, r3
 8011122:	4618      	mov	r0, r3
 8011124:	f7f8 fe30 	bl	8009d88 <lwip_htons>
 8011128:	4603      	mov	r3, r0
 801112a:	f003 0301 	and.w	r3, r3, #1
 801112e:	2b00      	cmp	r3, #0
 8011130:	f000 80b4 	beq.w	801129c <tcp_receive+0xc58>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011134:	4b43      	ldr	r3, [pc, #268]	; (8011244 <tcp_receive+0xc00>)
 8011136:	781b      	ldrb	r3, [r3, #0]
 8011138:	f043 0320 	orr.w	r3, r3, #32
 801113c:	b2da      	uxtb	r2, r3
 801113e:	4b41      	ldr	r3, [pc, #260]	; (8011244 <tcp_receive+0xc00>)
 8011140:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011142:	e0ab      	b.n	801129c <tcp_receive+0xc58>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011148:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801114e:	68db      	ldr	r3, [r3, #12]
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	4a35      	ldr	r2, [pc, #212]	; (8011228 <tcp_receive+0xbe4>)
 8011154:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	891b      	ldrh	r3, [r3, #8]
 801115a:	461c      	mov	r4, r3
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	899b      	ldrh	r3, [r3, #12]
 8011162:	b29b      	uxth	r3, r3
 8011164:	4618      	mov	r0, r3
 8011166:	f7f8 fe0f 	bl	8009d88 <lwip_htons>
 801116a:	4603      	mov	r3, r0
 801116c:	f003 0303 	and.w	r3, r3, #3
 8011170:	2b00      	cmp	r3, #0
 8011172:	d001      	beq.n	8011178 <tcp_receive+0xb34>
 8011174:	2301      	movs	r3, #1
 8011176:	e000      	b.n	801117a <tcp_receive+0xb36>
 8011178:	2300      	movs	r3, #0
 801117a:	4423      	add	r3, r4
 801117c:	687a      	ldr	r2, [r7, #4]
 801117e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011180:	441a      	add	r2, r3
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801118a:	461c      	mov	r4, r3
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	891b      	ldrh	r3, [r3, #8]
 8011190:	461d      	mov	r5, r3
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	68db      	ldr	r3, [r3, #12]
 8011196:	899b      	ldrh	r3, [r3, #12]
 8011198:	b29b      	uxth	r3, r3
 801119a:	4618      	mov	r0, r3
 801119c:	f7f8 fdf4 	bl	8009d88 <lwip_htons>
 80111a0:	4603      	mov	r3, r0
 80111a2:	f003 0303 	and.w	r3, r3, #3
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d001      	beq.n	80111ae <tcp_receive+0xb6a>
 80111aa:	2301      	movs	r3, #1
 80111ac:	e000      	b.n	80111b0 <tcp_receive+0xb6c>
 80111ae:	2300      	movs	r3, #0
 80111b0:	442b      	add	r3, r5
 80111b2:	429c      	cmp	r4, r3
 80111b4:	d206      	bcs.n	80111c4 <tcp_receive+0xb80>
 80111b6:	4b1e      	ldr	r3, [pc, #120]	; (8011230 <tcp_receive+0xbec>)
 80111b8:	f240 52de 	movw	r2, #1502	; 0x5de
 80111bc:	4922      	ldr	r1, [pc, #136]	; (8011248 <tcp_receive+0xc04>)
 80111be:	481e      	ldr	r0, [pc, #120]	; (8011238 <tcp_receive+0xbf4>)
 80111c0:	f002 ff88 	bl	80140d4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	891b      	ldrh	r3, [r3, #8]
 80111c8:	461c      	mov	r4, r3
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	899b      	ldrh	r3, [r3, #12]
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7f8 fdd8 	bl	8009d88 <lwip_htons>
 80111d8:	4603      	mov	r3, r0
 80111da:	f003 0303 	and.w	r3, r3, #3
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d001      	beq.n	80111e6 <tcp_receive+0xba2>
 80111e2:	2301      	movs	r3, #1
 80111e4:	e000      	b.n	80111e8 <tcp_receive+0xba4>
 80111e6:	2300      	movs	r3, #0
 80111e8:	18e1      	adds	r1, r4, r3
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111ee:	b28b      	uxth	r3, r1
 80111f0:	1ad3      	subs	r3, r2, r3
 80111f2:	b29a      	uxth	r2, r3
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f7fc ff89 	bl	800e110 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	685b      	ldr	r3, [r3, #4]
 8011202:	891b      	ldrh	r3, [r3, #8]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d028      	beq.n	801125a <tcp_receive+0xc16>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011208:	4b0d      	ldr	r3, [pc, #52]	; (8011240 <tcp_receive+0xbfc>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d01d      	beq.n	801124c <tcp_receive+0xc08>
              pbuf_cat(recv_data, cseg->p);
 8011210:	4b0b      	ldr	r3, [pc, #44]	; (8011240 <tcp_receive+0xbfc>)
 8011212:	681a      	ldr	r2, [r3, #0]
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	4619      	mov	r1, r3
 801121a:	4610      	mov	r0, r2
 801121c:	f7fc faf2 	bl	800d804 <pbuf_cat>
 8011220:	e018      	b.n	8011254 <tcp_receive+0xc10>
 8011222:	bf00      	nop
 8011224:	2000421a 	.word	0x2000421a
 8011228:	20004210 	.word	0x20004210
 801122c:	200041f0 	.word	0x200041f0
 8011230:	08017508 	.word	0x08017508
 8011234:	0801780c 	.word	0x0801780c
 8011238:	0801754c 	.word	0x0801754c
 801123c:	08017848 	.word	0x08017848
 8011240:	20004220 	.word	0x20004220
 8011244:	2000421d 	.word	0x2000421d
 8011248:	08017868 	.word	0x08017868
            } else {
              recv_data = cseg->p;
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	4a71      	ldr	r2, [pc, #452]	; (8011418 <tcp_receive+0xdd4>)
 8011252:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	2200      	movs	r2, #0
 8011258:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	899b      	ldrh	r3, [r3, #12]
 8011260:	b29b      	uxth	r3, r3
 8011262:	4618      	mov	r0, r3
 8011264:	f7f8 fd90 	bl	8009d88 <lwip_htons>
 8011268:	4603      	mov	r3, r0
 801126a:	f003 0301 	and.w	r3, r3, #1
 801126e:	2b00      	cmp	r3, #0
 8011270:	d00d      	beq.n	801128e <tcp_receive+0xc4a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011272:	4b6a      	ldr	r3, [pc, #424]	; (801141c <tcp_receive+0xdd8>)
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	f043 0320 	orr.w	r3, r3, #32
 801127a:	b2da      	uxtb	r2, r3
 801127c:	4b67      	ldr	r3, [pc, #412]	; (801141c <tcp_receive+0xdd8>)
 801127e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	7d1b      	ldrb	r3, [r3, #20]
 8011284:	2b04      	cmp	r3, #4
 8011286:	d102      	bne.n	801128e <tcp_receive+0xc4a>
              pcb->state = CLOSE_WAIT;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2207      	movs	r2, #7
 801128c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8011296:	68b8      	ldr	r0, [r7, #8]
 8011298:	f7fd fcbd 	bl	800ec16 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d008      	beq.n	80112b6 <tcp_receive+0xc72>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112a8:	68db      	ldr	r3, [r3, #12]
 80112aa:	685a      	ldr	r2, [r3, #4]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80112b0:	429a      	cmp	r2, r3
 80112b2:	f43f af47 	beq.w	8011144 <tcp_receive+0xb00>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	7e9b      	ldrb	r3, [r3, #26]
 80112ba:	f003 0301 	and.w	r3, r3, #1
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d00e      	beq.n	80112e0 <tcp_receive+0xc9c>
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	7e9b      	ldrb	r3, [r3, #26]
 80112c6:	f023 0301 	bic.w	r3, r3, #1
 80112ca:	b2da      	uxtb	r2, r3
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	769a      	strb	r2, [r3, #26]
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	7e9b      	ldrb	r3, [r3, #26]
 80112d4:	f043 0302 	orr.w	r3, r3, #2
 80112d8:	b2da      	uxtb	r2, r3
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80112de:	e180      	b.n	80115e2 <tcp_receive+0xf9e>
        tcp_ack(pcb);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	7e9b      	ldrb	r3, [r3, #26]
 80112e4:	f043 0301 	orr.w	r3, r3, #1
 80112e8:	b2da      	uxtb	r2, r3
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80112ee:	e178      	b.n	80115e2 <tcp_receive+0xf9e>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f001 f8c5 	bl	8012480 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d106      	bne.n	801130c <tcp_receive+0xcc8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80112fe:	4848      	ldr	r0, [pc, #288]	; (8011420 <tcp_receive+0xddc>)
 8011300:	f7fd fca1 	bl	800ec46 <tcp_seg_copy>
 8011304:	4602      	mov	r2, r0
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 801130a:	e16a      	b.n	80115e2 <tcp_receive+0xf9e>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 801130c:	2300      	movs	r3, #0
 801130e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011316:	e14f      	b.n	80115b8 <tcp_receive+0xf74>
            if (seqno == next->tcphdr->seqno) {
 8011318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	685a      	ldr	r2, [r3, #4]
 801131e:	4b41      	ldr	r3, [pc, #260]	; (8011424 <tcp_receive+0xde0>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	429a      	cmp	r2, r3
 8011324:	d11d      	bne.n	8011362 <tcp_receive+0xd1e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011326:	4b3e      	ldr	r3, [pc, #248]	; (8011420 <tcp_receive+0xddc>)
 8011328:	891a      	ldrh	r2, [r3, #8]
 801132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132c:	891b      	ldrh	r3, [r3, #8]
 801132e:	429a      	cmp	r2, r3
 8011330:	f240 8147 	bls.w	80115c2 <tcp_receive+0xf7e>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8011334:	483a      	ldr	r0, [pc, #232]	; (8011420 <tcp_receive+0xddc>)
 8011336:	f7fd fc86 	bl	800ec46 <tcp_seg_copy>
 801133a:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	2b00      	cmp	r3, #0
 8011340:	f000 8141 	beq.w	80115c6 <tcp_receive+0xf82>
                  if (prev != NULL) {
 8011344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011346:	2b00      	cmp	r3, #0
 8011348:	d003      	beq.n	8011352 <tcp_receive+0xd0e>
                    prev->next = cseg;
 801134a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134c:	68ba      	ldr	r2, [r7, #8]
 801134e:	601a      	str	r2, [r3, #0]
 8011350:	e002      	b.n	8011358 <tcp_receive+0xd14>
                  } else {
                    pcb->ooseq = cseg;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	68ba      	ldr	r2, [r7, #8]
 8011356:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801135a:	68b8      	ldr	r0, [r7, #8]
 801135c:	f7ff f8fc 	bl	8010558 <tcp_oos_insert_segment>
                }
                break;
 8011360:	e131      	b.n	80115c6 <tcp_receive+0xf82>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011364:	2b00      	cmp	r3, #0
 8011366:	d117      	bne.n	8011398 <tcp_receive+0xd54>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011368:	4b2e      	ldr	r3, [pc, #184]	; (8011424 <tcp_receive+0xde0>)
 801136a:	681a      	ldr	r2, [r3, #0]
 801136c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	1ad3      	subs	r3, r2, r3
 8011374:	2b00      	cmp	r3, #0
 8011376:	da57      	bge.n	8011428 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8011378:	4829      	ldr	r0, [pc, #164]	; (8011420 <tcp_receive+0xddc>)
 801137a:	f7fd fc64 	bl	800ec46 <tcp_seg_copy>
 801137e:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	2b00      	cmp	r3, #0
 8011384:	f000 8121 	beq.w	80115ca <tcp_receive+0xf86>
                    pcb->ooseq = cseg;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	68ba      	ldr	r2, [r7, #8]
 801138c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 801138e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011390:	68b8      	ldr	r0, [r7, #8]
 8011392:	f7ff f8e1 	bl	8010558 <tcp_oos_insert_segment>
                  }
                  break;
 8011396:	e118      	b.n	80115ca <tcp_receive+0xf86>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8011398:	4b22      	ldr	r3, [pc, #136]	; (8011424 <tcp_receive+0xde0>)
 801139a:	681a      	ldr	r2, [r3, #0]
 801139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	1ad3      	subs	r3, r2, r3
 80113a4:	3b01      	subs	r3, #1
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	db3e      	blt.n	8011428 <tcp_receive+0xde4>
 80113aa:	4b1e      	ldr	r3, [pc, #120]	; (8011424 <tcp_receive+0xde0>)
 80113ac:	681a      	ldr	r2, [r3, #0]
 80113ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b0:	68db      	ldr	r3, [r3, #12]
 80113b2:	685b      	ldr	r3, [r3, #4]
 80113b4:	1ad3      	subs	r3, r2, r3
 80113b6:	3301      	adds	r3, #1
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	dc35      	bgt.n	8011428 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80113bc:	4818      	ldr	r0, [pc, #96]	; (8011420 <tcp_receive+0xddc>)
 80113be:	f7fd fc42 	bl	800ec46 <tcp_seg_copy>
 80113c2:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	f000 8101 	beq.w	80115ce <tcp_receive+0xf8a>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80113cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113d4:	8912      	ldrh	r2, [r2, #8]
 80113d6:	441a      	add	r2, r3
 80113d8:	4b12      	ldr	r3, [pc, #72]	; (8011424 <tcp_receive+0xde0>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	1ad3      	subs	r3, r2, r3
 80113de:	2b00      	cmp	r3, #0
 80113e0:	dd12      	ble.n	8011408 <tcp_receive+0xdc4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80113e2:	4b10      	ldr	r3, [pc, #64]	; (8011424 <tcp_receive+0xde0>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	b29a      	uxth	r2, r3
 80113e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	685b      	ldr	r3, [r3, #4]
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	1ad3      	subs	r3, r2, r3
 80113f2:	b29a      	uxth	r2, r3
 80113f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80113f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fa:	685a      	ldr	r2, [r3, #4]
 80113fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fe:	891b      	ldrh	r3, [r3, #8]
 8011400:	4619      	mov	r1, r3
 8011402:	4610      	mov	r0, r2
 8011404:	f7fb ffb2 	bl	800d36c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140a:	68ba      	ldr	r2, [r7, #8]
 801140c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801140e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011410:	68b8      	ldr	r0, [r7, #8]
 8011412:	f7ff f8a1 	bl	8010558 <tcp_oos_insert_segment>
                  }
                  break;
 8011416:	e0da      	b.n	80115ce <tcp_receive+0xf8a>
 8011418:	20004220 	.word	0x20004220
 801141c:	2000421d 	.word	0x2000421d
 8011420:	200041f0 	.word	0x200041f0
 8011424:	20004210 	.word	0x20004210
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	2b00      	cmp	r3, #0
 801142e:	f040 80be 	bne.w	80115ae <tcp_receive+0xf6a>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011432:	4b7b      	ldr	r3, [pc, #492]	; (8011620 <tcp_receive+0xfdc>)
 8011434:	681a      	ldr	r2, [r3, #0]
 8011436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011438:	68db      	ldr	r3, [r3, #12]
 801143a:	685b      	ldr	r3, [r3, #4]
 801143c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801143e:	2b00      	cmp	r3, #0
 8011440:	f340 80b5 	ble.w	80115ae <tcp_receive+0xf6a>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011446:	68db      	ldr	r3, [r3, #12]
 8011448:	899b      	ldrh	r3, [r3, #12]
 801144a:	b29b      	uxth	r3, r3
 801144c:	4618      	mov	r0, r3
 801144e:	f7f8 fc9b 	bl	8009d88 <lwip_htons>
 8011452:	4603      	mov	r3, r0
 8011454:	f003 0301 	and.w	r3, r3, #1
 8011458:	2b00      	cmp	r3, #0
 801145a:	f040 80ba 	bne.w	80115d2 <tcp_receive+0xf8e>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801145e:	4871      	ldr	r0, [pc, #452]	; (8011624 <tcp_receive+0xfe0>)
 8011460:	f7fd fbf1 	bl	800ec46 <tcp_seg_copy>
 8011464:	4602      	mov	r2, r0
 8011466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011468:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	2b00      	cmp	r3, #0
 8011470:	f000 80b1 	beq.w	80115d6 <tcp_receive+0xf92>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011476:	68db      	ldr	r3, [r3, #12]
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801147c:	8912      	ldrh	r2, [r2, #8]
 801147e:	441a      	add	r2, r3
 8011480:	4b67      	ldr	r3, [pc, #412]	; (8011620 <tcp_receive+0xfdc>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	1ad3      	subs	r3, r2, r3
 8011486:	2b00      	cmp	r3, #0
 8011488:	dd12      	ble.n	80114b0 <tcp_receive+0xe6c>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801148a:	4b65      	ldr	r3, [pc, #404]	; (8011620 <tcp_receive+0xfdc>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	b29a      	uxth	r2, r3
 8011490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011492:	68db      	ldr	r3, [r3, #12]
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	b29b      	uxth	r3, r3
 8011498:	1ad3      	subs	r3, r2, r3
 801149a:	b29a      	uxth	r2, r3
 801149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801149e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80114a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a2:	685a      	ldr	r2, [r3, #4]
 80114a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a6:	891b      	ldrh	r3, [r3, #8]
 80114a8:	4619      	mov	r1, r3
 80114aa:	4610      	mov	r0, r2
 80114ac:	f7fb ff5e 	bl	800d36c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80114b0:	4b5d      	ldr	r3, [pc, #372]	; (8011628 <tcp_receive+0xfe4>)
 80114b2:	881b      	ldrh	r3, [r3, #0]
 80114b4:	461a      	mov	r2, r3
 80114b6:	4b5a      	ldr	r3, [pc, #360]	; (8011620 <tcp_receive+0xfdc>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	441a      	add	r2, r3
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c0:	6879      	ldr	r1, [r7, #4]
 80114c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80114c4:	440b      	add	r3, r1
 80114c6:	1ad3      	subs	r3, r2, r3
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	f340 8084 	ble.w	80115d6 <tcp_receive+0xf92>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80114ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	68db      	ldr	r3, [r3, #12]
 80114d4:	899b      	ldrh	r3, [r3, #12]
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	4618      	mov	r0, r3
 80114da:	f7f8 fc55 	bl	8009d88 <lwip_htons>
 80114de:	4603      	mov	r3, r0
 80114e0:	f003 0301 	and.w	r3, r3, #1
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d01d      	beq.n	8011524 <tcp_receive+0xee0>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80114e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	68dc      	ldr	r4, [r3, #12]
 80114ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	68db      	ldr	r3, [r3, #12]
 80114f4:	899b      	ldrh	r3, [r3, #12]
 80114f6:	b29b      	uxth	r3, r3
 80114f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80114fc:	b29d      	uxth	r5, r3
 80114fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	68db      	ldr	r3, [r3, #12]
 8011504:	899b      	ldrh	r3, [r3, #12]
 8011506:	b29b      	uxth	r3, r3
 8011508:	4618      	mov	r0, r3
 801150a:	f7f8 fc3d 	bl	8009d88 <lwip_htons>
 801150e:	4603      	mov	r3, r0
 8011510:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011514:	b29b      	uxth	r3, r3
 8011516:	4618      	mov	r0, r3
 8011518:	f7f8 fc36 	bl	8009d88 <lwip_htons>
 801151c:	4603      	mov	r3, r0
 801151e:	432b      	orrs	r3, r5
 8011520:	b29b      	uxth	r3, r3
 8011522:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	687a      	ldr	r2, [r7, #4]
 801152a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801152c:	b291      	uxth	r1, r2
 801152e:	687a      	ldr	r2, [r7, #4]
 8011530:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011532:	440a      	add	r2, r1
 8011534:	b291      	uxth	r1, r2
 8011536:	4a3a      	ldr	r2, [pc, #232]	; (8011620 <tcp_receive+0xfdc>)
 8011538:	6812      	ldr	r2, [r2, #0]
 801153a:	b292      	uxth	r2, r2
 801153c:	1a8a      	subs	r2, r1, r2
 801153e:	b292      	uxth	r2, r2
 8011540:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	685a      	ldr	r2, [r3, #4]
 8011548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	891b      	ldrh	r3, [r3, #8]
 801154e:	4619      	mov	r1, r3
 8011550:	4610      	mov	r0, r2
 8011552:	f7fb ff0b 	bl	800d36c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	891c      	ldrh	r4, [r3, #8]
 801155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	899b      	ldrh	r3, [r3, #12]
 8011564:	b29b      	uxth	r3, r3
 8011566:	4618      	mov	r0, r3
 8011568:	f7f8 fc0e 	bl	8009d88 <lwip_htons>
 801156c:	4603      	mov	r3, r0
 801156e:	f003 0303 	and.w	r3, r3, #3
 8011572:	2b00      	cmp	r3, #0
 8011574:	d001      	beq.n	801157a <tcp_receive+0xf36>
 8011576:	2301      	movs	r3, #1
 8011578:	e000      	b.n	801157c <tcp_receive+0xf38>
 801157a:	2300      	movs	r3, #0
 801157c:	4423      	add	r3, r4
 801157e:	b29a      	uxth	r2, r3
 8011580:	4b29      	ldr	r3, [pc, #164]	; (8011628 <tcp_receive+0xfe4>)
 8011582:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011584:	4b28      	ldr	r3, [pc, #160]	; (8011628 <tcp_receive+0xfe4>)
 8011586:	881b      	ldrh	r3, [r3, #0]
 8011588:	461a      	mov	r2, r3
 801158a:	4b25      	ldr	r3, [pc, #148]	; (8011620 <tcp_receive+0xfdc>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	441a      	add	r2, r3
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011594:	6879      	ldr	r1, [r7, #4]
 8011596:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011598:	440b      	add	r3, r1
 801159a:	429a      	cmp	r2, r3
 801159c:	d01b      	beq.n	80115d6 <tcp_receive+0xf92>
 801159e:	4b23      	ldr	r3, [pc, #140]	; (801162c <tcp_receive+0xfe8>)
 80115a0:	f240 627b 	movw	r2, #1659	; 0x67b
 80115a4:	4922      	ldr	r1, [pc, #136]	; (8011630 <tcp_receive+0xfec>)
 80115a6:	4823      	ldr	r0, [pc, #140]	; (8011634 <tcp_receive+0xff0>)
 80115a8:	f002 fd94 	bl	80140d4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80115ac:	e013      	b.n	80115d6 <tcp_receive+0xf92>
              }
            }
            prev = next;
 80115ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b0:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80115b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	f47f aeac 	bne.w	8011318 <tcp_receive+0xcd4>
      if (pcb->rcv_nxt == seqno) {
 80115c0:	e00f      	b.n	80115e2 <tcp_receive+0xf9e>
                break;
 80115c2:	bf00      	nop
 80115c4:	e00d      	b.n	80115e2 <tcp_receive+0xf9e>
                break;
 80115c6:	bf00      	nop
 80115c8:	e00b      	b.n	80115e2 <tcp_receive+0xf9e>
                  break;
 80115ca:	bf00      	nop
 80115cc:	e009      	b.n	80115e2 <tcp_receive+0xf9e>
                  break;
 80115ce:	bf00      	nop
 80115d0:	e007      	b.n	80115e2 <tcp_receive+0xf9e>
                  break;
 80115d2:	bf00      	nop
 80115d4:	e005      	b.n	80115e2 <tcp_receive+0xf9e>
                break;
 80115d6:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80115d8:	e003      	b.n	80115e2 <tcp_receive+0xf9e>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f000 ff50 	bl	8012480 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80115e0:	e01a      	b.n	8011618 <tcp_receive+0xfd4>
 80115e2:	e019      	b.n	8011618 <tcp_receive+0xfd4>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80115e4:	4b0e      	ldr	r3, [pc, #56]	; (8011620 <tcp_receive+0xfdc>)
 80115e6:	681a      	ldr	r2, [r3, #0]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ec:	1ad3      	subs	r3, r2, r3
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	db0a      	blt.n	8011608 <tcp_receive+0xfc4>
 80115f2:	4b0b      	ldr	r3, [pc, #44]	; (8011620 <tcp_receive+0xfdc>)
 80115f4:	681a      	ldr	r2, [r3, #0]
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115fa:	6879      	ldr	r1, [r7, #4]
 80115fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80115fe:	440b      	add	r3, r1
 8011600:	1ad3      	subs	r3, r2, r3
 8011602:	3301      	adds	r3, #1
 8011604:	2b00      	cmp	r3, #0
 8011606:	dd07      	ble.n	8011618 <tcp_receive+0xfd4>
      tcp_ack_now(pcb);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	7e9b      	ldrb	r3, [r3, #26]
 801160c:	f043 0302 	orr.w	r3, r3, #2
 8011610:	b2da      	uxtb	r2, r3
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8011616:	e7ff      	b.n	8011618 <tcp_receive+0xfd4>
 8011618:	bf00      	nop
 801161a:	3734      	adds	r7, #52	; 0x34
 801161c:	46bd      	mov	sp, r7
 801161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011620:	20004210 	.word	0x20004210
 8011624:	200041f0 	.word	0x200041f0
 8011628:	2000421a 	.word	0x2000421a
 801162c:	08017508 	.word	0x08017508
 8011630:	080177d4 	.word	0x080177d4
 8011634:	0801754c 	.word	0x0801754c

08011638 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8011638:	b480      	push	{r7}
 801163a:	b083      	sub	sp, #12
 801163c:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 801163e:	4b17      	ldr	r3, [pc, #92]	; (801169c <tcp_getoptbyte+0x64>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d005      	beq.n	8011652 <tcp_getoptbyte+0x1a>
 8011646:	4b16      	ldr	r3, [pc, #88]	; (80116a0 <tcp_getoptbyte+0x68>)
 8011648:	881a      	ldrh	r2, [r3, #0]
 801164a:	4b16      	ldr	r3, [pc, #88]	; (80116a4 <tcp_getoptbyte+0x6c>)
 801164c:	881b      	ldrh	r3, [r3, #0]
 801164e:	429a      	cmp	r2, r3
 8011650:	d20e      	bcs.n	8011670 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8011652:	4b15      	ldr	r3, [pc, #84]	; (80116a8 <tcp_getoptbyte+0x70>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	3314      	adds	r3, #20
 8011658:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801165a:	4b11      	ldr	r3, [pc, #68]	; (80116a0 <tcp_getoptbyte+0x68>)
 801165c:	881b      	ldrh	r3, [r3, #0]
 801165e:	1c5a      	adds	r2, r3, #1
 8011660:	b291      	uxth	r1, r2
 8011662:	4a0f      	ldr	r2, [pc, #60]	; (80116a0 <tcp_getoptbyte+0x68>)
 8011664:	8011      	strh	r1, [r2, #0]
 8011666:	461a      	mov	r2, r3
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	4413      	add	r3, r2
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	e010      	b.n	8011692 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8011670:	4b0b      	ldr	r3, [pc, #44]	; (80116a0 <tcp_getoptbyte+0x68>)
 8011672:	881b      	ldrh	r3, [r3, #0]
 8011674:	1c5a      	adds	r2, r3, #1
 8011676:	b291      	uxth	r1, r2
 8011678:	4a09      	ldr	r2, [pc, #36]	; (80116a0 <tcp_getoptbyte+0x68>)
 801167a:	8011      	strh	r1, [r2, #0]
 801167c:	b2da      	uxtb	r2, r3
 801167e:	4b09      	ldr	r3, [pc, #36]	; (80116a4 <tcp_getoptbyte+0x6c>)
 8011680:	881b      	ldrh	r3, [r3, #0]
 8011682:	b2db      	uxtb	r3, r3
 8011684:	1ad3      	subs	r3, r2, r3
 8011686:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8011688:	4b04      	ldr	r3, [pc, #16]	; (801169c <tcp_getoptbyte+0x64>)
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	79fb      	ldrb	r3, [r7, #7]
 801168e:	4413      	add	r3, r2
 8011690:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011692:	4618      	mov	r0, r3
 8011694:	370c      	adds	r7, #12
 8011696:	46bd      	mov	sp, r7
 8011698:	bc80      	pop	{r7}
 801169a:	4770      	bx	lr
 801169c:	20004208 	.word	0x20004208
 80116a0:	2000420c 	.word	0x2000420c
 80116a4:	20004206 	.word	0x20004206
 80116a8:	20004200 	.word	0x20004200

080116ac <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b084      	sub	sp, #16
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80116b4:	4b2d      	ldr	r3, [pc, #180]	; (801176c <tcp_parseopt+0xc0>)
 80116b6:	881b      	ldrh	r3, [r3, #0]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d053      	beq.n	8011764 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80116bc:	4b2c      	ldr	r3, [pc, #176]	; (8011770 <tcp_parseopt+0xc4>)
 80116be:	2200      	movs	r2, #0
 80116c0:	801a      	strh	r2, [r3, #0]
 80116c2:	e043      	b.n	801174c <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 80116c4:	f7ff ffb8 	bl	8011638 <tcp_getoptbyte>
 80116c8:	4603      	mov	r3, r0
 80116ca:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80116cc:	7bfb      	ldrb	r3, [r7, #15]
 80116ce:	2b01      	cmp	r3, #1
 80116d0:	d03c      	beq.n	801174c <tcp_parseopt+0xa0>
 80116d2:	2b02      	cmp	r3, #2
 80116d4:	d002      	beq.n	80116dc <tcp_parseopt+0x30>
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d03f      	beq.n	801175a <tcp_parseopt+0xae>
 80116da:	e026      	b.n	801172a <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80116dc:	f7ff ffac 	bl	8011638 <tcp_getoptbyte>
 80116e0:	4603      	mov	r3, r0
 80116e2:	2b04      	cmp	r3, #4
 80116e4:	d13b      	bne.n	801175e <tcp_parseopt+0xb2>
 80116e6:	4b22      	ldr	r3, [pc, #136]	; (8011770 <tcp_parseopt+0xc4>)
 80116e8:	881b      	ldrh	r3, [r3, #0]
 80116ea:	3302      	adds	r3, #2
 80116ec:	4a1f      	ldr	r2, [pc, #124]	; (801176c <tcp_parseopt+0xc0>)
 80116ee:	8812      	ldrh	r2, [r2, #0]
 80116f0:	4293      	cmp	r3, r2
 80116f2:	dc34      	bgt.n	801175e <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80116f4:	f7ff ffa0 	bl	8011638 <tcp_getoptbyte>
 80116f8:	4603      	mov	r3, r0
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	021b      	lsls	r3, r3, #8
 80116fe:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8011700:	f7ff ff9a 	bl	8011638 <tcp_getoptbyte>
 8011704:	4603      	mov	r3, r0
 8011706:	b29a      	uxth	r2, r3
 8011708:	89bb      	ldrh	r3, [r7, #12]
 801170a:	4313      	orrs	r3, r2
 801170c:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801170e:	89bb      	ldrh	r3, [r7, #12]
 8011710:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011714:	d804      	bhi.n	8011720 <tcp_parseopt+0x74>
 8011716:	89bb      	ldrh	r3, [r7, #12]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d001      	beq.n	8011720 <tcp_parseopt+0x74>
 801171c:	89ba      	ldrh	r2, [r7, #12]
 801171e:	e001      	b.n	8011724 <tcp_parseopt+0x78>
 8011720:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8011728:	e010      	b.n	801174c <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 801172a:	f7ff ff85 	bl	8011638 <tcp_getoptbyte>
 801172e:	4603      	mov	r3, r0
 8011730:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8011732:	7afb      	ldrb	r3, [r7, #11]
 8011734:	2b01      	cmp	r3, #1
 8011736:	d914      	bls.n	8011762 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8011738:	7afb      	ldrb	r3, [r7, #11]
 801173a:	b29a      	uxth	r2, r3
 801173c:	4b0c      	ldr	r3, [pc, #48]	; (8011770 <tcp_parseopt+0xc4>)
 801173e:	881b      	ldrh	r3, [r3, #0]
 8011740:	4413      	add	r3, r2
 8011742:	b29b      	uxth	r3, r3
 8011744:	3b02      	subs	r3, #2
 8011746:	b29a      	uxth	r2, r3
 8011748:	4b09      	ldr	r3, [pc, #36]	; (8011770 <tcp_parseopt+0xc4>)
 801174a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801174c:	4b08      	ldr	r3, [pc, #32]	; (8011770 <tcp_parseopt+0xc4>)
 801174e:	881a      	ldrh	r2, [r3, #0]
 8011750:	4b06      	ldr	r3, [pc, #24]	; (801176c <tcp_parseopt+0xc0>)
 8011752:	881b      	ldrh	r3, [r3, #0]
 8011754:	429a      	cmp	r2, r3
 8011756:	d3b5      	bcc.n	80116c4 <tcp_parseopt+0x18>
 8011758:	e004      	b.n	8011764 <tcp_parseopt+0xb8>
        return;
 801175a:	bf00      	nop
 801175c:	e002      	b.n	8011764 <tcp_parseopt+0xb8>
          return;
 801175e:	bf00      	nop
 8011760:	e000      	b.n	8011764 <tcp_parseopt+0xb8>
          return;
 8011762:	bf00      	nop
      }
    }
  }
}
 8011764:	3710      	adds	r7, #16
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}
 801176a:	bf00      	nop
 801176c:	20004204 	.word	0x20004204
 8011770:	2000420c 	.word	0x2000420c

08011774 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011774:	b480      	push	{r7}
 8011776:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011778:	4b05      	ldr	r3, [pc, #20]	; (8011790 <tcp_trigger_input_pcb_close+0x1c>)
 801177a:	781b      	ldrb	r3, [r3, #0]
 801177c:	f043 0310 	orr.w	r3, r3, #16
 8011780:	b2da      	uxtb	r2, r3
 8011782:	4b03      	ldr	r3, [pc, #12]	; (8011790 <tcp_trigger_input_pcb_close+0x1c>)
 8011784:	701a      	strb	r2, [r3, #0]
}
 8011786:	bf00      	nop
 8011788:	46bd      	mov	sp, r7
 801178a:	bc80      	pop	{r7}
 801178c:	4770      	bx	lr
 801178e:	bf00      	nop
 8011790:	2000421d 	.word	0x2000421d

08011794 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b086      	sub	sp, #24
 8011798:	af00      	add	r7, sp, #0
 801179a:	60f8      	str	r0, [r7, #12]
 801179c:	607b      	str	r3, [r7, #4]
 801179e:	460b      	mov	r3, r1
 80117a0:	817b      	strh	r3, [r7, #10]
 80117a2:	4613      	mov	r3, r2
 80117a4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80117a6:	897a      	ldrh	r2, [r7, #10]
 80117a8:	893b      	ldrh	r3, [r7, #8]
 80117aa:	4413      	add	r3, r2
 80117ac:	b29b      	uxth	r3, r3
 80117ae:	3314      	adds	r3, #20
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	2200      	movs	r2, #0
 80117b4:	4619      	mov	r1, r3
 80117b6:	2001      	movs	r0, #1
 80117b8:	f7fb fbda 	bl	800cf70 <pbuf_alloc>
 80117bc:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d057      	beq.n	8011874 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	895b      	ldrh	r3, [r3, #10]
 80117c8:	461a      	mov	r2, r3
 80117ca:	897b      	ldrh	r3, [r7, #10]
 80117cc:	3314      	adds	r3, #20
 80117ce:	429a      	cmp	r2, r3
 80117d0:	da05      	bge.n	80117de <tcp_output_alloc_header+0x4a>
 80117d2:	4b2b      	ldr	r3, [pc, #172]	; (8011880 <tcp_output_alloc_header+0xec>)
 80117d4:	2273      	movs	r2, #115	; 0x73
 80117d6:	492b      	ldr	r1, [pc, #172]	; (8011884 <tcp_output_alloc_header+0xf0>)
 80117d8:	482b      	ldr	r0, [pc, #172]	; (8011888 <tcp_output_alloc_header+0xf4>)
 80117da:	f002 fc7b 	bl	80140d4 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	685b      	ldr	r3, [r3, #4]
 80117e2:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	8adb      	ldrh	r3, [r3, #22]
 80117e8:	4618      	mov	r0, r3
 80117ea:	f7f8 facd 	bl	8009d88 <lwip_htons>
 80117ee:	4603      	mov	r3, r0
 80117f0:	461a      	mov	r2, r3
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	8b1b      	ldrh	r3, [r3, #24]
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7f8 fac4 	bl	8009d88 <lwip_htons>
 8011800:	4603      	mov	r3, r0
 8011802:	461a      	mov	r2, r3
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011808:	693b      	ldr	r3, [r7, #16]
 801180a:	687a      	ldr	r2, [r7, #4]
 801180c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011812:	4618      	mov	r0, r3
 8011814:	f7f8 fac5 	bl	8009da2 <lwip_htonl>
 8011818:	4602      	mov	r2, r0
 801181a:	693b      	ldr	r3, [r7, #16]
 801181c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 801181e:	897b      	ldrh	r3, [r7, #10]
 8011820:	089b      	lsrs	r3, r3, #2
 8011822:	b29b      	uxth	r3, r3
 8011824:	3305      	adds	r3, #5
 8011826:	b29b      	uxth	r3, r3
 8011828:	031b      	lsls	r3, r3, #12
 801182a:	b29b      	uxth	r3, r3
 801182c:	f043 0310 	orr.w	r3, r3, #16
 8011830:	b29b      	uxth	r3, r3
 8011832:	4618      	mov	r0, r3
 8011834:	f7f8 faa8 	bl	8009d88 <lwip_htons>
 8011838:	4603      	mov	r3, r0
 801183a:	461a      	mov	r2, r3
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011844:	4618      	mov	r0, r3
 8011846:	f7f8 fa9f 	bl	8009d88 <lwip_htons>
 801184a:	4603      	mov	r3, r0
 801184c:	461a      	mov	r2, r3
 801184e:	693b      	ldr	r3, [r7, #16]
 8011850:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011852:	693b      	ldr	r3, [r7, #16]
 8011854:	2200      	movs	r2, #0
 8011856:	741a      	strb	r2, [r3, #16]
 8011858:	2200      	movs	r2, #0
 801185a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	2200      	movs	r2, #0
 8011860:	749a      	strb	r2, [r3, #18]
 8011862:	2200      	movs	r2, #0
 8011864:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801186a:	68fa      	ldr	r2, [r7, #12]
 801186c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801186e:	441a      	add	r2, r3
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011874:	697b      	ldr	r3, [r7, #20]
}
 8011876:	4618      	mov	r0, r3
 8011878:	3718      	adds	r7, #24
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}
 801187e:	bf00      	nop
 8011880:	08017890 	.word	0x08017890
 8011884:	080178c4 	.word	0x080178c4
 8011888:	080178f4 	.word	0x080178f4

0801188c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801188c:	b5b0      	push	{r4, r5, r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011898:	2b00      	cmp	r3, #0
 801189a:	d02c      	beq.n	80118f6 <tcp_send_fin+0x6a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118a0:	60fb      	str	r3, [r7, #12]
 80118a2:	e002      	b.n	80118aa <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d1f8      	bne.n	80118a4 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	68db      	ldr	r3, [r3, #12]
 80118b6:	899b      	ldrh	r3, [r3, #12]
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7f8 fa64 	bl	8009d88 <lwip_htons>
 80118c0:	4603      	mov	r3, r0
 80118c2:	f003 0307 	and.w	r3, r3, #7
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d115      	bne.n	80118f6 <tcp_send_fin+0x6a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	68dc      	ldr	r4, [r3, #12]
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	68db      	ldr	r3, [r3, #12]
 80118d2:	899b      	ldrh	r3, [r3, #12]
 80118d4:	b29d      	uxth	r5, r3
 80118d6:	2001      	movs	r0, #1
 80118d8:	f7f8 fa56 	bl	8009d88 <lwip_htons>
 80118dc:	4603      	mov	r3, r0
 80118de:	432b      	orrs	r3, r5
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	81a3      	strh	r3, [r4, #12]
      pcb->flags |= TF_FIN;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	7e9b      	ldrb	r3, [r3, #26]
 80118e8:	f043 0320 	orr.w	r3, r3, #32
 80118ec:	b2da      	uxtb	r2, r3
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80118f2:	2300      	movs	r3, #0
 80118f4:	e004      	b.n	8011900 <tcp_send_fin+0x74>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80118f6:	2101      	movs	r1, #1
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f000 fcc3 	bl	8012284 <tcp_enqueue_flags>
 80118fe:	4603      	mov	r3, r0
}
 8011900:	4618      	mov	r0, r3
 8011902:	3710      	adds	r7, #16
 8011904:	46bd      	mov	sp, r7
 8011906:	bdb0      	pop	{r4, r5, r7, pc}

08011908 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8011908:	b590      	push	{r4, r7, lr}
 801190a:	b087      	sub	sp, #28
 801190c:	af00      	add	r7, sp, #0
 801190e:	60f8      	str	r0, [r7, #12]
 8011910:	60b9      	str	r1, [r7, #8]
 8011912:	603b      	str	r3, [r7, #0]
 8011914:	4613      	mov	r3, r2
 8011916:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011918:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801191c:	f003 0301 	and.w	r3, r3, #1
 8011920:	2b00      	cmp	r3, #0
 8011922:	d001      	beq.n	8011928 <tcp_create_segment+0x20>
 8011924:	2304      	movs	r3, #4
 8011926:	e000      	b.n	801192a <tcp_create_segment+0x22>
 8011928:	2300      	movs	r3, #0
 801192a:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801192c:	2003      	movs	r0, #3
 801192e:	f7fb f88b 	bl	800ca48 <memp_malloc>
 8011932:	6138      	str	r0, [r7, #16]
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d104      	bne.n	8011944 <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801193a:	68b8      	ldr	r0, [r7, #8]
 801193c:	f7fb fe8a 	bl	800d654 <pbuf_free>
    return NULL;
 8011940:	2300      	movs	r3, #0
 8011942:	e061      	b.n	8011a08 <tcp_create_segment+0x100>
  }
  seg->flags = optflags;
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801194a:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	2200      	movs	r2, #0
 8011950:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	68ba      	ldr	r2, [r7, #8]
 8011956:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	891a      	ldrh	r2, [r3, #8]
 801195c:	7dfb      	ldrb	r3, [r7, #23]
 801195e:	b29b      	uxth	r3, r3
 8011960:	429a      	cmp	r2, r3
 8011962:	d205      	bcs.n	8011970 <tcp_create_segment+0x68>
 8011964:	4b2a      	ldr	r3, [pc, #168]	; (8011a10 <tcp_create_segment+0x108>)
 8011966:	22ba      	movs	r2, #186	; 0xba
 8011968:	492a      	ldr	r1, [pc, #168]	; (8011a14 <tcp_create_segment+0x10c>)
 801196a:	482b      	ldr	r0, [pc, #172]	; (8011a18 <tcp_create_segment+0x110>)
 801196c:	f002 fbb2 	bl	80140d4 <iprintf>
  seg->len = p->tot_len - optlen;
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	891a      	ldrh	r2, [r3, #8]
 8011974:	7dfb      	ldrb	r3, [r7, #23]
 8011976:	b29b      	uxth	r3, r3
 8011978:	1ad3      	subs	r3, r2, r3
 801197a:	b29a      	uxth	r2, r3
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8011980:	2114      	movs	r1, #20
 8011982:	68b8      	ldr	r0, [r7, #8]
 8011984:	f7fb fe42 	bl	800d60c <pbuf_header>
 8011988:	4603      	mov	r3, r0
 801198a:	2b00      	cmp	r3, #0
 801198c:	d004      	beq.n	8011998 <tcp_create_segment+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801198e:	6938      	ldr	r0, [r7, #16]
 8011990:	f7fd f941 	bl	800ec16 <tcp_seg_free>
    return NULL;
 8011994:	2300      	movs	r3, #0
 8011996:	e037      	b.n	8011a08 <tcp_create_segment+0x100>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	685b      	ldr	r3, [r3, #4]
 801199c:	685a      	ldr	r2, [r3, #4]
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	68dc      	ldr	r4, [r3, #12]
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	8adb      	ldrh	r3, [r3, #22]
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7f8 f9ec 	bl	8009d88 <lwip_htons>
 80119b0:	4603      	mov	r3, r0
 80119b2:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	68dc      	ldr	r4, [r3, #12]
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	8b1b      	ldrh	r3, [r3, #24]
 80119bc:	4618      	mov	r0, r3
 80119be:	f7f8 f9e3 	bl	8009d88 <lwip_htons>
 80119c2:	4603      	mov	r3, r0
 80119c4:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	68dc      	ldr	r4, [r3, #12]
 80119ca:	6838      	ldr	r0, [r7, #0]
 80119cc:	f7f8 f9e9 	bl	8009da2 <lwip_htonl>
 80119d0:	4603      	mov	r3, r0
 80119d2:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80119d4:	693b      	ldr	r3, [r7, #16]
 80119d6:	68dc      	ldr	r4, [r3, #12]
 80119d8:	7dfb      	ldrb	r3, [r7, #23]
 80119da:	089b      	lsrs	r3, r3, #2
 80119dc:	b2db      	uxtb	r3, r3
 80119de:	b29b      	uxth	r3, r3
 80119e0:	3305      	adds	r3, #5
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	031b      	lsls	r3, r3, #12
 80119e6:	b29a      	uxth	r2, r3
 80119e8:	79fb      	ldrb	r3, [r7, #7]
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	4313      	orrs	r3, r2
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	4618      	mov	r0, r3
 80119f2:	f7f8 f9c9 	bl	8009d88 <lwip_htons>
 80119f6:	4603      	mov	r3, r0
 80119f8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	68db      	ldr	r3, [r3, #12]
 80119fe:	2200      	movs	r2, #0
 8011a00:	749a      	strb	r2, [r3, #18]
 8011a02:	2200      	movs	r2, #0
 8011a04:	74da      	strb	r2, [r3, #19]
  return seg;
 8011a06:	693b      	ldr	r3, [r7, #16]
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	371c      	adds	r7, #28
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd90      	pop	{r4, r7, pc}
 8011a10:	08017890 	.word	0x08017890
 8011a14:	0801791c 	.word	0x0801791c
 8011a18:	080178f4 	.word	0x080178f4

08011a1c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b086      	sub	sp, #24
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	607b      	str	r3, [r7, #4]
 8011a24:	4603      	mov	r3, r0
 8011a26:	73fb      	strb	r3, [r7, #15]
 8011a28:	460b      	mov	r3, r1
 8011a2a:	81bb      	strh	r3, [r7, #12]
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011a30:	89bb      	ldrh	r3, [r7, #12]
 8011a32:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011a34:	89ba      	ldrh	r2, [r7, #12]
 8011a36:	897b      	ldrh	r3, [r7, #10]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d221      	bcs.n	8011a80 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011a3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011a40:	f003 0302 	and.w	r3, r3, #2
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d111      	bne.n	8011a6c <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8011a48:	6a3b      	ldr	r3, [r7, #32]
 8011a4a:	7e9b      	ldrb	r3, [r3, #26]
 8011a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d115      	bne.n	8011a80 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8011a54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d007      	beq.n	8011a6c <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011a5c:	6a3b      	ldr	r3, [r7, #32]
 8011a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d103      	bne.n	8011a6c <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8011a64:	6a3b      	ldr	r3, [r7, #32]
 8011a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d009      	beq.n	8011a80 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011a6c:	89bb      	ldrh	r3, [r7, #12]
 8011a6e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011a72:	f023 0203 	bic.w	r2, r3, #3
 8011a76:	897b      	ldrh	r3, [r7, #10]
 8011a78:	4293      	cmp	r3, r2
 8011a7a:	bf28      	it	cs
 8011a7c:	4613      	movcs	r3, r2
 8011a7e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011a80:	8af9      	ldrh	r1, [r7, #22]
 8011a82:	7bfb      	ldrb	r3, [r7, #15]
 8011a84:	2200      	movs	r2, #0
 8011a86:	4618      	mov	r0, r3
 8011a88:	f7fb fa72 	bl	800cf70 <pbuf_alloc>
 8011a8c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a8e:	693b      	ldr	r3, [r7, #16]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d101      	bne.n	8011a98 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8011a94:	2300      	movs	r3, #0
 8011a96:	e019      	b.n	8011acc <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d006      	beq.n	8011aae <tcp_pbuf_prealloc+0x92>
 8011aa0:	4b0c      	ldr	r3, [pc, #48]	; (8011ad4 <tcp_pbuf_prealloc+0xb8>)
 8011aa2:	f44f 7288 	mov.w	r2, #272	; 0x110
 8011aa6:	490c      	ldr	r1, [pc, #48]	; (8011ad8 <tcp_pbuf_prealloc+0xbc>)
 8011aa8:	480c      	ldr	r0, [pc, #48]	; (8011adc <tcp_pbuf_prealloc+0xc0>)
 8011aaa:	f002 fb13 	bl	80140d4 <iprintf>
  *oversize = p->len - length;
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	895a      	ldrh	r2, [r3, #10]
 8011ab2:	89bb      	ldrh	r3, [r7, #12]
 8011ab4:	1ad3      	subs	r3, r2, r3
 8011ab6:	b29a      	uxth	r2, r3
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	89ba      	ldrh	r2, [r7, #12]
 8011ac0:	811a      	strh	r2, [r3, #8]
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	891a      	ldrh	r2, [r3, #8]
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	815a      	strh	r2, [r3, #10]
  return p;
 8011aca:	693b      	ldr	r3, [r7, #16]
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3718      	adds	r7, #24
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}
 8011ad4:	08017890 	.word	0x08017890
 8011ad8:	08017934 	.word	0x08017934
 8011adc:	080178f4 	.word	0x080178f4

08011ae0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b082      	sub	sp, #8
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	460b      	mov	r3, r1
 8011aea:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	7d1b      	ldrb	r3, [r3, #20]
 8011af0:	2b04      	cmp	r3, #4
 8011af2:	d00e      	beq.n	8011b12 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011af8:	2b07      	cmp	r3, #7
 8011afa:	d00a      	beq.n	8011b12 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011b00:	2b02      	cmp	r3, #2
 8011b02:	d006      	beq.n	8011b12 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011b08:	2b03      	cmp	r3, #3
 8011b0a:	d002      	beq.n	8011b12 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011b0c:	f06f 030a 	mvn.w	r3, #10
 8011b10:	e04f      	b.n	8011bb2 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8011b12:	887b      	ldrh	r3, [r7, #2]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d101      	bne.n	8011b1c <tcp_write_checks+0x3c>
    return ERR_OK;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	e04a      	b.n	8011bb2 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b22:	887a      	ldrh	r2, [r7, #2]
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d909      	bls.n	8011b3c <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	7e9b      	ldrb	r3, [r3, #26]
 8011b2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b30:	b2da      	uxtb	r2, r3
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8011b36:	f04f 33ff 	mov.w	r3, #4294967295
 8011b3a:	e03a      	b.n	8011bb2 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011b42:	2b08      	cmp	r3, #8
 8011b44:	d806      	bhi.n	8011b54 <tcp_write_checks+0x74>
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011b4c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011b50:	4293      	cmp	r3, r2
 8011b52:	d909      	bls.n	8011b68 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	7e9b      	ldrb	r3, [r3, #26]
 8011b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b5c:	b2da      	uxtb	r2, r3
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8011b62:	f04f 33ff 	mov.w	r3, #4294967295
 8011b66:	e024      	b.n	8011bb2 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d00f      	beq.n	8011b92 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d11a      	bne.n	8011bb0 <tcp_write_checks+0xd0>
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d116      	bne.n	8011bb0 <tcp_write_checks+0xd0>
 8011b82:	4b0e      	ldr	r3, [pc, #56]	; (8011bbc <tcp_write_checks+0xdc>)
 8011b84:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8011b88:	490d      	ldr	r1, [pc, #52]	; (8011bc0 <tcp_write_checks+0xe0>)
 8011b8a:	480e      	ldr	r0, [pc, #56]	; (8011bc4 <tcp_write_checks+0xe4>)
 8011b8c:	f002 faa2 	bl	80140d4 <iprintf>
 8011b90:	e00e      	b.n	8011bb0 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d103      	bne.n	8011ba2 <tcp_write_checks+0xc2>
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d006      	beq.n	8011bb0 <tcp_write_checks+0xd0>
 8011ba2:	4b06      	ldr	r3, [pc, #24]	; (8011bbc <tcp_write_checks+0xdc>)
 8011ba4:	f240 1259 	movw	r2, #345	; 0x159
 8011ba8:	4907      	ldr	r1, [pc, #28]	; (8011bc8 <tcp_write_checks+0xe8>)
 8011baa:	4806      	ldr	r0, [pc, #24]	; (8011bc4 <tcp_write_checks+0xe4>)
 8011bac:	f002 fa92 	bl	80140d4 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011bb0:	2300      	movs	r3, #0
}
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	3708      	adds	r7, #8
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}
 8011bba:	bf00      	nop
 8011bbc:	08017890 	.word	0x08017890
 8011bc0:	08017948 	.word	0x08017948
 8011bc4:	080178f4 	.word	0x080178f4
 8011bc8:	08017984 	.word	0x08017984

08011bcc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011bcc:	b5b0      	push	{r4, r5, r7, lr}
 8011bce:	b09a      	sub	sp, #104	; 0x68
 8011bd0:	af04      	add	r7, sp, #16
 8011bd2:	60f8      	str	r0, [r7, #12]
 8011bd4:	60b9      	str	r1, [r7, #8]
 8011bd6:	4611      	mov	r1, r2
 8011bd8:	461a      	mov	r2, r3
 8011bda:	460b      	mov	r3, r1
 8011bdc:	80fb      	strh	r3, [r7, #6]
 8011bde:	4613      	mov	r3, r2
 8011be0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011be2:	2300      	movs	r3, #0
 8011be4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011be6:	2300      	movs	r3, #0
 8011be8:	653b      	str	r3, [r7, #80]	; 0x50
 8011bea:	2300      	movs	r3, #0
 8011bec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011bee:	2300      	movs	r3, #0
 8011bf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8011c02:	2300      	movs	r3, #0
 8011c04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011c10:	2300      	movs	r3, #0
 8011c12:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011c1a:	085b      	lsrs	r3, r3, #1
 8011c1c:	b29a      	uxth	r2, r3
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c22:	4293      	cmp	r3, r2
 8011c24:	bf28      	it	cs
 8011c26:	4613      	movcs	r3, r2
 8011c28:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011c2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d102      	bne.n	8011c36 <tcp_write+0x6a>
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c34:	e000      	b.n	8011c38 <tcp_write+0x6c>
 8011c36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c38:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d109      	bne.n	8011c54 <tcp_write+0x88>
 8011c40:	4b94      	ldr	r3, [pc, #592]	; (8011e94 <tcp_write+0x2c8>)
 8011c42:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8011c46:	4994      	ldr	r1, [pc, #592]	; (8011e98 <tcp_write+0x2cc>)
 8011c48:	4894      	ldr	r0, [pc, #592]	; (8011e9c <tcp_write+0x2d0>)
 8011c4a:	f002 fa43 	bl	80140d4 <iprintf>
 8011c4e:	f06f 030f 	mvn.w	r3, #15
 8011c52:	e30d      	b.n	8012270 <tcp_write+0x6a4>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011c54:	88fb      	ldrh	r3, [r7, #6]
 8011c56:	4619      	mov	r1, r3
 8011c58:	68f8      	ldr	r0, [r7, #12]
 8011c5a:	f7ff ff41 	bl	8011ae0 <tcp_write_checks>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011c64:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d002      	beq.n	8011c72 <tcp_write+0xa6>
    return err;
 8011c6c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011c70:	e2fe      	b.n	8012270 <tcp_write+0x6a4>
  }
  queuelen = pcb->snd_queuelen;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011c78:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	f000 80f8 	beq.w	8011e76 <tcp_write+0x2aa>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011c8a:	653b      	str	r3, [r7, #80]	; 0x50
 8011c8c:	e002      	b.n	8011c94 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8011c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d1f8      	bne.n	8011c8e <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8011c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c9e:	7a9b      	ldrb	r3, [r3, #10]
 8011ca0:	f003 0301 	and.w	r3, r3, #1
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d001      	beq.n	8011cac <tcp_write+0xe0>
 8011ca8:	2304      	movs	r3, #4
 8011caa:	e000      	b.n	8011cae <tcp_write+0xe2>
 8011cac:	2300      	movs	r3, #0
 8011cae:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011cb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cb4:	891b      	ldrh	r3, [r3, #8]
 8011cb6:	4619      	mov	r1, r3
 8011cb8:	8c3b      	ldrh	r3, [r7, #32]
 8011cba:	440b      	add	r3, r1
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	da06      	bge.n	8011cce <tcp_write+0x102>
 8011cc0:	4b74      	ldr	r3, [pc, #464]	; (8011e94 <tcp_write+0x2c8>)
 8011cc2:	f240 12c7 	movw	r2, #455	; 0x1c7
 8011cc6:	4976      	ldr	r1, [pc, #472]	; (8011ea0 <tcp_write+0x2d4>)
 8011cc8:	4874      	ldr	r0, [pc, #464]	; (8011e9c <tcp_write+0x2d0>)
 8011cca:	f002 fa03 	bl	80140d4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cd0:	891a      	ldrh	r2, [r3, #8]
 8011cd2:	8c3b      	ldrh	r3, [r7, #32]
 8011cd4:	4413      	add	r3, r2
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011cda:	1ad3      	subs	r3, r2, r3
 8011cdc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011ce4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011ce6:	8a7b      	ldrh	r3, [r7, #18]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d027      	beq.n	8011d3c <tcp_write+0x170>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011cec:	8a7b      	ldrh	r3, [r7, #18]
 8011cee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d206      	bcs.n	8011d02 <tcp_write+0x136>
 8011cf4:	4b67      	ldr	r3, [pc, #412]	; (8011e94 <tcp_write+0x2c8>)
 8011cf6:	f240 12d9 	movw	r2, #473	; 0x1d9
 8011cfa:	496a      	ldr	r1, [pc, #424]	; (8011ea4 <tcp_write+0x2d8>)
 8011cfc:	4867      	ldr	r0, [pc, #412]	; (8011e9c <tcp_write+0x2d0>)
 8011cfe:	f002 f9e9 	bl	80140d4 <iprintf>
      seg = last_unsent;
 8011d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d04:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011d06:	8a7b      	ldrh	r3, [r7, #18]
 8011d08:	88fa      	ldrh	r2, [r7, #6]
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	d901      	bls.n	8011d12 <tcp_write+0x146>
 8011d0e:	8a7b      	ldrh	r3, [r7, #18]
 8011d10:	e000      	b.n	8011d14 <tcp_write+0x148>
 8011d12:	88fb      	ldrh	r3, [r7, #6]
 8011d14:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d16:	4293      	cmp	r3, r2
 8011d18:	bfa8      	it	ge
 8011d1a:	4613      	movge	r3, r2
 8011d1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011d1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d24:	4413      	add	r3, r2
 8011d26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011d2a:	8a7a      	ldrh	r2, [r7, #18]
 8011d2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d2e:	1ad3      	subs	r3, r2, r3
 8011d30:	b29b      	uxth	r3, r3
 8011d32:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011d34:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d38:	1ad3      	subs	r3, r2, r3
 8011d3a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011d3c:	8a7b      	ldrh	r3, [r7, #18]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d00b      	beq.n	8011d5a <tcp_write+0x18e>
 8011d42:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d46:	88fb      	ldrh	r3, [r7, #6]
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d006      	beq.n	8011d5a <tcp_write+0x18e>
 8011d4c:	4b51      	ldr	r3, [pc, #324]	; (8011e94 <tcp_write+0x2c8>)
 8011d4e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011d52:	4955      	ldr	r1, [pc, #340]	; (8011ea8 <tcp_write+0x2dc>)
 8011d54:	4851      	ldr	r0, [pc, #324]	; (8011e9c <tcp_write+0x2d0>)
 8011d56:	f002 f9bd 	bl	80140d4 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011d5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d5e:	88fb      	ldrh	r3, [r7, #6]
 8011d60:	429a      	cmp	r2, r3
 8011d62:	f080 8169 	bcs.w	8012038 <tcp_write+0x46c>
 8011d66:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	f000 8165 	beq.w	8012038 <tcp_write+0x46c>
 8011d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d70:	891b      	ldrh	r3, [r3, #8]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	f000 8160 	beq.w	8012038 <tcp_write+0x46c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011d78:	88fa      	ldrh	r2, [r7, #6]
 8011d7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d7e:	1ad2      	subs	r2, r2, r3
 8011d80:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011d82:	4293      	cmp	r3, r2
 8011d84:	bfa8      	it	ge
 8011d86:	4613      	movge	r3, r2
 8011d88:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d8c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011d8e:	797b      	ldrb	r3, [r7, #5]
 8011d90:	f003 0301 	and.w	r3, r3, #1
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d027      	beq.n	8011de8 <tcp_write+0x21c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011d98:	f107 0012 	add.w	r0, r7, #18
 8011d9c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d9e:	8bf9      	ldrh	r1, [r7, #30]
 8011da0:	2301      	movs	r3, #1
 8011da2:	9302      	str	r3, [sp, #8]
 8011da4:	797b      	ldrb	r3, [r7, #5]
 8011da6:	9301      	str	r3, [sp, #4]
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	9300      	str	r3, [sp, #0]
 8011dac:	4603      	mov	r3, r0
 8011dae:	2004      	movs	r0, #4
 8011db0:	f7ff fe34 	bl	8011a1c <tcp_pbuf_prealloc>
 8011db4:	6578      	str	r0, [r7, #84]	; 0x54
 8011db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	f000 8227 	beq.w	801220c <tcp_write+0x640>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dc0:	6858      	ldr	r0, [r3, #4]
 8011dc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011dc6:	68ba      	ldr	r2, [r7, #8]
 8011dc8:	4413      	add	r3, r2
 8011dca:	8bfa      	ldrh	r2, [r7, #30]
 8011dcc:	4619      	mov	r1, r3
 8011dce:	f002 f940 	bl	8014052 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011dd2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011dd4:	f7fb fcd8 	bl	800d788 <pbuf_clen>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	461a      	mov	r2, r3
 8011ddc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011de0:	4413      	add	r3, r2
 8011de2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011de6:	e03f      	b.n	8011e68 <tcp_write+0x29c>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	637b      	str	r3, [r7, #52]	; 0x34
 8011dee:	e002      	b.n	8011df6 <tcp_write+0x22a>
 8011df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	637b      	str	r3, [r7, #52]	; 0x34
 8011df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d1f8      	bne.n	8011df0 <tcp_write+0x224>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e00:	7b1b      	ldrb	r3, [r3, #12]
 8011e02:	2b01      	cmp	r3, #1
 8011e04:	d115      	bne.n	8011e32 <tcp_write+0x266>
 8011e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e08:	685b      	ldr	r3, [r3, #4]
 8011e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e0c:	8952      	ldrh	r2, [r2, #10]
 8011e0e:	441a      	add	r2, r3
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d10d      	bne.n	8011e32 <tcp_write+0x266>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011e16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d006      	beq.n	8011e2c <tcp_write+0x260>
 8011e1e:	4b1d      	ldr	r3, [pc, #116]	; (8011e94 <tcp_write+0x2c8>)
 8011e20:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8011e24:	4921      	ldr	r1, [pc, #132]	; (8011eac <tcp_write+0x2e0>)
 8011e26:	481d      	ldr	r0, [pc, #116]	; (8011e9c <tcp_write+0x2d0>)
 8011e28:	f002 f954 	bl	80140d4 <iprintf>
          extendlen = seglen;
 8011e2c:	8bfb      	ldrh	r3, [r7, #30]
 8011e2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011e30:	e01a      	b.n	8011e68 <tcp_write+0x29c>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011e32:	8bfb      	ldrh	r3, [r7, #30]
 8011e34:	2201      	movs	r2, #1
 8011e36:	4619      	mov	r1, r3
 8011e38:	2004      	movs	r0, #4
 8011e3a:	f7fb f899 	bl	800cf70 <pbuf_alloc>
 8011e3e:	6578      	str	r0, [r7, #84]	; 0x54
 8011e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	f000 81e4 	beq.w	8012210 <tcp_write+0x644>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8011e48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e4c:	68ba      	ldr	r2, [r7, #8]
 8011e4e:	441a      	add	r2, r3
 8011e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e52:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011e54:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011e56:	f7fb fc97 	bl	800d788 <pbuf_clen>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	461a      	mov	r2, r3
 8011e5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011e62:	4413      	add	r3, r2
 8011e64:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011e68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e6c:	8bfb      	ldrh	r3, [r7, #30]
 8011e6e:	4413      	add	r3, r2
 8011e70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011e74:	e0e0      	b.n	8012038 <tcp_write+0x46c>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	f000 80db 	beq.w	8012038 <tcp_write+0x46c>
 8011e82:	4b04      	ldr	r3, [pc, #16]	; (8011e94 <tcp_write+0x2c8>)
 8011e84:	f240 2225 	movw	r2, #549	; 0x225
 8011e88:	4909      	ldr	r1, [pc, #36]	; (8011eb0 <tcp_write+0x2e4>)
 8011e8a:	4804      	ldr	r0, [pc, #16]	; (8011e9c <tcp_write+0x2d0>)
 8011e8c:	f002 f922 	bl	80140d4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011e90:	e0d2      	b.n	8012038 <tcp_write+0x46c>
 8011e92:	bf00      	nop
 8011e94:	08017890 	.word	0x08017890
 8011e98:	080179b8 	.word	0x080179b8
 8011e9c:	080178f4 	.word	0x080178f4
 8011ea0:	080179ec 	.word	0x080179ec
 8011ea4:	08017a04 	.word	0x08017a04
 8011ea8:	08017a24 	.word	0x08017a24
 8011eac:	08017a44 	.word	0x08017a44
 8011eb0:	08017a70 	.word	0x08017a70
    struct pbuf *p;
    u16_t left = len - pos;
 8011eb4:	88fa      	ldrh	r2, [r7, #6]
 8011eb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011eba:	1ad3      	subs	r3, r2, r3
 8011ebc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011ec6:	1ad3      	subs	r3, r2, r3
 8011ec8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011eca:	8b7a      	ldrh	r2, [r7, #26]
 8011ecc:	8bbb      	ldrh	r3, [r7, #28]
 8011ece:	4293      	cmp	r3, r2
 8011ed0:	bf28      	it	cs
 8011ed2:	4613      	movcs	r3, r2
 8011ed4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011ed6:	797b      	ldrb	r3, [r7, #5]
 8011ed8:	f003 0301 	and.w	r3, r3, #1
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d036      	beq.n	8011f4e <tcp_write+0x382>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ee4:	b29a      	uxth	r2, r3
 8011ee6:	8b3b      	ldrh	r3, [r7, #24]
 8011ee8:	4413      	add	r3, r2
 8011eea:	b299      	uxth	r1, r3
 8011eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	bf0c      	ite	eq
 8011ef2:	2301      	moveq	r3, #1
 8011ef4:	2300      	movne	r3, #0
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	f107 0012 	add.w	r0, r7, #18
 8011efc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011efe:	9302      	str	r3, [sp, #8]
 8011f00:	797b      	ldrb	r3, [r7, #5]
 8011f02:	9301      	str	r3, [sp, #4]
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	9300      	str	r3, [sp, #0]
 8011f08:	4603      	mov	r3, r0
 8011f0a:	2000      	movs	r0, #0
 8011f0c:	f7ff fd86 	bl	8011a1c <tcp_pbuf_prealloc>
 8011f10:	6338      	str	r0, [r7, #48]	; 0x30
 8011f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	f000 817d 	beq.w	8012214 <tcp_write+0x648>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f1c:	895b      	ldrh	r3, [r3, #10]
 8011f1e:	8b3a      	ldrh	r2, [r7, #24]
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d906      	bls.n	8011f32 <tcp_write+0x366>
 8011f24:	4b8f      	ldr	r3, [pc, #572]	; (8012164 <tcp_write+0x598>)
 8011f26:	f240 2241 	movw	r2, #577	; 0x241
 8011f2a:	498f      	ldr	r1, [pc, #572]	; (8012168 <tcp_write+0x59c>)
 8011f2c:	488f      	ldr	r0, [pc, #572]	; (801216c <tcp_write+0x5a0>)
 8011f2e:	f002 f8d1 	bl	80140d4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8011f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f34:	685a      	ldr	r2, [r3, #4]
 8011f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f3a:	18d0      	adds	r0, r2, r3
 8011f3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f40:	68ba      	ldr	r2, [r7, #8]
 8011f42:	4413      	add	r3, r2
 8011f44:	8b3a      	ldrh	r2, [r7, #24]
 8011f46:	4619      	mov	r1, r3
 8011f48:	f002 f883 	bl	8014052 <memcpy>
 8011f4c:	e02e      	b.n	8011fac <tcp_write+0x3e0>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011f4e:	8a7b      	ldrh	r3, [r7, #18]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d006      	beq.n	8011f62 <tcp_write+0x396>
 8011f54:	4b83      	ldr	r3, [pc, #524]	; (8012164 <tcp_write+0x598>)
 8011f56:	f240 224b 	movw	r2, #587	; 0x24b
 8011f5a:	4985      	ldr	r1, [pc, #532]	; (8012170 <tcp_write+0x5a4>)
 8011f5c:	4883      	ldr	r0, [pc, #524]	; (801216c <tcp_write+0x5a0>)
 8011f5e:	f002 f8b9 	bl	80140d4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011f62:	8b3b      	ldrh	r3, [r7, #24]
 8011f64:	2201      	movs	r2, #1
 8011f66:	4619      	mov	r1, r3
 8011f68:	2000      	movs	r0, #0
 8011f6a:	f7fb f801 	bl	800cf70 <pbuf_alloc>
 8011f6e:	6178      	str	r0, [r7, #20]
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	f000 8150 	beq.w	8012218 <tcp_write+0x64c>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8011f78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f7c:	68ba      	ldr	r2, [r7, #8]
 8011f7e:	441a      	add	r2, r3
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f88:	b29b      	uxth	r3, r3
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	2000      	movs	r0, #0
 8011f90:	f7fa ffee 	bl	800cf70 <pbuf_alloc>
 8011f94:	6338      	str	r0, [r7, #48]	; 0x30
 8011f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d103      	bne.n	8011fa4 <tcp_write+0x3d8>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011f9c:	6978      	ldr	r0, [r7, #20]
 8011f9e:	f7fb fb59 	bl	800d654 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011fa2:	e13c      	b.n	801221e <tcp_write+0x652>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011fa4:	6979      	ldr	r1, [r7, #20]
 8011fa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fa8:	f7fb fc2c 	bl	800d804 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fae:	f7fb fbeb 	bl	800d788 <pbuf_clen>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	461a      	mov	r2, r3
 8011fb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011fba:	4413      	add	r3, r2
 8011fbc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8011fc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011fc4:	2b09      	cmp	r3, #9
 8011fc6:	d805      	bhi.n	8011fd4 <tcp_write+0x408>
 8011fc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011fcc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011fd0:	4293      	cmp	r3, r2
 8011fd2:	d903      	bls.n	8011fdc <tcp_write+0x410>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fd6:	f7fb fb3d 	bl	800d654 <pbuf_free>
      goto memerr;
 8011fda:	e120      	b.n	801221e <tcp_write+0x652>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011fe0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fe4:	441a      	add	r2, r3
 8011fe6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011fea:	9300      	str	r3, [sp, #0]
 8011fec:	4613      	mov	r3, r2
 8011fee:	2200      	movs	r2, #0
 8011ff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011ff2:	68f8      	ldr	r0, [r7, #12]
 8011ff4:	f7ff fc88 	bl	8011908 <tcp_create_segment>
 8011ff8:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	f000 810d 	beq.w	801221c <tcp_write+0x650>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012004:	2b00      	cmp	r3, #0
 8012006:	d102      	bne.n	801200e <tcp_write+0x442>
      queue = seg;
 8012008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801200a:	647b      	str	r3, [r7, #68]	; 0x44
 801200c:	e00c      	b.n	8012028 <tcp_write+0x45c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801200e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012010:	2b00      	cmp	r3, #0
 8012012:	d106      	bne.n	8012022 <tcp_write+0x456>
 8012014:	4b53      	ldr	r3, [pc, #332]	; (8012164 <tcp_write+0x598>)
 8012016:	f240 2285 	movw	r2, #645	; 0x285
 801201a:	4956      	ldr	r1, [pc, #344]	; (8012174 <tcp_write+0x5a8>)
 801201c:	4853      	ldr	r0, [pc, #332]	; (801216c <tcp_write+0x5a0>)
 801201e:	f002 f859 	bl	80140d4 <iprintf>
      prev_seg->next = seg;
 8012022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012024:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012026:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801202a:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801202c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012030:	8b3b      	ldrh	r3, [r7, #24]
 8012032:	4413      	add	r3, r2
 8012034:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012038:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801203c:	88fb      	ldrh	r3, [r7, #6]
 801203e:	429a      	cmp	r2, r3
 8012040:	f4ff af38 	bcc.w	8011eb4 <tcp_write+0x2e8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012044:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012046:	2b00      	cmp	r3, #0
 8012048:	d02c      	beq.n	80120a4 <tcp_write+0x4d8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801204a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012050:	e01e      	b.n	8012090 <tcp_write+0x4c4>
      p->tot_len += oversize_used;
 8012052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012054:	891a      	ldrh	r2, [r3, #8]
 8012056:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012058:	4413      	add	r3, r2
 801205a:	b29a      	uxth	r2, r3
 801205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801205e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d110      	bne.n	801208a <tcp_write+0x4be>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801206a:	685b      	ldr	r3, [r3, #4]
 801206c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801206e:	8952      	ldrh	r2, [r2, #10]
 8012070:	4413      	add	r3, r2
 8012072:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012074:	68b9      	ldr	r1, [r7, #8]
 8012076:	4618      	mov	r0, r3
 8012078:	f001 ffeb 	bl	8014052 <memcpy>
        p->len += oversize_used;
 801207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207e:	895a      	ldrh	r2, [r3, #10]
 8012080:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012082:	4413      	add	r3, r2
 8012084:	b29a      	uxth	r2, r3
 8012086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012088:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012092:	2b00      	cmp	r3, #0
 8012094:	d1dd      	bne.n	8012052 <tcp_write+0x486>
      }
    }
    last_unsent->len += oversize_used;
 8012096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012098:	891a      	ldrh	r2, [r3, #8]
 801209a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801209c:	4413      	add	r3, r2
 801209e:	b29a      	uxth	r2, r3
 80120a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120a2:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80120a4:	8a7a      	ldrh	r2, [r7, #18]
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80120ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d018      	beq.n	80120e4 <tcp_write+0x518>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80120b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d106      	bne.n	80120c6 <tcp_write+0x4fa>
 80120b8:	4b2a      	ldr	r3, [pc, #168]	; (8012164 <tcp_write+0x598>)
 80120ba:	f240 22bb 	movw	r2, #699	; 0x2bb
 80120be:	492e      	ldr	r1, [pc, #184]	; (8012178 <tcp_write+0x5ac>)
 80120c0:	482a      	ldr	r0, [pc, #168]	; (801216c <tcp_write+0x5a0>)
 80120c2:	f002 f807 	bl	80140d4 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80120c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120c8:	685b      	ldr	r3, [r3, #4]
 80120ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80120cc:	4618      	mov	r0, r3
 80120ce:	f7fb fb99 	bl	800d804 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80120d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120d4:	891a      	ldrh	r2, [r3, #8]
 80120d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120d8:	891b      	ldrh	r3, [r3, #8]
 80120da:	4413      	add	r3, r2
 80120dc:	b29a      	uxth	r2, r3
 80120de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120e0:	811a      	strh	r2, [r3, #8]
 80120e2:	e037      	b.n	8012154 <tcp_write+0x588>
  } else if (extendlen > 0) {
 80120e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d034      	beq.n	8012154 <tcp_write+0x588>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80120ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d003      	beq.n	80120f8 <tcp_write+0x52c>
 80120f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120f2:	685b      	ldr	r3, [r3, #4]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d106      	bne.n	8012106 <tcp_write+0x53a>
 80120f8:	4b1a      	ldr	r3, [pc, #104]	; (8012164 <tcp_write+0x598>)
 80120fa:	f240 22c1 	movw	r2, #705	; 0x2c1
 80120fe:	491f      	ldr	r1, [pc, #124]	; (801217c <tcp_write+0x5b0>)
 8012100:	481a      	ldr	r0, [pc, #104]	; (801216c <tcp_write+0x5a0>)
 8012102:	f001 ffe7 	bl	80140d4 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	62bb      	str	r3, [r7, #40]	; 0x28
 801210c:	e009      	b.n	8012122 <tcp_write+0x556>
      p->tot_len += extendlen;
 801210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012110:	891a      	ldrh	r2, [r3, #8]
 8012112:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012114:	4413      	add	r3, r2
 8012116:	b29a      	uxth	r2, r3
 8012118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801211a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	62bb      	str	r3, [r7, #40]	; 0x28
 8012122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d1f1      	bne.n	801210e <tcp_write+0x542>
    }
    p->tot_len += extendlen;
 801212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801212c:	891a      	ldrh	r2, [r3, #8]
 801212e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012130:	4413      	add	r3, r2
 8012132:	b29a      	uxth	r2, r3
 8012134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012136:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801213a:	895a      	ldrh	r2, [r3, #10]
 801213c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801213e:	4413      	add	r3, r2
 8012140:	b29a      	uxth	r2, r3
 8012142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012144:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012148:	891a      	ldrh	r2, [r3, #8]
 801214a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801214c:	4413      	add	r3, r2
 801214e:	b29a      	uxth	r2, r3
 8012150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012152:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012156:	2b00      	cmp	r3, #0
 8012158:	d112      	bne.n	8012180 <tcp_write+0x5b4>
    pcb->unsent = queue;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801215e:	669a      	str	r2, [r3, #104]	; 0x68
 8012160:	e011      	b.n	8012186 <tcp_write+0x5ba>
 8012162:	bf00      	nop
 8012164:	08017890 	.word	0x08017890
 8012168:	08017aa0 	.word	0x08017aa0
 801216c:	080178f4 	.word	0x080178f4
 8012170:	08017ae0 	.word	0x08017ae0
 8012174:	08017af0 	.word	0x08017af0
 8012178:	08017b04 	.word	0x08017b04
 801217c:	08017b3c 	.word	0x08017b3c
  } else {
    last_unsent->next = queue;
 8012180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012184:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801218a:	88fb      	ldrh	r3, [r7, #6]
 801218c:	441a      	add	r2, r3
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012198:	88fb      	ldrh	r3, [r7, #6]
 801219a:	1ad3      	subs	r3, r2, r3
 801219c:	b29a      	uxth	r2, r3
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80121aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d00e      	beq.n	80121d6 <tcp_write+0x60a>
    LWIP_ASSERT("tcp_write: valid queue length",
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d10a      	bne.n	80121d6 <tcp_write+0x60a>
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d106      	bne.n	80121d6 <tcp_write+0x60a>
 80121c8:	4b2b      	ldr	r3, [pc, #172]	; (8012278 <tcp_write+0x6ac>)
 80121ca:	f240 22ed 	movw	r2, #749	; 0x2ed
 80121ce:	492b      	ldr	r1, [pc, #172]	; (801227c <tcp_write+0x6b0>)
 80121d0:	482b      	ldr	r0, [pc, #172]	; (8012280 <tcp_write+0x6b4>)
 80121d2:	f001 ff7f 	bl	80140d4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 80121d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d015      	beq.n	8012208 <tcp_write+0x63c>
 80121dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121de:	68db      	ldr	r3, [r3, #12]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d011      	beq.n	8012208 <tcp_write+0x63c>
 80121e4:	797b      	ldrb	r3, [r7, #5]
 80121e6:	f003 0302 	and.w	r3, r3, #2
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d10c      	bne.n	8012208 <tcp_write+0x63c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80121ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121f0:	68dc      	ldr	r4, [r3, #12]
 80121f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	899b      	ldrh	r3, [r3, #12]
 80121f8:	b29d      	uxth	r5, r3
 80121fa:	2008      	movs	r0, #8
 80121fc:	f7f7 fdc4 	bl	8009d88 <lwip_htons>
 8012200:	4603      	mov	r3, r0
 8012202:	432b      	orrs	r3, r5
 8012204:	b29b      	uxth	r3, r3
 8012206:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 8012208:	2300      	movs	r3, #0
 801220a:	e031      	b.n	8012270 <tcp_write+0x6a4>
          goto memerr;
 801220c:	bf00      	nop
 801220e:	e006      	b.n	801221e <tcp_write+0x652>
            goto memerr;
 8012210:	bf00      	nop
 8012212:	e004      	b.n	801221e <tcp_write+0x652>
        goto memerr;
 8012214:	bf00      	nop
 8012216:	e002      	b.n	801221e <tcp_write+0x652>
        goto memerr;
 8012218:	bf00      	nop
 801221a:	e000      	b.n	801221e <tcp_write+0x652>
      goto memerr;
 801221c:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	7e9b      	ldrb	r3, [r3, #26]
 8012222:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012226:	b2da      	uxtb	r2, r3
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801222c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801222e:	2b00      	cmp	r3, #0
 8012230:	d002      	beq.n	8012238 <tcp_write+0x66c>
    pbuf_free(concat_p);
 8012232:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012234:	f7fb fa0e 	bl	800d654 <pbuf_free>
  }
  if (queue != NULL) {
 8012238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801223a:	2b00      	cmp	r3, #0
 801223c:	d002      	beq.n	8012244 <tcp_write+0x678>
    tcp_segs_free(queue);
 801223e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012240:	f7fc fcd5 	bl	800ebee <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801224a:	2b00      	cmp	r3, #0
 801224c:	d00e      	beq.n	801226c <tcp_write+0x6a0>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012252:	2b00      	cmp	r3, #0
 8012254:	d10a      	bne.n	801226c <tcp_write+0x6a0>
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801225a:	2b00      	cmp	r3, #0
 801225c:	d106      	bne.n	801226c <tcp_write+0x6a0>
 801225e:	4b06      	ldr	r3, [pc, #24]	; (8012278 <tcp_write+0x6ac>)
 8012260:	f240 3202 	movw	r2, #770	; 0x302
 8012264:	4905      	ldr	r1, [pc, #20]	; (801227c <tcp_write+0x6b0>)
 8012266:	4806      	ldr	r0, [pc, #24]	; (8012280 <tcp_write+0x6b4>)
 8012268:	f001 ff34 	bl	80140d4 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801226c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012270:	4618      	mov	r0, r3
 8012272:	3758      	adds	r7, #88	; 0x58
 8012274:	46bd      	mov	sp, r7
 8012276:	bdb0      	pop	{r4, r5, r7, pc}
 8012278:	08017890 	.word	0x08017890
 801227c:	08017b74 	.word	0x08017b74
 8012280:	080178f4 	.word	0x080178f4

08012284 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b08a      	sub	sp, #40	; 0x28
 8012288:	af02      	add	r7, sp, #8
 801228a:	6078      	str	r0, [r7, #4]
 801228c:	460b      	mov	r3, r1
 801228e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012290:	2300      	movs	r3, #0
 8012292:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012294:	2300      	movs	r3, #0
 8012296:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012298:	78fb      	ldrb	r3, [r7, #3]
 801229a:	f003 0303 	and.w	r3, r3, #3
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d106      	bne.n	80122b0 <tcp_enqueue_flags+0x2c>
 80122a2:	4b70      	ldr	r3, [pc, #448]	; (8012464 <tcp_enqueue_flags+0x1e0>)
 80122a4:	f240 321b 	movw	r2, #795	; 0x31b
 80122a8:	496f      	ldr	r1, [pc, #444]	; (8012468 <tcp_enqueue_flags+0x1e4>)
 80122aa:	4870      	ldr	r0, [pc, #448]	; (801246c <tcp_enqueue_flags+0x1e8>)
 80122ac:	f001 ff12 	bl	80140d4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80122b6:	2b08      	cmp	r3, #8
 80122b8:	d806      	bhi.n	80122c8 <tcp_enqueue_flags+0x44>
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80122c0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80122c4:	4293      	cmp	r3, r2
 80122c6:	d90e      	bls.n	80122e6 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 80122c8:	78fb      	ldrb	r3, [r7, #3]
 80122ca:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d109      	bne.n	80122e6 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	7e9b      	ldrb	r3, [r3, #26]
 80122d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80122da:	b2da      	uxtb	r2, r3
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80122e0:	f04f 33ff 	mov.w	r3, #4294967295
 80122e4:	e0ba      	b.n	801245c <tcp_enqueue_flags+0x1d8>
  }

  if (flags & TCP_SYN) {
 80122e6:	78fb      	ldrb	r3, [r7, #3]
 80122e8:	f003 0302 	and.w	r3, r3, #2
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d001      	beq.n	80122f4 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 80122f0:	2301      	movs	r3, #1
 80122f2:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80122f4:	7ffb      	ldrb	r3, [r7, #31]
 80122f6:	f003 0301 	and.w	r3, r3, #1
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d001      	beq.n	8012302 <tcp_enqueue_flags+0x7e>
 80122fe:	2304      	movs	r3, #4
 8012300:	e000      	b.n	8012304 <tcp_enqueue_flags+0x80>
 8012302:	2300      	movs	r3, #0
 8012304:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012306:	7dfb      	ldrb	r3, [r7, #23]
 8012308:	b29b      	uxth	r3, r3
 801230a:	2200      	movs	r2, #0
 801230c:	4619      	mov	r1, r3
 801230e:	2000      	movs	r0, #0
 8012310:	f7fa fe2e 	bl	800cf70 <pbuf_alloc>
 8012314:	6138      	str	r0, [r7, #16]
 8012316:	693b      	ldr	r3, [r7, #16]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d109      	bne.n	8012330 <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_NAGLEMEMERR;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	7e9b      	ldrb	r3, [r3, #26]
 8012320:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012324:	b2da      	uxtb	r2, r3
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801232a:	f04f 33ff 	mov.w	r3, #4294967295
 801232e:	e095      	b.n	801245c <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	895a      	ldrh	r2, [r3, #10]
 8012334:	7dfb      	ldrb	r3, [r7, #23]
 8012336:	b29b      	uxth	r3, r3
 8012338:	429a      	cmp	r2, r3
 801233a:	d206      	bcs.n	801234a <tcp_enqueue_flags+0xc6>
 801233c:	4b49      	ldr	r3, [pc, #292]	; (8012464 <tcp_enqueue_flags+0x1e0>)
 801233e:	f240 3241 	movw	r2, #833	; 0x341
 8012342:	494b      	ldr	r1, [pc, #300]	; (8012470 <tcp_enqueue_flags+0x1ec>)
 8012344:	4849      	ldr	r0, [pc, #292]	; (801246c <tcp_enqueue_flags+0x1e8>)
 8012346:	f001 fec5 	bl	80140d4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801234e:	78fa      	ldrb	r2, [r7, #3]
 8012350:	7ffb      	ldrb	r3, [r7, #31]
 8012352:	9300      	str	r3, [sp, #0]
 8012354:	460b      	mov	r3, r1
 8012356:	6939      	ldr	r1, [r7, #16]
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	f7ff fad5 	bl	8011908 <tcp_create_segment>
 801235e:	60f8      	str	r0, [r7, #12]
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d109      	bne.n	801237a <tcp_enqueue_flags+0xf6>
    pcb->flags |= TF_NAGLEMEMERR;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	7e9b      	ldrb	r3, [r3, #26]
 801236a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801236e:	b2da      	uxtb	r2, r3
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012374:	f04f 33ff 	mov.w	r3, #4294967295
 8012378:	e070      	b.n	801245c <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	68db      	ldr	r3, [r3, #12]
 801237e:	f003 0303 	and.w	r3, r3, #3
 8012382:	2b00      	cmp	r3, #0
 8012384:	d006      	beq.n	8012394 <tcp_enqueue_flags+0x110>
 8012386:	4b37      	ldr	r3, [pc, #220]	; (8012464 <tcp_enqueue_flags+0x1e0>)
 8012388:	f240 3249 	movw	r2, #841	; 0x349
 801238c:	4939      	ldr	r1, [pc, #228]	; (8012474 <tcp_enqueue_flags+0x1f0>)
 801238e:	4837      	ldr	r0, [pc, #220]	; (801246c <tcp_enqueue_flags+0x1e8>)
 8012390:	f001 fea0 	bl	80140d4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	891b      	ldrh	r3, [r3, #8]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d006      	beq.n	80123aa <tcp_enqueue_flags+0x126>
 801239c:	4b31      	ldr	r3, [pc, #196]	; (8012464 <tcp_enqueue_flags+0x1e0>)
 801239e:	f240 324a 	movw	r2, #842	; 0x34a
 80123a2:	4935      	ldr	r1, [pc, #212]	; (8012478 <tcp_enqueue_flags+0x1f4>)
 80123a4:	4831      	ldr	r0, [pc, #196]	; (801246c <tcp_enqueue_flags+0x1e8>)
 80123a6:	f001 fe95 	bl	80140d4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d103      	bne.n	80123ba <tcp_enqueue_flags+0x136>
    pcb->unsent = seg;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	68fa      	ldr	r2, [r7, #12]
 80123b6:	669a      	str	r2, [r3, #104]	; 0x68
 80123b8:	e00d      	b.n	80123d6 <tcp_enqueue_flags+0x152>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80123be:	61bb      	str	r3, [r7, #24]
 80123c0:	e002      	b.n	80123c8 <tcp_enqueue_flags+0x144>
 80123c2:	69bb      	ldr	r3, [r7, #24]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	61bb      	str	r3, [r7, #24]
 80123c8:	69bb      	ldr	r3, [r7, #24]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d1f8      	bne.n	80123c2 <tcp_enqueue_flags+0x13e>
    useg->next = seg;
 80123d0:	69bb      	ldr	r3, [r7, #24]
 80123d2:	68fa      	ldr	r2, [r7, #12]
 80123d4:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	2200      	movs	r2, #0
 80123da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80123de:	78fb      	ldrb	r3, [r7, #3]
 80123e0:	f003 0302 	and.w	r3, r3, #2
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d104      	bne.n	80123f2 <tcp_enqueue_flags+0x16e>
 80123e8:	78fb      	ldrb	r3, [r7, #3]
 80123ea:	f003 0301 	and.w	r3, r3, #1
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d004      	beq.n	80123fc <tcp_enqueue_flags+0x178>
    pcb->snd_lbb++;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123f6:	1c5a      	adds	r2, r3, #1
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80123fc:	78fb      	ldrb	r3, [r7, #3]
 80123fe:	f003 0301 	and.w	r3, r3, #1
 8012402:	2b00      	cmp	r3, #0
 8012404:	d006      	beq.n	8012414 <tcp_enqueue_flags+0x190>
    pcb->flags |= TF_FIN;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	7e9b      	ldrb	r3, [r3, #26]
 801240a:	f043 0320 	orr.w	r3, r3, #32
 801240e:	b2da      	uxtb	r2, r3
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	685b      	ldr	r3, [r3, #4]
 8012418:	4618      	mov	r0, r3
 801241a:	f7fb f9b5 	bl	800d788 <pbuf_clen>
 801241e:	4603      	mov	r3, r0
 8012420:	461a      	mov	r2, r3
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012428:	4413      	add	r3, r2
 801242a:	b29a      	uxth	r2, r3
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012438:	2b00      	cmp	r3, #0
 801243a:	d00e      	beq.n	801245a <tcp_enqueue_flags+0x1d6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012440:	2b00      	cmp	r3, #0
 8012442:	d10a      	bne.n	801245a <tcp_enqueue_flags+0x1d6>
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012448:	2b00      	cmp	r3, #0
 801244a:	d106      	bne.n	801245a <tcp_enqueue_flags+0x1d6>
 801244c:	4b05      	ldr	r3, [pc, #20]	; (8012464 <tcp_enqueue_flags+0x1e0>)
 801244e:	f240 326d 	movw	r2, #877	; 0x36d
 8012452:	490a      	ldr	r1, [pc, #40]	; (801247c <tcp_enqueue_flags+0x1f8>)
 8012454:	4805      	ldr	r0, [pc, #20]	; (801246c <tcp_enqueue_flags+0x1e8>)
 8012456:	f001 fe3d 	bl	80140d4 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801245a:	2300      	movs	r3, #0
}
 801245c:	4618      	mov	r0, r3
 801245e:	3720      	adds	r7, #32
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}
 8012464:	08017890 	.word	0x08017890
 8012468:	08017b94 	.word	0x08017b94
 801246c:	080178f4 	.word	0x080178f4
 8012470:	08017bec 	.word	0x08017bec
 8012474:	08017c28 	.word	0x08017c28
 8012478:	08017c40 	.word	0x08017c40
 801247c:	08017c6c 	.word	0x08017c6c

08012480 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012480:	b590      	push	{r4, r7, lr}
 8012482:	b08b      	sub	sp, #44	; 0x2c
 8012484:	af04      	add	r7, sp, #16
 8012486:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8012488:	2300      	movs	r3, #0
 801248a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801248c:	7dbb      	ldrb	r3, [r7, #22]
 801248e:	b29c      	uxth	r4, r3
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012494:	4618      	mov	r0, r3
 8012496:	f7f7 fc84 	bl	8009da2 <lwip_htonl>
 801249a:	4603      	mov	r3, r0
 801249c:	2200      	movs	r2, #0
 801249e:	4621      	mov	r1, r4
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	f7ff f977 	bl	8011794 <tcp_output_alloc_header>
 80124a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80124a8:	693b      	ldr	r3, [r7, #16]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d109      	bne.n	80124c2 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	7e9b      	ldrb	r3, [r3, #26]
 80124b2:	f043 0303 	orr.w	r3, r3, #3
 80124b6:	b2da      	uxtb	r2, r3
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80124bc:	f06f 0301 	mvn.w	r3, #1
 80124c0:	e036      	b.n	8012530 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	3304      	adds	r3, #4
 80124c6:	4618      	mov	r0, r3
 80124c8:	f7f8 fd3e 	bl	800af48 <ip4_route>
 80124cc:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d102      	bne.n	80124da <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80124d4:	23fc      	movs	r3, #252	; 0xfc
 80124d6:	75fb      	strb	r3, [r7, #23]
 80124d8:	e012      	b.n	8012500 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80124da:	6879      	ldr	r1, [r7, #4]
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	1d18      	adds	r0, r3, #4
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	7a9c      	ldrb	r4, [r3, #10]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	7a5b      	ldrb	r3, [r3, #9]
 80124e8:	68fa      	ldr	r2, [r7, #12]
 80124ea:	9202      	str	r2, [sp, #8]
 80124ec:	2206      	movs	r2, #6
 80124ee:	9201      	str	r2, [sp, #4]
 80124f0:	9300      	str	r3, [sp, #0]
 80124f2:	4623      	mov	r3, r4
 80124f4:	4602      	mov	r2, r0
 80124f6:	6938      	ldr	r0, [r7, #16]
 80124f8:	f7f8 fec8 	bl	800b28c <ip4_output_if>
 80124fc:	4603      	mov	r3, r0
 80124fe:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8012500:	6938      	ldr	r0, [r7, #16]
 8012502:	f7fb f8a7 	bl	800d654 <pbuf_free>

  if (err != ERR_OK) {
 8012506:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d007      	beq.n	801251e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	7e9b      	ldrb	r3, [r3, #26]
 8012512:	f043 0303 	orr.w	r3, r3, #3
 8012516:	b2da      	uxtb	r2, r3
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	769a      	strb	r2, [r3, #26]
 801251c:	e006      	b.n	801252c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	7e9b      	ldrb	r3, [r3, #26]
 8012522:	f023 0303 	bic.w	r3, r3, #3
 8012526:	b2da      	uxtb	r2, r3
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 801252c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012530:	4618      	mov	r0, r3
 8012532:	371c      	adds	r7, #28
 8012534:	46bd      	mov	sp, r7
 8012536:	bd90      	pop	{r4, r7, pc}

08012538 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012538:	b5b0      	push	{r4, r5, r7, lr}
 801253a:	b08a      	sub	sp, #40	; 0x28
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	7d1b      	ldrb	r3, [r3, #20]
 8012544:	2b01      	cmp	r3, #1
 8012546:	d106      	bne.n	8012556 <tcp_output+0x1e>
 8012548:	4b9b      	ldr	r3, [pc, #620]	; (80127b8 <tcp_output+0x280>)
 801254a:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801254e:	499b      	ldr	r1, [pc, #620]	; (80127bc <tcp_output+0x284>)
 8012550:	489b      	ldr	r0, [pc, #620]	; (80127c0 <tcp_output+0x288>)
 8012552:	f001 fdbf 	bl	80140d4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012556:	4b9b      	ldr	r3, [pc, #620]	; (80127c4 <tcp_output+0x28c>)
 8012558:	681a      	ldr	r2, [r3, #0]
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	429a      	cmp	r2, r3
 801255e:	d101      	bne.n	8012564 <tcp_output+0x2c>
    return ERR_OK;
 8012560:	2300      	movs	r3, #0
 8012562:	e1cd      	b.n	8012900 <tcp_output+0x3c8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012570:	429a      	cmp	r2, r3
 8012572:	d203      	bcs.n	801257c <tcp_output+0x44>
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801257a:	e002      	b.n	8012582 <tcp_output+0x4a>
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012582:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012588:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	7e9b      	ldrb	r3, [r3, #26]
 801258e:	f003 0302 	and.w	r3, r3, #2
 8012592:	2b00      	cmp	r3, #0
 8012594:	d017      	beq.n	80125c6 <tcp_output+0x8e>
 8012596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012598:	2b00      	cmp	r3, #0
 801259a:	d00f      	beq.n	80125bc <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259e:	68db      	ldr	r3, [r3, #12]
 80125a0:	685b      	ldr	r3, [r3, #4]
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7f7 fbfd 	bl	8009da2 <lwip_htonl>
 80125a8:	4602      	mov	r2, r0
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125ae:	1ad3      	subs	r3, r2, r3
 80125b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125b2:	8912      	ldrh	r2, [r2, #8]
 80125b4:	441a      	add	r2, r3
     (seg == NULL ||
 80125b6:	69bb      	ldr	r3, [r7, #24]
 80125b8:	429a      	cmp	r2, r3
 80125ba:	d904      	bls.n	80125c6 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 80125bc:	6878      	ldr	r0, [r7, #4]
 80125be:	f7ff ff5f 	bl	8012480 <tcp_send_empty_ack>
 80125c2:	4603      	mov	r3, r0
 80125c4:	e19c      	b.n	8012900 <tcp_output+0x3c8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125ca:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80125cc:	6a3b      	ldr	r3, [r7, #32]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d007      	beq.n	80125e2 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 80125d2:	e002      	b.n	80125da <tcp_output+0xa2>
 80125d4:	6a3b      	ldr	r3, [r7, #32]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	623b      	str	r3, [r7, #32]
 80125da:	6a3b      	ldr	r3, [r7, #32]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d1f8      	bne.n	80125d4 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	3304      	adds	r3, #4
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7f8 fcae 	bl	800af48 <ip4_route>
 80125ec:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d102      	bne.n	80125fa <tcp_output+0xc2>
    return ERR_RTE;
 80125f4:	f06f 0303 	mvn.w	r3, #3
 80125f8:	e182      	b.n	8012900 <tcp_output+0x3c8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d003      	beq.n	8012608 <tcp_output+0xd0>
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d111      	bne.n	801262c <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d002      	beq.n	8012614 <tcp_output+0xdc>
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	3304      	adds	r3, #4
 8012612:	e000      	b.n	8012616 <tcp_output+0xde>
 8012614:	2300      	movs	r3, #0
 8012616:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d102      	bne.n	8012624 <tcp_output+0xec>
      return ERR_RTE;
 801261e:	f06f 0303 	mvn.w	r3, #3
 8012622:	e16d      	b.n	8012900 <tcp_output+0x3c8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	681a      	ldr	r2, [r3, #0]
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 801262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262e:	2b00      	cmp	r3, #0
 8012630:	f000 813e 	beq.w	80128b0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8012634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012636:	68db      	ldr	r3, [r3, #12]
 8012638:	685b      	ldr	r3, [r3, #4]
 801263a:	4618      	mov	r0, r3
 801263c:	f7f7 fbb1 	bl	8009da2 <lwip_htonl>
 8012640:	4602      	mov	r2, r0
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012646:	1ad3      	subs	r3, r2, r3
 8012648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801264a:	8912      	ldrh	r2, [r2, #8]
 801264c:	441a      	add	r2, r3
  if (seg != NULL &&
 801264e:	69bb      	ldr	r3, [r7, #24]
 8012650:	429a      	cmp	r2, r3
 8012652:	f240 812d 	bls.w	80128b0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8012656:	69bb      	ldr	r3, [r7, #24]
 8012658:	2b00      	cmp	r3, #0
 801265a:	f000 8129 	beq.w	80128b0 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012664:	461a      	mov	r2, r3
 8012666:	69bb      	ldr	r3, [r7, #24]
 8012668:	429a      	cmp	r2, r3
 801266a:	f040 8121 	bne.w	80128b0 <tcp_output+0x378>
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012672:	2b00      	cmp	r3, #0
 8012674:	f040 811c 	bne.w	80128b0 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801267e:	2b00      	cmp	r3, #0
 8012680:	f040 812b 	bne.w	80128da <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2200      	movs	r2, #0
 8012688:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2201      	movs	r2, #1
 8012690:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8012694:	e121      	b.n	80128da <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012698:	68db      	ldr	r3, [r3, #12]
 801269a:	899b      	ldrh	r3, [r3, #12]
 801269c:	b29b      	uxth	r3, r3
 801269e:	4618      	mov	r0, r3
 80126a0:	f7f7 fb72 	bl	8009d88 <lwip_htons>
 80126a4:	4603      	mov	r3, r0
 80126a6:	f003 0304 	and.w	r3, r3, #4
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d006      	beq.n	80126bc <tcp_output+0x184>
 80126ae:	4b42      	ldr	r3, [pc, #264]	; (80127b8 <tcp_output+0x280>)
 80126b0:	f240 4246 	movw	r2, #1094	; 0x446
 80126b4:	4944      	ldr	r1, [pc, #272]	; (80127c8 <tcp_output+0x290>)
 80126b6:	4842      	ldr	r0, [pc, #264]	; (80127c0 <tcp_output+0x288>)
 80126b8:	f001 fd0c 	bl	80140d4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d01f      	beq.n	8012704 <tcp_output+0x1cc>
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	7e9b      	ldrb	r3, [r3, #26]
 80126c8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d119      	bne.n	8012704 <tcp_output+0x1cc>
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d00b      	beq.n	80126f0 <tcp_output+0x1b8>
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d110      	bne.n	8012704 <tcp_output+0x1cc>
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80126e6:	891a      	ldrh	r2, [r3, #8]
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d209      	bcs.n	8012704 <tcp_output+0x1cc>
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d004      	beq.n	8012704 <tcp_output+0x1cc>
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012700:	2b08      	cmp	r3, #8
 8012702:	d901      	bls.n	8012708 <tcp_output+0x1d0>
 8012704:	2301      	movs	r3, #1
 8012706:	e000      	b.n	801270a <tcp_output+0x1d2>
 8012708:	2300      	movs	r3, #0
 801270a:	2b00      	cmp	r3, #0
 801270c:	d106      	bne.n	801271c <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	7e9b      	ldrb	r3, [r3, #26]
 8012712:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012716:	2b00      	cmp	r3, #0
 8012718:	f000 80e1 	beq.w	80128de <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	7d1b      	ldrb	r3, [r3, #20]
 8012720:	2b02      	cmp	r3, #2
 8012722:	d00c      	beq.n	801273e <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012726:	68dc      	ldr	r4, [r3, #12]
 8012728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272a:	68db      	ldr	r3, [r3, #12]
 801272c:	899b      	ldrh	r3, [r3, #12]
 801272e:	b29d      	uxth	r5, r3
 8012730:	2010      	movs	r0, #16
 8012732:	f7f7 fb29 	bl	8009d88 <lwip_htons>
 8012736:	4603      	mov	r3, r0
 8012738:	432b      	orrs	r3, r5
 801273a:	b29b      	uxth	r3, r3
 801273c:	81a3      	strh	r3, [r4, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 801273e:	697a      	ldr	r2, [r7, #20]
 8012740:	6879      	ldr	r1, [r7, #4]
 8012742:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012744:	f000 f8e0 	bl	8012908 <tcp_output_segment>
 8012748:	4603      	mov	r3, r0
 801274a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801274c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d009      	beq.n	8012768 <tcp_output+0x230>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	7e9b      	ldrb	r3, [r3, #26]
 8012758:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801275c:	b2da      	uxtb	r2, r3
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	769a      	strb	r2, [r3, #26]
      return err;
 8012762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012766:	e0cb      	b.n	8012900 <tcp_output+0x3c8>
    }
    pcb->unsent = seg->next;
 8012768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276a:	681a      	ldr	r2, [r3, #0]
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	7d1b      	ldrb	r3, [r3, #20]
 8012774:	2b02      	cmp	r3, #2
 8012776:	d006      	beq.n	8012786 <tcp_output+0x24e>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	7e9b      	ldrb	r3, [r3, #26]
 801277c:	f023 0303 	bic.w	r3, r3, #3
 8012780:	b2da      	uxtb	r2, r3
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012788:	68db      	ldr	r3, [r3, #12]
 801278a:	685b      	ldr	r3, [r3, #4]
 801278c:	4618      	mov	r0, r3
 801278e:	f7f7 fb08 	bl	8009da2 <lwip_htonl>
 8012792:	4604      	mov	r4, r0
 8012794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012796:	891b      	ldrh	r3, [r3, #8]
 8012798:	461d      	mov	r5, r3
 801279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279c:	68db      	ldr	r3, [r3, #12]
 801279e:	899b      	ldrh	r3, [r3, #12]
 80127a0:	b29b      	uxth	r3, r3
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7f7 faf0 	bl	8009d88 <lwip_htons>
 80127a8:	4603      	mov	r3, r0
 80127aa:	f003 0303 	and.w	r3, r3, #3
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d00c      	beq.n	80127cc <tcp_output+0x294>
 80127b2:	2301      	movs	r3, #1
 80127b4:	e00b      	b.n	80127ce <tcp_output+0x296>
 80127b6:	bf00      	nop
 80127b8:	08017890 	.word	0x08017890
 80127bc:	08017c94 	.word	0x08017c94
 80127c0:	080178f4 	.word	0x080178f4
 80127c4:	2000ab48 	.word	0x2000ab48
 80127c8:	08017cbc 	.word	0x08017cbc
 80127cc:	2300      	movs	r3, #0
 80127ce:	442b      	add	r3, r5
 80127d0:	4423      	add	r3, r4
 80127d2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	1ad3      	subs	r3, r2, r3
 80127dc:	2b00      	cmp	r3, #0
 80127de:	da02      	bge.n	80127e6 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	68ba      	ldr	r2, [r7, #8]
 80127e4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80127e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e8:	891b      	ldrh	r3, [r3, #8]
 80127ea:	461c      	mov	r4, r3
 80127ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ee:	68db      	ldr	r3, [r3, #12]
 80127f0:	899b      	ldrh	r3, [r3, #12]
 80127f2:	b29b      	uxth	r3, r3
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7f7 fac7 	bl	8009d88 <lwip_htons>
 80127fa:	4603      	mov	r3, r0
 80127fc:	f003 0303 	and.w	r3, r3, #3
 8012800:	2b00      	cmp	r3, #0
 8012802:	d001      	beq.n	8012808 <tcp_output+0x2d0>
 8012804:	2301      	movs	r3, #1
 8012806:	e000      	b.n	801280a <tcp_output+0x2d2>
 8012808:	2300      	movs	r3, #0
 801280a:	4423      	add	r3, r4
 801280c:	2b00      	cmp	r3, #0
 801280e:	d049      	beq.n	80128a4 <tcp_output+0x36c>
      seg->next = NULL;
 8012810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012812:	2200      	movs	r2, #0
 8012814:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801281a:	2b00      	cmp	r3, #0
 801281c:	d105      	bne.n	801282a <tcp_output+0x2f2>
        pcb->unacked = seg;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012822:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8012824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012826:	623b      	str	r3, [r7, #32]
 8012828:	e03f      	b.n	80128aa <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801282c:	68db      	ldr	r3, [r3, #12]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	4618      	mov	r0, r3
 8012832:	f7f7 fab6 	bl	8009da2 <lwip_htonl>
 8012836:	4604      	mov	r4, r0
 8012838:	6a3b      	ldr	r3, [r7, #32]
 801283a:	68db      	ldr	r3, [r3, #12]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	4618      	mov	r0, r3
 8012840:	f7f7 faaf 	bl	8009da2 <lwip_htonl>
 8012844:	4603      	mov	r3, r0
 8012846:	1ae3      	subs	r3, r4, r3
 8012848:	2b00      	cmp	r3, #0
 801284a:	da24      	bge.n	8012896 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	336c      	adds	r3, #108	; 0x6c
 8012850:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012852:	e002      	b.n	801285a <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8012854:	69fb      	ldr	r3, [r7, #28]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801285a:	69fb      	ldr	r3, [r7, #28]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d011      	beq.n	8012886 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012862:	69fb      	ldr	r3, [r7, #28]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	68db      	ldr	r3, [r3, #12]
 8012868:	685b      	ldr	r3, [r3, #4]
 801286a:	4618      	mov	r0, r3
 801286c:	f7f7 fa99 	bl	8009da2 <lwip_htonl>
 8012870:	4604      	mov	r4, r0
 8012872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012874:	68db      	ldr	r3, [r3, #12]
 8012876:	685b      	ldr	r3, [r3, #4]
 8012878:	4618      	mov	r0, r3
 801287a:	f7f7 fa92 	bl	8009da2 <lwip_htonl>
 801287e:	4603      	mov	r3, r0
 8012880:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012882:	2b00      	cmp	r3, #0
 8012884:	dbe6      	blt.n	8012854 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8012886:	69fb      	ldr	r3, [r7, #28]
 8012888:	681a      	ldr	r2, [r3, #0]
 801288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801288e:	69fb      	ldr	r3, [r7, #28]
 8012890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012892:	601a      	str	r2, [r3, #0]
 8012894:	e009      	b.n	80128aa <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012896:	6a3b      	ldr	r3, [r7, #32]
 8012898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801289a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801289c:	6a3b      	ldr	r3, [r7, #32]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	623b      	str	r3, [r7, #32]
 80128a2:	e002      	b.n	80128aa <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80128a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128a6:	f7fc f9b6 	bl	800ec16 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80128ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80128b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d014      	beq.n	80128e0 <tcp_output+0x3a8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80128b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b8:	68db      	ldr	r3, [r3, #12]
 80128ba:	685b      	ldr	r3, [r3, #4]
 80128bc:	4618      	mov	r0, r3
 80128be:	f7f7 fa70 	bl	8009da2 <lwip_htonl>
 80128c2:	4602      	mov	r2, r0
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128c8:	1ad3      	subs	r3, r2, r3
 80128ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128cc:	8912      	ldrh	r2, [r2, #8]
 80128ce:	441a      	add	r2, r3
  while (seg != NULL &&
 80128d0:	69bb      	ldr	r3, [r7, #24]
 80128d2:	429a      	cmp	r2, r3
 80128d4:	f67f aedf 	bls.w	8012696 <tcp_output+0x15e>
 80128d8:	e002      	b.n	80128e0 <tcp_output+0x3a8>
    goto output_done;
 80128da:	bf00      	nop
 80128dc:	e000      	b.n	80128e0 <tcp_output+0x3a8>
      break;
 80128de:	bf00      	nop
  }
output_done:
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d103      	bne.n	80128f0 <tcp_output+0x3b8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2200      	movs	r2, #0
 80128ec:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	7e9b      	ldrb	r3, [r3, #26]
 80128f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128f8:	b2da      	uxtb	r2, r3
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 80128fe:	2300      	movs	r3, #0
}
 8012900:	4618      	mov	r0, r3
 8012902:	3728      	adds	r7, #40	; 0x28
 8012904:	46bd      	mov	sp, r7
 8012906:	bdb0      	pop	{r4, r5, r7, pc}

08012908 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012908:	b5b0      	push	{r4, r5, r7, lr}
 801290a:	b08c      	sub	sp, #48	; 0x30
 801290c:	af04      	add	r7, sp, #16
 801290e:	60f8      	str	r0, [r7, #12]
 8012910:	60b9      	str	r1, [r7, #8]
 8012912:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	685b      	ldr	r3, [r3, #4]
 8012918:	89db      	ldrh	r3, [r3, #14]
 801291a:	2b01      	cmp	r3, #1
 801291c:	d001      	beq.n	8012922 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801291e:	2300      	movs	r3, #0
 8012920:	e08b      	b.n	8012a3a <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	68dc      	ldr	r4, [r3, #12]
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801292a:	4618      	mov	r0, r3
 801292c:	f7f7 fa39 	bl	8009da2 <lwip_htonl>
 8012930:	4603      	mov	r3, r0
 8012932:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	68dc      	ldr	r4, [r3, #12]
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801293c:	4618      	mov	r0, r3
 801293e:	f7f7 fa23 	bl	8009d88 <lwip_htons>
 8012942:	4603      	mov	r3, r0
 8012944:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801294a:	68ba      	ldr	r2, [r7, #8]
 801294c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801294e:	441a      	add	r2, r3
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	68db      	ldr	r3, [r3, #12]
 8012958:	3314      	adds	r3, #20
 801295a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	7a9b      	ldrb	r3, [r3, #10]
 8012960:	f003 0301 	and.w	r3, r3, #1
 8012964:	2b00      	cmp	r3, #0
 8012966:	d014      	beq.n	8012992 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8012968:	68bb      	ldr	r3, [r7, #8]
 801296a:	3304      	adds	r3, #4
 801296c:	4619      	mov	r1, r3
 801296e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012972:	f7fc fc75 	bl	800f260 <tcp_eff_send_mss_impl>
 8012976:	4603      	mov	r3, r0
 8012978:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801297a:	8b7b      	ldrh	r3, [r7, #26]
 801297c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012980:	4618      	mov	r0, r3
 8012982:	f7f7 fa0e 	bl	8009da2 <lwip_htonl>
 8012986:	4602      	mov	r2, r0
 8012988:	69fb      	ldr	r3, [r7, #28]
 801298a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801298c:	69fb      	ldr	r3, [r7, #28]
 801298e:	3304      	adds	r3, #4
 8012990:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012992:	68bb      	ldr	r3, [r7, #8]
 8012994:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012998:	2b00      	cmp	r3, #0
 801299a:	da02      	bge.n	80129a2 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	2200      	movs	r2, #0
 80129a0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d10c      	bne.n	80129c4 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 80129aa:	4b26      	ldr	r3, [pc, #152]	; (8012a44 <tcp_output_segment+0x13c>)
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	68db      	ldr	r3, [r3, #12]
 80129b6:	685b      	ldr	r3, [r3, #4]
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7f7 f9f2 	bl	8009da2 <lwip_htonl>
 80129be:	4602      	mov	r2, r0
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	68db      	ldr	r3, [r3, #12]
 80129c8:	461a      	mov	r2, r3
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	685b      	ldr	r3, [r3, #4]
 80129d0:	1ad3      	subs	r3, r2, r3
 80129d2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	68fa      	ldr	r2, [r7, #12]
 80129da:	6852      	ldr	r2, [r2, #4]
 80129dc:	8951      	ldrh	r1, [r2, #10]
 80129de:	8b3a      	ldrh	r2, [r7, #24]
 80129e0:	1a8a      	subs	r2, r1, r2
 80129e2:	b292      	uxth	r2, r2
 80129e4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	68fa      	ldr	r2, [r7, #12]
 80129ec:	6852      	ldr	r2, [r2, #4]
 80129ee:	8911      	ldrh	r1, [r2, #8]
 80129f0:	8b3a      	ldrh	r2, [r7, #24]
 80129f2:	1a8a      	subs	r2, r1, r2
 80129f4:	b292      	uxth	r2, r2
 80129f6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	685b      	ldr	r3, [r3, #4]
 80129fc:	68fa      	ldr	r2, [r7, #12]
 80129fe:	68d2      	ldr	r2, [r2, #12]
 8012a00:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	68db      	ldr	r3, [r3, #12]
 8012a06:	2200      	movs	r2, #0
 8012a08:	741a      	strb	r2, [r3, #16]
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	6858      	ldr	r0, [r3, #4]
 8012a12:	68b9      	ldr	r1, [r7, #8]
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	1d1c      	adds	r4, r3, #4
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	7a9d      	ldrb	r5, [r3, #10]
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	7a5b      	ldrb	r3, [r3, #9]
 8012a20:	687a      	ldr	r2, [r7, #4]
 8012a22:	9202      	str	r2, [sp, #8]
 8012a24:	2206      	movs	r2, #6
 8012a26:	9201      	str	r2, [sp, #4]
 8012a28:	9300      	str	r3, [sp, #0]
 8012a2a:	462b      	mov	r3, r5
 8012a2c:	4622      	mov	r2, r4
 8012a2e:	f7f8 fc2d 	bl	800b28c <ip4_output_if>
 8012a32:	4603      	mov	r3, r0
 8012a34:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8012a36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3720      	adds	r7, #32
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bdb0      	pop	{r4, r5, r7, pc}
 8012a42:	bf00      	nop
 8012a44:	2000ab38 	.word	0x2000ab38

08012a48 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b08c      	sub	sp, #48	; 0x30
 8012a4c:	af04      	add	r7, sp, #16
 8012a4e:	60f8      	str	r0, [r7, #12]
 8012a50:	60b9      	str	r1, [r7, #8]
 8012a52:	607a      	str	r2, [r7, #4]
 8012a54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8012a56:	2200      	movs	r2, #0
 8012a58:	2114      	movs	r1, #20
 8012a5a:	2001      	movs	r0, #1
 8012a5c:	f7fa fa88 	bl	800cf70 <pbuf_alloc>
 8012a60:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8012a62:	69fb      	ldr	r3, [r7, #28]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d05b      	beq.n	8012b20 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012a68:	69fb      	ldr	r3, [r7, #28]
 8012a6a:	895b      	ldrh	r3, [r3, #10]
 8012a6c:	2b13      	cmp	r3, #19
 8012a6e:	d806      	bhi.n	8012a7e <tcp_rst+0x36>
 8012a70:	4b2d      	ldr	r3, [pc, #180]	; (8012b28 <tcp_rst+0xe0>)
 8012a72:	f240 524d 	movw	r2, #1357	; 0x54d
 8012a76:	492d      	ldr	r1, [pc, #180]	; (8012b2c <tcp_rst+0xe4>)
 8012a78:	482d      	ldr	r0, [pc, #180]	; (8012b30 <tcp_rst+0xe8>)
 8012a7a:	f001 fb2b 	bl	80140d4 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8012a7e:	69fb      	ldr	r3, [r7, #28]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8012a84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7f7 f97e 	bl	8009d88 <lwip_htons>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	461a      	mov	r2, r3
 8012a90:	69bb      	ldr	r3, [r7, #24]
 8012a92:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8012a94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7f7 f976 	bl	8009d88 <lwip_htons>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	461a      	mov	r2, r3
 8012aa0:	69bb      	ldr	r3, [r7, #24]
 8012aa2:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8012aa4:	68f8      	ldr	r0, [r7, #12]
 8012aa6:	f7f7 f97c 	bl	8009da2 <lwip_htonl>
 8012aaa:	4602      	mov	r2, r0
 8012aac:	69bb      	ldr	r3, [r7, #24]
 8012aae:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8012ab0:	68b8      	ldr	r0, [r7, #8]
 8012ab2:	f7f7 f976 	bl	8009da2 <lwip_htonl>
 8012ab6:	4602      	mov	r2, r0
 8012ab8:	69bb      	ldr	r3, [r7, #24]
 8012aba:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8012abc:	f245 0014 	movw	r0, #20500	; 0x5014
 8012ac0:	f7f7 f962 	bl	8009d88 <lwip_htons>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	69bb      	ldr	r3, [r7, #24]
 8012aca:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8012acc:	69bb      	ldr	r3, [r7, #24]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	f042 0208 	orr.w	r2, r2, #8
 8012ad4:	739a      	strb	r2, [r3, #14]
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8012adc:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8012ade:	69bb      	ldr	r3, [r7, #24]
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	741a      	strb	r2, [r3, #16]
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8012ae8:	69bb      	ldr	r3, [r7, #24]
 8012aea:	2200      	movs	r2, #0
 8012aec:	749a      	strb	r2, [r3, #18]
 8012aee:	2200      	movs	r2, #0
 8012af0:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8012af2:	6838      	ldr	r0, [r7, #0]
 8012af4:	f7f8 fa28 	bl	800af48 <ip4_route>
 8012af8:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d00b      	beq.n	8012b18 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	9302      	str	r3, [sp, #8]
 8012b04:	2306      	movs	r3, #6
 8012b06:	9301      	str	r3, [sp, #4]
 8012b08:	2300      	movs	r3, #0
 8012b0a:	9300      	str	r3, [sp, #0]
 8012b0c:	23ff      	movs	r3, #255	; 0xff
 8012b0e:	683a      	ldr	r2, [r7, #0]
 8012b10:	6879      	ldr	r1, [r7, #4]
 8012b12:	69f8      	ldr	r0, [r7, #28]
 8012b14:	f7f8 fbba 	bl	800b28c <ip4_output_if>
  }
  pbuf_free(p);
 8012b18:	69f8      	ldr	r0, [r7, #28]
 8012b1a:	f7fa fd9b 	bl	800d654 <pbuf_free>
 8012b1e:	e000      	b.n	8012b22 <tcp_rst+0xda>
    return;
 8012b20:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012b22:	3720      	adds	r7, #32
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}
 8012b28:	08017890 	.word	0x08017890
 8012b2c:	080178c4 	.word	0x080178c4
 8012b30:	080178f4 	.word	0x080178f4

08012b34 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b084      	sub	sp, #16
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d029      	beq.n	8012b98 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b48:	60fb      	str	r3, [r7, #12]
 8012b4a:	e002      	b.n	8012b52 <tcp_rexmit_rto+0x1e>
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	60fb      	str	r3, [r7, #12]
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d1f8      	bne.n	8012b4c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b76:	2bff      	cmp	r3, #255	; 0xff
 8012b78:	d007      	beq.n	8012b8a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b80:	3301      	adds	r3, #1
 8012b82:	b2da      	uxtb	r2, r3
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8012b90:	6878      	ldr	r0, [r7, #4]
 8012b92:	f7ff fcd1 	bl	8012538 <tcp_output>
 8012b96:	e000      	b.n	8012b9a <tcp_rexmit_rto+0x66>
    return;
 8012b98:	bf00      	nop
}
 8012b9a:	3710      	adds	r7, #16
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}

08012ba0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012ba0:	b590      	push	{r4, r7, lr}
 8012ba2:	b085      	sub	sp, #20
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d043      	beq.n	8012c38 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bb4:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	681a      	ldr	r2, [r3, #0]
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	3368      	adds	r3, #104	; 0x68
 8012bc2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012bc4:	e002      	b.n	8012bcc <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d011      	beq.n	8012bf8 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	68db      	ldr	r3, [r3, #12]
 8012bda:	685b      	ldr	r3, [r3, #4]
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f7f7 f8e0 	bl	8009da2 <lwip_htonl>
 8012be2:	4604      	mov	r4, r0
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	68db      	ldr	r3, [r3, #12]
 8012be8:	685b      	ldr	r3, [r3, #4]
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7f7 f8d9 	bl	8009da2 <lwip_htonl>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	dbe6      	blt.n	8012bc6 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	681a      	ldr	r2, [r3, #0]
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	68ba      	ldr	r2, [r7, #8]
 8012c04:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d103      	bne.n	8012c16 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2200      	movs	r2, #0
 8012c12:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c1c:	2bff      	cmp	r3, #255	; 0xff
 8012c1e:	d007      	beq.n	8012c30 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c26:	3301      	adds	r3, #1
 8012c28:	b2da      	uxtb	r2, r3
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2200      	movs	r2, #0
 8012c34:	635a      	str	r2, [r3, #52]	; 0x34
 8012c36:	e000      	b.n	8012c3a <tcp_rexmit+0x9a>
    return;
 8012c38:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8012c3a:	3714      	adds	r7, #20
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd90      	pop	{r4, r7, pc}

08012c40 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b082      	sub	sp, #8
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d04a      	beq.n	8012ce6 <tcp_rexmit_fast+0xa6>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	7e9b      	ldrb	r3, [r3, #26]
 8012c54:	f003 0304 	and.w	r3, r3, #4
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d144      	bne.n	8012ce6 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f7ff ff9f 	bl	8012ba0 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d207      	bcs.n	8012c82 <tcp_rexmit_fast+0x42>
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c78:	0fda      	lsrs	r2, r3, #31
 8012c7a:	4413      	add	r3, r2
 8012c7c:	105b      	asrs	r3, r3, #1
 8012c7e:	b29b      	uxth	r3, r3
 8012c80:	e006      	b.n	8012c90 <tcp_rexmit_fast+0x50>
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012c88:	0fda      	lsrs	r2, r3, #31
 8012c8a:	4413      	add	r3, r2
 8012c8c:	105b      	asrs	r3, r3, #1
 8012c8e:	b29b      	uxth	r3, r3
 8012c90:	687a      	ldr	r2, [r7, #4]
 8012c92:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012c9c:	461a      	mov	r2, r3
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ca2:	005b      	lsls	r3, r3, #1
 8012ca4:	429a      	cmp	r2, r3
 8012ca6:	d206      	bcs.n	8012cb6 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cac:	005b      	lsls	r3, r3, #1
 8012cae:	b29a      	uxth	r2, r3
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cc0:	4619      	mov	r1, r3
 8012cc2:	0049      	lsls	r1, r1, #1
 8012cc4:	440b      	add	r3, r1
 8012cc6:	b29b      	uxth	r3, r3
 8012cc8:	4413      	add	r3, r2
 8012cca:	b29a      	uxth	r2, r3
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	7e9b      	ldrb	r3, [r3, #26]
 8012cd6:	f043 0304 	orr.w	r3, r3, #4
 8012cda:	b2da      	uxtb	r2, r3
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8012ce6:	bf00      	nop
 8012ce8:	3708      	adds	r7, #8
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd80      	pop	{r7, pc}

08012cee <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012cee:	b580      	push	{r7, lr}
 8012cf0:	b08a      	sub	sp, #40	; 0x28
 8012cf2:	af04      	add	r7, sp, #16
 8012cf4:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012cfa:	3b01      	subs	r3, #1
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f7f7 f850 	bl	8009da2 <lwip_htonl>
 8012d02:	4603      	mov	r3, r0
 8012d04:	2200      	movs	r2, #0
 8012d06:	2100      	movs	r1, #0
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f7fe fd43 	bl	8011794 <tcp_output_alloc_header>
 8012d0e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d102      	bne.n	8012d1c <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012d16:	f04f 33ff 	mov.w	r3, #4294967295
 8012d1a:	e021      	b.n	8012d60 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	3304      	adds	r3, #4
 8012d20:	4618      	mov	r0, r3
 8012d22:	f7f8 f911 	bl	800af48 <ip4_route>
 8012d26:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d102      	bne.n	8012d34 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8012d2e:	23fc      	movs	r3, #252	; 0xfc
 8012d30:	75fb      	strb	r3, [r7, #23]
 8012d32:	e010      	b.n	8012d56 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8012d34:	6879      	ldr	r1, [r7, #4]
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	1d1a      	adds	r2, r3, #4
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	7a98      	ldrb	r0, [r3, #10]
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	9302      	str	r3, [sp, #8]
 8012d42:	2306      	movs	r3, #6
 8012d44:	9301      	str	r3, [sp, #4]
 8012d46:	2300      	movs	r3, #0
 8012d48:	9300      	str	r3, [sp, #0]
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	6938      	ldr	r0, [r7, #16]
 8012d4e:	f7f8 fa9d 	bl	800b28c <ip4_output_if>
 8012d52:	4603      	mov	r3, r0
 8012d54:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8012d56:	6938      	ldr	r0, [r7, #16]
 8012d58:	f7fa fc7c 	bl	800d654 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012d5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d60:	4618      	mov	r0, r3
 8012d62:	3718      	adds	r7, #24
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}

08012d68 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012d68:	b590      	push	{r4, r7, lr}
 8012d6a:	b08f      	sub	sp, #60	; 0x3c
 8012d6c:	af04      	add	r7, sp, #16
 8012d6e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d74:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8012d76:	6a3b      	ldr	r3, [r7, #32]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d102      	bne.n	8012d82 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012d80:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8012d82:	6a3b      	ldr	r3, [r7, #32]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d101      	bne.n	8012d8c <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	e085      	b.n	8012e98 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012d8c:	6a3b      	ldr	r3, [r7, #32]
 8012d8e:	68db      	ldr	r3, [r3, #12]
 8012d90:	899b      	ldrh	r3, [r3, #12]
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7f6 fff7 	bl	8009d88 <lwip_htons>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	f003 0301 	and.w	r3, r3, #1
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d005      	beq.n	8012db0 <tcp_zero_window_probe+0x48>
 8012da4:	6a3b      	ldr	r3, [r7, #32]
 8012da6:	891b      	ldrh	r3, [r3, #8]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d101      	bne.n	8012db0 <tcp_zero_window_probe+0x48>
 8012dac:	2301      	movs	r3, #1
 8012dae:	e000      	b.n	8012db2 <tcp_zero_window_probe+0x4a>
 8012db0:	2300      	movs	r3, #0
 8012db2:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012db4:	7ffb      	ldrb	r3, [r7, #31]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	bf0c      	ite	eq
 8012dba:	2301      	moveq	r3, #1
 8012dbc:	2300      	movne	r3, #0
 8012dbe:	b2db      	uxtb	r3, r3
 8012dc0:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8012dc2:	6a3b      	ldr	r3, [r7, #32]
 8012dc4:	68db      	ldr	r3, [r3, #12]
 8012dc6:	685b      	ldr	r3, [r3, #4]
 8012dc8:	8bba      	ldrh	r2, [r7, #28]
 8012dca:	2100      	movs	r1, #0
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f7fe fce1 	bl	8011794 <tcp_output_alloc_header>
 8012dd2:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012dd4:	69bb      	ldr	r3, [r7, #24]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d102      	bne.n	8012de0 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012dda:	f04f 33ff 	mov.w	r3, #4294967295
 8012dde:	e05b      	b.n	8012e98 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012de0:	69bb      	ldr	r3, [r7, #24]
 8012de2:	685b      	ldr	r3, [r3, #4]
 8012de4:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012de6:	7ffb      	ldrb	r3, [r7, #31]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d00e      	beq.n	8012e0a <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012dec:	697b      	ldr	r3, [r7, #20]
 8012dee:	899b      	ldrh	r3, [r3, #12]
 8012df0:	b29b      	uxth	r3, r3
 8012df2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012df6:	b29c      	uxth	r4, r3
 8012df8:	2011      	movs	r0, #17
 8012dfa:	f7f6 ffc5 	bl	8009d88 <lwip_htons>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	4323      	orrs	r3, r4
 8012e02:	b29a      	uxth	r2, r3
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	819a      	strh	r2, [r3, #12]
 8012e08:	e010      	b.n	8012e2c <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012e0a:	69bb      	ldr	r3, [r7, #24]
 8012e0c:	685b      	ldr	r3, [r3, #4]
 8012e0e:	3314      	adds	r3, #20
 8012e10:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012e12:	6a3b      	ldr	r3, [r7, #32]
 8012e14:	6858      	ldr	r0, [r3, #4]
 8012e16:	6a3b      	ldr	r3, [r7, #32]
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	891a      	ldrh	r2, [r3, #8]
 8012e1c:	6a3b      	ldr	r3, [r7, #32]
 8012e1e:	891b      	ldrh	r3, [r3, #8]
 8012e20:	1ad3      	subs	r3, r2, r3
 8012e22:	b29b      	uxth	r3, r3
 8012e24:	2201      	movs	r2, #1
 8012e26:	6939      	ldr	r1, [r7, #16]
 8012e28:	f7fa fe1e 	bl	800da68 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012e2c:	6a3b      	ldr	r3, [r7, #32]
 8012e2e:	68db      	ldr	r3, [r3, #12]
 8012e30:	685b      	ldr	r3, [r3, #4]
 8012e32:	4618      	mov	r0, r3
 8012e34:	f7f6 ffb5 	bl	8009da2 <lwip_htonl>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	1ad3      	subs	r3, r2, r3
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	da02      	bge.n	8012e50 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	68fa      	ldr	r2, [r7, #12]
 8012e4e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	3304      	adds	r3, #4
 8012e54:	4618      	mov	r0, r3
 8012e56:	f7f8 f877 	bl	800af48 <ip4_route>
 8012e5a:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8012e5c:	68bb      	ldr	r3, [r7, #8]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d103      	bne.n	8012e6a <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8012e62:	23fc      	movs	r3, #252	; 0xfc
 8012e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012e68:	e011      	b.n	8012e8e <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012e6a:	6879      	ldr	r1, [r7, #4]
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	1d1a      	adds	r2, r3, #4
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	7a98      	ldrb	r0, [r3, #10]
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	9302      	str	r3, [sp, #8]
 8012e78:	2306      	movs	r3, #6
 8012e7a:	9301      	str	r3, [sp, #4]
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	9300      	str	r3, [sp, #0]
 8012e80:	4603      	mov	r3, r0
 8012e82:	69b8      	ldr	r0, [r7, #24]
 8012e84:	f7f8 fa02 	bl	800b28c <ip4_output_if>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8012e8e:	69b8      	ldr	r0, [r7, #24]
 8012e90:	f7fa fbe0 	bl	800d654 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012e94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012e98:	4618      	mov	r0, r3
 8012e9a:	372c      	adds	r7, #44	; 0x2c
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd90      	pop	{r4, r7, pc}

08012ea0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b082      	sub	sp, #8
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012ea8:	f7fa fe5e 	bl	800db68 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012eac:	4b0a      	ldr	r3, [pc, #40]	; (8012ed8 <tcpip_tcp_timer+0x38>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d103      	bne.n	8012ebc <tcpip_tcp_timer+0x1c>
 8012eb4:	4b09      	ldr	r3, [pc, #36]	; (8012edc <tcpip_tcp_timer+0x3c>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d005      	beq.n	8012ec8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	4908      	ldr	r1, [pc, #32]	; (8012ee0 <tcpip_tcp_timer+0x40>)
 8012ec0:	20fa      	movs	r0, #250	; 0xfa
 8012ec2:	f000 f86f 	bl	8012fa4 <sys_timeout>
 8012ec6:	e002      	b.n	8012ece <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012ec8:	4b06      	ldr	r3, [pc, #24]	; (8012ee4 <tcpip_tcp_timer+0x44>)
 8012eca:	2200      	movs	r2, #0
 8012ecc:	601a      	str	r2, [r3, #0]
  }
}
 8012ece:	bf00      	nop
 8012ed0:	3708      	adds	r7, #8
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}
 8012ed6:	bf00      	nop
 8012ed8:	2000ab34 	.word	0x2000ab34
 8012edc:	2000ab44 	.word	0x2000ab44
 8012ee0:	08012ea1 	.word	0x08012ea1
 8012ee4:	2000422c 	.word	0x2000422c

08012ee8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012eec:	4b0a      	ldr	r3, [pc, #40]	; (8012f18 <tcp_timer_needed+0x30>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d10f      	bne.n	8012f14 <tcp_timer_needed+0x2c>
 8012ef4:	4b09      	ldr	r3, [pc, #36]	; (8012f1c <tcp_timer_needed+0x34>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d103      	bne.n	8012f04 <tcp_timer_needed+0x1c>
 8012efc:	4b08      	ldr	r3, [pc, #32]	; (8012f20 <tcp_timer_needed+0x38>)
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d007      	beq.n	8012f14 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012f04:	4b04      	ldr	r3, [pc, #16]	; (8012f18 <tcp_timer_needed+0x30>)
 8012f06:	2201      	movs	r2, #1
 8012f08:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	4905      	ldr	r1, [pc, #20]	; (8012f24 <tcp_timer_needed+0x3c>)
 8012f0e:	20fa      	movs	r0, #250	; 0xfa
 8012f10:	f000 f848 	bl	8012fa4 <sys_timeout>
  }
}
 8012f14:	bf00      	nop
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	2000422c 	.word	0x2000422c
 8012f1c:	2000ab34 	.word	0x2000ab34
 8012f20:	2000ab44 	.word	0x2000ab44
 8012f24:	08012ea1 	.word	0x08012ea1

08012f28 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b084      	sub	sp, #16
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	685b      	ldr	r3, [r3, #4]
 8012f38:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	687a      	ldr	r2, [r7, #4]
 8012f40:	4903      	ldr	r1, [pc, #12]	; (8012f50 <cyclic_timer+0x28>)
 8012f42:	4618      	mov	r0, r3
 8012f44:	f000 f82e 	bl	8012fa4 <sys_timeout>
}
 8012f48:	bf00      	nop
 8012f4a:	3710      	adds	r7, #16
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	bd80      	pop	{r7, pc}
 8012f50:	08012f29 	.word	0x08012f29

08012f54 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b082      	sub	sp, #8
 8012f58:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012f5a:	2301      	movs	r3, #1
 8012f5c:	607b      	str	r3, [r7, #4]
 8012f5e:	e00e      	b.n	8012f7e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8012f60:	4a0d      	ldr	r2, [pc, #52]	; (8012f98 <sys_timeouts_init+0x44>)
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	00db      	lsls	r3, r3, #3
 8012f6c:	4a0a      	ldr	r2, [pc, #40]	; (8012f98 <sys_timeouts_init+0x44>)
 8012f6e:	4413      	add	r3, r2
 8012f70:	461a      	mov	r2, r3
 8012f72:	490a      	ldr	r1, [pc, #40]	; (8012f9c <sys_timeouts_init+0x48>)
 8012f74:	f000 f816 	bl	8012fa4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	3301      	adds	r3, #1
 8012f7c:	607b      	str	r3, [r7, #4]
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	2b02      	cmp	r3, #2
 8012f82:	d9ed      	bls.n	8012f60 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8012f84:	f7f0 fe98 	bl	8003cb8 <sys_now>
 8012f88:	4602      	mov	r2, r0
 8012f8a:	4b05      	ldr	r3, [pc, #20]	; (8012fa0 <sys_timeouts_init+0x4c>)
 8012f8c:	601a      	str	r2, [r3, #0]
}
 8012f8e:	bf00      	nop
 8012f90:	3708      	adds	r7, #8
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}
 8012f96:	bf00      	nop
 8012f98:	08017ff8 	.word	0x08017ff8
 8012f9c:	08012f29 	.word	0x08012f29
 8012fa0:	20004228 	.word	0x20004228

08012fa4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b088      	sub	sp, #32
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	60f8      	str	r0, [r7, #12]
 8012fac:	60b9      	str	r1, [r7, #8]
 8012fae:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012fb0:	200a      	movs	r0, #10
 8012fb2:	f7f9 fd49 	bl	800ca48 <memp_malloc>
 8012fb6:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d10a      	bne.n	8012fd4 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	f040 8084 	bne.w	80130ce <sys_timeout+0x12a>
 8012fc6:	4b44      	ldr	r3, [pc, #272]	; (80130d8 <sys_timeout+0x134>)
 8012fc8:	22d4      	movs	r2, #212	; 0xd4
 8012fca:	4944      	ldr	r1, [pc, #272]	; (80130dc <sys_timeout+0x138>)
 8012fcc:	4844      	ldr	r0, [pc, #272]	; (80130e0 <sys_timeout+0x13c>)
 8012fce:	f001 f881 	bl	80140d4 <iprintf>
    return;
 8012fd2:	e07c      	b.n	80130ce <sys_timeout+0x12a>
  }

  now = sys_now();
 8012fd4:	f7f0 fe70 	bl	8003cb8 <sys_now>
 8012fd8:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8012fda:	4b42      	ldr	r3, [pc, #264]	; (80130e4 <sys_timeout+0x140>)
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d105      	bne.n	8012fee <sys_timeout+0x4a>
    diff = 0;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8012fe6:	4a40      	ldr	r2, [pc, #256]	; (80130e8 <sys_timeout+0x144>)
 8012fe8:	693b      	ldr	r3, [r7, #16]
 8012fea:	6013      	str	r3, [r2, #0]
 8012fec:	e004      	b.n	8012ff8 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8012fee:	4b3e      	ldr	r3, [pc, #248]	; (80130e8 <sys_timeout+0x144>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	693a      	ldr	r2, [r7, #16]
 8012ff4:	1ad3      	subs	r3, r2, r3
 8012ff6:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8012ff8:	697b      	ldr	r3, [r7, #20]
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012ffe:	697b      	ldr	r3, [r7, #20]
 8013000:	68ba      	ldr	r2, [r7, #8]
 8013002:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	687a      	ldr	r2, [r7, #4]
 8013008:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 801300a:	68fa      	ldr	r2, [r7, #12]
 801300c:	69bb      	ldr	r3, [r7, #24]
 801300e:	441a      	add	r2, r3
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013014:	4b33      	ldr	r3, [pc, #204]	; (80130e4 <sys_timeout+0x140>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d103      	bne.n	8013024 <sys_timeout+0x80>
    next_timeout = timeout;
 801301c:	4a31      	ldr	r2, [pc, #196]	; (80130e4 <sys_timeout+0x140>)
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	6013      	str	r3, [r2, #0]
    return;
 8013022:	e055      	b.n	80130d0 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8013024:	4b2f      	ldr	r3, [pc, #188]	; (80130e4 <sys_timeout+0x140>)
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	685a      	ldr	r2, [r3, #4]
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	429a      	cmp	r2, r3
 801302e:	d90f      	bls.n	8013050 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8013030:	4b2c      	ldr	r3, [pc, #176]	; (80130e4 <sys_timeout+0x140>)
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	4a2b      	ldr	r2, [pc, #172]	; (80130e4 <sys_timeout+0x140>)
 8013036:	6812      	ldr	r2, [r2, #0]
 8013038:	6851      	ldr	r1, [r2, #4]
 801303a:	68fa      	ldr	r2, [r7, #12]
 801303c:	1a8a      	subs	r2, r1, r2
 801303e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8013040:	4b28      	ldr	r3, [pc, #160]	; (80130e4 <sys_timeout+0x140>)
 8013042:	681a      	ldr	r2, [r3, #0]
 8013044:	697b      	ldr	r3, [r7, #20]
 8013046:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013048:	4a26      	ldr	r2, [pc, #152]	; (80130e4 <sys_timeout+0x140>)
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	6013      	str	r3, [r2, #0]
 801304e:	e03f      	b.n	80130d0 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013050:	4b24      	ldr	r3, [pc, #144]	; (80130e4 <sys_timeout+0x140>)
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	61fb      	str	r3, [r7, #28]
 8013056:	e036      	b.n	80130c6 <sys_timeout+0x122>
      timeout->time -= t->time;
 8013058:	697b      	ldr	r3, [r7, #20]
 801305a:	685a      	ldr	r2, [r3, #4]
 801305c:	69fb      	ldr	r3, [r7, #28]
 801305e:	685b      	ldr	r3, [r3, #4]
 8013060:	1ad2      	subs	r2, r2, r3
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8013066:	69fb      	ldr	r3, [r7, #28]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d006      	beq.n	801307c <sys_timeout+0xd8>
 801306e:	69fb      	ldr	r3, [r7, #28]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	685a      	ldr	r2, [r3, #4]
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	685b      	ldr	r3, [r3, #4]
 8013078:	429a      	cmp	r2, r3
 801307a:	d921      	bls.n	80130c0 <sys_timeout+0x11c>
        if (t->next != NULL) {
 801307c:	69fb      	ldr	r3, [r7, #28]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d009      	beq.n	8013098 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8013084:	69fb      	ldr	r3, [r7, #28]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	69fa      	ldr	r2, [r7, #28]
 801308a:	6812      	ldr	r2, [r2, #0]
 801308c:	6851      	ldr	r1, [r2, #4]
 801308e:	697a      	ldr	r2, [r7, #20]
 8013090:	6852      	ldr	r2, [r2, #4]
 8013092:	1a8a      	subs	r2, r1, r2
 8013094:	605a      	str	r2, [r3, #4]
 8013096:	e00b      	b.n	80130b0 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	685a      	ldr	r2, [r3, #4]
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	429a      	cmp	r2, r3
 80130a0:	d906      	bls.n	80130b0 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 80130a2:	4b10      	ldr	r3, [pc, #64]	; (80130e4 <sys_timeout+0x140>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	685a      	ldr	r2, [r3, #4]
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	441a      	add	r2, r3
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 80130b0:	69fb      	ldr	r3, [r7, #28]
 80130b2:	681a      	ldr	r2, [r3, #0]
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80130b8:	69fb      	ldr	r3, [r7, #28]
 80130ba:	697a      	ldr	r2, [r7, #20]
 80130bc:	601a      	str	r2, [r3, #0]
        break;
 80130be:	e007      	b.n	80130d0 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 80130c0:	69fb      	ldr	r3, [r7, #28]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	61fb      	str	r3, [r7, #28]
 80130c6:	69fb      	ldr	r3, [r7, #28]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d1c5      	bne.n	8013058 <sys_timeout+0xb4>
 80130cc:	e000      	b.n	80130d0 <sys_timeout+0x12c>
    return;
 80130ce:	bf00      	nop
      }
    }
  }
}
 80130d0:	3720      	adds	r7, #32
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}
 80130d6:	bf00      	nop
 80130d8:	08017cd4 	.word	0x08017cd4
 80130dc:	08017d08 	.word	0x08017d08
 80130e0:	08017d48 	.word	0x08017d48
 80130e4:	20004224 	.word	0x20004224
 80130e8:	20004228 	.word	0x20004228

080130ec <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b086      	sub	sp, #24
 80130f0:	af00      	add	r7, sp, #0
  if (next_timeout) {
 80130f2:	4b24      	ldr	r3, [pc, #144]	; (8013184 <sys_check_timeouts+0x98>)
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d03f      	beq.n	801317a <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 80130fa:	f7f0 fddd 	bl	8003cb8 <sys_now>
 80130fe:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8013100:	4b21      	ldr	r3, [pc, #132]	; (8013188 <sys_check_timeouts+0x9c>)
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	68fa      	ldr	r2, [r7, #12]
 8013106:	1ad3      	subs	r3, r2, r3
 8013108:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 801310a:	2300      	movs	r3, #0
 801310c:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 801310e:	4b1d      	ldr	r3, [pc, #116]	; (8013184 <sys_check_timeouts+0x98>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d02c      	beq.n	8013174 <sys_check_timeouts+0x88>
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	685a      	ldr	r2, [r3, #4]
 801311e:	697b      	ldr	r3, [r7, #20]
 8013120:	429a      	cmp	r2, r3
 8013122:	d827      	bhi.n	8013174 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8013124:	2301      	movs	r3, #1
 8013126:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	685a      	ldr	r2, [r3, #4]
 801312c:	4b16      	ldr	r3, [pc, #88]	; (8013188 <sys_check_timeouts+0x9c>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	4413      	add	r3, r2
 8013132:	4a15      	ldr	r2, [pc, #84]	; (8013188 <sys_check_timeouts+0x9c>)
 8013134:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	685b      	ldr	r3, [r3, #4]
 801313a:	697a      	ldr	r2, [r7, #20]
 801313c:	1ad3      	subs	r3, r2, r3
 801313e:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8013140:	68bb      	ldr	r3, [r7, #8]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	4a0f      	ldr	r2, [pc, #60]	; (8013184 <sys_check_timeouts+0x98>)
 8013146:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8013148:	68bb      	ldr	r3, [r7, #8]
 801314a:	689b      	ldr	r3, [r3, #8]
 801314c:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	68db      	ldr	r3, [r3, #12]
 8013152:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013154:	68b9      	ldr	r1, [r7, #8]
 8013156:	200a      	movs	r0, #10
 8013158:	f7f9 fcc8 	bl	800caec <memp_free>
        if (handler != NULL) {
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d008      	beq.n	8013174 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8013162:	480a      	ldr	r0, [pc, #40]	; (801318c <sys_check_timeouts+0xa0>)
 8013164:	f000 feb8 	bl	8013ed8 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	6838      	ldr	r0, [r7, #0]
 801316c:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 801316e:	4807      	ldr	r0, [pc, #28]	; (801318c <sys_check_timeouts+0xa0>)
 8013170:	f000 fec1 	bl	8013ef6 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8013174:	7cfb      	ldrb	r3, [r7, #19]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d1c7      	bne.n	801310a <sys_check_timeouts+0x1e>
  }
}
 801317a:	bf00      	nop
 801317c:	3718      	adds	r7, #24
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}
 8013182:	bf00      	nop
 8013184:	20004224 	.word	0x20004224
 8013188:	20004228 	.word	0x20004228
 801318c:	20007420 	.word	0x20007420

08013190 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8013196:	4b0f      	ldr	r3, [pc, #60]	; (80131d4 <sys_timeouts_sleeptime+0x44>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d102      	bne.n	80131a4 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 801319e:	f04f 33ff 	mov.w	r3, #4294967295
 80131a2:	e013      	b.n	80131cc <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 80131a4:	f7f0 fd88 	bl	8003cb8 <sys_now>
 80131a8:	4602      	mov	r2, r0
 80131aa:	4b0b      	ldr	r3, [pc, #44]	; (80131d8 <sys_timeouts_sleeptime+0x48>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	1ad3      	subs	r3, r2, r3
 80131b0:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 80131b2:	4b08      	ldr	r3, [pc, #32]	; (80131d4 <sys_timeouts_sleeptime+0x44>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	685a      	ldr	r2, [r3, #4]
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d201      	bcs.n	80131c2 <sys_timeouts_sleeptime+0x32>
    return 0;
 80131be:	2300      	movs	r3, #0
 80131c0:	e004      	b.n	80131cc <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 80131c2:	4b04      	ldr	r3, [pc, #16]	; (80131d4 <sys_timeouts_sleeptime+0x44>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	685a      	ldr	r2, [r3, #4]
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	1ad3      	subs	r3, r2, r3
  }
}
 80131cc:	4618      	mov	r0, r3
 80131ce:	3708      	adds	r7, #8
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}
 80131d4:	20004224 	.word	0x20004224
 80131d8:	20004228 	.word	0x20004228

080131dc <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b084      	sub	sp, #16
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
 80131e4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 80131e6:	4b0f      	ldr	r3, [pc, #60]	; (8013224 <sys_timeouts_mbox_fetch+0x48>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d105      	bne.n	80131fa <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80131ee:	2200      	movs	r2, #0
 80131f0:	6839      	ldr	r1, [r7, #0]
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	f000 fd3f 	bl	8013c76 <sys_arch_mbox_fetch>
    return;
 80131f8:	e011      	b.n	801321e <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 80131fa:	f7ff ffc9 	bl	8013190 <sys_timeouts_sleeptime>
 80131fe:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d008      	beq.n	8013218 <sys_timeouts_mbox_fetch+0x3c>
 8013206:	68fa      	ldr	r2, [r7, #12]
 8013208:	6839      	ldr	r1, [r7, #0]
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	f000 fd33 	bl	8013c76 <sys_arch_mbox_fetch>
 8013210:	4603      	mov	r3, r0
 8013212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013216:	d102      	bne.n	801321e <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8013218:	f7ff ff68 	bl	80130ec <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801321c:	e7e3      	b.n	80131e6 <sys_timeouts_mbox_fetch+0xa>
  }
}
 801321e:	3710      	adds	r7, #16
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}
 8013224:	20004224 	.word	0x20004224

08013228 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013228:	b480      	push	{r7}
 801322a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 801322c:	bf00      	nop
 801322e:	46bd      	mov	sp, r7
 8013230:	bc80      	pop	{r7}
 8013232:	4770      	bx	lr

08013234 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013234:	b480      	push	{r7}
 8013236:	b083      	sub	sp, #12
 8013238:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801323a:	2300      	movs	r3, #0
 801323c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801323e:	4b17      	ldr	r3, [pc, #92]	; (801329c <udp_new_port+0x68>)
 8013240:	881b      	ldrh	r3, [r3, #0]
 8013242:	1c5a      	adds	r2, r3, #1
 8013244:	b291      	uxth	r1, r2
 8013246:	4a15      	ldr	r2, [pc, #84]	; (801329c <udp_new_port+0x68>)
 8013248:	8011      	strh	r1, [r2, #0]
 801324a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801324e:	4293      	cmp	r3, r2
 8013250:	d103      	bne.n	801325a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013252:	4b12      	ldr	r3, [pc, #72]	; (801329c <udp_new_port+0x68>)
 8013254:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013258:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801325a:	4b11      	ldr	r3, [pc, #68]	; (80132a0 <udp_new_port+0x6c>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	603b      	str	r3, [r7, #0]
 8013260:	e011      	b.n	8013286 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013262:	683b      	ldr	r3, [r7, #0]
 8013264:	8a5a      	ldrh	r2, [r3, #18]
 8013266:	4b0d      	ldr	r3, [pc, #52]	; (801329c <udp_new_port+0x68>)
 8013268:	881b      	ldrh	r3, [r3, #0]
 801326a:	429a      	cmp	r2, r3
 801326c:	d108      	bne.n	8013280 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801326e:	88fb      	ldrh	r3, [r7, #6]
 8013270:	3301      	adds	r3, #1
 8013272:	80fb      	strh	r3, [r7, #6]
 8013274:	88fb      	ldrh	r3, [r7, #6]
 8013276:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801327a:	d3e0      	bcc.n	801323e <udp_new_port+0xa>
        return 0;
 801327c:	2300      	movs	r3, #0
 801327e:	e007      	b.n	8013290 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	68db      	ldr	r3, [r3, #12]
 8013284:	603b      	str	r3, [r7, #0]
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d1ea      	bne.n	8013262 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801328c:	4b03      	ldr	r3, [pc, #12]	; (801329c <udp_new_port+0x68>)
 801328e:	881b      	ldrh	r3, [r3, #0]
}
 8013290:	4618      	mov	r0, r3
 8013292:	370c      	adds	r7, #12
 8013294:	46bd      	mov	sp, r7
 8013296:	bc80      	pop	{r7}
 8013298:	4770      	bx	lr
 801329a:	bf00      	nop
 801329c:	20000018 	.word	0x20000018
 80132a0:	2000ab4c 	.word	0x2000ab4c

080132a4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80132a4:	b480      	push	{r7}
 80132a6:	b085      	sub	sp, #20
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	60f8      	str	r0, [r7, #12]
 80132ac:	60b9      	str	r1, [r7, #8]
 80132ae:	4613      	mov	r3, r2
 80132b0:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80132b2:	79fb      	ldrb	r3, [r7, #7]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d018      	beq.n	80132ea <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d013      	beq.n	80132e6 <udp_input_local_match+0x42>
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d00f      	beq.n	80132e6 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80132c6:	4b13      	ldr	r3, [pc, #76]	; (8013314 <udp_input_local_match+0x70>)
 80132c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ce:	d00a      	beq.n	80132e6 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	681a      	ldr	r2, [r3, #0]
 80132d4:	4b0f      	ldr	r3, [pc, #60]	; (8013314 <udp_input_local_match+0x70>)
 80132d6:	695b      	ldr	r3, [r3, #20]
 80132d8:	405a      	eors	r2, r3
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	3308      	adds	r3, #8
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d110      	bne.n	8013308 <udp_input_local_match+0x64>
          return 1;
 80132e6:	2301      	movs	r3, #1
 80132e8:	e00f      	b.n	801330a <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d009      	beq.n	8013304 <udp_input_local_match+0x60>
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d005      	beq.n	8013304 <udp_input_local_match+0x60>
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	681a      	ldr	r2, [r3, #0]
 80132fc:	4b05      	ldr	r3, [pc, #20]	; (8013314 <udp_input_local_match+0x70>)
 80132fe:	695b      	ldr	r3, [r3, #20]
 8013300:	429a      	cmp	r2, r3
 8013302:	d101      	bne.n	8013308 <udp_input_local_match+0x64>
      return 1;
 8013304:	2301      	movs	r3, #1
 8013306:	e000      	b.n	801330a <udp_input_local_match+0x66>
    }
  }

  return 0;
 8013308:	2300      	movs	r3, #0
}
 801330a:	4618      	mov	r0, r3
 801330c:	3714      	adds	r7, #20
 801330e:	46bd      	mov	sp, r7
 8013310:	bc80      	pop	{r7}
 8013312:	4770      	bx	lr
 8013314:	20007424 	.word	0x20007424

08013318 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013318:	b590      	push	{r4, r7, lr}
 801331a:	b08d      	sub	sp, #52	; 0x34
 801331c:	af02      	add	r7, sp, #8
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013322:	2300      	movs	r3, #0
 8013324:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	895b      	ldrh	r3, [r3, #10]
 801332a:	2b07      	cmp	r3, #7
 801332c:	d803      	bhi.n	8013336 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801332e:	6878      	ldr	r0, [r7, #4]
 8013330:	f7fa f990 	bl	800d654 <pbuf_free>
    goto end;
 8013334:	e0c6      	b.n	80134c4 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	685b      	ldr	r3, [r3, #4]
 801333a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801333c:	4b63      	ldr	r3, [pc, #396]	; (80134cc <udp_input+0x1b4>)
 801333e:	695a      	ldr	r2, [r3, #20]
 8013340:	4b62      	ldr	r3, [pc, #392]	; (80134cc <udp_input+0x1b4>)
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	4619      	mov	r1, r3
 8013346:	4610      	mov	r0, r2
 8013348:	f7f8 f872 	bl	800b430 <ip4_addr_isbroadcast_u32>
 801334c:	4603      	mov	r3, r0
 801334e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	881b      	ldrh	r3, [r3, #0]
 8013354:	b29b      	uxth	r3, r3
 8013356:	4618      	mov	r0, r3
 8013358:	f7f6 fd16 	bl	8009d88 <lwip_htons>
 801335c:	4603      	mov	r3, r0
 801335e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	885b      	ldrh	r3, [r3, #2]
 8013364:	b29b      	uxth	r3, r3
 8013366:	4618      	mov	r0, r3
 8013368:	f7f6 fd0e 	bl	8009d88 <lwip_htons>
 801336c:	4603      	mov	r3, r0
 801336e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013370:	2300      	movs	r3, #0
 8013372:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013374:	2300      	movs	r3, #0
 8013376:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013378:	2300      	movs	r3, #0
 801337a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801337c:	4b54      	ldr	r3, [pc, #336]	; (80134d0 <udp_input+0x1b8>)
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	627b      	str	r3, [r7, #36]	; 0x24
 8013382:	e03b      	b.n	80133fc <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013386:	8a5b      	ldrh	r3, [r3, #18]
 8013388:	89fa      	ldrh	r2, [r7, #14]
 801338a:	429a      	cmp	r2, r3
 801338c:	d131      	bne.n	80133f2 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801338e:	7cfb      	ldrb	r3, [r7, #19]
 8013390:	461a      	mov	r2, r3
 8013392:	6839      	ldr	r1, [r7, #0]
 8013394:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013396:	f7ff ff85 	bl	80132a4 <udp_input_local_match>
 801339a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801339c:	2b00      	cmp	r3, #0
 801339e:	d028      	beq.n	80133f2 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80133a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a2:	7c1b      	ldrb	r3, [r3, #16]
 80133a4:	f003 0304 	and.w	r3, r3, #4
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d104      	bne.n	80133b6 <udp_input+0x9e>
 80133ac:	69fb      	ldr	r3, [r7, #28]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d101      	bne.n	80133b6 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 80133b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b4:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80133b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b8:	8a9b      	ldrh	r3, [r3, #20]
 80133ba:	8a3a      	ldrh	r2, [r7, #16]
 80133bc:	429a      	cmp	r2, r3
 80133be:	d118      	bne.n	80133f2 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80133c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c2:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d005      	beq.n	80133d4 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80133c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ca:	685a      	ldr	r2, [r3, #4]
 80133cc:	4b3f      	ldr	r3, [pc, #252]	; (80134cc <udp_input+0x1b4>)
 80133ce:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d10e      	bne.n	80133f2 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80133d4:	6a3b      	ldr	r3, [r7, #32]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d014      	beq.n	8013404 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80133da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133dc:	68da      	ldr	r2, [r3, #12]
 80133de:	6a3b      	ldr	r3, [r7, #32]
 80133e0:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80133e2:	4b3b      	ldr	r3, [pc, #236]	; (80134d0 <udp_input+0x1b8>)
 80133e4:	681a      	ldr	r2, [r3, #0]
 80133e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e8:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80133ea:	4a39      	ldr	r2, [pc, #228]	; (80134d0 <udp_input+0x1b8>)
 80133ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ee:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80133f0:	e008      	b.n	8013404 <udp_input+0xec>
      }
    }

    prev = pcb;
 80133f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f4:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80133f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f8:	68db      	ldr	r3, [r3, #12]
 80133fa:	627b      	str	r3, [r7, #36]	; 0x24
 80133fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d1c0      	bne.n	8013384 <udp_input+0x6c>
 8013402:	e000      	b.n	8013406 <udp_input+0xee>
        break;
 8013404:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013408:	2b00      	cmp	r3, #0
 801340a:	d101      	bne.n	8013410 <udp_input+0xf8>
    pcb = uncon_pcb;
 801340c:	69fb      	ldr	r3, [r7, #28]
 801340e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013412:	2b00      	cmp	r3, #0
 8013414:	d002      	beq.n	801341c <udp_input+0x104>
    for_us = 1;
 8013416:	2301      	movs	r3, #1
 8013418:	76fb      	strb	r3, [r7, #27]
 801341a:	e00a      	b.n	8013432 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801341c:	683b      	ldr	r3, [r7, #0]
 801341e:	3304      	adds	r3, #4
 8013420:	681a      	ldr	r2, [r3, #0]
 8013422:	4b2a      	ldr	r3, [pc, #168]	; (80134cc <udp_input+0x1b4>)
 8013424:	695b      	ldr	r3, [r3, #20]
 8013426:	429a      	cmp	r2, r3
 8013428:	bf0c      	ite	eq
 801342a:	2301      	moveq	r3, #1
 801342c:	2300      	movne	r3, #0
 801342e:	b2db      	uxtb	r3, r3
 8013430:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013432:	7efb      	ldrb	r3, [r7, #27]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d042      	beq.n	80134be <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8013438:	f06f 0107 	mvn.w	r1, #7
 801343c:	6878      	ldr	r0, [r7, #4]
 801343e:	f7fa f8e5 	bl	800d60c <pbuf_header>
 8013442:	4603      	mov	r3, r0
 8013444:	2b00      	cmp	r3, #0
 8013446:	d00a      	beq.n	801345e <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8013448:	4b22      	ldr	r3, [pc, #136]	; (80134d4 <udp_input+0x1bc>)
 801344a:	f240 1255 	movw	r2, #341	; 0x155
 801344e:	4922      	ldr	r1, [pc, #136]	; (80134d8 <udp_input+0x1c0>)
 8013450:	4822      	ldr	r0, [pc, #136]	; (80134dc <udp_input+0x1c4>)
 8013452:	f000 fe3f 	bl	80140d4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f7fa f8fc 	bl	800d654 <pbuf_free>
      goto end;
 801345c:	e032      	b.n	80134c4 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 801345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013460:	2b00      	cmp	r3, #0
 8013462:	d012      	beq.n	801348a <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013466:	699b      	ldr	r3, [r3, #24]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d00a      	beq.n	8013482 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801346e:	699c      	ldr	r4, [r3, #24]
 8013470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013472:	69d8      	ldr	r0, [r3, #28]
 8013474:	8a3b      	ldrh	r3, [r7, #16]
 8013476:	9300      	str	r3, [sp, #0]
 8013478:	4b19      	ldr	r3, [pc, #100]	; (80134e0 <udp_input+0x1c8>)
 801347a:	687a      	ldr	r2, [r7, #4]
 801347c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801347e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013480:	e021      	b.n	80134c6 <udp_input+0x1ae>
        pbuf_free(p);
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f7fa f8e6 	bl	800d654 <pbuf_free>
        goto end;
 8013488:	e01c      	b.n	80134c4 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801348a:	7cfb      	ldrb	r3, [r7, #19]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d112      	bne.n	80134b6 <udp_input+0x19e>
 8013490:	4b0e      	ldr	r3, [pc, #56]	; (80134cc <udp_input+0x1b4>)
 8013492:	695b      	ldr	r3, [r3, #20]
 8013494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013498:	2be0      	cmp	r3, #224	; 0xe0
 801349a:	d00c      	beq.n	80134b6 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801349c:	4b0b      	ldr	r3, [pc, #44]	; (80134cc <udp_input+0x1b4>)
 801349e:	899b      	ldrh	r3, [r3, #12]
 80134a0:	3308      	adds	r3, #8
 80134a2:	b29b      	uxth	r3, r3
 80134a4:	b21b      	sxth	r3, r3
 80134a6:	4619      	mov	r1, r3
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f7fa f8c1 	bl	800d630 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80134ae:	2103      	movs	r1, #3
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f7f7 fcc1 	bl	800ae38 <icmp_dest_unreach>
      pbuf_free(p);
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f7fa f8cc 	bl	800d654 <pbuf_free>
  return;
 80134bc:	e003      	b.n	80134c6 <udp_input+0x1ae>
    pbuf_free(p);
 80134be:	6878      	ldr	r0, [r7, #4]
 80134c0:	f7fa f8c8 	bl	800d654 <pbuf_free>
  return;
 80134c4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80134c6:	372c      	adds	r7, #44	; 0x2c
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd90      	pop	{r4, r7, pc}
 80134cc:	20007424 	.word	0x20007424
 80134d0:	2000ab4c 	.word	0x2000ab4c
 80134d4:	08017d70 	.word	0x08017d70
 80134d8:	08017da0 	.word	0x08017da0
 80134dc:	08017db4 	.word	0x08017db4
 80134e0:	20007434 	.word	0x20007434

080134e4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b082      	sub	sp, #8
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d102      	bne.n	80134fa <udp_send+0x16>
    return ERR_VAL;
 80134f4:	f06f 0305 	mvn.w	r3, #5
 80134f8:	e008      	b.n	801350c <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	1d1a      	adds	r2, r3, #4
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	8a9b      	ldrh	r3, [r3, #20]
 8013502:	6839      	ldr	r1, [r7, #0]
 8013504:	6878      	ldr	r0, [r7, #4]
 8013506:	f000 f805 	bl	8013514 <udp_sendto>
 801350a:	4603      	mov	r3, r0
}
 801350c:	4618      	mov	r0, r3
 801350e:	3708      	adds	r7, #8
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}

08013514 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b088      	sub	sp, #32
 8013518:	af02      	add	r7, sp, #8
 801351a:	60f8      	str	r0, [r7, #12]
 801351c:	60b9      	str	r1, [r7, #8]
 801351e:	607a      	str	r2, [r7, #4]
 8013520:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d002      	beq.n	8013532 <udp_sendto+0x1e>
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d102      	bne.n	8013538 <udp_sendto+0x24>
    return ERR_VAL;
 8013532:	f06f 0305 	mvn.w	r3, #5
 8013536:	e013      	b.n	8013560 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 8013538:	6978      	ldr	r0, [r7, #20]
 801353a:	f7f7 fd05 	bl	800af48 <ip4_route>
 801353e:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d102      	bne.n	801354c <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013546:	f06f 0303 	mvn.w	r3, #3
 801354a:	e009      	b.n	8013560 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801354c:	887a      	ldrh	r2, [r7, #2]
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	9300      	str	r3, [sp, #0]
 8013552:	4613      	mov	r3, r2
 8013554:	687a      	ldr	r2, [r7, #4]
 8013556:	68b9      	ldr	r1, [r7, #8]
 8013558:	68f8      	ldr	r0, [r7, #12]
 801355a:	f000 f805 	bl	8013568 <udp_sendto_if>
 801355e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013560:	4618      	mov	r0, r3
 8013562:	3718      	adds	r7, #24
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}

08013568 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b088      	sub	sp, #32
 801356c:	af02      	add	r7, sp, #8
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	607a      	str	r2, [r7, #4]
 8013574:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d002      	beq.n	8013582 <udp_sendto_if+0x1a>
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d102      	bne.n	8013588 <udp_sendto_if+0x20>
    return ERR_VAL;
 8013582:	f06f 0305 	mvn.w	r3, #5
 8013586:	e028      	b.n	80135da <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d009      	beq.n	80135a2 <udp_sendto_if+0x3a>
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d005      	beq.n	80135a2 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801359e:	2be0      	cmp	r3, #224	; 0xe0
 80135a0:	d103      	bne.n	80135aa <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 80135a2:	6a3b      	ldr	r3, [r7, #32]
 80135a4:	3304      	adds	r3, #4
 80135a6:	617b      	str	r3, [r7, #20]
 80135a8:	e00b      	b.n	80135c2 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	681a      	ldr	r2, [r3, #0]
 80135ae:	6a3b      	ldr	r3, [r7, #32]
 80135b0:	3304      	adds	r3, #4
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	429a      	cmp	r2, r3
 80135b6:	d002      	beq.n	80135be <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 80135b8:	f06f 0303 	mvn.w	r3, #3
 80135bc:	e00d      	b.n	80135da <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80135c2:	887a      	ldrh	r2, [r7, #2]
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	9301      	str	r3, [sp, #4]
 80135c8:	6a3b      	ldr	r3, [r7, #32]
 80135ca:	9300      	str	r3, [sp, #0]
 80135cc:	4613      	mov	r3, r2
 80135ce:	687a      	ldr	r2, [r7, #4]
 80135d0:	68b9      	ldr	r1, [r7, #8]
 80135d2:	68f8      	ldr	r0, [r7, #12]
 80135d4:	f000 f806 	bl	80135e4 <udp_sendto_if_src>
 80135d8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80135da:	4618      	mov	r0, r3
 80135dc:	3718      	adds	r7, #24
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}
	...

080135e4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b08c      	sub	sp, #48	; 0x30
 80135e8:	af04      	add	r7, sp, #16
 80135ea:	60f8      	str	r0, [r7, #12]
 80135ec:	60b9      	str	r1, [r7, #8]
 80135ee:	607a      	str	r2, [r7, #4]
 80135f0:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d002      	beq.n	80135fe <udp_sendto_if_src+0x1a>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d102      	bne.n	8013604 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 80135fe:	f06f 0305 	mvn.w	r3, #5
 8013602:	e07e      	b.n	8013702 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	8a5b      	ldrh	r3, [r3, #18]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d10f      	bne.n	801362c <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801360c:	68f9      	ldr	r1, [r7, #12]
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	8a5b      	ldrh	r3, [r3, #18]
 8013612:	461a      	mov	r2, r3
 8013614:	68f8      	ldr	r0, [r7, #12]
 8013616:	f000 f87f 	bl	8013718 <udp_bind>
 801361a:	4603      	mov	r3, r0
 801361c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801361e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d002      	beq.n	801362c <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013626:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801362a:	e06a      	b.n	8013702 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 801362c:	2108      	movs	r1, #8
 801362e:	68b8      	ldr	r0, [r7, #8]
 8013630:	f7f9 ffec 	bl	800d60c <pbuf_header>
 8013634:	4603      	mov	r3, r0
 8013636:	2b00      	cmp	r3, #0
 8013638:	d014      	beq.n	8013664 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801363a:	2200      	movs	r2, #0
 801363c:	2108      	movs	r1, #8
 801363e:	2001      	movs	r0, #1
 8013640:	f7f9 fc96 	bl	800cf70 <pbuf_alloc>
 8013644:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013646:	69fb      	ldr	r3, [r7, #28]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d102      	bne.n	8013652 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801364c:	f04f 33ff 	mov.w	r3, #4294967295
 8013650:	e057      	b.n	8013702 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	891b      	ldrh	r3, [r3, #8]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d006      	beq.n	8013668 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801365a:	68b9      	ldr	r1, [r7, #8]
 801365c:	69f8      	ldr	r0, [r7, #28]
 801365e:	f7fa f927 	bl	800d8b0 <pbuf_chain>
 8013662:	e001      	b.n	8013668 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013668:	69fb      	ldr	r3, [r7, #28]
 801366a:	895b      	ldrh	r3, [r3, #10]
 801366c:	2b07      	cmp	r3, #7
 801366e:	d806      	bhi.n	801367e <udp_sendto_if_src+0x9a>
 8013670:	4b26      	ldr	r3, [pc, #152]	; (801370c <udp_sendto_if_src+0x128>)
 8013672:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8013676:	4926      	ldr	r1, [pc, #152]	; (8013710 <udp_sendto_if_src+0x12c>)
 8013678:	4826      	ldr	r0, [pc, #152]	; (8013714 <udp_sendto_if_src+0x130>)
 801367a:	f000 fd2b 	bl	80140d4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801367e:	69fb      	ldr	r3, [r7, #28]
 8013680:	685b      	ldr	r3, [r3, #4]
 8013682:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	8a5b      	ldrh	r3, [r3, #18]
 8013688:	4618      	mov	r0, r3
 801368a:	f7f6 fb7d 	bl	8009d88 <lwip_htons>
 801368e:	4603      	mov	r3, r0
 8013690:	461a      	mov	r2, r3
 8013692:	697b      	ldr	r3, [r7, #20]
 8013694:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013696:	887b      	ldrh	r3, [r7, #2]
 8013698:	4618      	mov	r0, r3
 801369a:	f7f6 fb75 	bl	8009d88 <lwip_htons>
 801369e:	4603      	mov	r3, r0
 80136a0:	461a      	mov	r2, r3
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	2200      	movs	r2, #0
 80136aa:	719a      	strb	r2, [r3, #6]
 80136ac:	2200      	movs	r2, #0
 80136ae:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80136b0:	69fb      	ldr	r3, [r7, #28]
 80136b2:	891b      	ldrh	r3, [r3, #8]
 80136b4:	4618      	mov	r0, r3
 80136b6:	f7f6 fb67 	bl	8009d88 <lwip_htons>
 80136ba:	4603      	mov	r3, r0
 80136bc:	461a      	mov	r2, r3
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80136c2:	2311      	movs	r3, #17
 80136c4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	7a9b      	ldrb	r3, [r3, #10]
 80136ca:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	7a5b      	ldrb	r3, [r3, #9]
 80136d0:	7cb9      	ldrb	r1, [r7, #18]
 80136d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136d4:	9202      	str	r2, [sp, #8]
 80136d6:	7cfa      	ldrb	r2, [r7, #19]
 80136d8:	9201      	str	r2, [sp, #4]
 80136da:	9300      	str	r3, [sp, #0]
 80136dc:	460b      	mov	r3, r1
 80136de:	687a      	ldr	r2, [r7, #4]
 80136e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80136e2:	69f8      	ldr	r0, [r7, #28]
 80136e4:	f7f7 fdfc 	bl	800b2e0 <ip4_output_if_src>
 80136e8:	4603      	mov	r3, r0
 80136ea:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80136ec:	69fa      	ldr	r2, [r7, #28]
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	429a      	cmp	r2, r3
 80136f2:	d004      	beq.n	80136fe <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 80136f4:	69f8      	ldr	r0, [r7, #28]
 80136f6:	f7f9 ffad 	bl	800d654 <pbuf_free>
    q = NULL;
 80136fa:	2300      	movs	r3, #0
 80136fc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80136fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013702:	4618      	mov	r0, r3
 8013704:	3720      	adds	r7, #32
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}
 801370a:	bf00      	nop
 801370c:	08017d70 	.word	0x08017d70
 8013710:	08017ddc 	.word	0x08017ddc
 8013714:	08017db4 	.word	0x08017db4

08013718 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b086      	sub	sp, #24
 801371c:	af00      	add	r7, sp, #0
 801371e:	60f8      	str	r0, [r7, #12]
 8013720:	60b9      	str	r1, [r7, #8]
 8013722:	4613      	mov	r3, r2
 8013724:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d101      	bne.n	8013730 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801372c:	4b30      	ldr	r3, [pc, #192]	; (80137f0 <udp_bind+0xd8>)
 801372e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d002      	beq.n	801373c <udp_bind+0x24>
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d102      	bne.n	8013742 <udp_bind+0x2a>
    return ERR_VAL;
 801373c:	f06f 0305 	mvn.w	r3, #5
 8013740:	e052      	b.n	80137e8 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013742:	2300      	movs	r3, #0
 8013744:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013746:	4b2b      	ldr	r3, [pc, #172]	; (80137f4 <udp_bind+0xdc>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	617b      	str	r3, [r7, #20]
 801374c:	e009      	b.n	8013762 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801374e:	68fa      	ldr	r2, [r7, #12]
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	429a      	cmp	r2, r3
 8013754:	d102      	bne.n	801375c <udp_bind+0x44>
      rebind = 1;
 8013756:	2301      	movs	r3, #1
 8013758:	74fb      	strb	r3, [r7, #19]
      break;
 801375a:	e005      	b.n	8013768 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	68db      	ldr	r3, [r3, #12]
 8013760:	617b      	str	r3, [r7, #20]
 8013762:	697b      	ldr	r3, [r7, #20]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d1f2      	bne.n	801374e <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8013768:	88fb      	ldrh	r3, [r7, #6]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d109      	bne.n	8013782 <udp_bind+0x6a>
    port = udp_new_port();
 801376e:	f7ff fd61 	bl	8013234 <udp_new_port>
 8013772:	4603      	mov	r3, r0
 8013774:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013776:	88fb      	ldrh	r3, [r7, #6]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d11e      	bne.n	80137ba <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801377c:	f06f 0307 	mvn.w	r3, #7
 8013780:	e032      	b.n	80137e8 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013782:	4b1c      	ldr	r3, [pc, #112]	; (80137f4 <udp_bind+0xdc>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	617b      	str	r3, [r7, #20]
 8013788:	e014      	b.n	80137b4 <udp_bind+0x9c>
      if (pcb != ipcb) {
 801378a:	68fa      	ldr	r2, [r7, #12]
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	429a      	cmp	r2, r3
 8013790:	d00d      	beq.n	80137ae <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	8a5b      	ldrh	r3, [r3, #18]
 8013796:	88fa      	ldrh	r2, [r7, #6]
 8013798:	429a      	cmp	r2, r3
 801379a:	d108      	bne.n	80137ae <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 801379c:	697b      	ldr	r3, [r7, #20]
 801379e:	681a      	ldr	r2, [r3, #0]
 80137a0:	68bb      	ldr	r3, [r7, #8]
 80137a2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80137a4:	429a      	cmp	r2, r3
 80137a6:	d102      	bne.n	80137ae <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80137a8:	f06f 0307 	mvn.w	r3, #7
 80137ac:	e01c      	b.n	80137e8 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	68db      	ldr	r3, [r3, #12]
 80137b2:	617b      	str	r3, [r7, #20]
 80137b4:	697b      	ldr	r3, [r7, #20]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d1e7      	bne.n	801378a <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d002      	beq.n	80137c6 <udp_bind+0xae>
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	e000      	b.n	80137c8 <udp_bind+0xb0>
 80137c6:	2300      	movs	r3, #0
 80137c8:	68fa      	ldr	r2, [r7, #12]
 80137ca:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	88fa      	ldrh	r2, [r7, #6]
 80137d0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80137d2:	7cfb      	ldrb	r3, [r7, #19]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d106      	bne.n	80137e6 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80137d8:	4b06      	ldr	r3, [pc, #24]	; (80137f4 <udp_bind+0xdc>)
 80137da:	681a      	ldr	r2, [r3, #0]
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80137e0:	4a04      	ldr	r2, [pc, #16]	; (80137f4 <udp_bind+0xdc>)
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80137e6:	2300      	movs	r3, #0
}
 80137e8:	4618      	mov	r0, r3
 80137ea:	3718      	adds	r7, #24
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}
 80137f0:	08017efc 	.word	0x08017efc
 80137f4:	2000ab4c 	.word	0x2000ab4c

080137f8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b086      	sub	sp, #24
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	60f8      	str	r0, [r7, #12]
 8013800:	60b9      	str	r1, [r7, #8]
 8013802:	4613      	mov	r3, r2
 8013804:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d002      	beq.n	8013812 <udp_connect+0x1a>
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d102      	bne.n	8013818 <udp_connect+0x20>
    return ERR_VAL;
 8013812:	f06f 0305 	mvn.w	r3, #5
 8013816:	e03e      	b.n	8013896 <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	8a5b      	ldrh	r3, [r3, #18]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d10f      	bne.n	8013840 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013820:	68f9      	ldr	r1, [r7, #12]
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	8a5b      	ldrh	r3, [r3, #18]
 8013826:	461a      	mov	r2, r3
 8013828:	68f8      	ldr	r0, [r7, #12]
 801382a:	f7ff ff75 	bl	8013718 <udp_bind>
 801382e:	4603      	mov	r3, r0
 8013830:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013832:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d002      	beq.n	8013840 <udp_connect+0x48>
      return err;
 801383a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801383e:	e02a      	b.n	8013896 <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013840:	68bb      	ldr	r3, [r7, #8]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d002      	beq.n	801384c <udp_connect+0x54>
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	e000      	b.n	801384e <udp_connect+0x56>
 801384c:	2300      	movs	r3, #0
 801384e:	68fa      	ldr	r2, [r7, #12]
 8013850:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	88fa      	ldrh	r2, [r7, #6]
 8013856:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	7c1b      	ldrb	r3, [r3, #16]
 801385c:	f043 0304 	orr.w	r3, r3, #4
 8013860:	b2da      	uxtb	r2, r3
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013866:	4b0e      	ldr	r3, [pc, #56]	; (80138a0 <udp_connect+0xa8>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	617b      	str	r3, [r7, #20]
 801386c:	e008      	b.n	8013880 <udp_connect+0x88>
    if (pcb == ipcb) {
 801386e:	68fa      	ldr	r2, [r7, #12]
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	429a      	cmp	r2, r3
 8013874:	d101      	bne.n	801387a <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 8013876:	2300      	movs	r3, #0
 8013878:	e00d      	b.n	8013896 <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	68db      	ldr	r3, [r3, #12]
 801387e:	617b      	str	r3, [r7, #20]
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d1f3      	bne.n	801386e <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013886:	4b06      	ldr	r3, [pc, #24]	; (80138a0 <udp_connect+0xa8>)
 8013888:	681a      	ldr	r2, [r3, #0]
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801388e:	4a04      	ldr	r2, [pc, #16]	; (80138a0 <udp_connect+0xa8>)
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013894:	2300      	movs	r3, #0
}
 8013896:	4618      	mov	r0, r3
 8013898:	3718      	adds	r7, #24
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}
 801389e:	bf00      	nop
 80138a0:	2000ab4c 	.word	0x2000ab4c

080138a4 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80138a4:	b480      	push	{r7}
 80138a6:	b083      	sub	sp, #12
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2200      	movs	r2, #0
 80138b0:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2200      	movs	r2, #0
 80138b6:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	7c1b      	ldrb	r3, [r3, #16]
 80138bc:	f023 0304 	bic.w	r3, r3, #4
 80138c0:	b2da      	uxtb	r2, r3
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	741a      	strb	r2, [r3, #16]
}
 80138c6:	bf00      	nop
 80138c8:	370c      	adds	r7, #12
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bc80      	pop	{r7}
 80138ce:	4770      	bx	lr

080138d0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80138d0:	b480      	push	{r7}
 80138d2:	b085      	sub	sp, #20
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	60f8      	str	r0, [r7, #12]
 80138d8:	60b9      	str	r1, [r7, #8]
 80138da:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	68ba      	ldr	r2, [r7, #8]
 80138e0:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	687a      	ldr	r2, [r7, #4]
 80138e6:	61da      	str	r2, [r3, #28]
}
 80138e8:	bf00      	nop
 80138ea:	3714      	adds	r7, #20
 80138ec:	46bd      	mov	sp, r7
 80138ee:	bc80      	pop	{r7}
 80138f0:	4770      	bx	lr
	...

080138f4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b084      	sub	sp, #16
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80138fc:	4b15      	ldr	r3, [pc, #84]	; (8013954 <udp_remove+0x60>)
 80138fe:	681a      	ldr	r2, [r3, #0]
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	429a      	cmp	r2, r3
 8013904:	d105      	bne.n	8013912 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013906:	4b13      	ldr	r3, [pc, #76]	; (8013954 <udp_remove+0x60>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	68db      	ldr	r3, [r3, #12]
 801390c:	4a11      	ldr	r2, [pc, #68]	; (8013954 <udp_remove+0x60>)
 801390e:	6013      	str	r3, [r2, #0]
 8013910:	e017      	b.n	8013942 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013912:	4b10      	ldr	r3, [pc, #64]	; (8013954 <udp_remove+0x60>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	60fb      	str	r3, [r7, #12]
 8013918:	e010      	b.n	801393c <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	68db      	ldr	r3, [r3, #12]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d009      	beq.n	8013936 <udp_remove+0x42>
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	68da      	ldr	r2, [r3, #12]
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	429a      	cmp	r2, r3
 801392a:	d104      	bne.n	8013936 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	68da      	ldr	r2, [r3, #12]
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	60da      	str	r2, [r3, #12]
        break;
 8013934:	e005      	b.n	8013942 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	60fb      	str	r3, [r7, #12]
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d1eb      	bne.n	801391a <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013942:	6879      	ldr	r1, [r7, #4]
 8013944:	2000      	movs	r0, #0
 8013946:	f7f9 f8d1 	bl	800caec <memp_free>
}
 801394a:	bf00      	nop
 801394c:	3710      	adds	r7, #16
 801394e:	46bd      	mov	sp, r7
 8013950:	bd80      	pop	{r7, pc}
 8013952:	bf00      	nop
 8013954:	2000ab4c 	.word	0x2000ab4c

08013958 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801395e:	2000      	movs	r0, #0
 8013960:	f7f9 f872 	bl	800ca48 <memp_malloc>
 8013964:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d007      	beq.n	801397c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801396c:	2220      	movs	r2, #32
 801396e:	2100      	movs	r1, #0
 8013970:	6878      	ldr	r0, [r7, #4]
 8013972:	f000 fb79 	bl	8014068 <memset>
    pcb->ttl = UDP_TTL;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	22ff      	movs	r2, #255	; 0xff
 801397a:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801397c:	687b      	ldr	r3, [r7, #4]
}
 801397e:	4618      	mov	r0, r3
 8013980:	3708      	adds	r7, #8
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}

08013986 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013986:	b580      	push	{r7, lr}
 8013988:	b084      	sub	sp, #16
 801398a:	af00      	add	r7, sp, #0
 801398c:	4603      	mov	r3, r0
 801398e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8013990:	f7ff ffe2 	bl	8013958 <udp_new>
 8013994:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013996:	68fb      	ldr	r3, [r7, #12]
}
 8013998:	4618      	mov	r0, r3
 801399a:	3710      	adds	r7, #16
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}

080139a0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80139a0:	b480      	push	{r7}
 80139a2:	b085      	sub	sp, #20
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
 80139a8:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d01e      	beq.n	80139ee <udp_netif_ip_addr_changed+0x4e>
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d01a      	beq.n	80139ee <udp_netif_ip_addr_changed+0x4e>
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d017      	beq.n	80139ee <udp_netif_ip_addr_changed+0x4e>
 80139be:	683b      	ldr	r3, [r7, #0]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d013      	beq.n	80139ee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80139c6:	4b0c      	ldr	r3, [pc, #48]	; (80139f8 <udp_netif_ip_addr_changed+0x58>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	60fb      	str	r3, [r7, #12]
 80139cc:	e00c      	b.n	80139e8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	681a      	ldr	r2, [r3, #0]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d103      	bne.n	80139e2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	681a      	ldr	r2, [r3, #0]
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	68db      	ldr	r3, [r3, #12]
 80139e6:	60fb      	str	r3, [r7, #12]
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d1ef      	bne.n	80139ce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80139ee:	bf00      	nop
 80139f0:	3714      	adds	r7, #20
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bc80      	pop	{r7}
 80139f6:	4770      	bx	lr
 80139f8:	2000ab4c 	.word	0x2000ab4c

080139fc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b086      	sub	sp, #24
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
 8013a04:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8013a06:	230e      	movs	r3, #14
 8013a08:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	895b      	ldrh	r3, [r3, #10]
 8013a0e:	2b0e      	cmp	r3, #14
 8013a10:	d977      	bls.n	8013b02 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	685b      	ldr	r3, [r3, #4]
 8013a16:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	7b1a      	ldrb	r2, [r3, #12]
 8013a1c:	7b5b      	ldrb	r3, [r3, #13]
 8013a1e:	021b      	lsls	r3, r3, #8
 8013a20:	4313      	orrs	r3, r2
 8013a22:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	781b      	ldrb	r3, [r3, #0]
 8013a28:	f003 0301 	and.w	r3, r3, #1
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d023      	beq.n	8013a78 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	781b      	ldrb	r3, [r3, #0]
 8013a34:	2b01      	cmp	r3, #1
 8013a36:	d10f      	bne.n	8013a58 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013a38:	693b      	ldr	r3, [r7, #16]
 8013a3a:	785b      	ldrb	r3, [r3, #1]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d11b      	bne.n	8013a78 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013a44:	2b5e      	cmp	r3, #94	; 0x5e
 8013a46:	d117      	bne.n	8013a78 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	7b5b      	ldrb	r3, [r3, #13]
 8013a4c:	f043 0310 	orr.w	r3, r3, #16
 8013a50:	b2da      	uxtb	r2, r3
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	735a      	strb	r2, [r3, #13]
 8013a56:	e00f      	b.n	8013a78 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013a58:	693b      	ldr	r3, [r7, #16]
 8013a5a:	2206      	movs	r2, #6
 8013a5c:	492f      	ldr	r1, [pc, #188]	; (8013b1c <ethernet_input+0x120>)
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f000 fae8 	bl	8014034 <memcmp>
 8013a64:	4603      	mov	r3, r0
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d106      	bne.n	8013a78 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	7b5b      	ldrb	r3, [r3, #13]
 8013a6e:	f043 0308 	orr.w	r3, r3, #8
 8013a72:	b2da      	uxtb	r2, r3
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013a78:	89fb      	ldrh	r3, [r7, #14]
 8013a7a:	2b08      	cmp	r3, #8
 8013a7c:	d003      	beq.n	8013a86 <ethernet_input+0x8a>
 8013a7e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013a82:	d01e      	beq.n	8013ac2 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013a84:	e042      	b.n	8013b0c <ethernet_input+0x110>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013a8c:	f003 0308 	and.w	r3, r3, #8
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d038      	beq.n	8013b06 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	895b      	ldrh	r3, [r3, #10]
 8013a98:	461a      	mov	r2, r3
 8013a9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	db34      	blt.n	8013b0c <ethernet_input+0x110>
 8013aa2:	8afb      	ldrh	r3, [r7, #22]
 8013aa4:	425b      	negs	r3, r3
 8013aa6:	b29b      	uxth	r3, r3
 8013aa8:	b21b      	sxth	r3, r3
 8013aaa:	4619      	mov	r1, r3
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f7f9 fdad 	bl	800d60c <pbuf_header>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d129      	bne.n	8013b0c <ethernet_input+0x110>
        ip4_input(p, netif);
 8013ab8:	6839      	ldr	r1, [r7, #0]
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f7f7 faaa 	bl	800b014 <ip4_input>
      break;
 8013ac0:	e01d      	b.n	8013afe <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013ac8:	f003 0308 	and.w	r3, r3, #8
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d01c      	beq.n	8013b0a <ethernet_input+0x10e>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	895b      	ldrh	r3, [r3, #10]
 8013ad4:	461a      	mov	r2, r3
 8013ad6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013ada:	429a      	cmp	r2, r3
 8013adc:	db16      	blt.n	8013b0c <ethernet_input+0x110>
 8013ade:	8afb      	ldrh	r3, [r7, #22]
 8013ae0:	425b      	negs	r3, r3
 8013ae2:	b29b      	uxth	r3, r3
 8013ae4:	b21b      	sxth	r3, r3
 8013ae6:	4619      	mov	r1, r3
 8013ae8:	6878      	ldr	r0, [r7, #4]
 8013aea:	f7f9 fd8f 	bl	800d60c <pbuf_header>
 8013aee:	4603      	mov	r3, r0
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d10b      	bne.n	8013b0c <ethernet_input+0x110>
        etharp_input(p, netif);
 8013af4:	6839      	ldr	r1, [r7, #0]
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f7f6 fc7c 	bl	800a3f4 <etharp_input>
      break;
 8013afc:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013afe:	2300      	movs	r3, #0
 8013b00:	e008      	b.n	8013b14 <ethernet_input+0x118>
    goto free_and_return;
 8013b02:	bf00      	nop
 8013b04:	e002      	b.n	8013b0c <ethernet_input+0x110>
        goto free_and_return;
 8013b06:	bf00      	nop
 8013b08:	e000      	b.n	8013b0c <ethernet_input+0x110>
        goto free_and_return;
 8013b0a:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f7f9 fda1 	bl	800d654 <pbuf_free>
  return ERR_OK;
 8013b12:	2300      	movs	r3, #0
}
 8013b14:	4618      	mov	r0, r3
 8013b16:	3718      	adds	r7, #24
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	bd80      	pop	{r7, pc}
 8013b1c:	08018010 	.word	0x08018010

08013b20 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b086      	sub	sp, #24
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	60f8      	str	r0, [r7, #12]
 8013b28:	60b9      	str	r1, [r7, #8]
 8013b2a:	607a      	str	r2, [r7, #4]
 8013b2c:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013b2e:	8c3b      	ldrh	r3, [r7, #32]
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7f6 f929 	bl	8009d88 <lwip_htons>
 8013b36:	4603      	mov	r3, r0
 8013b38:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8013b3a:	210e      	movs	r1, #14
 8013b3c:	68b8      	ldr	r0, [r7, #8]
 8013b3e:	f7f9 fd65 	bl	800d60c <pbuf_header>
 8013b42:	4603      	mov	r3, r0
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d125      	bne.n	8013b94 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	685b      	ldr	r3, [r3, #4]
 8013b4c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013b4e:	693b      	ldr	r3, [r7, #16]
 8013b50:	8afa      	ldrh	r2, [r7, #22]
 8013b52:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8013b54:	693b      	ldr	r3, [r7, #16]
 8013b56:	2206      	movs	r2, #6
 8013b58:	6839      	ldr	r1, [r7, #0]
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f000 fa79 	bl	8014052 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8013b60:	693b      	ldr	r3, [r7, #16]
 8013b62:	3306      	adds	r3, #6
 8013b64:	2206      	movs	r2, #6
 8013b66:	6879      	ldr	r1, [r7, #4]
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f000 fa72 	bl	8014052 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b74:	2b06      	cmp	r3, #6
 8013b76:	d006      	beq.n	8013b86 <ethernet_output+0x66>
 8013b78:	4b0a      	ldr	r3, [pc, #40]	; (8013ba4 <ethernet_output+0x84>)
 8013b7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013b7e:	490a      	ldr	r1, [pc, #40]	; (8013ba8 <ethernet_output+0x88>)
 8013b80:	480a      	ldr	r0, [pc, #40]	; (8013bac <ethernet_output+0x8c>)
 8013b82:	f000 faa7 	bl	80140d4 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	699b      	ldr	r3, [r3, #24]
 8013b8a:	68b9      	ldr	r1, [r7, #8]
 8013b8c:	68f8      	ldr	r0, [r7, #12]
 8013b8e:	4798      	blx	r3
 8013b90:	4603      	mov	r3, r0
 8013b92:	e002      	b.n	8013b9a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013b94:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013b96:	f06f 0301 	mvn.w	r3, #1
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3718      	adds	r7, #24
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}
 8013ba2:	bf00      	nop
 8013ba4:	08017e0c 	.word	0x08017e0c
 8013ba8:	08017e44 	.word	0x08017e44
 8013bac:	08017e78 	.word	0x08017e78

08013bb0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b086      	sub	sp, #24
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
 8013bb8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	60bb      	str	r3, [r7, #8]
 8013bbe:	2304      	movs	r3, #4
 8013bc0:	60fb      	str	r3, [r7, #12]
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	613b      	str	r3, [r7, #16]
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8013bca:	f107 0308 	add.w	r3, r7, #8
 8013bce:	2100      	movs	r1, #0
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7f0 fb3a 	bl	800424a <osMessageCreate>
 8013bd6:	4602      	mov	r2, r0
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d102      	bne.n	8013bea <sys_mbox_new+0x3a>
    return ERR_MEM;
 8013be4:	f04f 33ff 	mov.w	r3, #4294967295
 8013be8:	e000      	b.n	8013bec <sys_mbox_new+0x3c>

  return ERR_OK;
 8013bea:	2300      	movs	r3, #0
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	3718      	adds	r7, #24
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}

08013bf4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b082      	sub	sp, #8
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7f0 fbff 	bl	8004404 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7f0 fc10 	bl	8004430 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8013c10:	bf00      	nop
 8013c12:	3708      	adds	r7, #8
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}

08013c18 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
 8013c20:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8013c22:	bf00      	nop
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	6839      	ldr	r1, [r7, #0]
 8013c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7f0 fb34 	bl	800429c <osMessagePut>
 8013c34:	4603      	mov	r3, r0
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d1f4      	bne.n	8013c24 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8013c3a:	bf00      	nop
 8013c3c:	3708      	adds	r7, #8
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}

08013c42 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013c42:	b580      	push	{r7, lr}
 8013c44:	b084      	sub	sp, #16
 8013c46:	af00      	add	r7, sp, #0
 8013c48:	6078      	str	r0, [r7, #4]
 8013c4a:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	6839      	ldr	r1, [r7, #0]
 8013c52:	2200      	movs	r2, #0
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7f0 fb21 	bl	800429c <osMessagePut>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d102      	bne.n	8013c66 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8013c60:	2300      	movs	r3, #0
 8013c62:	73fb      	strb	r3, [r7, #15]
 8013c64:	e001      	b.n	8013c6a <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013c66:	23ff      	movs	r3, #255	; 0xff
 8013c68:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3710      	adds	r7, #16
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}

08013c76 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013c76:	b580      	push	{r7, lr}
 8013c78:	b08c      	sub	sp, #48	; 0x30
 8013c7a:	af00      	add	r7, sp, #0
 8013c7c:	61f8      	str	r0, [r7, #28]
 8013c7e:	61b9      	str	r1, [r7, #24]
 8013c80:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8013c82:	f7f0 f90b 	bl	8003e9c <osKernelSysTick>
 8013c86:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8013c88:	697b      	ldr	r3, [r7, #20]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d017      	beq.n	8013cbe <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8013c8e:	69fb      	ldr	r3, [r7, #28]
 8013c90:	6819      	ldr	r1, [r3, #0]
 8013c92:	f107 0320 	add.w	r3, r7, #32
 8013c96:	697a      	ldr	r2, [r7, #20]
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f7f0 fb3f 	bl	800431c <osMessageGet>

    if(event.status == osEventMessage)
 8013c9e:	6a3b      	ldr	r3, [r7, #32]
 8013ca0:	2b10      	cmp	r3, #16
 8013ca2:	d109      	bne.n	8013cb8 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8013ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca6:	461a      	mov	r2, r3
 8013ca8:	69bb      	ldr	r3, [r7, #24]
 8013caa:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8013cac:	f7f0 f8f6 	bl	8003e9c <osKernelSysTick>
 8013cb0:	4602      	mov	r2, r0
 8013cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb4:	1ad3      	subs	r3, r2, r3
 8013cb6:	e019      	b.n	8013cec <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8013cbc:	e016      	b.n	8013cec <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8013cbe:	69fb      	ldr	r3, [r7, #28]
 8013cc0:	6819      	ldr	r1, [r3, #0]
 8013cc2:	463b      	mov	r3, r7
 8013cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7f0 fb27 	bl	800431c <osMessageGet>
 8013cce:	f107 0320 	add.w	r3, r7, #32
 8013cd2:	463a      	mov	r2, r7
 8013cd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8013cd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8013cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cdc:	461a      	mov	r2, r3
 8013cde:	69bb      	ldr	r3, [r7, #24]
 8013ce0:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013ce2:	f7f0 f8db 	bl	8003e9c <osKernelSysTick>
 8013ce6:	4602      	mov	r2, r0
 8013ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cea:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3730      	adds	r7, #48	; 0x30
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}

08013cf4 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b086      	sub	sp, #24
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
 8013cfc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6819      	ldr	r1, [r3, #0]
 8013d02:	f107 030c 	add.w	r3, r7, #12
 8013d06:	2200      	movs	r2, #0
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f7f0 fb07 	bl	800431c <osMessageGet>

  if(event.status == osEventMessage)
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	2b10      	cmp	r3, #16
 8013d12:	d105      	bne.n	8013d20 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8013d14:	693b      	ldr	r3, [r7, #16]
 8013d16:	461a      	mov	r2, r3
 8013d18:	683b      	ldr	r3, [r7, #0]
 8013d1a:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	e001      	b.n	8013d24 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8013d20:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	3718      	adds	r7, #24
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}

08013d2c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013d2c:	b480      	push	{r7}
 8013d2e:	b083      	sub	sp, #12
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d101      	bne.n	8013d40 <sys_mbox_valid+0x14>
    return 0;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	e000      	b.n	8013d42 <sys_mbox_valid+0x16>
  else
    return 1;
 8013d40:	2301      	movs	r3, #1
}
 8013d42:	4618      	mov	r0, r3
 8013d44:	370c      	adds	r7, #12
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bc80      	pop	{r7}
 8013d4a:	4770      	bx	lr

08013d4c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8013d4c:	b480      	push	{r7}
 8013d4e:	b083      	sub	sp, #12
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2200      	movs	r2, #0
 8013d58:	601a      	str	r2, [r3, #0]
}
 8013d5a:	bf00      	nop
 8013d5c:	370c      	adds	r7, #12
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bc80      	pop	{r7}
 8013d62:	4770      	bx	lr

08013d64 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b084      	sub	sp, #16
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
 8013d6c:	460b      	mov	r3, r1
 8013d6e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8013d70:	2300      	movs	r3, #0
 8013d72:	60bb      	str	r3, [r7, #8]
 8013d74:	2300      	movs	r3, #0
 8013d76:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8013d78:	f107 0308 	add.w	r3, r7, #8
 8013d7c:	2101      	movs	r1, #1
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7f0 f998 	bl	80040b4 <osSemaphoreCreate>
 8013d84:	4602      	mov	r2, r0
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d102      	bne.n	8013d98 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013d92:	f04f 33ff 	mov.w	r3, #4294967295
 8013d96:	e009      	b.n	8013dac <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8013d98:	78fb      	ldrb	r3, [r7, #3]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d105      	bne.n	8013daa <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	2100      	movs	r1, #0
 8013da4:	4618      	mov	r0, r3
 8013da6:	f7f0 f9b9 	bl	800411c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8013daa:	2300      	movs	r3, #0
}
 8013dac:	4618      	mov	r0, r3
 8013dae:	3710      	adds	r7, #16
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}

08013db4 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b084      	sub	sp, #16
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
 8013dbc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8013dbe:	f7f0 f86d 	bl	8003e9c <osKernelSysTick>
 8013dc2:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d011      	beq.n	8013dee <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	6839      	ldr	r1, [r7, #0]
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f7f0 f9a3 	bl	800411c <osSemaphoreWait>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d105      	bne.n	8013de8 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8013ddc:	f7f0 f85e 	bl	8003e9c <osKernelSysTick>
 8013de0:	4602      	mov	r2, r0
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	1ad3      	subs	r3, r2, r3
 8013de6:	e012      	b.n	8013e0e <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013de8:	f04f 33ff 	mov.w	r3, #4294967295
 8013dec:	e00f      	b.n	8013e0e <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8013dee:	bf00      	nop
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	f04f 31ff 	mov.w	r1, #4294967295
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7f0 f98f 	bl	800411c <osSemaphoreWait>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d1f5      	bne.n	8013df0 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8013e04:	f7f0 f84a 	bl	8003e9c <osKernelSysTick>
 8013e08:	4602      	mov	r2, r0
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	3710      	adds	r7, #16
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}

08013e16 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8013e16:	b580      	push	{r7, lr}
 8013e18:	b082      	sub	sp, #8
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	4618      	mov	r0, r3
 8013e24:	f7f0 f9c8 	bl	80041b8 <osSemaphoreRelease>
}
 8013e28:	bf00      	nop
 8013e2a:	3708      	adds	r7, #8
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b082      	sub	sp, #8
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f7f0 f9f1 	bl	8004224 <osSemaphoreDelete>
}
 8013e42:	bf00      	nop
 8013e44:	3708      	adds	r7, #8
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}

08013e4a <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8013e4a:	b480      	push	{r7}
 8013e4c:	b083      	sub	sp, #12
 8013e4e:	af00      	add	r7, sp, #0
 8013e50:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d101      	bne.n	8013e5e <sys_sem_valid+0x14>
    return 0;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	e000      	b.n	8013e60 <sys_sem_valid+0x16>
  else
    return 1;
 8013e5e:	2301      	movs	r3, #1
}
 8013e60:	4618      	mov	r0, r3
 8013e62:	370c      	adds	r7, #12
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bc80      	pop	{r7}
 8013e68:	4770      	bx	lr

08013e6a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8013e6a:	b480      	push	{r7}
 8013e6c:	b083      	sub	sp, #12
 8013e6e:	af00      	add	r7, sp, #0
 8013e70:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2200      	movs	r2, #0
 8013e76:	601a      	str	r2, [r3, #0]
}
 8013e78:	bf00      	nop
 8013e7a:	370c      	adds	r7, #12
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bc80      	pop	{r7}
 8013e80:	4770      	bx	lr
	...

08013e84 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013e88:	4803      	ldr	r0, [pc, #12]	; (8013e98 <sys_init+0x14>)
 8013e8a:	f7f0 f877 	bl	8003f7c <osMutexCreate>
 8013e8e:	4602      	mov	r2, r0
 8013e90:	4b02      	ldr	r3, [pc, #8]	; (8013e9c <sys_init+0x18>)
 8013e92:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013e94:	bf00      	nop
 8013e96:	bd80      	pop	{r7, pc}
 8013e98:	08018020 	.word	0x08018020
 8013e9c:	2000ab54 	.word	0x2000ab54

08013ea0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b084      	sub	sp, #16
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	60bb      	str	r3, [r7, #8]
 8013eac:	2300      	movs	r3, #0
 8013eae:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8013eb0:	f107 0308 	add.w	r3, r7, #8
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7f0 f861 	bl	8003f7c <osMutexCreate>
 8013eba:	4602      	mov	r2, r0
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d102      	bne.n	8013ece <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8013ecc:	e000      	b.n	8013ed0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013ece:	2300      	movs	r3, #0
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3710      	adds	r7, #16
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b082      	sub	sp, #8
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7f0 f85f 	bl	8003fac <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8013eee:	bf00      	nop
 8013ef0:	3708      	adds	r7, #8
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	bd80      	pop	{r7, pc}

08013ef6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013ef6:	b580      	push	{r7, lr}
 8013ef8:	b082      	sub	sp, #8
 8013efa:	af00      	add	r7, sp, #0
 8013efc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7f0 f8a0 	bl	8004048 <osMutexRelease>
}
 8013f08:	bf00      	nop
 8013f0a:	3708      	adds	r7, #8
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}

08013f10 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b08c      	sub	sp, #48	; 0x30
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	60f8      	str	r0, [r7, #12]
 8013f18:	60b9      	str	r1, [r7, #8]
 8013f1a:	607a      	str	r2, [r7, #4]
 8013f1c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8013f1e:	f107 0314 	add.w	r3, r7, #20
 8013f22:	2200      	movs	r2, #0
 8013f24:	601a      	str	r2, [r3, #0]
 8013f26:	605a      	str	r2, [r3, #4]
 8013f28:	609a      	str	r2, [r3, #8]
 8013f2a:	60da      	str	r2, [r3, #12]
 8013f2c:	611a      	str	r2, [r3, #16]
 8013f2e:	615a      	str	r2, [r3, #20]
 8013f30:	619a      	str	r2, [r3, #24]
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	617b      	str	r3, [r7, #20]
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	61bb      	str	r3, [r7, #24]
 8013f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f3c:	b21b      	sxth	r3, r3
 8013f3e:	83bb      	strh	r3, [r7, #28]
 8013f40:	683b      	ldr	r3, [r7, #0]
 8013f42:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8013f44:	f107 0314 	add.w	r3, r7, #20
 8013f48:	6879      	ldr	r1, [r7, #4]
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f7ef ffb6 	bl	8003ebc <osThreadCreate>
 8013f50:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8013f52:	4618      	mov	r0, r3
 8013f54:	3730      	adds	r7, #48	; 0x30
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bd80      	pop	{r7, pc}
	...

08013f5c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8013f60:	4b04      	ldr	r3, [pc, #16]	; (8013f74 <sys_arch_protect+0x18>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	f04f 31ff 	mov.w	r1, #4294967295
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f7f0 f81f 	bl	8003fac <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8013f6e:	2301      	movs	r3, #1
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	bd80      	pop	{r7, pc}
 8013f74:	2000ab54 	.word	0x2000ab54

08013f78 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b082      	sub	sp, #8
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013f80:	4b04      	ldr	r3, [pc, #16]	; (8013f94 <sys_arch_unprotect+0x1c>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7f0 f85f 	bl	8004048 <osMutexRelease>
}
 8013f8a:	bf00      	nop
 8013f8c:	3708      	adds	r7, #8
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	bd80      	pop	{r7, pc}
 8013f92:	bf00      	nop
 8013f94:	2000ab54 	.word	0x2000ab54

08013f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8013f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013fd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8013f9c:	480d      	ldr	r0, [pc, #52]	; (8013fd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8013f9e:	490e      	ldr	r1, [pc, #56]	; (8013fd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8013fa0:	4a0e      	ldr	r2, [pc, #56]	; (8013fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8013fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8013fa4:	e002      	b.n	8013fac <LoopCopyDataInit>

08013fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8013fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013faa:	3304      	adds	r3, #4

08013fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8013fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8013fb0:	d3f9      	bcc.n	8013fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8013fb2:	4a0b      	ldr	r2, [pc, #44]	; (8013fe0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8013fb4:	4c0b      	ldr	r4, [pc, #44]	; (8013fe4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8013fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8013fb8:	e001      	b.n	8013fbe <LoopFillZerobss>

08013fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8013fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013fbc:	3204      	adds	r2, #4

08013fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8013fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8013fc0:	d3fb      	bcc.n	8013fba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8013fc2:	f7ec fded 	bl	8000ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8013fc6:	f000 f811 	bl	8013fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013fca:	f7ec faa1 	bl	8000510 <main>
  bx  lr
 8013fce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8013fd0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8013fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8013fd8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8013fdc:	0801876c 	.word	0x0801876c
  ldr r2, =_sbss
 8013fe0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8013fe4:	2000ab58 	.word	0x2000ab58

08013fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013fe8:	e7fe      	b.n	8013fe8 <ADC_IRQHandler>
	...

08013fec <__libc_init_array>:
 8013fec:	b570      	push	{r4, r5, r6, lr}
 8013fee:	2500      	movs	r5, #0
 8013ff0:	4e0c      	ldr	r6, [pc, #48]	; (8014024 <__libc_init_array+0x38>)
 8013ff2:	4c0d      	ldr	r4, [pc, #52]	; (8014028 <__libc_init_array+0x3c>)
 8013ff4:	1ba4      	subs	r4, r4, r6
 8013ff6:	10a4      	asrs	r4, r4, #2
 8013ff8:	42a5      	cmp	r5, r4
 8013ffa:	d109      	bne.n	8014010 <__libc_init_array+0x24>
 8013ffc:	f001 fa08 	bl	8015410 <_init>
 8014000:	2500      	movs	r5, #0
 8014002:	4e0a      	ldr	r6, [pc, #40]	; (801402c <__libc_init_array+0x40>)
 8014004:	4c0a      	ldr	r4, [pc, #40]	; (8014030 <__libc_init_array+0x44>)
 8014006:	1ba4      	subs	r4, r4, r6
 8014008:	10a4      	asrs	r4, r4, #2
 801400a:	42a5      	cmp	r5, r4
 801400c:	d105      	bne.n	801401a <__libc_init_array+0x2e>
 801400e:	bd70      	pop	{r4, r5, r6, pc}
 8014010:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014014:	4798      	blx	r3
 8014016:	3501      	adds	r5, #1
 8014018:	e7ee      	b.n	8013ff8 <__libc_init_array+0xc>
 801401a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801401e:	4798      	blx	r3
 8014020:	3501      	adds	r5, #1
 8014022:	e7f2      	b.n	801400a <__libc_init_array+0x1e>
 8014024:	08018764 	.word	0x08018764
 8014028:	08018764 	.word	0x08018764
 801402c:	08018764 	.word	0x08018764
 8014030:	08018768 	.word	0x08018768

08014034 <memcmp>:
 8014034:	b510      	push	{r4, lr}
 8014036:	3901      	subs	r1, #1
 8014038:	4402      	add	r2, r0
 801403a:	4290      	cmp	r0, r2
 801403c:	d101      	bne.n	8014042 <memcmp+0xe>
 801403e:	2000      	movs	r0, #0
 8014040:	bd10      	pop	{r4, pc}
 8014042:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014046:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801404a:	42a3      	cmp	r3, r4
 801404c:	d0f5      	beq.n	801403a <memcmp+0x6>
 801404e:	1b18      	subs	r0, r3, r4
 8014050:	bd10      	pop	{r4, pc}

08014052 <memcpy>:
 8014052:	b510      	push	{r4, lr}
 8014054:	1e43      	subs	r3, r0, #1
 8014056:	440a      	add	r2, r1
 8014058:	4291      	cmp	r1, r2
 801405a:	d100      	bne.n	801405e <memcpy+0xc>
 801405c:	bd10      	pop	{r4, pc}
 801405e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014066:	e7f7      	b.n	8014058 <memcpy+0x6>

08014068 <memset>:
 8014068:	4603      	mov	r3, r0
 801406a:	4402      	add	r2, r0
 801406c:	4293      	cmp	r3, r2
 801406e:	d100      	bne.n	8014072 <memset+0xa>
 8014070:	4770      	bx	lr
 8014072:	f803 1b01 	strb.w	r1, [r3], #1
 8014076:	e7f9      	b.n	801406c <memset+0x4>

08014078 <_perror_r>:
 8014078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801407a:	460d      	mov	r5, r1
 801407c:	4604      	mov	r4, r0
 801407e:	b118      	cbz	r0, 8014088 <_perror_r+0x10>
 8014080:	6983      	ldr	r3, [r0, #24]
 8014082:	b90b      	cbnz	r3, 8014088 <_perror_r+0x10>
 8014084:	f000 fa66 	bl	8014554 <__sinit>
 8014088:	b14d      	cbz	r5, 801409e <_perror_r+0x26>
 801408a:	782b      	ldrb	r3, [r5, #0]
 801408c:	b13b      	cbz	r3, 801409e <_perror_r+0x26>
 801408e:	68e1      	ldr	r1, [r4, #12]
 8014090:	4628      	mov	r0, r5
 8014092:	f000 fb3f 	bl	8014714 <fputs>
 8014096:	68e1      	ldr	r1, [r4, #12]
 8014098:	4809      	ldr	r0, [pc, #36]	; (80140c0 <_perror_r+0x48>)
 801409a:	f000 fb3b 	bl	8014714 <fputs>
 801409e:	ab01      	add	r3, sp, #4
 80140a0:	2201      	movs	r2, #1
 80140a2:	6821      	ldr	r1, [r4, #0]
 80140a4:	4620      	mov	r0, r4
 80140a6:	f000 f82d 	bl	8014104 <_strerror_r>
 80140aa:	b110      	cbz	r0, 80140b2 <_perror_r+0x3a>
 80140ac:	68e1      	ldr	r1, [r4, #12]
 80140ae:	f000 fb31 	bl	8014714 <fputs>
 80140b2:	68e1      	ldr	r1, [r4, #12]
 80140b4:	200a      	movs	r0, #10
 80140b6:	f000 fadd 	bl	8014674 <fputc>
 80140ba:	b003      	add	sp, #12
 80140bc:	bd30      	pop	{r4, r5, pc}
 80140be:	bf00      	nop
 80140c0:	08018028 	.word	0x08018028

080140c4 <perror>:
 80140c4:	4b02      	ldr	r3, [pc, #8]	; (80140d0 <perror+0xc>)
 80140c6:	4601      	mov	r1, r0
 80140c8:	6818      	ldr	r0, [r3, #0]
 80140ca:	f7ff bfd5 	b.w	8014078 <_perror_r>
 80140ce:	bf00      	nop
 80140d0:	2000001c 	.word	0x2000001c

080140d4 <iprintf>:
 80140d4:	b40f      	push	{r0, r1, r2, r3}
 80140d6:	4b0a      	ldr	r3, [pc, #40]	; (8014100 <iprintf+0x2c>)
 80140d8:	b513      	push	{r0, r1, r4, lr}
 80140da:	681c      	ldr	r4, [r3, #0]
 80140dc:	b124      	cbz	r4, 80140e8 <iprintf+0x14>
 80140de:	69a3      	ldr	r3, [r4, #24]
 80140e0:	b913      	cbnz	r3, 80140e8 <iprintf+0x14>
 80140e2:	4620      	mov	r0, r4
 80140e4:	f000 fa36 	bl	8014554 <__sinit>
 80140e8:	ab05      	add	r3, sp, #20
 80140ea:	9a04      	ldr	r2, [sp, #16]
 80140ec:	68a1      	ldr	r1, [r4, #8]
 80140ee:	4620      	mov	r0, r4
 80140f0:	9301      	str	r3, [sp, #4]
 80140f2:	f000 fbbb 	bl	801486c <_vfiprintf_r>
 80140f6:	b002      	add	sp, #8
 80140f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140fc:	b004      	add	sp, #16
 80140fe:	4770      	bx	lr
 8014100:	2000001c 	.word	0x2000001c

08014104 <_strerror_r>:
 8014104:	b510      	push	{r4, lr}
 8014106:	4604      	mov	r4, r0
 8014108:	4608      	mov	r0, r1
 801410a:	4611      	mov	r1, r2
 801410c:	288e      	cmp	r0, #142	; 0x8e
 801410e:	f200 812f 	bhi.w	8014370 <_strerror_r+0x26c>
 8014112:	e8df f010 	tbh	[pc, r0, lsl #1]
 8014116:	0138      	.short	0x0138
 8014118:	0091008f 	.word	0x0091008f
 801411c:	00950093 	.word	0x00950093
 8014120:	00990097 	.word	0x00990097
 8014124:	009d009b 	.word	0x009d009b
 8014128:	00a300a1 	.word	0x00a300a1
 801412c:	00a900a7 	.word	0x00a900a7
 8014130:	00ad00ab 	.word	0x00ad00ab
 8014134:	00af012d 	.word	0x00af012d
 8014138:	00b300b1 	.word	0x00b300b1
 801413c:	00b700b5 	.word	0x00b700b5
 8014140:	00bf00bd 	.word	0x00bf00bd
 8014144:	00c700c5 	.word	0x00c700c5
 8014148:	00cb00c9 	.word	0x00cb00c9
 801414c:	00d100cd 	.word	0x00d100cd
 8014150:	00d700d5 	.word	0x00d700d5
 8014154:	00db00d9 	.word	0x00db00d9
 8014158:	00df00dd 	.word	0x00df00dd
 801415c:	00e300e1 	.word	0x00e300e1
 8014160:	012d012d 	.word	0x012d012d
 8014164:	012d012d 	.word	0x012d012d
 8014168:	012d012d 	.word	0x012d012d
 801416c:	012d012d 	.word	0x012d012d
 8014170:	00eb00e7 	.word	0x00eb00e7
 8014174:	012d012d 	.word	0x012d012d
 8014178:	012d012d 	.word	0x012d012d
 801417c:	012d012d 	.word	0x012d012d
 8014180:	012d012d 	.word	0x012d012d
 8014184:	012d012d 	.word	0x012d012d
 8014188:	012d012d 	.word	0x012d012d
 801418c:	00ed012d 	.word	0x00ed012d
 8014190:	00ef0107 	.word	0x00ef0107
 8014194:	012d00f1 	.word	0x012d00f1
 8014198:	012d012d 	.word	0x012d012d
 801419c:	012d00f3 	.word	0x012d00f3
 80141a0:	012d012d 	.word	0x012d012d
 80141a4:	012d00f5 	.word	0x012d00f5
 80141a8:	00f9012d 	.word	0x00f9012d
 80141ac:	012d012d 	.word	0x012d012d
 80141b0:	012d00fb 	.word	0x012d00fb
 80141b4:	012d012d 	.word	0x012d012d
 80141b8:	012d012d 	.word	0x012d012d
 80141bc:	012d012d 	.word	0x012d012d
 80141c0:	012d012d 	.word	0x012d012d
 80141c4:	00fd012d 	.word	0x00fd012d
 80141c8:	00ff012d 	.word	0x00ff012d
 80141cc:	01030101 	.word	0x01030101
 80141d0:	012d012d 	.word	0x012d012d
 80141d4:	012d0125 	.word	0x012d0125
 80141d8:	012d012d 	.word	0x012d012d
 80141dc:	012d012d 	.word	0x012d012d
 80141e0:	012d012d 	.word	0x012d012d
 80141e4:	0113012d 	.word	0x0113012d
 80141e8:	01090105 	.word	0x01090105
 80141ec:	010d010b 	.word	0x010d010b
 80141f0:	012d010f 	.word	0x012d010f
 80141f4:	01150111 	.word	0x01150111
 80141f8:	00e90119 	.word	0x00e90119
 80141fc:	012b00c1 	.word	0x012b00c1
 8014200:	00cf00b9 	.word	0x00cf00b9
 8014204:	009f00bb 	.word	0x009f00bb
 8014208:	012900a5 	.word	0x012900a5
 801420c:	012d00f7 	.word	0x012d00f7
 8014210:	00c30117 	.word	0x00c30117
 8014214:	011b011d 	.word	0x011b011d
 8014218:	012d012d 	.word	0x012d012d
 801421c:	012d012d 	.word	0x012d012d
 8014220:	00d3012d 	.word	0x00d3012d
 8014224:	012d012d 	.word	0x012d012d
 8014228:	00e5012d 	.word	0x00e5012d
 801422c:	011f0127 	.word	0x011f0127
 8014230:	01230121 	.word	0x01230121
 8014234:	4855      	ldr	r0, [pc, #340]	; (801438c <_strerror_r+0x288>)
 8014236:	bd10      	pop	{r4, pc}
 8014238:	4855      	ldr	r0, [pc, #340]	; (8014390 <_strerror_r+0x28c>)
 801423a:	bd10      	pop	{r4, pc}
 801423c:	4855      	ldr	r0, [pc, #340]	; (8014394 <_strerror_r+0x290>)
 801423e:	bd10      	pop	{r4, pc}
 8014240:	4855      	ldr	r0, [pc, #340]	; (8014398 <_strerror_r+0x294>)
 8014242:	bd10      	pop	{r4, pc}
 8014244:	4855      	ldr	r0, [pc, #340]	; (801439c <_strerror_r+0x298>)
 8014246:	bd10      	pop	{r4, pc}
 8014248:	4855      	ldr	r0, [pc, #340]	; (80143a0 <_strerror_r+0x29c>)
 801424a:	bd10      	pop	{r4, pc}
 801424c:	4855      	ldr	r0, [pc, #340]	; (80143a4 <_strerror_r+0x2a0>)
 801424e:	bd10      	pop	{r4, pc}
 8014250:	4855      	ldr	r0, [pc, #340]	; (80143a8 <_strerror_r+0x2a4>)
 8014252:	bd10      	pop	{r4, pc}
 8014254:	4855      	ldr	r0, [pc, #340]	; (80143ac <_strerror_r+0x2a8>)
 8014256:	bd10      	pop	{r4, pc}
 8014258:	4855      	ldr	r0, [pc, #340]	; (80143b0 <_strerror_r+0x2ac>)
 801425a:	bd10      	pop	{r4, pc}
 801425c:	4855      	ldr	r0, [pc, #340]	; (80143b4 <_strerror_r+0x2b0>)
 801425e:	bd10      	pop	{r4, pc}
 8014260:	4855      	ldr	r0, [pc, #340]	; (80143b8 <_strerror_r+0x2b4>)
 8014262:	bd10      	pop	{r4, pc}
 8014264:	4855      	ldr	r0, [pc, #340]	; (80143bc <_strerror_r+0x2b8>)
 8014266:	bd10      	pop	{r4, pc}
 8014268:	4855      	ldr	r0, [pc, #340]	; (80143c0 <_strerror_r+0x2bc>)
 801426a:	bd10      	pop	{r4, pc}
 801426c:	4855      	ldr	r0, [pc, #340]	; (80143c4 <_strerror_r+0x2c0>)
 801426e:	bd10      	pop	{r4, pc}
 8014270:	4855      	ldr	r0, [pc, #340]	; (80143c8 <_strerror_r+0x2c4>)
 8014272:	bd10      	pop	{r4, pc}
 8014274:	4855      	ldr	r0, [pc, #340]	; (80143cc <_strerror_r+0x2c8>)
 8014276:	bd10      	pop	{r4, pc}
 8014278:	4855      	ldr	r0, [pc, #340]	; (80143d0 <_strerror_r+0x2cc>)
 801427a:	bd10      	pop	{r4, pc}
 801427c:	4855      	ldr	r0, [pc, #340]	; (80143d4 <_strerror_r+0x2d0>)
 801427e:	bd10      	pop	{r4, pc}
 8014280:	4855      	ldr	r0, [pc, #340]	; (80143d8 <_strerror_r+0x2d4>)
 8014282:	bd10      	pop	{r4, pc}
 8014284:	4855      	ldr	r0, [pc, #340]	; (80143dc <_strerror_r+0x2d8>)
 8014286:	bd10      	pop	{r4, pc}
 8014288:	4855      	ldr	r0, [pc, #340]	; (80143e0 <_strerror_r+0x2dc>)
 801428a:	bd10      	pop	{r4, pc}
 801428c:	4855      	ldr	r0, [pc, #340]	; (80143e4 <_strerror_r+0x2e0>)
 801428e:	bd10      	pop	{r4, pc}
 8014290:	4855      	ldr	r0, [pc, #340]	; (80143e8 <_strerror_r+0x2e4>)
 8014292:	bd10      	pop	{r4, pc}
 8014294:	4855      	ldr	r0, [pc, #340]	; (80143ec <_strerror_r+0x2e8>)
 8014296:	bd10      	pop	{r4, pc}
 8014298:	4855      	ldr	r0, [pc, #340]	; (80143f0 <_strerror_r+0x2ec>)
 801429a:	bd10      	pop	{r4, pc}
 801429c:	4855      	ldr	r0, [pc, #340]	; (80143f4 <_strerror_r+0x2f0>)
 801429e:	bd10      	pop	{r4, pc}
 80142a0:	4855      	ldr	r0, [pc, #340]	; (80143f8 <_strerror_r+0x2f4>)
 80142a2:	bd10      	pop	{r4, pc}
 80142a4:	4855      	ldr	r0, [pc, #340]	; (80143fc <_strerror_r+0x2f8>)
 80142a6:	bd10      	pop	{r4, pc}
 80142a8:	4855      	ldr	r0, [pc, #340]	; (8014400 <_strerror_r+0x2fc>)
 80142aa:	bd10      	pop	{r4, pc}
 80142ac:	4855      	ldr	r0, [pc, #340]	; (8014404 <_strerror_r+0x300>)
 80142ae:	bd10      	pop	{r4, pc}
 80142b0:	4855      	ldr	r0, [pc, #340]	; (8014408 <_strerror_r+0x304>)
 80142b2:	bd10      	pop	{r4, pc}
 80142b4:	4855      	ldr	r0, [pc, #340]	; (801440c <_strerror_r+0x308>)
 80142b6:	bd10      	pop	{r4, pc}
 80142b8:	4855      	ldr	r0, [pc, #340]	; (8014410 <_strerror_r+0x30c>)
 80142ba:	bd10      	pop	{r4, pc}
 80142bc:	4855      	ldr	r0, [pc, #340]	; (8014414 <_strerror_r+0x310>)
 80142be:	bd10      	pop	{r4, pc}
 80142c0:	4855      	ldr	r0, [pc, #340]	; (8014418 <_strerror_r+0x314>)
 80142c2:	bd10      	pop	{r4, pc}
 80142c4:	4855      	ldr	r0, [pc, #340]	; (801441c <_strerror_r+0x318>)
 80142c6:	bd10      	pop	{r4, pc}
 80142c8:	4855      	ldr	r0, [pc, #340]	; (8014420 <_strerror_r+0x31c>)
 80142ca:	bd10      	pop	{r4, pc}
 80142cc:	4855      	ldr	r0, [pc, #340]	; (8014424 <_strerror_r+0x320>)
 80142ce:	bd10      	pop	{r4, pc}
 80142d0:	4855      	ldr	r0, [pc, #340]	; (8014428 <_strerror_r+0x324>)
 80142d2:	bd10      	pop	{r4, pc}
 80142d4:	4855      	ldr	r0, [pc, #340]	; (801442c <_strerror_r+0x328>)
 80142d6:	bd10      	pop	{r4, pc}
 80142d8:	4855      	ldr	r0, [pc, #340]	; (8014430 <_strerror_r+0x32c>)
 80142da:	bd10      	pop	{r4, pc}
 80142dc:	4855      	ldr	r0, [pc, #340]	; (8014434 <_strerror_r+0x330>)
 80142de:	bd10      	pop	{r4, pc}
 80142e0:	4855      	ldr	r0, [pc, #340]	; (8014438 <_strerror_r+0x334>)
 80142e2:	bd10      	pop	{r4, pc}
 80142e4:	4855      	ldr	r0, [pc, #340]	; (801443c <_strerror_r+0x338>)
 80142e6:	bd10      	pop	{r4, pc}
 80142e8:	4855      	ldr	r0, [pc, #340]	; (8014440 <_strerror_r+0x33c>)
 80142ea:	bd10      	pop	{r4, pc}
 80142ec:	4855      	ldr	r0, [pc, #340]	; (8014444 <_strerror_r+0x340>)
 80142ee:	bd10      	pop	{r4, pc}
 80142f0:	4855      	ldr	r0, [pc, #340]	; (8014448 <_strerror_r+0x344>)
 80142f2:	bd10      	pop	{r4, pc}
 80142f4:	4855      	ldr	r0, [pc, #340]	; (801444c <_strerror_r+0x348>)
 80142f6:	bd10      	pop	{r4, pc}
 80142f8:	4855      	ldr	r0, [pc, #340]	; (8014450 <_strerror_r+0x34c>)
 80142fa:	bd10      	pop	{r4, pc}
 80142fc:	4855      	ldr	r0, [pc, #340]	; (8014454 <_strerror_r+0x350>)
 80142fe:	bd10      	pop	{r4, pc}
 8014300:	4855      	ldr	r0, [pc, #340]	; (8014458 <_strerror_r+0x354>)
 8014302:	bd10      	pop	{r4, pc}
 8014304:	4855      	ldr	r0, [pc, #340]	; (801445c <_strerror_r+0x358>)
 8014306:	bd10      	pop	{r4, pc}
 8014308:	4855      	ldr	r0, [pc, #340]	; (8014460 <_strerror_r+0x35c>)
 801430a:	bd10      	pop	{r4, pc}
 801430c:	4855      	ldr	r0, [pc, #340]	; (8014464 <_strerror_r+0x360>)
 801430e:	bd10      	pop	{r4, pc}
 8014310:	4855      	ldr	r0, [pc, #340]	; (8014468 <_strerror_r+0x364>)
 8014312:	bd10      	pop	{r4, pc}
 8014314:	4855      	ldr	r0, [pc, #340]	; (801446c <_strerror_r+0x368>)
 8014316:	bd10      	pop	{r4, pc}
 8014318:	4855      	ldr	r0, [pc, #340]	; (8014470 <_strerror_r+0x36c>)
 801431a:	bd10      	pop	{r4, pc}
 801431c:	4855      	ldr	r0, [pc, #340]	; (8014474 <_strerror_r+0x370>)
 801431e:	bd10      	pop	{r4, pc}
 8014320:	4855      	ldr	r0, [pc, #340]	; (8014478 <_strerror_r+0x374>)
 8014322:	bd10      	pop	{r4, pc}
 8014324:	4855      	ldr	r0, [pc, #340]	; (801447c <_strerror_r+0x378>)
 8014326:	bd10      	pop	{r4, pc}
 8014328:	4855      	ldr	r0, [pc, #340]	; (8014480 <_strerror_r+0x37c>)
 801432a:	bd10      	pop	{r4, pc}
 801432c:	4855      	ldr	r0, [pc, #340]	; (8014484 <_strerror_r+0x380>)
 801432e:	bd10      	pop	{r4, pc}
 8014330:	4855      	ldr	r0, [pc, #340]	; (8014488 <_strerror_r+0x384>)
 8014332:	bd10      	pop	{r4, pc}
 8014334:	4855      	ldr	r0, [pc, #340]	; (801448c <_strerror_r+0x388>)
 8014336:	bd10      	pop	{r4, pc}
 8014338:	4855      	ldr	r0, [pc, #340]	; (8014490 <_strerror_r+0x38c>)
 801433a:	bd10      	pop	{r4, pc}
 801433c:	4855      	ldr	r0, [pc, #340]	; (8014494 <_strerror_r+0x390>)
 801433e:	bd10      	pop	{r4, pc}
 8014340:	4855      	ldr	r0, [pc, #340]	; (8014498 <_strerror_r+0x394>)
 8014342:	bd10      	pop	{r4, pc}
 8014344:	4855      	ldr	r0, [pc, #340]	; (801449c <_strerror_r+0x398>)
 8014346:	bd10      	pop	{r4, pc}
 8014348:	4855      	ldr	r0, [pc, #340]	; (80144a0 <_strerror_r+0x39c>)
 801434a:	bd10      	pop	{r4, pc}
 801434c:	4855      	ldr	r0, [pc, #340]	; (80144a4 <_strerror_r+0x3a0>)
 801434e:	bd10      	pop	{r4, pc}
 8014350:	4855      	ldr	r0, [pc, #340]	; (80144a8 <_strerror_r+0x3a4>)
 8014352:	bd10      	pop	{r4, pc}
 8014354:	4855      	ldr	r0, [pc, #340]	; (80144ac <_strerror_r+0x3a8>)
 8014356:	bd10      	pop	{r4, pc}
 8014358:	4855      	ldr	r0, [pc, #340]	; (80144b0 <_strerror_r+0x3ac>)
 801435a:	bd10      	pop	{r4, pc}
 801435c:	4855      	ldr	r0, [pc, #340]	; (80144b4 <_strerror_r+0x3b0>)
 801435e:	bd10      	pop	{r4, pc}
 8014360:	4855      	ldr	r0, [pc, #340]	; (80144b8 <_strerror_r+0x3b4>)
 8014362:	bd10      	pop	{r4, pc}
 8014364:	4855      	ldr	r0, [pc, #340]	; (80144bc <_strerror_r+0x3b8>)
 8014366:	bd10      	pop	{r4, pc}
 8014368:	4855      	ldr	r0, [pc, #340]	; (80144c0 <_strerror_r+0x3bc>)
 801436a:	bd10      	pop	{r4, pc}
 801436c:	4855      	ldr	r0, [pc, #340]	; (80144c4 <_strerror_r+0x3c0>)
 801436e:	bd10      	pop	{r4, pc}
 8014370:	2b00      	cmp	r3, #0
 8014372:	bf14      	ite	ne
 8014374:	461a      	movne	r2, r3
 8014376:	4622      	moveq	r2, r4
 8014378:	f000 f8aa 	bl	80144d0 <_user_strerror>
 801437c:	4b52      	ldr	r3, [pc, #328]	; (80144c8 <_strerror_r+0x3c4>)
 801437e:	2800      	cmp	r0, #0
 8014380:	bf08      	it	eq
 8014382:	4618      	moveq	r0, r3
 8014384:	bd10      	pop	{r4, pc}
 8014386:	4851      	ldr	r0, [pc, #324]	; (80144cc <_strerror_r+0x3c8>)
 8014388:	bd10      	pop	{r4, pc}
 801438a:	bf00      	nop
 801438c:	08018033 	.word	0x08018033
 8014390:	0801803d 	.word	0x0801803d
 8014394:	08018057 	.word	0x08018057
 8014398:	08018067 	.word	0x08018067
 801439c:	0801807f 	.word	0x0801807f
 80143a0:	08018089 	.word	0x08018089
 80143a4:	080180a3 	.word	0x080180a3
 80143a8:	080180b5 	.word	0x080180b5
 80143ac:	080180c7 	.word	0x080180c7
 80143b0:	080180e0 	.word	0x080180e0
 80143b4:	080180f0 	.word	0x080180f0
 80143b8:	080180fc 	.word	0x080180fc
 80143bc:	08018119 	.word	0x08018119
 80143c0:	0801812b 	.word	0x0801812b
 80143c4:	0801813c 	.word	0x0801813c
 80143c8:	0801814e 	.word	0x0801814e
 80143cc:	0801815a 	.word	0x0801815a
 80143d0:	08018172 	.word	0x08018172
 80143d4:	0801817e 	.word	0x0801817e
 80143d8:	08018190 	.word	0x08018190
 80143dc:	0801819f 	.word	0x0801819f
 80143e0:	080181af 	.word	0x080181af
 80143e4:	080181bc 	.word	0x080181bc
 80143e8:	080181db 	.word	0x080181db
 80143ec:	080181ea 	.word	0x080181ea
 80143f0:	080181fb 	.word	0x080181fb
 80143f4:	0801821f 	.word	0x0801821f
 80143f8:	0801823d 	.word	0x0801823d
 80143fc:	0801825b 	.word	0x0801825b
 8014400:	0801827b 	.word	0x0801827b
 8014404:	08018292 	.word	0x08018292
 8014408:	080182a1 	.word	0x080182a1
 801440c:	080182b0 	.word	0x080182b0
 8014410:	080182c4 	.word	0x080182c4
 8014414:	080182dc 	.word	0x080182dc
 8014418:	080182ea 	.word	0x080182ea
 801441c:	080182f7 	.word	0x080182f7
 8014420:	0801830d 	.word	0x0801830d
 8014424:	0801831c 	.word	0x0801831c
 8014428:	08018328 	.word	0x08018328
 801442c:	08018357 	.word	0x08018357
 8014430:	08018368 	.word	0x08018368
 8014434:	08018383 	.word	0x08018383
 8014438:	08018396 	.word	0x08018396
 801443c:	080183ac 	.word	0x080183ac
 8014440:	080183b5 	.word	0x080183b5
 8014444:	080183cc 	.word	0x080183cc
 8014448:	080183d4 	.word	0x080183d4
 801444c:	080183e1 	.word	0x080183e1
 8014450:	080183f6 	.word	0x080183f6
 8014454:	0801840a 	.word	0x0801840a
 8014458:	08018422 	.word	0x08018422
 801445c:	08018431 	.word	0x08018431
 8014460:	08018442 	.word	0x08018442
 8014464:	08018455 	.word	0x08018455
 8014468:	08018461 	.word	0x08018461
 801446c:	0801847a 	.word	0x0801847a
 8014470:	0801848e 	.word	0x0801848e
 8014474:	080184a9 	.word	0x080184a9
 8014478:	080184c1 	.word	0x080184c1
 801447c:	080184db 	.word	0x080184db
 8014480:	080184e3 	.word	0x080184e3
 8014484:	08018513 	.word	0x08018513
 8014488:	08018532 	.word	0x08018532
 801448c:	08018551 	.word	0x08018551
 8014490:	08018568 	.word	0x08018568
 8014494:	0801857b 	.word	0x0801857b
 8014498:	08018594 	.word	0x08018594
 801449c:	080185ab 	.word	0x080185ab
 80144a0:	080185c1 	.word	0x080185c1
 80144a4:	080185e2 	.word	0x080185e2
 80144a8:	080185fa 	.word	0x080185fa
 80144ac:	08018616 	.word	0x08018616
 80144b0:	08018629 	.word	0x08018629
 80144b4:	0801863f 	.word	0x0801863f
 80144b8:	08018653 	.word	0x08018653
 80144bc:	08018675 	.word	0x08018675
 80144c0:	0801869b 	.word	0x0801869b
 80144c4:	080186ac 	.word	0x080186ac
 80144c8:	0801872d 	.word	0x0801872d
 80144cc:	0801802b 	.word	0x0801802b

080144d0 <_user_strerror>:
 80144d0:	2000      	movs	r0, #0
 80144d2:	4770      	bx	lr

080144d4 <_cleanup_r>:
 80144d4:	4901      	ldr	r1, [pc, #4]	; (80144dc <_cleanup_r+0x8>)
 80144d6:	f000 b925 	b.w	8014724 <_fwalk_reent>
 80144da:	bf00      	nop
 80144dc:	080151b1 	.word	0x080151b1

080144e0 <std.isra.0>:
 80144e0:	2300      	movs	r3, #0
 80144e2:	b510      	push	{r4, lr}
 80144e4:	4604      	mov	r4, r0
 80144e6:	6003      	str	r3, [r0, #0]
 80144e8:	6043      	str	r3, [r0, #4]
 80144ea:	6083      	str	r3, [r0, #8]
 80144ec:	8181      	strh	r1, [r0, #12]
 80144ee:	6643      	str	r3, [r0, #100]	; 0x64
 80144f0:	81c2      	strh	r2, [r0, #14]
 80144f2:	6103      	str	r3, [r0, #16]
 80144f4:	6143      	str	r3, [r0, #20]
 80144f6:	6183      	str	r3, [r0, #24]
 80144f8:	4619      	mov	r1, r3
 80144fa:	2208      	movs	r2, #8
 80144fc:	305c      	adds	r0, #92	; 0x5c
 80144fe:	f7ff fdb3 	bl	8014068 <memset>
 8014502:	4b05      	ldr	r3, [pc, #20]	; (8014518 <std.isra.0+0x38>)
 8014504:	6224      	str	r4, [r4, #32]
 8014506:	6263      	str	r3, [r4, #36]	; 0x24
 8014508:	4b04      	ldr	r3, [pc, #16]	; (801451c <std.isra.0+0x3c>)
 801450a:	62a3      	str	r3, [r4, #40]	; 0x28
 801450c:	4b04      	ldr	r3, [pc, #16]	; (8014520 <std.isra.0+0x40>)
 801450e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014510:	4b04      	ldr	r3, [pc, #16]	; (8014524 <std.isra.0+0x44>)
 8014512:	6323      	str	r3, [r4, #48]	; 0x30
 8014514:	bd10      	pop	{r4, pc}
 8014516:	bf00      	nop
 8014518:	08014e55 	.word	0x08014e55
 801451c:	08014e77 	.word	0x08014e77
 8014520:	08014eaf 	.word	0x08014eaf
 8014524:	08014ed3 	.word	0x08014ed3

08014528 <__sfmoreglue>:
 8014528:	b570      	push	{r4, r5, r6, lr}
 801452a:	2568      	movs	r5, #104	; 0x68
 801452c:	1e4a      	subs	r2, r1, #1
 801452e:	4355      	muls	r5, r2
 8014530:	460e      	mov	r6, r1
 8014532:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014536:	f000 f913 	bl	8014760 <_malloc_r>
 801453a:	4604      	mov	r4, r0
 801453c:	b140      	cbz	r0, 8014550 <__sfmoreglue+0x28>
 801453e:	2100      	movs	r1, #0
 8014540:	e880 0042 	stmia.w	r0, {r1, r6}
 8014544:	300c      	adds	r0, #12
 8014546:	60a0      	str	r0, [r4, #8]
 8014548:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801454c:	f7ff fd8c 	bl	8014068 <memset>
 8014550:	4620      	mov	r0, r4
 8014552:	bd70      	pop	{r4, r5, r6, pc}

08014554 <__sinit>:
 8014554:	6983      	ldr	r3, [r0, #24]
 8014556:	b510      	push	{r4, lr}
 8014558:	4604      	mov	r4, r0
 801455a:	bb33      	cbnz	r3, 80145aa <__sinit+0x56>
 801455c:	6483      	str	r3, [r0, #72]	; 0x48
 801455e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8014560:	6503      	str	r3, [r0, #80]	; 0x50
 8014562:	4b12      	ldr	r3, [pc, #72]	; (80145ac <__sinit+0x58>)
 8014564:	4a12      	ldr	r2, [pc, #72]	; (80145b0 <__sinit+0x5c>)
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	6282      	str	r2, [r0, #40]	; 0x28
 801456a:	4298      	cmp	r0, r3
 801456c:	bf04      	itt	eq
 801456e:	2301      	moveq	r3, #1
 8014570:	6183      	streq	r3, [r0, #24]
 8014572:	f000 f81f 	bl	80145b4 <__sfp>
 8014576:	6060      	str	r0, [r4, #4]
 8014578:	4620      	mov	r0, r4
 801457a:	f000 f81b 	bl	80145b4 <__sfp>
 801457e:	60a0      	str	r0, [r4, #8]
 8014580:	4620      	mov	r0, r4
 8014582:	f000 f817 	bl	80145b4 <__sfp>
 8014586:	2200      	movs	r2, #0
 8014588:	60e0      	str	r0, [r4, #12]
 801458a:	2104      	movs	r1, #4
 801458c:	6860      	ldr	r0, [r4, #4]
 801458e:	f7ff ffa7 	bl	80144e0 <std.isra.0>
 8014592:	2201      	movs	r2, #1
 8014594:	2109      	movs	r1, #9
 8014596:	68a0      	ldr	r0, [r4, #8]
 8014598:	f7ff ffa2 	bl	80144e0 <std.isra.0>
 801459c:	2202      	movs	r2, #2
 801459e:	2112      	movs	r1, #18
 80145a0:	68e0      	ldr	r0, [r4, #12]
 80145a2:	f7ff ff9d 	bl	80144e0 <std.isra.0>
 80145a6:	2301      	movs	r3, #1
 80145a8:	61a3      	str	r3, [r4, #24]
 80145aa:	bd10      	pop	{r4, pc}
 80145ac:	08018724 	.word	0x08018724
 80145b0:	080144d5 	.word	0x080144d5

080145b4 <__sfp>:
 80145b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145b6:	4b1c      	ldr	r3, [pc, #112]	; (8014628 <__sfp+0x74>)
 80145b8:	4607      	mov	r7, r0
 80145ba:	681e      	ldr	r6, [r3, #0]
 80145bc:	69b3      	ldr	r3, [r6, #24]
 80145be:	b913      	cbnz	r3, 80145c6 <__sfp+0x12>
 80145c0:	4630      	mov	r0, r6
 80145c2:	f7ff ffc7 	bl	8014554 <__sinit>
 80145c6:	3648      	adds	r6, #72	; 0x48
 80145c8:	68b4      	ldr	r4, [r6, #8]
 80145ca:	6873      	ldr	r3, [r6, #4]
 80145cc:	3b01      	subs	r3, #1
 80145ce:	d503      	bpl.n	80145d8 <__sfp+0x24>
 80145d0:	6833      	ldr	r3, [r6, #0]
 80145d2:	b133      	cbz	r3, 80145e2 <__sfp+0x2e>
 80145d4:	6836      	ldr	r6, [r6, #0]
 80145d6:	e7f7      	b.n	80145c8 <__sfp+0x14>
 80145d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80145dc:	b16d      	cbz	r5, 80145fa <__sfp+0x46>
 80145de:	3468      	adds	r4, #104	; 0x68
 80145e0:	e7f4      	b.n	80145cc <__sfp+0x18>
 80145e2:	2104      	movs	r1, #4
 80145e4:	4638      	mov	r0, r7
 80145e6:	f7ff ff9f 	bl	8014528 <__sfmoreglue>
 80145ea:	6030      	str	r0, [r6, #0]
 80145ec:	2800      	cmp	r0, #0
 80145ee:	d1f1      	bne.n	80145d4 <__sfp+0x20>
 80145f0:	230c      	movs	r3, #12
 80145f2:	4604      	mov	r4, r0
 80145f4:	603b      	str	r3, [r7, #0]
 80145f6:	4620      	mov	r0, r4
 80145f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145fe:	81e3      	strh	r3, [r4, #14]
 8014600:	2301      	movs	r3, #1
 8014602:	6665      	str	r5, [r4, #100]	; 0x64
 8014604:	81a3      	strh	r3, [r4, #12]
 8014606:	6025      	str	r5, [r4, #0]
 8014608:	60a5      	str	r5, [r4, #8]
 801460a:	6065      	str	r5, [r4, #4]
 801460c:	6125      	str	r5, [r4, #16]
 801460e:	6165      	str	r5, [r4, #20]
 8014610:	61a5      	str	r5, [r4, #24]
 8014612:	2208      	movs	r2, #8
 8014614:	4629      	mov	r1, r5
 8014616:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801461a:	f7ff fd25 	bl	8014068 <memset>
 801461e:	6365      	str	r5, [r4, #52]	; 0x34
 8014620:	63a5      	str	r5, [r4, #56]	; 0x38
 8014622:	64a5      	str	r5, [r4, #72]	; 0x48
 8014624:	64e5      	str	r5, [r4, #76]	; 0x4c
 8014626:	e7e6      	b.n	80145f6 <__sfp+0x42>
 8014628:	08018724 	.word	0x08018724

0801462c <_fputc_r>:
 801462c:	b570      	push	{r4, r5, r6, lr}
 801462e:	460e      	mov	r6, r1
 8014630:	4614      	mov	r4, r2
 8014632:	4605      	mov	r5, r0
 8014634:	b118      	cbz	r0, 801463e <_fputc_r+0x12>
 8014636:	6983      	ldr	r3, [r0, #24]
 8014638:	b90b      	cbnz	r3, 801463e <_fputc_r+0x12>
 801463a:	f7ff ff8b 	bl	8014554 <__sinit>
 801463e:	4b0a      	ldr	r3, [pc, #40]	; (8014668 <_fputc_r+0x3c>)
 8014640:	429c      	cmp	r4, r3
 8014642:	d107      	bne.n	8014654 <_fputc_r+0x28>
 8014644:	686c      	ldr	r4, [r5, #4]
 8014646:	4622      	mov	r2, r4
 8014648:	4631      	mov	r1, r6
 801464a:	4628      	mov	r0, r5
 801464c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014650:	f000 bbba 	b.w	8014dc8 <_putc_r>
 8014654:	4b05      	ldr	r3, [pc, #20]	; (801466c <_fputc_r+0x40>)
 8014656:	429c      	cmp	r4, r3
 8014658:	d101      	bne.n	801465e <_fputc_r+0x32>
 801465a:	68ac      	ldr	r4, [r5, #8]
 801465c:	e7f3      	b.n	8014646 <_fputc_r+0x1a>
 801465e:	4b04      	ldr	r3, [pc, #16]	; (8014670 <_fputc_r+0x44>)
 8014660:	429c      	cmp	r4, r3
 8014662:	bf08      	it	eq
 8014664:	68ec      	ldreq	r4, [r5, #12]
 8014666:	e7ee      	b.n	8014646 <_fputc_r+0x1a>
 8014668:	080186e4 	.word	0x080186e4
 801466c:	08018704 	.word	0x08018704
 8014670:	080186c4 	.word	0x080186c4

08014674 <fputc>:
 8014674:	4b02      	ldr	r3, [pc, #8]	; (8014680 <fputc+0xc>)
 8014676:	460a      	mov	r2, r1
 8014678:	4601      	mov	r1, r0
 801467a:	6818      	ldr	r0, [r3, #0]
 801467c:	f7ff bfd6 	b.w	801462c <_fputc_r>
 8014680:	2000001c 	.word	0x2000001c

08014684 <_fputs_r>:
 8014684:	b570      	push	{r4, r5, r6, lr}
 8014686:	460e      	mov	r6, r1
 8014688:	4614      	mov	r4, r2
 801468a:	4605      	mov	r5, r0
 801468c:	b118      	cbz	r0, 8014696 <_fputs_r+0x12>
 801468e:	6983      	ldr	r3, [r0, #24]
 8014690:	b90b      	cbnz	r3, 8014696 <_fputs_r+0x12>
 8014692:	f7ff ff5f 	bl	8014554 <__sinit>
 8014696:	4b1c      	ldr	r3, [pc, #112]	; (8014708 <_fputs_r+0x84>)
 8014698:	429c      	cmp	r4, r3
 801469a:	d10b      	bne.n	80146b4 <_fputs_r+0x30>
 801469c:	686c      	ldr	r4, [r5, #4]
 801469e:	89a3      	ldrh	r3, [r4, #12]
 80146a0:	071b      	lsls	r3, r3, #28
 80146a2:	d511      	bpl.n	80146c8 <_fputs_r+0x44>
 80146a4:	6923      	ldr	r3, [r4, #16]
 80146a6:	b17b      	cbz	r3, 80146c8 <_fputs_r+0x44>
 80146a8:	3e01      	subs	r6, #1
 80146aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80146ae:	b9a1      	cbnz	r1, 80146da <_fputs_r+0x56>
 80146b0:	4608      	mov	r0, r1
 80146b2:	bd70      	pop	{r4, r5, r6, pc}
 80146b4:	4b15      	ldr	r3, [pc, #84]	; (801470c <_fputs_r+0x88>)
 80146b6:	429c      	cmp	r4, r3
 80146b8:	d101      	bne.n	80146be <_fputs_r+0x3a>
 80146ba:	68ac      	ldr	r4, [r5, #8]
 80146bc:	e7ef      	b.n	801469e <_fputs_r+0x1a>
 80146be:	4b14      	ldr	r3, [pc, #80]	; (8014710 <_fputs_r+0x8c>)
 80146c0:	429c      	cmp	r4, r3
 80146c2:	bf08      	it	eq
 80146c4:	68ec      	ldreq	r4, [r5, #12]
 80146c6:	e7ea      	b.n	801469e <_fputs_r+0x1a>
 80146c8:	4621      	mov	r1, r4
 80146ca:	4628      	mov	r0, r5
 80146cc:	f000 fc6a 	bl	8014fa4 <__swsetup_r>
 80146d0:	2800      	cmp	r0, #0
 80146d2:	d0e9      	beq.n	80146a8 <_fputs_r+0x24>
 80146d4:	f04f 30ff 	mov.w	r0, #4294967295
 80146d8:	bd70      	pop	{r4, r5, r6, pc}
 80146da:	68a3      	ldr	r3, [r4, #8]
 80146dc:	3b01      	subs	r3, #1
 80146de:	2b00      	cmp	r3, #0
 80146e0:	60a3      	str	r3, [r4, #8]
 80146e2:	da04      	bge.n	80146ee <_fputs_r+0x6a>
 80146e4:	69a2      	ldr	r2, [r4, #24]
 80146e6:	4293      	cmp	r3, r2
 80146e8:	db06      	blt.n	80146f8 <_fputs_r+0x74>
 80146ea:	290a      	cmp	r1, #10
 80146ec:	d004      	beq.n	80146f8 <_fputs_r+0x74>
 80146ee:	6823      	ldr	r3, [r4, #0]
 80146f0:	1c5a      	adds	r2, r3, #1
 80146f2:	6022      	str	r2, [r4, #0]
 80146f4:	7019      	strb	r1, [r3, #0]
 80146f6:	e7d8      	b.n	80146aa <_fputs_r+0x26>
 80146f8:	4622      	mov	r2, r4
 80146fa:	4628      	mov	r0, r5
 80146fc:	f000 fbee 	bl	8014edc <__swbuf_r>
 8014700:	3001      	adds	r0, #1
 8014702:	d1d2      	bne.n	80146aa <_fputs_r+0x26>
 8014704:	e7e6      	b.n	80146d4 <_fputs_r+0x50>
 8014706:	bf00      	nop
 8014708:	080186e4 	.word	0x080186e4
 801470c:	08018704 	.word	0x08018704
 8014710:	080186c4 	.word	0x080186c4

08014714 <fputs>:
 8014714:	4b02      	ldr	r3, [pc, #8]	; (8014720 <fputs+0xc>)
 8014716:	460a      	mov	r2, r1
 8014718:	4601      	mov	r1, r0
 801471a:	6818      	ldr	r0, [r3, #0]
 801471c:	f7ff bfb2 	b.w	8014684 <_fputs_r>
 8014720:	2000001c 	.word	0x2000001c

08014724 <_fwalk_reent>:
 8014724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014728:	4680      	mov	r8, r0
 801472a:	4689      	mov	r9, r1
 801472c:	2600      	movs	r6, #0
 801472e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014732:	b914      	cbnz	r4, 801473a <_fwalk_reent+0x16>
 8014734:	4630      	mov	r0, r6
 8014736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801473a:	68a5      	ldr	r5, [r4, #8]
 801473c:	6867      	ldr	r7, [r4, #4]
 801473e:	3f01      	subs	r7, #1
 8014740:	d501      	bpl.n	8014746 <_fwalk_reent+0x22>
 8014742:	6824      	ldr	r4, [r4, #0]
 8014744:	e7f5      	b.n	8014732 <_fwalk_reent+0xe>
 8014746:	89ab      	ldrh	r3, [r5, #12]
 8014748:	2b01      	cmp	r3, #1
 801474a:	d907      	bls.n	801475c <_fwalk_reent+0x38>
 801474c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014750:	3301      	adds	r3, #1
 8014752:	d003      	beq.n	801475c <_fwalk_reent+0x38>
 8014754:	4629      	mov	r1, r5
 8014756:	4640      	mov	r0, r8
 8014758:	47c8      	blx	r9
 801475a:	4306      	orrs	r6, r0
 801475c:	3568      	adds	r5, #104	; 0x68
 801475e:	e7ee      	b.n	801473e <_fwalk_reent+0x1a>

08014760 <_malloc_r>:
 8014760:	b570      	push	{r4, r5, r6, lr}
 8014762:	1ccd      	adds	r5, r1, #3
 8014764:	f025 0503 	bic.w	r5, r5, #3
 8014768:	3508      	adds	r5, #8
 801476a:	2d0c      	cmp	r5, #12
 801476c:	bf38      	it	cc
 801476e:	250c      	movcc	r5, #12
 8014770:	2d00      	cmp	r5, #0
 8014772:	4606      	mov	r6, r0
 8014774:	db01      	blt.n	801477a <_malloc_r+0x1a>
 8014776:	42a9      	cmp	r1, r5
 8014778:	d903      	bls.n	8014782 <_malloc_r+0x22>
 801477a:	230c      	movs	r3, #12
 801477c:	6033      	str	r3, [r6, #0]
 801477e:	2000      	movs	r0, #0
 8014780:	bd70      	pop	{r4, r5, r6, pc}
 8014782:	f000 fdc3 	bl	801530c <__malloc_lock>
 8014786:	4a23      	ldr	r2, [pc, #140]	; (8014814 <_malloc_r+0xb4>)
 8014788:	6814      	ldr	r4, [r2, #0]
 801478a:	4621      	mov	r1, r4
 801478c:	b991      	cbnz	r1, 80147b4 <_malloc_r+0x54>
 801478e:	4c22      	ldr	r4, [pc, #136]	; (8014818 <_malloc_r+0xb8>)
 8014790:	6823      	ldr	r3, [r4, #0]
 8014792:	b91b      	cbnz	r3, 801479c <_malloc_r+0x3c>
 8014794:	4630      	mov	r0, r6
 8014796:	f000 fb4d 	bl	8014e34 <_sbrk_r>
 801479a:	6020      	str	r0, [r4, #0]
 801479c:	4629      	mov	r1, r5
 801479e:	4630      	mov	r0, r6
 80147a0:	f000 fb48 	bl	8014e34 <_sbrk_r>
 80147a4:	1c43      	adds	r3, r0, #1
 80147a6:	d126      	bne.n	80147f6 <_malloc_r+0x96>
 80147a8:	230c      	movs	r3, #12
 80147aa:	4630      	mov	r0, r6
 80147ac:	6033      	str	r3, [r6, #0]
 80147ae:	f000 fdae 	bl	801530e <__malloc_unlock>
 80147b2:	e7e4      	b.n	801477e <_malloc_r+0x1e>
 80147b4:	680b      	ldr	r3, [r1, #0]
 80147b6:	1b5b      	subs	r3, r3, r5
 80147b8:	d41a      	bmi.n	80147f0 <_malloc_r+0x90>
 80147ba:	2b0b      	cmp	r3, #11
 80147bc:	d90f      	bls.n	80147de <_malloc_r+0x7e>
 80147be:	600b      	str	r3, [r1, #0]
 80147c0:	18cc      	adds	r4, r1, r3
 80147c2:	50cd      	str	r5, [r1, r3]
 80147c4:	4630      	mov	r0, r6
 80147c6:	f000 fda2 	bl	801530e <__malloc_unlock>
 80147ca:	f104 000b 	add.w	r0, r4, #11
 80147ce:	1d23      	adds	r3, r4, #4
 80147d0:	f020 0007 	bic.w	r0, r0, #7
 80147d4:	1ac3      	subs	r3, r0, r3
 80147d6:	d01b      	beq.n	8014810 <_malloc_r+0xb0>
 80147d8:	425a      	negs	r2, r3
 80147da:	50e2      	str	r2, [r4, r3]
 80147dc:	bd70      	pop	{r4, r5, r6, pc}
 80147de:	428c      	cmp	r4, r1
 80147e0:	bf0b      	itete	eq
 80147e2:	6863      	ldreq	r3, [r4, #4]
 80147e4:	684b      	ldrne	r3, [r1, #4]
 80147e6:	6013      	streq	r3, [r2, #0]
 80147e8:	6063      	strne	r3, [r4, #4]
 80147ea:	bf18      	it	ne
 80147ec:	460c      	movne	r4, r1
 80147ee:	e7e9      	b.n	80147c4 <_malloc_r+0x64>
 80147f0:	460c      	mov	r4, r1
 80147f2:	6849      	ldr	r1, [r1, #4]
 80147f4:	e7ca      	b.n	801478c <_malloc_r+0x2c>
 80147f6:	1cc4      	adds	r4, r0, #3
 80147f8:	f024 0403 	bic.w	r4, r4, #3
 80147fc:	42a0      	cmp	r0, r4
 80147fe:	d005      	beq.n	801480c <_malloc_r+0xac>
 8014800:	1a21      	subs	r1, r4, r0
 8014802:	4630      	mov	r0, r6
 8014804:	f000 fb16 	bl	8014e34 <_sbrk_r>
 8014808:	3001      	adds	r0, #1
 801480a:	d0cd      	beq.n	80147a8 <_malloc_r+0x48>
 801480c:	6025      	str	r5, [r4, #0]
 801480e:	e7d9      	b.n	80147c4 <_malloc_r+0x64>
 8014810:	bd70      	pop	{r4, r5, r6, pc}
 8014812:	bf00      	nop
 8014814:	20004230 	.word	0x20004230
 8014818:	20004234 	.word	0x20004234

0801481c <__sfputc_r>:
 801481c:	6893      	ldr	r3, [r2, #8]
 801481e:	b410      	push	{r4}
 8014820:	3b01      	subs	r3, #1
 8014822:	2b00      	cmp	r3, #0
 8014824:	6093      	str	r3, [r2, #8]
 8014826:	da08      	bge.n	801483a <__sfputc_r+0x1e>
 8014828:	6994      	ldr	r4, [r2, #24]
 801482a:	42a3      	cmp	r3, r4
 801482c:	db02      	blt.n	8014834 <__sfputc_r+0x18>
 801482e:	b2cb      	uxtb	r3, r1
 8014830:	2b0a      	cmp	r3, #10
 8014832:	d102      	bne.n	801483a <__sfputc_r+0x1e>
 8014834:	bc10      	pop	{r4}
 8014836:	f000 bb51 	b.w	8014edc <__swbuf_r>
 801483a:	6813      	ldr	r3, [r2, #0]
 801483c:	1c58      	adds	r0, r3, #1
 801483e:	6010      	str	r0, [r2, #0]
 8014840:	7019      	strb	r1, [r3, #0]
 8014842:	b2c8      	uxtb	r0, r1
 8014844:	bc10      	pop	{r4}
 8014846:	4770      	bx	lr

08014848 <__sfputs_r>:
 8014848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801484a:	4606      	mov	r6, r0
 801484c:	460f      	mov	r7, r1
 801484e:	4614      	mov	r4, r2
 8014850:	18d5      	adds	r5, r2, r3
 8014852:	42ac      	cmp	r4, r5
 8014854:	d101      	bne.n	801485a <__sfputs_r+0x12>
 8014856:	2000      	movs	r0, #0
 8014858:	e007      	b.n	801486a <__sfputs_r+0x22>
 801485a:	463a      	mov	r2, r7
 801485c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014860:	4630      	mov	r0, r6
 8014862:	f7ff ffdb 	bl	801481c <__sfputc_r>
 8014866:	1c43      	adds	r3, r0, #1
 8014868:	d1f3      	bne.n	8014852 <__sfputs_r+0xa>
 801486a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801486c <_vfiprintf_r>:
 801486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014870:	b09d      	sub	sp, #116	; 0x74
 8014872:	460c      	mov	r4, r1
 8014874:	4617      	mov	r7, r2
 8014876:	9303      	str	r3, [sp, #12]
 8014878:	4606      	mov	r6, r0
 801487a:	b118      	cbz	r0, 8014884 <_vfiprintf_r+0x18>
 801487c:	6983      	ldr	r3, [r0, #24]
 801487e:	b90b      	cbnz	r3, 8014884 <_vfiprintf_r+0x18>
 8014880:	f7ff fe68 	bl	8014554 <__sinit>
 8014884:	4b7c      	ldr	r3, [pc, #496]	; (8014a78 <_vfiprintf_r+0x20c>)
 8014886:	429c      	cmp	r4, r3
 8014888:	d157      	bne.n	801493a <_vfiprintf_r+0xce>
 801488a:	6874      	ldr	r4, [r6, #4]
 801488c:	89a3      	ldrh	r3, [r4, #12]
 801488e:	0718      	lsls	r0, r3, #28
 8014890:	d55d      	bpl.n	801494e <_vfiprintf_r+0xe2>
 8014892:	6923      	ldr	r3, [r4, #16]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d05a      	beq.n	801494e <_vfiprintf_r+0xe2>
 8014898:	2300      	movs	r3, #0
 801489a:	9309      	str	r3, [sp, #36]	; 0x24
 801489c:	2320      	movs	r3, #32
 801489e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80148a2:	2330      	movs	r3, #48	; 0x30
 80148a4:	f04f 0b01 	mov.w	fp, #1
 80148a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80148ac:	46b8      	mov	r8, r7
 80148ae:	4645      	mov	r5, r8
 80148b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d155      	bne.n	8014964 <_vfiprintf_r+0xf8>
 80148b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80148bc:	d00b      	beq.n	80148d6 <_vfiprintf_r+0x6a>
 80148be:	4653      	mov	r3, sl
 80148c0:	463a      	mov	r2, r7
 80148c2:	4621      	mov	r1, r4
 80148c4:	4630      	mov	r0, r6
 80148c6:	f7ff ffbf 	bl	8014848 <__sfputs_r>
 80148ca:	3001      	adds	r0, #1
 80148cc:	f000 80c4 	beq.w	8014a58 <_vfiprintf_r+0x1ec>
 80148d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148d2:	4453      	add	r3, sl
 80148d4:	9309      	str	r3, [sp, #36]	; 0x24
 80148d6:	f898 3000 	ldrb.w	r3, [r8]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	f000 80bc 	beq.w	8014a58 <_vfiprintf_r+0x1ec>
 80148e0:	2300      	movs	r3, #0
 80148e2:	f04f 32ff 	mov.w	r2, #4294967295
 80148e6:	9304      	str	r3, [sp, #16]
 80148e8:	9307      	str	r3, [sp, #28]
 80148ea:	9205      	str	r2, [sp, #20]
 80148ec:	9306      	str	r3, [sp, #24]
 80148ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80148f2:	931a      	str	r3, [sp, #104]	; 0x68
 80148f4:	2205      	movs	r2, #5
 80148f6:	7829      	ldrb	r1, [r5, #0]
 80148f8:	4860      	ldr	r0, [pc, #384]	; (8014a7c <_vfiprintf_r+0x210>)
 80148fa:	f000 fcf9 	bl	80152f0 <memchr>
 80148fe:	f105 0801 	add.w	r8, r5, #1
 8014902:	9b04      	ldr	r3, [sp, #16]
 8014904:	2800      	cmp	r0, #0
 8014906:	d131      	bne.n	801496c <_vfiprintf_r+0x100>
 8014908:	06d9      	lsls	r1, r3, #27
 801490a:	bf44      	itt	mi
 801490c:	2220      	movmi	r2, #32
 801490e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014912:	071a      	lsls	r2, r3, #28
 8014914:	bf44      	itt	mi
 8014916:	222b      	movmi	r2, #43	; 0x2b
 8014918:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801491c:	782a      	ldrb	r2, [r5, #0]
 801491e:	2a2a      	cmp	r2, #42	; 0x2a
 8014920:	d02c      	beq.n	801497c <_vfiprintf_r+0x110>
 8014922:	2100      	movs	r1, #0
 8014924:	200a      	movs	r0, #10
 8014926:	9a07      	ldr	r2, [sp, #28]
 8014928:	46a8      	mov	r8, r5
 801492a:	f898 3000 	ldrb.w	r3, [r8]
 801492e:	3501      	adds	r5, #1
 8014930:	3b30      	subs	r3, #48	; 0x30
 8014932:	2b09      	cmp	r3, #9
 8014934:	d96d      	bls.n	8014a12 <_vfiprintf_r+0x1a6>
 8014936:	b371      	cbz	r1, 8014996 <_vfiprintf_r+0x12a>
 8014938:	e026      	b.n	8014988 <_vfiprintf_r+0x11c>
 801493a:	4b51      	ldr	r3, [pc, #324]	; (8014a80 <_vfiprintf_r+0x214>)
 801493c:	429c      	cmp	r4, r3
 801493e:	d101      	bne.n	8014944 <_vfiprintf_r+0xd8>
 8014940:	68b4      	ldr	r4, [r6, #8]
 8014942:	e7a3      	b.n	801488c <_vfiprintf_r+0x20>
 8014944:	4b4f      	ldr	r3, [pc, #316]	; (8014a84 <_vfiprintf_r+0x218>)
 8014946:	429c      	cmp	r4, r3
 8014948:	bf08      	it	eq
 801494a:	68f4      	ldreq	r4, [r6, #12]
 801494c:	e79e      	b.n	801488c <_vfiprintf_r+0x20>
 801494e:	4621      	mov	r1, r4
 8014950:	4630      	mov	r0, r6
 8014952:	f000 fb27 	bl	8014fa4 <__swsetup_r>
 8014956:	2800      	cmp	r0, #0
 8014958:	d09e      	beq.n	8014898 <_vfiprintf_r+0x2c>
 801495a:	f04f 30ff 	mov.w	r0, #4294967295
 801495e:	b01d      	add	sp, #116	; 0x74
 8014960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014964:	2b25      	cmp	r3, #37	; 0x25
 8014966:	d0a7      	beq.n	80148b8 <_vfiprintf_r+0x4c>
 8014968:	46a8      	mov	r8, r5
 801496a:	e7a0      	b.n	80148ae <_vfiprintf_r+0x42>
 801496c:	4a43      	ldr	r2, [pc, #268]	; (8014a7c <_vfiprintf_r+0x210>)
 801496e:	4645      	mov	r5, r8
 8014970:	1a80      	subs	r0, r0, r2
 8014972:	fa0b f000 	lsl.w	r0, fp, r0
 8014976:	4318      	orrs	r0, r3
 8014978:	9004      	str	r0, [sp, #16]
 801497a:	e7bb      	b.n	80148f4 <_vfiprintf_r+0x88>
 801497c:	9a03      	ldr	r2, [sp, #12]
 801497e:	1d11      	adds	r1, r2, #4
 8014980:	6812      	ldr	r2, [r2, #0]
 8014982:	9103      	str	r1, [sp, #12]
 8014984:	2a00      	cmp	r2, #0
 8014986:	db01      	blt.n	801498c <_vfiprintf_r+0x120>
 8014988:	9207      	str	r2, [sp, #28]
 801498a:	e004      	b.n	8014996 <_vfiprintf_r+0x12a>
 801498c:	4252      	negs	r2, r2
 801498e:	f043 0302 	orr.w	r3, r3, #2
 8014992:	9207      	str	r2, [sp, #28]
 8014994:	9304      	str	r3, [sp, #16]
 8014996:	f898 3000 	ldrb.w	r3, [r8]
 801499a:	2b2e      	cmp	r3, #46	; 0x2e
 801499c:	d110      	bne.n	80149c0 <_vfiprintf_r+0x154>
 801499e:	f898 3001 	ldrb.w	r3, [r8, #1]
 80149a2:	f108 0101 	add.w	r1, r8, #1
 80149a6:	2b2a      	cmp	r3, #42	; 0x2a
 80149a8:	d137      	bne.n	8014a1a <_vfiprintf_r+0x1ae>
 80149aa:	9b03      	ldr	r3, [sp, #12]
 80149ac:	f108 0802 	add.w	r8, r8, #2
 80149b0:	1d1a      	adds	r2, r3, #4
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	9203      	str	r2, [sp, #12]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	bfb8      	it	lt
 80149ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80149be:	9305      	str	r3, [sp, #20]
 80149c0:	4d31      	ldr	r5, [pc, #196]	; (8014a88 <_vfiprintf_r+0x21c>)
 80149c2:	2203      	movs	r2, #3
 80149c4:	f898 1000 	ldrb.w	r1, [r8]
 80149c8:	4628      	mov	r0, r5
 80149ca:	f000 fc91 	bl	80152f0 <memchr>
 80149ce:	b140      	cbz	r0, 80149e2 <_vfiprintf_r+0x176>
 80149d0:	2340      	movs	r3, #64	; 0x40
 80149d2:	1b40      	subs	r0, r0, r5
 80149d4:	fa03 f000 	lsl.w	r0, r3, r0
 80149d8:	9b04      	ldr	r3, [sp, #16]
 80149da:	f108 0801 	add.w	r8, r8, #1
 80149de:	4303      	orrs	r3, r0
 80149e0:	9304      	str	r3, [sp, #16]
 80149e2:	f898 1000 	ldrb.w	r1, [r8]
 80149e6:	2206      	movs	r2, #6
 80149e8:	4828      	ldr	r0, [pc, #160]	; (8014a8c <_vfiprintf_r+0x220>)
 80149ea:	f108 0701 	add.w	r7, r8, #1
 80149ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80149f2:	f000 fc7d 	bl	80152f0 <memchr>
 80149f6:	2800      	cmp	r0, #0
 80149f8:	d034      	beq.n	8014a64 <_vfiprintf_r+0x1f8>
 80149fa:	4b25      	ldr	r3, [pc, #148]	; (8014a90 <_vfiprintf_r+0x224>)
 80149fc:	bb03      	cbnz	r3, 8014a40 <_vfiprintf_r+0x1d4>
 80149fe:	9b03      	ldr	r3, [sp, #12]
 8014a00:	3307      	adds	r3, #7
 8014a02:	f023 0307 	bic.w	r3, r3, #7
 8014a06:	3308      	adds	r3, #8
 8014a08:	9303      	str	r3, [sp, #12]
 8014a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a0c:	444b      	add	r3, r9
 8014a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8014a10:	e74c      	b.n	80148ac <_vfiprintf_r+0x40>
 8014a12:	fb00 3202 	mla	r2, r0, r2, r3
 8014a16:	2101      	movs	r1, #1
 8014a18:	e786      	b.n	8014928 <_vfiprintf_r+0xbc>
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	250a      	movs	r5, #10
 8014a1e:	4618      	mov	r0, r3
 8014a20:	9305      	str	r3, [sp, #20]
 8014a22:	4688      	mov	r8, r1
 8014a24:	f898 2000 	ldrb.w	r2, [r8]
 8014a28:	3101      	adds	r1, #1
 8014a2a:	3a30      	subs	r2, #48	; 0x30
 8014a2c:	2a09      	cmp	r2, #9
 8014a2e:	d903      	bls.n	8014a38 <_vfiprintf_r+0x1cc>
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d0c5      	beq.n	80149c0 <_vfiprintf_r+0x154>
 8014a34:	9005      	str	r0, [sp, #20]
 8014a36:	e7c3      	b.n	80149c0 <_vfiprintf_r+0x154>
 8014a38:	fb05 2000 	mla	r0, r5, r0, r2
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	e7f0      	b.n	8014a22 <_vfiprintf_r+0x1b6>
 8014a40:	ab03      	add	r3, sp, #12
 8014a42:	9300      	str	r3, [sp, #0]
 8014a44:	4622      	mov	r2, r4
 8014a46:	4b13      	ldr	r3, [pc, #76]	; (8014a94 <_vfiprintf_r+0x228>)
 8014a48:	a904      	add	r1, sp, #16
 8014a4a:	4630      	mov	r0, r6
 8014a4c:	f3af 8000 	nop.w
 8014a50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014a54:	4681      	mov	r9, r0
 8014a56:	d1d8      	bne.n	8014a0a <_vfiprintf_r+0x19e>
 8014a58:	89a3      	ldrh	r3, [r4, #12]
 8014a5a:	065b      	lsls	r3, r3, #25
 8014a5c:	f53f af7d 	bmi.w	801495a <_vfiprintf_r+0xee>
 8014a60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a62:	e77c      	b.n	801495e <_vfiprintf_r+0xf2>
 8014a64:	ab03      	add	r3, sp, #12
 8014a66:	9300      	str	r3, [sp, #0]
 8014a68:	4622      	mov	r2, r4
 8014a6a:	4b0a      	ldr	r3, [pc, #40]	; (8014a94 <_vfiprintf_r+0x228>)
 8014a6c:	a904      	add	r1, sp, #16
 8014a6e:	4630      	mov	r0, r6
 8014a70:	f000 f88a 	bl	8014b88 <_printf_i>
 8014a74:	e7ec      	b.n	8014a50 <_vfiprintf_r+0x1e4>
 8014a76:	bf00      	nop
 8014a78:	080186e4 	.word	0x080186e4
 8014a7c:	08018728 	.word	0x08018728
 8014a80:	08018704 	.word	0x08018704
 8014a84:	080186c4 	.word	0x080186c4
 8014a88:	0801872e 	.word	0x0801872e
 8014a8c:	08018732 	.word	0x08018732
 8014a90:	00000000 	.word	0x00000000
 8014a94:	08014849 	.word	0x08014849

08014a98 <_printf_common>:
 8014a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a9c:	4691      	mov	r9, r2
 8014a9e:	461f      	mov	r7, r3
 8014aa0:	688a      	ldr	r2, [r1, #8]
 8014aa2:	690b      	ldr	r3, [r1, #16]
 8014aa4:	4606      	mov	r6, r0
 8014aa6:	4293      	cmp	r3, r2
 8014aa8:	bfb8      	it	lt
 8014aaa:	4613      	movlt	r3, r2
 8014aac:	f8c9 3000 	str.w	r3, [r9]
 8014ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014ab4:	460c      	mov	r4, r1
 8014ab6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014aba:	b112      	cbz	r2, 8014ac2 <_printf_common+0x2a>
 8014abc:	3301      	adds	r3, #1
 8014abe:	f8c9 3000 	str.w	r3, [r9]
 8014ac2:	6823      	ldr	r3, [r4, #0]
 8014ac4:	0699      	lsls	r1, r3, #26
 8014ac6:	bf42      	ittt	mi
 8014ac8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014acc:	3302      	addmi	r3, #2
 8014ace:	f8c9 3000 	strmi.w	r3, [r9]
 8014ad2:	6825      	ldr	r5, [r4, #0]
 8014ad4:	f015 0506 	ands.w	r5, r5, #6
 8014ad8:	d107      	bne.n	8014aea <_printf_common+0x52>
 8014ada:	f104 0a19 	add.w	sl, r4, #25
 8014ade:	68e3      	ldr	r3, [r4, #12]
 8014ae0:	f8d9 2000 	ldr.w	r2, [r9]
 8014ae4:	1a9b      	subs	r3, r3, r2
 8014ae6:	429d      	cmp	r5, r3
 8014ae8:	db2a      	blt.n	8014b40 <_printf_common+0xa8>
 8014aea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014aee:	6822      	ldr	r2, [r4, #0]
 8014af0:	3300      	adds	r3, #0
 8014af2:	bf18      	it	ne
 8014af4:	2301      	movne	r3, #1
 8014af6:	0692      	lsls	r2, r2, #26
 8014af8:	d42f      	bmi.n	8014b5a <_printf_common+0xc2>
 8014afa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014afe:	4639      	mov	r1, r7
 8014b00:	4630      	mov	r0, r6
 8014b02:	47c0      	blx	r8
 8014b04:	3001      	adds	r0, #1
 8014b06:	d022      	beq.n	8014b4e <_printf_common+0xb6>
 8014b08:	6823      	ldr	r3, [r4, #0]
 8014b0a:	68e5      	ldr	r5, [r4, #12]
 8014b0c:	f003 0306 	and.w	r3, r3, #6
 8014b10:	2b04      	cmp	r3, #4
 8014b12:	bf18      	it	ne
 8014b14:	2500      	movne	r5, #0
 8014b16:	f8d9 2000 	ldr.w	r2, [r9]
 8014b1a:	f04f 0900 	mov.w	r9, #0
 8014b1e:	bf08      	it	eq
 8014b20:	1aad      	subeq	r5, r5, r2
 8014b22:	68a3      	ldr	r3, [r4, #8]
 8014b24:	6922      	ldr	r2, [r4, #16]
 8014b26:	bf08      	it	eq
 8014b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b2c:	4293      	cmp	r3, r2
 8014b2e:	bfc4      	itt	gt
 8014b30:	1a9b      	subgt	r3, r3, r2
 8014b32:	18ed      	addgt	r5, r5, r3
 8014b34:	341a      	adds	r4, #26
 8014b36:	454d      	cmp	r5, r9
 8014b38:	d11b      	bne.n	8014b72 <_printf_common+0xda>
 8014b3a:	2000      	movs	r0, #0
 8014b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b40:	2301      	movs	r3, #1
 8014b42:	4652      	mov	r2, sl
 8014b44:	4639      	mov	r1, r7
 8014b46:	4630      	mov	r0, r6
 8014b48:	47c0      	blx	r8
 8014b4a:	3001      	adds	r0, #1
 8014b4c:	d103      	bne.n	8014b56 <_printf_common+0xbe>
 8014b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8014b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b56:	3501      	adds	r5, #1
 8014b58:	e7c1      	b.n	8014ade <_printf_common+0x46>
 8014b5a:	2030      	movs	r0, #48	; 0x30
 8014b5c:	18e1      	adds	r1, r4, r3
 8014b5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014b62:	1c5a      	adds	r2, r3, #1
 8014b64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014b68:	4422      	add	r2, r4
 8014b6a:	3302      	adds	r3, #2
 8014b6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014b70:	e7c3      	b.n	8014afa <_printf_common+0x62>
 8014b72:	2301      	movs	r3, #1
 8014b74:	4622      	mov	r2, r4
 8014b76:	4639      	mov	r1, r7
 8014b78:	4630      	mov	r0, r6
 8014b7a:	47c0      	blx	r8
 8014b7c:	3001      	adds	r0, #1
 8014b7e:	d0e6      	beq.n	8014b4e <_printf_common+0xb6>
 8014b80:	f109 0901 	add.w	r9, r9, #1
 8014b84:	e7d7      	b.n	8014b36 <_printf_common+0x9e>
	...

08014b88 <_printf_i>:
 8014b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b8c:	4617      	mov	r7, r2
 8014b8e:	7e0a      	ldrb	r2, [r1, #24]
 8014b90:	b085      	sub	sp, #20
 8014b92:	2a6e      	cmp	r2, #110	; 0x6e
 8014b94:	4698      	mov	r8, r3
 8014b96:	4606      	mov	r6, r0
 8014b98:	460c      	mov	r4, r1
 8014b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b9c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8014ba0:	f000 80bc 	beq.w	8014d1c <_printf_i+0x194>
 8014ba4:	d81a      	bhi.n	8014bdc <_printf_i+0x54>
 8014ba6:	2a63      	cmp	r2, #99	; 0x63
 8014ba8:	d02e      	beq.n	8014c08 <_printf_i+0x80>
 8014baa:	d80a      	bhi.n	8014bc2 <_printf_i+0x3a>
 8014bac:	2a00      	cmp	r2, #0
 8014bae:	f000 80c8 	beq.w	8014d42 <_printf_i+0x1ba>
 8014bb2:	2a58      	cmp	r2, #88	; 0x58
 8014bb4:	f000 808a 	beq.w	8014ccc <_printf_i+0x144>
 8014bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014bbc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8014bc0:	e02a      	b.n	8014c18 <_printf_i+0x90>
 8014bc2:	2a64      	cmp	r2, #100	; 0x64
 8014bc4:	d001      	beq.n	8014bca <_printf_i+0x42>
 8014bc6:	2a69      	cmp	r2, #105	; 0x69
 8014bc8:	d1f6      	bne.n	8014bb8 <_printf_i+0x30>
 8014bca:	6821      	ldr	r1, [r4, #0]
 8014bcc:	681a      	ldr	r2, [r3, #0]
 8014bce:	f011 0f80 	tst.w	r1, #128	; 0x80
 8014bd2:	d023      	beq.n	8014c1c <_printf_i+0x94>
 8014bd4:	1d11      	adds	r1, r2, #4
 8014bd6:	6019      	str	r1, [r3, #0]
 8014bd8:	6813      	ldr	r3, [r2, #0]
 8014bda:	e027      	b.n	8014c2c <_printf_i+0xa4>
 8014bdc:	2a73      	cmp	r2, #115	; 0x73
 8014bde:	f000 80b4 	beq.w	8014d4a <_printf_i+0x1c2>
 8014be2:	d808      	bhi.n	8014bf6 <_printf_i+0x6e>
 8014be4:	2a6f      	cmp	r2, #111	; 0x6f
 8014be6:	d02a      	beq.n	8014c3e <_printf_i+0xb6>
 8014be8:	2a70      	cmp	r2, #112	; 0x70
 8014bea:	d1e5      	bne.n	8014bb8 <_printf_i+0x30>
 8014bec:	680a      	ldr	r2, [r1, #0]
 8014bee:	f042 0220 	orr.w	r2, r2, #32
 8014bf2:	600a      	str	r2, [r1, #0]
 8014bf4:	e003      	b.n	8014bfe <_printf_i+0x76>
 8014bf6:	2a75      	cmp	r2, #117	; 0x75
 8014bf8:	d021      	beq.n	8014c3e <_printf_i+0xb6>
 8014bfa:	2a78      	cmp	r2, #120	; 0x78
 8014bfc:	d1dc      	bne.n	8014bb8 <_printf_i+0x30>
 8014bfe:	2278      	movs	r2, #120	; 0x78
 8014c00:	496f      	ldr	r1, [pc, #444]	; (8014dc0 <_printf_i+0x238>)
 8014c02:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8014c06:	e064      	b.n	8014cd2 <_printf_i+0x14a>
 8014c08:	681a      	ldr	r2, [r3, #0]
 8014c0a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8014c0e:	1d11      	adds	r1, r2, #4
 8014c10:	6019      	str	r1, [r3, #0]
 8014c12:	6813      	ldr	r3, [r2, #0]
 8014c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014c18:	2301      	movs	r3, #1
 8014c1a:	e0a3      	b.n	8014d64 <_printf_i+0x1dc>
 8014c1c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8014c20:	f102 0104 	add.w	r1, r2, #4
 8014c24:	6019      	str	r1, [r3, #0]
 8014c26:	d0d7      	beq.n	8014bd8 <_printf_i+0x50>
 8014c28:	f9b2 3000 	ldrsh.w	r3, [r2]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	da03      	bge.n	8014c38 <_printf_i+0xb0>
 8014c30:	222d      	movs	r2, #45	; 0x2d
 8014c32:	425b      	negs	r3, r3
 8014c34:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014c38:	4962      	ldr	r1, [pc, #392]	; (8014dc4 <_printf_i+0x23c>)
 8014c3a:	220a      	movs	r2, #10
 8014c3c:	e017      	b.n	8014c6e <_printf_i+0xe6>
 8014c3e:	6820      	ldr	r0, [r4, #0]
 8014c40:	6819      	ldr	r1, [r3, #0]
 8014c42:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014c46:	d003      	beq.n	8014c50 <_printf_i+0xc8>
 8014c48:	1d08      	adds	r0, r1, #4
 8014c4a:	6018      	str	r0, [r3, #0]
 8014c4c:	680b      	ldr	r3, [r1, #0]
 8014c4e:	e006      	b.n	8014c5e <_printf_i+0xd6>
 8014c50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014c54:	f101 0004 	add.w	r0, r1, #4
 8014c58:	6018      	str	r0, [r3, #0]
 8014c5a:	d0f7      	beq.n	8014c4c <_printf_i+0xc4>
 8014c5c:	880b      	ldrh	r3, [r1, #0]
 8014c5e:	2a6f      	cmp	r2, #111	; 0x6f
 8014c60:	bf14      	ite	ne
 8014c62:	220a      	movne	r2, #10
 8014c64:	2208      	moveq	r2, #8
 8014c66:	4957      	ldr	r1, [pc, #348]	; (8014dc4 <_printf_i+0x23c>)
 8014c68:	2000      	movs	r0, #0
 8014c6a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8014c6e:	6865      	ldr	r5, [r4, #4]
 8014c70:	2d00      	cmp	r5, #0
 8014c72:	60a5      	str	r5, [r4, #8]
 8014c74:	f2c0 809c 	blt.w	8014db0 <_printf_i+0x228>
 8014c78:	6820      	ldr	r0, [r4, #0]
 8014c7a:	f020 0004 	bic.w	r0, r0, #4
 8014c7e:	6020      	str	r0, [r4, #0]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d13f      	bne.n	8014d04 <_printf_i+0x17c>
 8014c84:	2d00      	cmp	r5, #0
 8014c86:	f040 8095 	bne.w	8014db4 <_printf_i+0x22c>
 8014c8a:	4675      	mov	r5, lr
 8014c8c:	2a08      	cmp	r2, #8
 8014c8e:	d10b      	bne.n	8014ca8 <_printf_i+0x120>
 8014c90:	6823      	ldr	r3, [r4, #0]
 8014c92:	07da      	lsls	r2, r3, #31
 8014c94:	d508      	bpl.n	8014ca8 <_printf_i+0x120>
 8014c96:	6923      	ldr	r3, [r4, #16]
 8014c98:	6862      	ldr	r2, [r4, #4]
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	bfde      	ittt	le
 8014c9e:	2330      	movle	r3, #48	; 0x30
 8014ca0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014ca4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014ca8:	ebae 0305 	sub.w	r3, lr, r5
 8014cac:	6123      	str	r3, [r4, #16]
 8014cae:	f8cd 8000 	str.w	r8, [sp]
 8014cb2:	463b      	mov	r3, r7
 8014cb4:	aa03      	add	r2, sp, #12
 8014cb6:	4621      	mov	r1, r4
 8014cb8:	4630      	mov	r0, r6
 8014cba:	f7ff feed 	bl	8014a98 <_printf_common>
 8014cbe:	3001      	adds	r0, #1
 8014cc0:	d155      	bne.n	8014d6e <_printf_i+0x1e6>
 8014cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8014cc6:	b005      	add	sp, #20
 8014cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ccc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8014cd0:	493c      	ldr	r1, [pc, #240]	; (8014dc4 <_printf_i+0x23c>)
 8014cd2:	6822      	ldr	r2, [r4, #0]
 8014cd4:	6818      	ldr	r0, [r3, #0]
 8014cd6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8014cda:	f100 0504 	add.w	r5, r0, #4
 8014cde:	601d      	str	r5, [r3, #0]
 8014ce0:	d001      	beq.n	8014ce6 <_printf_i+0x15e>
 8014ce2:	6803      	ldr	r3, [r0, #0]
 8014ce4:	e002      	b.n	8014cec <_printf_i+0x164>
 8014ce6:	0655      	lsls	r5, r2, #25
 8014ce8:	d5fb      	bpl.n	8014ce2 <_printf_i+0x15a>
 8014cea:	8803      	ldrh	r3, [r0, #0]
 8014cec:	07d0      	lsls	r0, r2, #31
 8014cee:	bf44      	itt	mi
 8014cf0:	f042 0220 	orrmi.w	r2, r2, #32
 8014cf4:	6022      	strmi	r2, [r4, #0]
 8014cf6:	b91b      	cbnz	r3, 8014d00 <_printf_i+0x178>
 8014cf8:	6822      	ldr	r2, [r4, #0]
 8014cfa:	f022 0220 	bic.w	r2, r2, #32
 8014cfe:	6022      	str	r2, [r4, #0]
 8014d00:	2210      	movs	r2, #16
 8014d02:	e7b1      	b.n	8014c68 <_printf_i+0xe0>
 8014d04:	4675      	mov	r5, lr
 8014d06:	fbb3 f0f2 	udiv	r0, r3, r2
 8014d0a:	fb02 3310 	mls	r3, r2, r0, r3
 8014d0e:	5ccb      	ldrb	r3, [r1, r3]
 8014d10:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014d14:	4603      	mov	r3, r0
 8014d16:	2800      	cmp	r0, #0
 8014d18:	d1f5      	bne.n	8014d06 <_printf_i+0x17e>
 8014d1a:	e7b7      	b.n	8014c8c <_printf_i+0x104>
 8014d1c:	6808      	ldr	r0, [r1, #0]
 8014d1e:	681a      	ldr	r2, [r3, #0]
 8014d20:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014d24:	6949      	ldr	r1, [r1, #20]
 8014d26:	d004      	beq.n	8014d32 <_printf_i+0x1aa>
 8014d28:	1d10      	adds	r0, r2, #4
 8014d2a:	6018      	str	r0, [r3, #0]
 8014d2c:	6813      	ldr	r3, [r2, #0]
 8014d2e:	6019      	str	r1, [r3, #0]
 8014d30:	e007      	b.n	8014d42 <_printf_i+0x1ba>
 8014d32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014d36:	f102 0004 	add.w	r0, r2, #4
 8014d3a:	6018      	str	r0, [r3, #0]
 8014d3c:	6813      	ldr	r3, [r2, #0]
 8014d3e:	d0f6      	beq.n	8014d2e <_printf_i+0x1a6>
 8014d40:	8019      	strh	r1, [r3, #0]
 8014d42:	2300      	movs	r3, #0
 8014d44:	4675      	mov	r5, lr
 8014d46:	6123      	str	r3, [r4, #16]
 8014d48:	e7b1      	b.n	8014cae <_printf_i+0x126>
 8014d4a:	681a      	ldr	r2, [r3, #0]
 8014d4c:	1d11      	adds	r1, r2, #4
 8014d4e:	6019      	str	r1, [r3, #0]
 8014d50:	6815      	ldr	r5, [r2, #0]
 8014d52:	2100      	movs	r1, #0
 8014d54:	6862      	ldr	r2, [r4, #4]
 8014d56:	4628      	mov	r0, r5
 8014d58:	f000 faca 	bl	80152f0 <memchr>
 8014d5c:	b108      	cbz	r0, 8014d62 <_printf_i+0x1da>
 8014d5e:	1b40      	subs	r0, r0, r5
 8014d60:	6060      	str	r0, [r4, #4]
 8014d62:	6863      	ldr	r3, [r4, #4]
 8014d64:	6123      	str	r3, [r4, #16]
 8014d66:	2300      	movs	r3, #0
 8014d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d6c:	e79f      	b.n	8014cae <_printf_i+0x126>
 8014d6e:	6923      	ldr	r3, [r4, #16]
 8014d70:	462a      	mov	r2, r5
 8014d72:	4639      	mov	r1, r7
 8014d74:	4630      	mov	r0, r6
 8014d76:	47c0      	blx	r8
 8014d78:	3001      	adds	r0, #1
 8014d7a:	d0a2      	beq.n	8014cc2 <_printf_i+0x13a>
 8014d7c:	6823      	ldr	r3, [r4, #0]
 8014d7e:	079b      	lsls	r3, r3, #30
 8014d80:	d507      	bpl.n	8014d92 <_printf_i+0x20a>
 8014d82:	2500      	movs	r5, #0
 8014d84:	f104 0919 	add.w	r9, r4, #25
 8014d88:	68e3      	ldr	r3, [r4, #12]
 8014d8a:	9a03      	ldr	r2, [sp, #12]
 8014d8c:	1a9b      	subs	r3, r3, r2
 8014d8e:	429d      	cmp	r5, r3
 8014d90:	db05      	blt.n	8014d9e <_printf_i+0x216>
 8014d92:	68e0      	ldr	r0, [r4, #12]
 8014d94:	9b03      	ldr	r3, [sp, #12]
 8014d96:	4298      	cmp	r0, r3
 8014d98:	bfb8      	it	lt
 8014d9a:	4618      	movlt	r0, r3
 8014d9c:	e793      	b.n	8014cc6 <_printf_i+0x13e>
 8014d9e:	2301      	movs	r3, #1
 8014da0:	464a      	mov	r2, r9
 8014da2:	4639      	mov	r1, r7
 8014da4:	4630      	mov	r0, r6
 8014da6:	47c0      	blx	r8
 8014da8:	3001      	adds	r0, #1
 8014daa:	d08a      	beq.n	8014cc2 <_printf_i+0x13a>
 8014dac:	3501      	adds	r5, #1
 8014dae:	e7eb      	b.n	8014d88 <_printf_i+0x200>
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d1a7      	bne.n	8014d04 <_printf_i+0x17c>
 8014db4:	780b      	ldrb	r3, [r1, #0]
 8014db6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014dba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014dbe:	e765      	b.n	8014c8c <_printf_i+0x104>
 8014dc0:	0801874a 	.word	0x0801874a
 8014dc4:	08018739 	.word	0x08018739

08014dc8 <_putc_r>:
 8014dc8:	b570      	push	{r4, r5, r6, lr}
 8014dca:	460d      	mov	r5, r1
 8014dcc:	4614      	mov	r4, r2
 8014dce:	4606      	mov	r6, r0
 8014dd0:	b118      	cbz	r0, 8014dda <_putc_r+0x12>
 8014dd2:	6983      	ldr	r3, [r0, #24]
 8014dd4:	b90b      	cbnz	r3, 8014dda <_putc_r+0x12>
 8014dd6:	f7ff fbbd 	bl	8014554 <__sinit>
 8014dda:	4b13      	ldr	r3, [pc, #76]	; (8014e28 <_putc_r+0x60>)
 8014ddc:	429c      	cmp	r4, r3
 8014dde:	d112      	bne.n	8014e06 <_putc_r+0x3e>
 8014de0:	6874      	ldr	r4, [r6, #4]
 8014de2:	68a3      	ldr	r3, [r4, #8]
 8014de4:	3b01      	subs	r3, #1
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	60a3      	str	r3, [r4, #8]
 8014dea:	da16      	bge.n	8014e1a <_putc_r+0x52>
 8014dec:	69a2      	ldr	r2, [r4, #24]
 8014dee:	4293      	cmp	r3, r2
 8014df0:	db02      	blt.n	8014df8 <_putc_r+0x30>
 8014df2:	b2eb      	uxtb	r3, r5
 8014df4:	2b0a      	cmp	r3, #10
 8014df6:	d110      	bne.n	8014e1a <_putc_r+0x52>
 8014df8:	4622      	mov	r2, r4
 8014dfa:	4629      	mov	r1, r5
 8014dfc:	4630      	mov	r0, r6
 8014dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e02:	f000 b86b 	b.w	8014edc <__swbuf_r>
 8014e06:	4b09      	ldr	r3, [pc, #36]	; (8014e2c <_putc_r+0x64>)
 8014e08:	429c      	cmp	r4, r3
 8014e0a:	d101      	bne.n	8014e10 <_putc_r+0x48>
 8014e0c:	68b4      	ldr	r4, [r6, #8]
 8014e0e:	e7e8      	b.n	8014de2 <_putc_r+0x1a>
 8014e10:	4b07      	ldr	r3, [pc, #28]	; (8014e30 <_putc_r+0x68>)
 8014e12:	429c      	cmp	r4, r3
 8014e14:	bf08      	it	eq
 8014e16:	68f4      	ldreq	r4, [r6, #12]
 8014e18:	e7e3      	b.n	8014de2 <_putc_r+0x1a>
 8014e1a:	6823      	ldr	r3, [r4, #0]
 8014e1c:	b2e8      	uxtb	r0, r5
 8014e1e:	1c5a      	adds	r2, r3, #1
 8014e20:	6022      	str	r2, [r4, #0]
 8014e22:	701d      	strb	r5, [r3, #0]
 8014e24:	bd70      	pop	{r4, r5, r6, pc}
 8014e26:	bf00      	nop
 8014e28:	080186e4 	.word	0x080186e4
 8014e2c:	08018704 	.word	0x08018704
 8014e30:	080186c4 	.word	0x080186c4

08014e34 <_sbrk_r>:
 8014e34:	b538      	push	{r3, r4, r5, lr}
 8014e36:	2300      	movs	r3, #0
 8014e38:	4c05      	ldr	r4, [pc, #20]	; (8014e50 <_sbrk_r+0x1c>)
 8014e3a:	4605      	mov	r5, r0
 8014e3c:	4608      	mov	r0, r1
 8014e3e:	6023      	str	r3, [r4, #0]
 8014e40:	f7eb fe50 	bl	8000ae4 <_sbrk>
 8014e44:	1c43      	adds	r3, r0, #1
 8014e46:	d102      	bne.n	8014e4e <_sbrk_r+0x1a>
 8014e48:	6823      	ldr	r3, [r4, #0]
 8014e4a:	b103      	cbz	r3, 8014e4e <_sbrk_r+0x1a>
 8014e4c:	602b      	str	r3, [r5, #0]
 8014e4e:	bd38      	pop	{r3, r4, r5, pc}
 8014e50:	2000ab50 	.word	0x2000ab50

08014e54 <__sread>:
 8014e54:	b510      	push	{r4, lr}
 8014e56:	460c      	mov	r4, r1
 8014e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e5c:	f000 faa4 	bl	80153a8 <_read_r>
 8014e60:	2800      	cmp	r0, #0
 8014e62:	bfab      	itete	ge
 8014e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014e66:	89a3      	ldrhlt	r3, [r4, #12]
 8014e68:	181b      	addge	r3, r3, r0
 8014e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014e6e:	bfac      	ite	ge
 8014e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8014e72:	81a3      	strhlt	r3, [r4, #12]
 8014e74:	bd10      	pop	{r4, pc}

08014e76 <__swrite>:
 8014e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e7a:	461f      	mov	r7, r3
 8014e7c:	898b      	ldrh	r3, [r1, #12]
 8014e7e:	4605      	mov	r5, r0
 8014e80:	05db      	lsls	r3, r3, #23
 8014e82:	460c      	mov	r4, r1
 8014e84:	4616      	mov	r6, r2
 8014e86:	d505      	bpl.n	8014e94 <__swrite+0x1e>
 8014e88:	2302      	movs	r3, #2
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e90:	f000 f9b8 	bl	8015204 <_lseek_r>
 8014e94:	89a3      	ldrh	r3, [r4, #12]
 8014e96:	4632      	mov	r2, r6
 8014e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014e9c:	81a3      	strh	r3, [r4, #12]
 8014e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ea2:	463b      	mov	r3, r7
 8014ea4:	4628      	mov	r0, r5
 8014ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014eaa:	f000 b869 	b.w	8014f80 <_write_r>

08014eae <__sseek>:
 8014eae:	b510      	push	{r4, lr}
 8014eb0:	460c      	mov	r4, r1
 8014eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014eb6:	f000 f9a5 	bl	8015204 <_lseek_r>
 8014eba:	1c43      	adds	r3, r0, #1
 8014ebc:	89a3      	ldrh	r3, [r4, #12]
 8014ebe:	bf15      	itete	ne
 8014ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8014ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014eca:	81a3      	strheq	r3, [r4, #12]
 8014ecc:	bf18      	it	ne
 8014ece:	81a3      	strhne	r3, [r4, #12]
 8014ed0:	bd10      	pop	{r4, pc}

08014ed2 <__sclose>:
 8014ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ed6:	f000 b8d3 	b.w	8015080 <_close_r>
	...

08014edc <__swbuf_r>:
 8014edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ede:	460e      	mov	r6, r1
 8014ee0:	4614      	mov	r4, r2
 8014ee2:	4605      	mov	r5, r0
 8014ee4:	b118      	cbz	r0, 8014eee <__swbuf_r+0x12>
 8014ee6:	6983      	ldr	r3, [r0, #24]
 8014ee8:	b90b      	cbnz	r3, 8014eee <__swbuf_r+0x12>
 8014eea:	f7ff fb33 	bl	8014554 <__sinit>
 8014eee:	4b21      	ldr	r3, [pc, #132]	; (8014f74 <__swbuf_r+0x98>)
 8014ef0:	429c      	cmp	r4, r3
 8014ef2:	d12a      	bne.n	8014f4a <__swbuf_r+0x6e>
 8014ef4:	686c      	ldr	r4, [r5, #4]
 8014ef6:	69a3      	ldr	r3, [r4, #24]
 8014ef8:	60a3      	str	r3, [r4, #8]
 8014efa:	89a3      	ldrh	r3, [r4, #12]
 8014efc:	071a      	lsls	r2, r3, #28
 8014efe:	d52e      	bpl.n	8014f5e <__swbuf_r+0x82>
 8014f00:	6923      	ldr	r3, [r4, #16]
 8014f02:	b363      	cbz	r3, 8014f5e <__swbuf_r+0x82>
 8014f04:	6923      	ldr	r3, [r4, #16]
 8014f06:	6820      	ldr	r0, [r4, #0]
 8014f08:	b2f6      	uxtb	r6, r6
 8014f0a:	1ac0      	subs	r0, r0, r3
 8014f0c:	6963      	ldr	r3, [r4, #20]
 8014f0e:	4637      	mov	r7, r6
 8014f10:	4298      	cmp	r0, r3
 8014f12:	db04      	blt.n	8014f1e <__swbuf_r+0x42>
 8014f14:	4621      	mov	r1, r4
 8014f16:	4628      	mov	r0, r5
 8014f18:	f000 f94a 	bl	80151b0 <_fflush_r>
 8014f1c:	bb28      	cbnz	r0, 8014f6a <__swbuf_r+0x8e>
 8014f1e:	68a3      	ldr	r3, [r4, #8]
 8014f20:	3001      	adds	r0, #1
 8014f22:	3b01      	subs	r3, #1
 8014f24:	60a3      	str	r3, [r4, #8]
 8014f26:	6823      	ldr	r3, [r4, #0]
 8014f28:	1c5a      	adds	r2, r3, #1
 8014f2a:	6022      	str	r2, [r4, #0]
 8014f2c:	701e      	strb	r6, [r3, #0]
 8014f2e:	6963      	ldr	r3, [r4, #20]
 8014f30:	4298      	cmp	r0, r3
 8014f32:	d004      	beq.n	8014f3e <__swbuf_r+0x62>
 8014f34:	89a3      	ldrh	r3, [r4, #12]
 8014f36:	07db      	lsls	r3, r3, #31
 8014f38:	d519      	bpl.n	8014f6e <__swbuf_r+0x92>
 8014f3a:	2e0a      	cmp	r6, #10
 8014f3c:	d117      	bne.n	8014f6e <__swbuf_r+0x92>
 8014f3e:	4621      	mov	r1, r4
 8014f40:	4628      	mov	r0, r5
 8014f42:	f000 f935 	bl	80151b0 <_fflush_r>
 8014f46:	b190      	cbz	r0, 8014f6e <__swbuf_r+0x92>
 8014f48:	e00f      	b.n	8014f6a <__swbuf_r+0x8e>
 8014f4a:	4b0b      	ldr	r3, [pc, #44]	; (8014f78 <__swbuf_r+0x9c>)
 8014f4c:	429c      	cmp	r4, r3
 8014f4e:	d101      	bne.n	8014f54 <__swbuf_r+0x78>
 8014f50:	68ac      	ldr	r4, [r5, #8]
 8014f52:	e7d0      	b.n	8014ef6 <__swbuf_r+0x1a>
 8014f54:	4b09      	ldr	r3, [pc, #36]	; (8014f7c <__swbuf_r+0xa0>)
 8014f56:	429c      	cmp	r4, r3
 8014f58:	bf08      	it	eq
 8014f5a:	68ec      	ldreq	r4, [r5, #12]
 8014f5c:	e7cb      	b.n	8014ef6 <__swbuf_r+0x1a>
 8014f5e:	4621      	mov	r1, r4
 8014f60:	4628      	mov	r0, r5
 8014f62:	f000 f81f 	bl	8014fa4 <__swsetup_r>
 8014f66:	2800      	cmp	r0, #0
 8014f68:	d0cc      	beq.n	8014f04 <__swbuf_r+0x28>
 8014f6a:	f04f 37ff 	mov.w	r7, #4294967295
 8014f6e:	4638      	mov	r0, r7
 8014f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f72:	bf00      	nop
 8014f74:	080186e4 	.word	0x080186e4
 8014f78:	08018704 	.word	0x08018704
 8014f7c:	080186c4 	.word	0x080186c4

08014f80 <_write_r>:
 8014f80:	b538      	push	{r3, r4, r5, lr}
 8014f82:	4605      	mov	r5, r0
 8014f84:	4608      	mov	r0, r1
 8014f86:	4611      	mov	r1, r2
 8014f88:	2200      	movs	r2, #0
 8014f8a:	4c05      	ldr	r4, [pc, #20]	; (8014fa0 <_write_r+0x20>)
 8014f8c:	6022      	str	r2, [r4, #0]
 8014f8e:	461a      	mov	r2, r3
 8014f90:	f7eb fd8b 	bl	8000aaa <_write>
 8014f94:	1c43      	adds	r3, r0, #1
 8014f96:	d102      	bne.n	8014f9e <_write_r+0x1e>
 8014f98:	6823      	ldr	r3, [r4, #0]
 8014f9a:	b103      	cbz	r3, 8014f9e <_write_r+0x1e>
 8014f9c:	602b      	str	r3, [r5, #0]
 8014f9e:	bd38      	pop	{r3, r4, r5, pc}
 8014fa0:	2000ab50 	.word	0x2000ab50

08014fa4 <__swsetup_r>:
 8014fa4:	4b32      	ldr	r3, [pc, #200]	; (8015070 <__swsetup_r+0xcc>)
 8014fa6:	b570      	push	{r4, r5, r6, lr}
 8014fa8:	681d      	ldr	r5, [r3, #0]
 8014faa:	4606      	mov	r6, r0
 8014fac:	460c      	mov	r4, r1
 8014fae:	b125      	cbz	r5, 8014fba <__swsetup_r+0x16>
 8014fb0:	69ab      	ldr	r3, [r5, #24]
 8014fb2:	b913      	cbnz	r3, 8014fba <__swsetup_r+0x16>
 8014fb4:	4628      	mov	r0, r5
 8014fb6:	f7ff facd 	bl	8014554 <__sinit>
 8014fba:	4b2e      	ldr	r3, [pc, #184]	; (8015074 <__swsetup_r+0xd0>)
 8014fbc:	429c      	cmp	r4, r3
 8014fbe:	d10f      	bne.n	8014fe0 <__swsetup_r+0x3c>
 8014fc0:	686c      	ldr	r4, [r5, #4]
 8014fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014fc6:	b29a      	uxth	r2, r3
 8014fc8:	0715      	lsls	r5, r2, #28
 8014fca:	d42c      	bmi.n	8015026 <__swsetup_r+0x82>
 8014fcc:	06d0      	lsls	r0, r2, #27
 8014fce:	d411      	bmi.n	8014ff4 <__swsetup_r+0x50>
 8014fd0:	2209      	movs	r2, #9
 8014fd2:	6032      	str	r2, [r6, #0]
 8014fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fd8:	81a3      	strh	r3, [r4, #12]
 8014fda:	f04f 30ff 	mov.w	r0, #4294967295
 8014fde:	bd70      	pop	{r4, r5, r6, pc}
 8014fe0:	4b25      	ldr	r3, [pc, #148]	; (8015078 <__swsetup_r+0xd4>)
 8014fe2:	429c      	cmp	r4, r3
 8014fe4:	d101      	bne.n	8014fea <__swsetup_r+0x46>
 8014fe6:	68ac      	ldr	r4, [r5, #8]
 8014fe8:	e7eb      	b.n	8014fc2 <__swsetup_r+0x1e>
 8014fea:	4b24      	ldr	r3, [pc, #144]	; (801507c <__swsetup_r+0xd8>)
 8014fec:	429c      	cmp	r4, r3
 8014fee:	bf08      	it	eq
 8014ff0:	68ec      	ldreq	r4, [r5, #12]
 8014ff2:	e7e6      	b.n	8014fc2 <__swsetup_r+0x1e>
 8014ff4:	0751      	lsls	r1, r2, #29
 8014ff6:	d512      	bpl.n	801501e <__swsetup_r+0x7a>
 8014ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ffa:	b141      	cbz	r1, 801500e <__swsetup_r+0x6a>
 8014ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015000:	4299      	cmp	r1, r3
 8015002:	d002      	beq.n	801500a <__swsetup_r+0x66>
 8015004:	4630      	mov	r0, r6
 8015006:	f000 f983 	bl	8015310 <_free_r>
 801500a:	2300      	movs	r3, #0
 801500c:	6363      	str	r3, [r4, #52]	; 0x34
 801500e:	89a3      	ldrh	r3, [r4, #12]
 8015010:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015014:	81a3      	strh	r3, [r4, #12]
 8015016:	2300      	movs	r3, #0
 8015018:	6063      	str	r3, [r4, #4]
 801501a:	6923      	ldr	r3, [r4, #16]
 801501c:	6023      	str	r3, [r4, #0]
 801501e:	89a3      	ldrh	r3, [r4, #12]
 8015020:	f043 0308 	orr.w	r3, r3, #8
 8015024:	81a3      	strh	r3, [r4, #12]
 8015026:	6923      	ldr	r3, [r4, #16]
 8015028:	b94b      	cbnz	r3, 801503e <__swsetup_r+0x9a>
 801502a:	89a3      	ldrh	r3, [r4, #12]
 801502c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015034:	d003      	beq.n	801503e <__swsetup_r+0x9a>
 8015036:	4621      	mov	r1, r4
 8015038:	4630      	mov	r0, r6
 801503a:	f000 f919 	bl	8015270 <__smakebuf_r>
 801503e:	89a2      	ldrh	r2, [r4, #12]
 8015040:	f012 0301 	ands.w	r3, r2, #1
 8015044:	d00c      	beq.n	8015060 <__swsetup_r+0xbc>
 8015046:	2300      	movs	r3, #0
 8015048:	60a3      	str	r3, [r4, #8]
 801504a:	6963      	ldr	r3, [r4, #20]
 801504c:	425b      	negs	r3, r3
 801504e:	61a3      	str	r3, [r4, #24]
 8015050:	6923      	ldr	r3, [r4, #16]
 8015052:	b953      	cbnz	r3, 801506a <__swsetup_r+0xc6>
 8015054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015058:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801505c:	d1ba      	bne.n	8014fd4 <__swsetup_r+0x30>
 801505e:	bd70      	pop	{r4, r5, r6, pc}
 8015060:	0792      	lsls	r2, r2, #30
 8015062:	bf58      	it	pl
 8015064:	6963      	ldrpl	r3, [r4, #20]
 8015066:	60a3      	str	r3, [r4, #8]
 8015068:	e7f2      	b.n	8015050 <__swsetup_r+0xac>
 801506a:	2000      	movs	r0, #0
 801506c:	e7f7      	b.n	801505e <__swsetup_r+0xba>
 801506e:	bf00      	nop
 8015070:	2000001c 	.word	0x2000001c
 8015074:	080186e4 	.word	0x080186e4
 8015078:	08018704 	.word	0x08018704
 801507c:	080186c4 	.word	0x080186c4

08015080 <_close_r>:
 8015080:	b538      	push	{r3, r4, r5, lr}
 8015082:	2300      	movs	r3, #0
 8015084:	4c05      	ldr	r4, [pc, #20]	; (801509c <_close_r+0x1c>)
 8015086:	4605      	mov	r5, r0
 8015088:	4608      	mov	r0, r1
 801508a:	6023      	str	r3, [r4, #0]
 801508c:	f7eb fd58 	bl	8000b40 <_close>
 8015090:	1c43      	adds	r3, r0, #1
 8015092:	d102      	bne.n	801509a <_close_r+0x1a>
 8015094:	6823      	ldr	r3, [r4, #0]
 8015096:	b103      	cbz	r3, 801509a <_close_r+0x1a>
 8015098:	602b      	str	r3, [r5, #0]
 801509a:	bd38      	pop	{r3, r4, r5, pc}
 801509c:	2000ab50 	.word	0x2000ab50

080150a0 <__sflush_r>:
 80150a0:	898a      	ldrh	r2, [r1, #12]
 80150a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150a6:	4605      	mov	r5, r0
 80150a8:	0710      	lsls	r0, r2, #28
 80150aa:	460c      	mov	r4, r1
 80150ac:	d45a      	bmi.n	8015164 <__sflush_r+0xc4>
 80150ae:	684b      	ldr	r3, [r1, #4]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	dc05      	bgt.n	80150c0 <__sflush_r+0x20>
 80150b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	dc02      	bgt.n	80150c0 <__sflush_r+0x20>
 80150ba:	2000      	movs	r0, #0
 80150bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80150c2:	2e00      	cmp	r6, #0
 80150c4:	d0f9      	beq.n	80150ba <__sflush_r+0x1a>
 80150c6:	2300      	movs	r3, #0
 80150c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80150cc:	682f      	ldr	r7, [r5, #0]
 80150ce:	602b      	str	r3, [r5, #0]
 80150d0:	d033      	beq.n	801513a <__sflush_r+0x9a>
 80150d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80150d4:	89a3      	ldrh	r3, [r4, #12]
 80150d6:	075a      	lsls	r2, r3, #29
 80150d8:	d505      	bpl.n	80150e6 <__sflush_r+0x46>
 80150da:	6863      	ldr	r3, [r4, #4]
 80150dc:	1ac0      	subs	r0, r0, r3
 80150de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80150e0:	b10b      	cbz	r3, 80150e6 <__sflush_r+0x46>
 80150e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80150e4:	1ac0      	subs	r0, r0, r3
 80150e6:	2300      	movs	r3, #0
 80150e8:	4602      	mov	r2, r0
 80150ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80150ec:	6a21      	ldr	r1, [r4, #32]
 80150ee:	4628      	mov	r0, r5
 80150f0:	47b0      	blx	r6
 80150f2:	1c43      	adds	r3, r0, #1
 80150f4:	89a3      	ldrh	r3, [r4, #12]
 80150f6:	d106      	bne.n	8015106 <__sflush_r+0x66>
 80150f8:	6829      	ldr	r1, [r5, #0]
 80150fa:	291d      	cmp	r1, #29
 80150fc:	d84b      	bhi.n	8015196 <__sflush_r+0xf6>
 80150fe:	4a2b      	ldr	r2, [pc, #172]	; (80151ac <__sflush_r+0x10c>)
 8015100:	40ca      	lsrs	r2, r1
 8015102:	07d6      	lsls	r6, r2, #31
 8015104:	d547      	bpl.n	8015196 <__sflush_r+0xf6>
 8015106:	2200      	movs	r2, #0
 8015108:	6062      	str	r2, [r4, #4]
 801510a:	6922      	ldr	r2, [r4, #16]
 801510c:	04d9      	lsls	r1, r3, #19
 801510e:	6022      	str	r2, [r4, #0]
 8015110:	d504      	bpl.n	801511c <__sflush_r+0x7c>
 8015112:	1c42      	adds	r2, r0, #1
 8015114:	d101      	bne.n	801511a <__sflush_r+0x7a>
 8015116:	682b      	ldr	r3, [r5, #0]
 8015118:	b903      	cbnz	r3, 801511c <__sflush_r+0x7c>
 801511a:	6560      	str	r0, [r4, #84]	; 0x54
 801511c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801511e:	602f      	str	r7, [r5, #0]
 8015120:	2900      	cmp	r1, #0
 8015122:	d0ca      	beq.n	80150ba <__sflush_r+0x1a>
 8015124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015128:	4299      	cmp	r1, r3
 801512a:	d002      	beq.n	8015132 <__sflush_r+0x92>
 801512c:	4628      	mov	r0, r5
 801512e:	f000 f8ef 	bl	8015310 <_free_r>
 8015132:	2000      	movs	r0, #0
 8015134:	6360      	str	r0, [r4, #52]	; 0x34
 8015136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801513a:	6a21      	ldr	r1, [r4, #32]
 801513c:	2301      	movs	r3, #1
 801513e:	4628      	mov	r0, r5
 8015140:	47b0      	blx	r6
 8015142:	1c41      	adds	r1, r0, #1
 8015144:	d1c6      	bne.n	80150d4 <__sflush_r+0x34>
 8015146:	682b      	ldr	r3, [r5, #0]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d0c3      	beq.n	80150d4 <__sflush_r+0x34>
 801514c:	2b1d      	cmp	r3, #29
 801514e:	d001      	beq.n	8015154 <__sflush_r+0xb4>
 8015150:	2b16      	cmp	r3, #22
 8015152:	d101      	bne.n	8015158 <__sflush_r+0xb8>
 8015154:	602f      	str	r7, [r5, #0]
 8015156:	e7b0      	b.n	80150ba <__sflush_r+0x1a>
 8015158:	89a3      	ldrh	r3, [r4, #12]
 801515a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801515e:	81a3      	strh	r3, [r4, #12]
 8015160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015164:	690f      	ldr	r7, [r1, #16]
 8015166:	2f00      	cmp	r7, #0
 8015168:	d0a7      	beq.n	80150ba <__sflush_r+0x1a>
 801516a:	0793      	lsls	r3, r2, #30
 801516c:	bf18      	it	ne
 801516e:	2300      	movne	r3, #0
 8015170:	680e      	ldr	r6, [r1, #0]
 8015172:	bf08      	it	eq
 8015174:	694b      	ldreq	r3, [r1, #20]
 8015176:	eba6 0807 	sub.w	r8, r6, r7
 801517a:	600f      	str	r7, [r1, #0]
 801517c:	608b      	str	r3, [r1, #8]
 801517e:	f1b8 0f00 	cmp.w	r8, #0
 8015182:	dd9a      	ble.n	80150ba <__sflush_r+0x1a>
 8015184:	4643      	mov	r3, r8
 8015186:	463a      	mov	r2, r7
 8015188:	6a21      	ldr	r1, [r4, #32]
 801518a:	4628      	mov	r0, r5
 801518c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801518e:	47b0      	blx	r6
 8015190:	2800      	cmp	r0, #0
 8015192:	dc07      	bgt.n	80151a4 <__sflush_r+0x104>
 8015194:	89a3      	ldrh	r3, [r4, #12]
 8015196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801519a:	81a3      	strh	r3, [r4, #12]
 801519c:	f04f 30ff 	mov.w	r0, #4294967295
 80151a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151a4:	4407      	add	r7, r0
 80151a6:	eba8 0800 	sub.w	r8, r8, r0
 80151aa:	e7e8      	b.n	801517e <__sflush_r+0xde>
 80151ac:	20400001 	.word	0x20400001

080151b0 <_fflush_r>:
 80151b0:	b538      	push	{r3, r4, r5, lr}
 80151b2:	690b      	ldr	r3, [r1, #16]
 80151b4:	4605      	mov	r5, r0
 80151b6:	460c      	mov	r4, r1
 80151b8:	b1db      	cbz	r3, 80151f2 <_fflush_r+0x42>
 80151ba:	b118      	cbz	r0, 80151c4 <_fflush_r+0x14>
 80151bc:	6983      	ldr	r3, [r0, #24]
 80151be:	b90b      	cbnz	r3, 80151c4 <_fflush_r+0x14>
 80151c0:	f7ff f9c8 	bl	8014554 <__sinit>
 80151c4:	4b0c      	ldr	r3, [pc, #48]	; (80151f8 <_fflush_r+0x48>)
 80151c6:	429c      	cmp	r4, r3
 80151c8:	d109      	bne.n	80151de <_fflush_r+0x2e>
 80151ca:	686c      	ldr	r4, [r5, #4]
 80151cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151d0:	b17b      	cbz	r3, 80151f2 <_fflush_r+0x42>
 80151d2:	4621      	mov	r1, r4
 80151d4:	4628      	mov	r0, r5
 80151d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151da:	f7ff bf61 	b.w	80150a0 <__sflush_r>
 80151de:	4b07      	ldr	r3, [pc, #28]	; (80151fc <_fflush_r+0x4c>)
 80151e0:	429c      	cmp	r4, r3
 80151e2:	d101      	bne.n	80151e8 <_fflush_r+0x38>
 80151e4:	68ac      	ldr	r4, [r5, #8]
 80151e6:	e7f1      	b.n	80151cc <_fflush_r+0x1c>
 80151e8:	4b05      	ldr	r3, [pc, #20]	; (8015200 <_fflush_r+0x50>)
 80151ea:	429c      	cmp	r4, r3
 80151ec:	bf08      	it	eq
 80151ee:	68ec      	ldreq	r4, [r5, #12]
 80151f0:	e7ec      	b.n	80151cc <_fflush_r+0x1c>
 80151f2:	2000      	movs	r0, #0
 80151f4:	bd38      	pop	{r3, r4, r5, pc}
 80151f6:	bf00      	nop
 80151f8:	080186e4 	.word	0x080186e4
 80151fc:	08018704 	.word	0x08018704
 8015200:	080186c4 	.word	0x080186c4

08015204 <_lseek_r>:
 8015204:	b538      	push	{r3, r4, r5, lr}
 8015206:	4605      	mov	r5, r0
 8015208:	4608      	mov	r0, r1
 801520a:	4611      	mov	r1, r2
 801520c:	2200      	movs	r2, #0
 801520e:	4c05      	ldr	r4, [pc, #20]	; (8015224 <_lseek_r+0x20>)
 8015210:	6022      	str	r2, [r4, #0]
 8015212:	461a      	mov	r2, r3
 8015214:	f7eb fcb8 	bl	8000b88 <_lseek>
 8015218:	1c43      	adds	r3, r0, #1
 801521a:	d102      	bne.n	8015222 <_lseek_r+0x1e>
 801521c:	6823      	ldr	r3, [r4, #0]
 801521e:	b103      	cbz	r3, 8015222 <_lseek_r+0x1e>
 8015220:	602b      	str	r3, [r5, #0]
 8015222:	bd38      	pop	{r3, r4, r5, pc}
 8015224:	2000ab50 	.word	0x2000ab50

08015228 <__swhatbuf_r>:
 8015228:	b570      	push	{r4, r5, r6, lr}
 801522a:	460e      	mov	r6, r1
 801522c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015230:	b090      	sub	sp, #64	; 0x40
 8015232:	2900      	cmp	r1, #0
 8015234:	4614      	mov	r4, r2
 8015236:	461d      	mov	r5, r3
 8015238:	da07      	bge.n	801524a <__swhatbuf_r+0x22>
 801523a:	2300      	movs	r3, #0
 801523c:	602b      	str	r3, [r5, #0]
 801523e:	89b3      	ldrh	r3, [r6, #12]
 8015240:	061a      	lsls	r2, r3, #24
 8015242:	d410      	bmi.n	8015266 <__swhatbuf_r+0x3e>
 8015244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015248:	e00e      	b.n	8015268 <__swhatbuf_r+0x40>
 801524a:	aa01      	add	r2, sp, #4
 801524c:	f000 f8be 	bl	80153cc <_fstat_r>
 8015250:	2800      	cmp	r0, #0
 8015252:	dbf2      	blt.n	801523a <__swhatbuf_r+0x12>
 8015254:	9a02      	ldr	r2, [sp, #8]
 8015256:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801525a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801525e:	425a      	negs	r2, r3
 8015260:	415a      	adcs	r2, r3
 8015262:	602a      	str	r2, [r5, #0]
 8015264:	e7ee      	b.n	8015244 <__swhatbuf_r+0x1c>
 8015266:	2340      	movs	r3, #64	; 0x40
 8015268:	2000      	movs	r0, #0
 801526a:	6023      	str	r3, [r4, #0]
 801526c:	b010      	add	sp, #64	; 0x40
 801526e:	bd70      	pop	{r4, r5, r6, pc}

08015270 <__smakebuf_r>:
 8015270:	898b      	ldrh	r3, [r1, #12]
 8015272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015274:	079d      	lsls	r5, r3, #30
 8015276:	4606      	mov	r6, r0
 8015278:	460c      	mov	r4, r1
 801527a:	d507      	bpl.n	801528c <__smakebuf_r+0x1c>
 801527c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015280:	6023      	str	r3, [r4, #0]
 8015282:	6123      	str	r3, [r4, #16]
 8015284:	2301      	movs	r3, #1
 8015286:	6163      	str	r3, [r4, #20]
 8015288:	b002      	add	sp, #8
 801528a:	bd70      	pop	{r4, r5, r6, pc}
 801528c:	ab01      	add	r3, sp, #4
 801528e:	466a      	mov	r2, sp
 8015290:	f7ff ffca 	bl	8015228 <__swhatbuf_r>
 8015294:	9900      	ldr	r1, [sp, #0]
 8015296:	4605      	mov	r5, r0
 8015298:	4630      	mov	r0, r6
 801529a:	f7ff fa61 	bl	8014760 <_malloc_r>
 801529e:	b948      	cbnz	r0, 80152b4 <__smakebuf_r+0x44>
 80152a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152a4:	059a      	lsls	r2, r3, #22
 80152a6:	d4ef      	bmi.n	8015288 <__smakebuf_r+0x18>
 80152a8:	f023 0303 	bic.w	r3, r3, #3
 80152ac:	f043 0302 	orr.w	r3, r3, #2
 80152b0:	81a3      	strh	r3, [r4, #12]
 80152b2:	e7e3      	b.n	801527c <__smakebuf_r+0xc>
 80152b4:	4b0d      	ldr	r3, [pc, #52]	; (80152ec <__smakebuf_r+0x7c>)
 80152b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80152b8:	89a3      	ldrh	r3, [r4, #12]
 80152ba:	6020      	str	r0, [r4, #0]
 80152bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152c0:	81a3      	strh	r3, [r4, #12]
 80152c2:	9b00      	ldr	r3, [sp, #0]
 80152c4:	6120      	str	r0, [r4, #16]
 80152c6:	6163      	str	r3, [r4, #20]
 80152c8:	9b01      	ldr	r3, [sp, #4]
 80152ca:	b15b      	cbz	r3, 80152e4 <__smakebuf_r+0x74>
 80152cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80152d0:	4630      	mov	r0, r6
 80152d2:	f000 f88d 	bl	80153f0 <_isatty_r>
 80152d6:	b128      	cbz	r0, 80152e4 <__smakebuf_r+0x74>
 80152d8:	89a3      	ldrh	r3, [r4, #12]
 80152da:	f023 0303 	bic.w	r3, r3, #3
 80152de:	f043 0301 	orr.w	r3, r3, #1
 80152e2:	81a3      	strh	r3, [r4, #12]
 80152e4:	89a3      	ldrh	r3, [r4, #12]
 80152e6:	431d      	orrs	r5, r3
 80152e8:	81a5      	strh	r5, [r4, #12]
 80152ea:	e7cd      	b.n	8015288 <__smakebuf_r+0x18>
 80152ec:	080144d5 	.word	0x080144d5

080152f0 <memchr>:
 80152f0:	b510      	push	{r4, lr}
 80152f2:	b2c9      	uxtb	r1, r1
 80152f4:	4402      	add	r2, r0
 80152f6:	4290      	cmp	r0, r2
 80152f8:	4603      	mov	r3, r0
 80152fa:	d101      	bne.n	8015300 <memchr+0x10>
 80152fc:	2000      	movs	r0, #0
 80152fe:	bd10      	pop	{r4, pc}
 8015300:	781c      	ldrb	r4, [r3, #0]
 8015302:	3001      	adds	r0, #1
 8015304:	428c      	cmp	r4, r1
 8015306:	d1f6      	bne.n	80152f6 <memchr+0x6>
 8015308:	4618      	mov	r0, r3
 801530a:	bd10      	pop	{r4, pc}

0801530c <__malloc_lock>:
 801530c:	4770      	bx	lr

0801530e <__malloc_unlock>:
 801530e:	4770      	bx	lr

08015310 <_free_r>:
 8015310:	b538      	push	{r3, r4, r5, lr}
 8015312:	4605      	mov	r5, r0
 8015314:	2900      	cmp	r1, #0
 8015316:	d043      	beq.n	80153a0 <_free_r+0x90>
 8015318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801531c:	1f0c      	subs	r4, r1, #4
 801531e:	2b00      	cmp	r3, #0
 8015320:	bfb8      	it	lt
 8015322:	18e4      	addlt	r4, r4, r3
 8015324:	f7ff fff2 	bl	801530c <__malloc_lock>
 8015328:	4a1e      	ldr	r2, [pc, #120]	; (80153a4 <_free_r+0x94>)
 801532a:	6813      	ldr	r3, [r2, #0]
 801532c:	4610      	mov	r0, r2
 801532e:	b933      	cbnz	r3, 801533e <_free_r+0x2e>
 8015330:	6063      	str	r3, [r4, #4]
 8015332:	6014      	str	r4, [r2, #0]
 8015334:	4628      	mov	r0, r5
 8015336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801533a:	f7ff bfe8 	b.w	801530e <__malloc_unlock>
 801533e:	42a3      	cmp	r3, r4
 8015340:	d90b      	bls.n	801535a <_free_r+0x4a>
 8015342:	6821      	ldr	r1, [r4, #0]
 8015344:	1862      	adds	r2, r4, r1
 8015346:	4293      	cmp	r3, r2
 8015348:	bf01      	itttt	eq
 801534a:	681a      	ldreq	r2, [r3, #0]
 801534c:	685b      	ldreq	r3, [r3, #4]
 801534e:	1852      	addeq	r2, r2, r1
 8015350:	6022      	streq	r2, [r4, #0]
 8015352:	6063      	str	r3, [r4, #4]
 8015354:	6004      	str	r4, [r0, #0]
 8015356:	e7ed      	b.n	8015334 <_free_r+0x24>
 8015358:	4613      	mov	r3, r2
 801535a:	685a      	ldr	r2, [r3, #4]
 801535c:	b10a      	cbz	r2, 8015362 <_free_r+0x52>
 801535e:	42a2      	cmp	r2, r4
 8015360:	d9fa      	bls.n	8015358 <_free_r+0x48>
 8015362:	6819      	ldr	r1, [r3, #0]
 8015364:	1858      	adds	r0, r3, r1
 8015366:	42a0      	cmp	r0, r4
 8015368:	d10b      	bne.n	8015382 <_free_r+0x72>
 801536a:	6820      	ldr	r0, [r4, #0]
 801536c:	4401      	add	r1, r0
 801536e:	1858      	adds	r0, r3, r1
 8015370:	4282      	cmp	r2, r0
 8015372:	6019      	str	r1, [r3, #0]
 8015374:	d1de      	bne.n	8015334 <_free_r+0x24>
 8015376:	6810      	ldr	r0, [r2, #0]
 8015378:	6852      	ldr	r2, [r2, #4]
 801537a:	4401      	add	r1, r0
 801537c:	6019      	str	r1, [r3, #0]
 801537e:	605a      	str	r2, [r3, #4]
 8015380:	e7d8      	b.n	8015334 <_free_r+0x24>
 8015382:	d902      	bls.n	801538a <_free_r+0x7a>
 8015384:	230c      	movs	r3, #12
 8015386:	602b      	str	r3, [r5, #0]
 8015388:	e7d4      	b.n	8015334 <_free_r+0x24>
 801538a:	6820      	ldr	r0, [r4, #0]
 801538c:	1821      	adds	r1, r4, r0
 801538e:	428a      	cmp	r2, r1
 8015390:	bf01      	itttt	eq
 8015392:	6811      	ldreq	r1, [r2, #0]
 8015394:	6852      	ldreq	r2, [r2, #4]
 8015396:	1809      	addeq	r1, r1, r0
 8015398:	6021      	streq	r1, [r4, #0]
 801539a:	6062      	str	r2, [r4, #4]
 801539c:	605c      	str	r4, [r3, #4]
 801539e:	e7c9      	b.n	8015334 <_free_r+0x24>
 80153a0:	bd38      	pop	{r3, r4, r5, pc}
 80153a2:	bf00      	nop
 80153a4:	20004230 	.word	0x20004230

080153a8 <_read_r>:
 80153a8:	b538      	push	{r3, r4, r5, lr}
 80153aa:	4605      	mov	r5, r0
 80153ac:	4608      	mov	r0, r1
 80153ae:	4611      	mov	r1, r2
 80153b0:	2200      	movs	r2, #0
 80153b2:	4c05      	ldr	r4, [pc, #20]	; (80153c8 <_read_r+0x20>)
 80153b4:	6022      	str	r2, [r4, #0]
 80153b6:	461a      	mov	r2, r3
 80153b8:	f7eb fb5a 	bl	8000a70 <_read>
 80153bc:	1c43      	adds	r3, r0, #1
 80153be:	d102      	bne.n	80153c6 <_read_r+0x1e>
 80153c0:	6823      	ldr	r3, [r4, #0]
 80153c2:	b103      	cbz	r3, 80153c6 <_read_r+0x1e>
 80153c4:	602b      	str	r3, [r5, #0]
 80153c6:	bd38      	pop	{r3, r4, r5, pc}
 80153c8:	2000ab50 	.word	0x2000ab50

080153cc <_fstat_r>:
 80153cc:	b538      	push	{r3, r4, r5, lr}
 80153ce:	2300      	movs	r3, #0
 80153d0:	4c06      	ldr	r4, [pc, #24]	; (80153ec <_fstat_r+0x20>)
 80153d2:	4605      	mov	r5, r0
 80153d4:	4608      	mov	r0, r1
 80153d6:	4611      	mov	r1, r2
 80153d8:	6023      	str	r3, [r4, #0]
 80153da:	f7eb fbbc 	bl	8000b56 <_fstat>
 80153de:	1c43      	adds	r3, r0, #1
 80153e0:	d102      	bne.n	80153e8 <_fstat_r+0x1c>
 80153e2:	6823      	ldr	r3, [r4, #0]
 80153e4:	b103      	cbz	r3, 80153e8 <_fstat_r+0x1c>
 80153e6:	602b      	str	r3, [r5, #0]
 80153e8:	bd38      	pop	{r3, r4, r5, pc}
 80153ea:	bf00      	nop
 80153ec:	2000ab50 	.word	0x2000ab50

080153f0 <_isatty_r>:
 80153f0:	b538      	push	{r3, r4, r5, lr}
 80153f2:	2300      	movs	r3, #0
 80153f4:	4c05      	ldr	r4, [pc, #20]	; (801540c <_isatty_r+0x1c>)
 80153f6:	4605      	mov	r5, r0
 80153f8:	4608      	mov	r0, r1
 80153fa:	6023      	str	r3, [r4, #0]
 80153fc:	f7eb fbba 	bl	8000b74 <_isatty>
 8015400:	1c43      	adds	r3, r0, #1
 8015402:	d102      	bne.n	801540a <_isatty_r+0x1a>
 8015404:	6823      	ldr	r3, [r4, #0]
 8015406:	b103      	cbz	r3, 801540a <_isatty_r+0x1a>
 8015408:	602b      	str	r3, [r5, #0]
 801540a:	bd38      	pop	{r3, r4, r5, pc}
 801540c:	2000ab50 	.word	0x2000ab50

08015410 <_init>:
 8015410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015412:	bf00      	nop
 8015414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015416:	bc08      	pop	{r3}
 8015418:	469e      	mov	lr, r3
 801541a:	4770      	bx	lr

0801541c <_fini>:
 801541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801541e:	bf00      	nop
 8015420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015422:	bc08      	pop	{r3}
 8015424:	469e      	mov	lr, r3
 8015426:	4770      	bx	lr
