
001_LWIP_TCP_UDP_CLIENT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001737c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000425c  0801757c  0801757c  0002757c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b7d8  0801b7d8  0002b7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b7e0  0801b7e0  0002b7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b7e4  0801b7e4  0002b7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  0801b7e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000e490  20000080  0801b868  00030080  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  2000e510  0801b868  0003e510  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00042b06  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000074f2  00000000  00000000  00072bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002148  00000000  00000000  0007a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002020  00000000  00000000  0007c1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00016f79  00000000  00000000  0007e210  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000aa09  00000000  00000000  00095189  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0009fb92  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00008f80  00000000  00000000  0009fc10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08017564 	.word	0x08017564

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08017564 	.word	0x08017564

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b97a 	b.w	80005ec <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	468c      	mov	ip, r1
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	9e08      	ldr	r6, [sp, #32]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d151      	bne.n	80003c4 <__udivmoddi4+0xb4>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d96d      	bls.n	8000402 <__udivmoddi4+0xf2>
 8000326:	fab2 fe82 	clz	lr, r2
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d00b      	beq.n	8000348 <__udivmoddi4+0x38>
 8000330:	f1ce 0c20 	rsb	ip, lr, #32
 8000334:	fa01 f50e 	lsl.w	r5, r1, lr
 8000338:	fa20 fc0c 	lsr.w	ip, r0, ip
 800033c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000340:	ea4c 0c05 	orr.w	ip, ip, r5
 8000344:	fa00 f40e 	lsl.w	r4, r0, lr
 8000348:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800034c:	0c25      	lsrs	r5, r4, #16
 800034e:	fbbc f8fa 	udiv	r8, ip, sl
 8000352:	fa1f f987 	uxth.w	r9, r7
 8000356:	fb0a cc18 	mls	ip, sl, r8, ip
 800035a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035e:	fb08 f309 	mul.w	r3, r8, r9
 8000362:	42ab      	cmp	r3, r5
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x6c>
 8000366:	19ed      	adds	r5, r5, r7
 8000368:	f108 32ff 	add.w	r2, r8, #4294967295
 800036c:	f080 8123 	bcs.w	80005b6 <__udivmoddi4+0x2a6>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f240 8120 	bls.w	80005b6 <__udivmoddi4+0x2a6>
 8000376:	f1a8 0802 	sub.w	r8, r8, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0fa 	udiv	r0, r5, sl
 8000384:	fb0a 5510 	mls	r5, sl, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb00 f909 	mul.w	r9, r0, r9
 8000390:	45a1      	cmp	r9, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x98>
 8000394:	19e4      	adds	r4, r4, r7
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 810a 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8107 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 0409 	sub.w	r4, r4, r9
 80003ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d061      	beq.n	800047a <__udivmoddi4+0x16a>
 80003b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ba:	2300      	movs	r3, #0
 80003bc:	6034      	str	r4, [r6, #0]
 80003be:	6073      	str	r3, [r6, #4]
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0xc8>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d054      	beq.n	8000476 <__udivmoddi4+0x166>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	f040 808e 	bne.w	80004fe <__udivmoddi4+0x1ee>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xdc>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2d0>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb65 0503 	sbc.w	r5, r5, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	46ac      	mov	ip, r5
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d03f      	beq.n	800047a <__udivmoddi4+0x16a>
 80003fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	b912      	cbnz	r2, 800040a <__udivmoddi4+0xfa>
 8000404:	2701      	movs	r7, #1
 8000406:	fbb7 f7f2 	udiv	r7, r7, r2
 800040a:	fab7 fe87 	clz	lr, r7
 800040e:	f1be 0f00 	cmp.w	lr, #0
 8000412:	d134      	bne.n	800047e <__udivmoddi4+0x16e>
 8000414:	1beb      	subs	r3, r5, r7
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	2101      	movs	r1, #1
 800041e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000422:	0c25      	lsrs	r5, r4, #16
 8000424:	fb02 3318 	mls	r3, r2, r8, r3
 8000428:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042c:	fb0c f308 	mul.w	r3, ip, r8
 8000430:	42ab      	cmp	r3, r5
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x134>
 8000434:	19ed      	adds	r5, r5, r7
 8000436:	f108 30ff 	add.w	r0, r8, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x132>
 800043c:	42ab      	cmp	r3, r5
 800043e:	f200 80d1 	bhi.w	80005e4 <__udivmoddi4+0x2d4>
 8000442:	4680      	mov	r8, r0
 8000444:	1aed      	subs	r5, r5, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb5 f0f2 	udiv	r0, r5, r2
 800044c:	fb02 5510 	mls	r5, r2, r0, r5
 8000450:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000454:	fb0c fc00 	mul.w	ip, ip, r0
 8000458:	45a4      	cmp	ip, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x15c>
 800045c:	19e4      	adds	r4, r4, r7
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x15a>
 8000464:	45a4      	cmp	ip, r4
 8000466:	f200 80b8 	bhi.w	80005da <__udivmoddi4+0x2ca>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 040c 	sub.w	r4, r4, ip
 8000470:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000474:	e79d      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1ce 0420 	rsb	r4, lr, #32
 8000482:	fa05 f30e 	lsl.w	r3, r5, lr
 8000486:	fa07 f70e 	lsl.w	r7, r7, lr
 800048a:	fa20 f804 	lsr.w	r8, r0, r4
 800048e:	0c3a      	lsrs	r2, r7, #16
 8000490:	fa25 f404 	lsr.w	r4, r5, r4
 8000494:	ea48 0803 	orr.w	r8, r8, r3
 8000498:	fbb4 f1f2 	udiv	r1, r4, r2
 800049c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004a0:	fb02 4411 	mls	r4, r2, r1, r4
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004ac:	fb01 f30c 	mul.w	r3, r1, ip
 80004b0:	42ab      	cmp	r3, r5
 80004b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x1bc>
 80004b8:	19ed      	adds	r5, r5, r7
 80004ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80004be:	f080 808a 	bcs.w	80005d6 <__udivmoddi4+0x2c6>
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	f240 8087 	bls.w	80005d6 <__udivmoddi4+0x2c6>
 80004c8:	3902      	subs	r1, #2
 80004ca:	443d      	add	r5, r7
 80004cc:	1aeb      	subs	r3, r5, r3
 80004ce:	fa1f f588 	uxth.w	r5, r8
 80004d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004d6:	fb02 3310 	mls	r3, r2, r0, r3
 80004da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004de:	fb00 f30c 	mul.w	r3, r0, ip
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1e6>
 80004e6:	19ed      	adds	r5, r5, r7
 80004e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ec:	d26f      	bcs.n	80005ce <__udivmoddi4+0x2be>
 80004ee:	42ab      	cmp	r3, r5
 80004f0:	d96d      	bls.n	80005ce <__udivmoddi4+0x2be>
 80004f2:	3802      	subs	r0, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	1aeb      	subs	r3, r5, r3
 80004f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fc:	e78f      	b.n	800041e <__udivmoddi4+0x10e>
 80004fe:	f1c1 0720 	rsb	r7, r1, #32
 8000502:	fa22 f807 	lsr.w	r8, r2, r7
 8000506:	408b      	lsls	r3, r1
 8000508:	fa05 f401 	lsl.w	r4, r5, r1
 800050c:	ea48 0303 	orr.w	r3, r8, r3
 8000510:	fa20 fe07 	lsr.w	lr, r0, r7
 8000514:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000518:	40fd      	lsrs	r5, r7
 800051a:	ea4e 0e04 	orr.w	lr, lr, r4
 800051e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000522:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000526:	fb0c 5519 	mls	r5, ip, r9, r5
 800052a:	fa1f f883 	uxth.w	r8, r3
 800052e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000532:	fb09 f408 	mul.w	r4, r9, r8
 8000536:	42ac      	cmp	r4, r5
 8000538:	fa02 f201 	lsl.w	r2, r2, r1
 800053c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x244>
 8000542:	18ed      	adds	r5, r5, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295
 8000548:	d243      	bcs.n	80005d2 <__udivmoddi4+0x2c2>
 800054a:	42ac      	cmp	r4, r5
 800054c:	d941      	bls.n	80005d2 <__udivmoddi4+0x2c2>
 800054e:	f1a9 0902 	sub.w	r9, r9, #2
 8000552:	441d      	add	r5, r3
 8000554:	1b2d      	subs	r5, r5, r4
 8000556:	fa1f fe8e 	uxth.w	lr, lr
 800055a:	fbb5 f0fc 	udiv	r0, r5, ip
 800055e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000562:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000566:	fb00 f808 	mul.w	r8, r0, r8
 800056a:	45a0      	cmp	r8, r4
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x26e>
 800056e:	18e4      	adds	r4, r4, r3
 8000570:	f100 35ff 	add.w	r5, r0, #4294967295
 8000574:	d229      	bcs.n	80005ca <__udivmoddi4+0x2ba>
 8000576:	45a0      	cmp	r8, r4
 8000578:	d927      	bls.n	80005ca <__udivmoddi4+0x2ba>
 800057a:	3802      	subs	r0, #2
 800057c:	441c      	add	r4, r3
 800057e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000582:	eba4 0408 	sub.w	r4, r4, r8
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	454c      	cmp	r4, r9
 800058c:	46c6      	mov	lr, r8
 800058e:	464d      	mov	r5, r9
 8000590:	d315      	bcc.n	80005be <__udivmoddi4+0x2ae>
 8000592:	d012      	beq.n	80005ba <__udivmoddi4+0x2aa>
 8000594:	b156      	cbz	r6, 80005ac <__udivmoddi4+0x29c>
 8000596:	ebba 030e 	subs.w	r3, sl, lr
 800059a:	eb64 0405 	sbc.w	r4, r4, r5
 800059e:	fa04 f707 	lsl.w	r7, r4, r7
 80005a2:	40cb      	lsrs	r3, r1
 80005a4:	431f      	orrs	r7, r3
 80005a6:	40cc      	lsrs	r4, r1
 80005a8:	6037      	str	r7, [r6, #0]
 80005aa:	6074      	str	r4, [r6, #4]
 80005ac:	2100      	movs	r1, #0
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	4618      	mov	r0, r3
 80005b4:	e6f8      	b.n	80003a8 <__udivmoddi4+0x98>
 80005b6:	4690      	mov	r8, r2
 80005b8:	e6e0      	b.n	800037c <__udivmoddi4+0x6c>
 80005ba:	45c2      	cmp	sl, r8
 80005bc:	d2ea      	bcs.n	8000594 <__udivmoddi4+0x284>
 80005be:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c2:	eb69 0503 	sbc.w	r5, r9, r3
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7e4      	b.n	8000594 <__udivmoddi4+0x284>
 80005ca:	4628      	mov	r0, r5
 80005cc:	e7d7      	b.n	800057e <__udivmoddi4+0x26e>
 80005ce:	4640      	mov	r0, r8
 80005d0:	e791      	b.n	80004f6 <__udivmoddi4+0x1e6>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e7be      	b.n	8000554 <__udivmoddi4+0x244>
 80005d6:	4601      	mov	r1, r0
 80005d8:	e778      	b.n	80004cc <__udivmoddi4+0x1bc>
 80005da:	3802      	subs	r0, #2
 80005dc:	443c      	add	r4, r7
 80005de:	e745      	b.n	800046c <__udivmoddi4+0x15c>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xe6>
 80005e4:	f1a8 0802 	sub.w	r8, r8, #2
 80005e8:	443d      	add	r5, r7
 80005ea:	e72b      	b.n	8000444 <__udivmoddi4+0x134>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <vApplicationGetIdleTaskMemory+0x2c>)
 8000600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <vApplicationGetIdleTaskMemory+0x30>)
 8000606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	2000009c 	.word	0x2000009c
 8000620:	200000f0 	.word	0x200000f0

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fb9d 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f81b 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f887 	bl	8000744 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 1024);
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <main+0x3c>)
 8000638:	1d3c      	adds	r4, r7, #4
 800063a:	461d      	mov	r5, r3
 800063c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000640:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fde8 	bl	8004222 <osThreadCreate>
 8000652:	4602      	mov	r2, r0
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <main+0x40>)
 8000656:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000658:	f003 fdcc 	bl	80041f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	e7fe      	b.n	800065c <main+0x38>
 800065e:	bf00      	nop
 8000660:	08017588 	.word	0x08017588
 8000664:	20004224 	.word	0x20004224

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2234      	movs	r2, #52	; 0x34
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f015 fd6a 	bl	8016150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	4a2b      	ldr	r2, [pc, #172]	; (800073c <SystemClock_Config+0xd4>)
 800068e:	4b2b      	ldr	r3, [pc, #172]	; (800073c <SystemClock_Config+0xd4>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <SystemClock_Config+0xd4>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	4a26      	ldr	r2, [pc, #152]	; (8000740 <SystemClock_Config+0xd8>)
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <SystemClock_Config+0xd8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <SystemClock_Config+0xd8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006bc:	2301      	movs	r3, #1
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006d4:	23d8      	movs	r3, #216	; 0xd8
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 f83f 	bl	800276c <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006f4:	f000 f9a2 	bl	8000a3c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f8:	f001 ffe8 	bl	80026cc <HAL_PWREx_EnableOverDrive>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000702:	f000 f99b 	bl	8000a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	230f      	movs	r3, #15
 8000708:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070a:	2302      	movs	r3, #2
 800070c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000712:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	2107      	movs	r1, #7
 8000724:	4618      	mov	r0, r3
 8000726:	f002 facf 	bl	8002cc8 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000730:	f000 f984 	bl	8000a3c <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3750      	adds	r7, #80	; 0x50
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	4a35      	ldr	r2, [pc, #212]	; (8000830 <MX_GPIO_Init+0xec>)
 800075c:	4b34      	ldr	r3, [pc, #208]	; (8000830 <MX_GPIO_Init+0xec>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b32      	ldr	r3, [pc, #200]	; (8000830 <MX_GPIO_Init+0xec>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	4a2f      	ldr	r2, [pc, #188]	; (8000830 <MX_GPIO_Init+0xec>)
 8000774:	4b2e      	ldr	r3, [pc, #184]	; (8000830 <MX_GPIO_Init+0xec>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_GPIO_Init+0xec>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4a29      	ldr	r2, [pc, #164]	; (8000830 <MX_GPIO_Init+0xec>)
 800078c:	4b28      	ldr	r3, [pc, #160]	; (8000830 <MX_GPIO_Init+0xec>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_GPIO_Init+0xec>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	4a23      	ldr	r2, [pc, #140]	; (8000830 <MX_GPIO_Init+0xec>)
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <MX_GPIO_Init+0xec>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <MX_GPIO_Init+0xec>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ba:	4a1d      	ldr	r2, [pc, #116]	; (8000830 <MX_GPIO_Init+0xec>)
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_GPIO_Init+0xec>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_GPIO_Init+0xec>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007d8:	4816      	ldr	r0, [pc, #88]	; (8000834 <MX_GPIO_Init+0xf0>)
 80007da:	f001 ff39 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4812      	ldr	r0, [pc, #72]	; (800083c <MX_GPIO_Init+0xf8>)
 80007f4:	f001 fd6a 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80007f8:	f244 0381 	movw	r3, #16513	; 0x4081
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4808      	ldr	r0, [pc, #32]	; (8000834 <MX_GPIO_Init+0xf0>)
 8000812:	f001 fd5b 	bl	80022cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2105      	movs	r1, #5
 800081a:	2028      	movs	r0, #40	; 0x28
 800081c:	f000 fbaa 	bl	8000f74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000820:	2028      	movs	r0, #40	; 0x28
 8000822:	f000 fbc3 	bl	8000fac <HAL_NVIC_EnableIRQ>

}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	; 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40020400 	.word	0x40020400
 8000838:	10110000 	.word	0x10110000
 800083c:	40020800 	.word	0x40020800

08000840 <tcp_server_task>:

/* USER CODE BEGIN 4 */
void tcp_server_task(void){
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0

	addr_size = sizeof(struct sockaddr_in);
 8000846:	4b60      	ldr	r3, [pc, #384]	; (80009c8 <tcp_server_task+0x188>)
 8000848:	2210      	movs	r2, #16
 800084a:	601a      	str	r2, [r3, #0]

	struct sockaddr_in my_addr, their_addr;
	my_addr.sin_addr.s_addr = INADDR_ANY;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
	my_addr.sin_family = AF_INET;
 8000850:	2302      	movs	r3, #2
 8000852:	747b      	strb	r3, [r7, #17]
	my_addr.sin_port = htons(MYPORT);
 8000854:	f241 3088 	movw	r0, #5000	; 0x1388
 8000858:	f00a fa14 	bl	800ac84 <lwip_htons>
 800085c:	4603      	mov	r3, r0
 800085e:	827b      	strh	r3, [r7, #18]

	while(1){
		if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1){
 8000860:	2200      	movs	r2, #0
 8000862:	2101      	movs	r1, #1
 8000864:	2002      	movs	r0, #2
 8000866:	f009 fe7d 	bl	800a564 <lwip_socket>
 800086a:	4602      	mov	r2, r0
 800086c:	4b57      	ldr	r3, [pc, #348]	; (80009cc <tcp_server_task+0x18c>)
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	4b56      	ldr	r3, [pc, #344]	; (80009cc <tcp_server_task+0x18c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000878:	d103      	bne.n	8000882 <tcp_server_task+0x42>
	        perror("socket");
 800087a:	4855      	ldr	r0, [pc, #340]	; (80009d0 <tcp_server_task+0x190>)
 800087c:	f015 fc96 	bl	80161ac <perror>
	        break;
 8000880:	e09d      	b.n	80009be <tcp_server_task+0x17e>
		}
		if(bind(sockfd,(struct sockaddr *)&my_addr, sizeof(struct sockaddr)) == -1){
 8000882:	4b52      	ldr	r3, [pc, #328]	; (80009cc <tcp_server_task+0x18c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f107 0110 	add.w	r1, r7, #16
 800088a:	2210      	movs	r2, #16
 800088c:	4618      	mov	r0, r3
 800088e:	f009 f973 	bl	8009b78 <lwip_bind>
 8000892:	4603      	mov	r3, r0
 8000894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000898:	d103      	bne.n	80008a2 <tcp_server_task+0x62>
			perror("bind");
 800089a:	484e      	ldr	r0, [pc, #312]	; (80009d4 <tcp_server_task+0x194>)
 800089c:	f015 fc86 	bl	80161ac <perror>
			break;
 80008a0:	e08d      	b.n	80009be <tcp_server_task+0x17e>
		}
		if(listen(sockfd, BACKLOG) == -1){
 80008a2:	4b4a      	ldr	r3, [pc, #296]	; (80009cc <tcp_server_task+0x18c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2105      	movs	r1, #5
 80008a8:	4618      	mov	r0, r3
 80008aa:	f009 f9d3 	bl	8009c54 <lwip_listen>
 80008ae:	4603      	mov	r3, r0
 80008b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b4:	d103      	bne.n	80008be <tcp_server_task+0x7e>
			perror("listen");
 80008b6:	4848      	ldr	r0, [pc, #288]	; (80009d8 <tcp_server_task+0x198>)
 80008b8:	f015 fc78 	bl	80161ac <perror>
			break;
 80008bc:	e07f      	b.n	80009be <tcp_server_task+0x17e>
		}
		if((new_fd = accept(sockfd,(struct sockaddr *)&their_addr, (socklen_t *)&addr_size)) == -1){
 80008be:	4b43      	ldr	r3, [pc, #268]	; (80009cc <tcp_server_task+0x18c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4639      	mov	r1, r7
 80008c4:	4a40      	ldr	r2, [pc, #256]	; (80009c8 <tcp_server_task+0x188>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	f009 f838 	bl	800993c <lwip_accept>
 80008cc:	4602      	mov	r2, r0
 80008ce:	4b43      	ldr	r3, [pc, #268]	; (80009dc <tcp_server_task+0x19c>)
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	4b42      	ldr	r3, [pc, #264]	; (80009dc <tcp_server_task+0x19c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008da:	d103      	bne.n	80008e4 <tcp_server_task+0xa4>
			perror("accept");
 80008dc:	4840      	ldr	r0, [pc, #256]	; (80009e0 <tcp_server_task+0x1a0>)
 80008de:	f015 fc65 	bl	80161ac <perror>
			break;
 80008e2:	e06c      	b.n	80009be <tcp_server_task+0x17e>
		}
		while(1){
			if((bytes = recv(new_fd, &buffer, sizeof(buffer), 0)) == -1){
 80008e4:	4b3d      	ldr	r3, [pc, #244]	; (80009dc <tcp_server_task+0x19c>)
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	2300      	movs	r3, #0
 80008ea:	2201      	movs	r2, #1
 80008ec:	493d      	ldr	r1, [pc, #244]	; (80009e4 <tcp_server_task+0x1a4>)
 80008ee:	f009 fd11 	bl	800a314 <lwip_recv>
 80008f2:	4602      	mov	r2, r0
 80008f4:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <tcp_server_task+0x1a8>)
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	4b3b      	ldr	r3, [pc, #236]	; (80009e8 <tcp_server_task+0x1a8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000900:	d103      	bne.n	800090a <tcp_server_task+0xca>
				perror("receive");
 8000902:	483a      	ldr	r0, [pc, #232]	; (80009ec <tcp_server_task+0x1ac>)
 8000904:	f015 fc52 	bl	80161ac <perror>
				continue;
 8000908:	e058      	b.n	80009bc <tcp_server_task+0x17c>
			}
			if((int)buffer%3 == 1){
 800090a:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <tcp_server_task+0x1a4>)
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <tcp_server_task+0x1b0>)
 8000910:	fba3 1302 	umull	r1, r3, r3, r2
 8000914:	0859      	lsrs	r1, r3, #1
 8000916:	460b      	mov	r3, r1
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	440b      	add	r3, r1
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b01      	cmp	r3, #1
 8000922:	d10b      	bne.n	800093c <tcp_server_task+0xfc>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2101      	movs	r1, #1
 8000928:	4832      	ldr	r0, [pc, #200]	; (80009f4 <tcp_server_task+0x1b4>)
 800092a:	f001 fe91 	bl	8002650 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_14, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000934:	482f      	ldr	r0, [pc, #188]	; (80009f4 <tcp_server_task+0x1b4>)
 8000936:	f001 fe8b 	bl	8002650 <HAL_GPIO_WritePin>
 800093a:	e030      	b.n	800099e <tcp_server_task+0x15e>
			}
			else if((int)buffer%3 == 2){
 800093c:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <tcp_server_task+0x1a4>)
 800093e:	781a      	ldrb	r2, [r3, #0]
 8000940:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <tcp_server_task+0x1b0>)
 8000942:	fba3 1302 	umull	r1, r3, r3, r2
 8000946:	0859      	lsrs	r1, r3, #1
 8000948:	460b      	mov	r3, r1
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	440b      	add	r3, r1
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b02      	cmp	r3, #2
 8000954:	d10b      	bne.n	800096e <tcp_server_task+0x12e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	4826      	ldr	r0, [pc, #152]	; (80009f4 <tcp_server_task+0x1b4>)
 800095c:	f001 fe78 	bl	8002650 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_14, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f244 0101 	movw	r1, #16385	; 0x4001
 8000966:	4823      	ldr	r0, [pc, #140]	; (80009f4 <tcp_server_task+0x1b4>)
 8000968:	f001 fe72 	bl	8002650 <HAL_GPIO_WritePin>
 800096c:	e017      	b.n	800099e <tcp_server_task+0x15e>
			}
			else if((int)buffer%3 == 0){
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <tcp_server_task+0x1a4>)
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <tcp_server_task+0x1b0>)
 8000974:	fba3 1302 	umull	r1, r3, r3, r2
 8000978:	0859      	lsrs	r1, r3, #1
 800097a:	460b      	mov	r3, r1
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	440b      	add	r3, r1
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	d10a      	bne.n	800099e <tcp_server_task+0x15e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098e:	4819      	ldr	r0, [pc, #100]	; (80009f4 <tcp_server_task+0x1b4>)
 8000990:	f001 fe5e 	bl	8002650 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2181      	movs	r1, #129	; 0x81
 8000998:	4816      	ldr	r0, [pc, #88]	; (80009f4 <tcp_server_task+0x1b4>)
 800099a:	f001 fe59 	bl	8002650 <HAL_GPIO_WritePin>
			}
			if(send(new_fd, &result, sizeof(result), 0) == -1){
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <tcp_server_task+0x19c>)
 80009a0:	6818      	ldr	r0, [r3, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	2201      	movs	r2, #1
 80009a6:	4914      	ldr	r1, [pc, #80]	; (80009f8 <tcp_server_task+0x1b8>)
 80009a8:	f009 fcca 	bl	800a340 <lwip_send>
 80009ac:	4603      	mov	r3, r0
 80009ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b2:	d197      	bne.n	80008e4 <tcp_server_task+0xa4>
				perror("send");
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <tcp_server_task+0x1bc>)
 80009b6:	f015 fbf9 	bl	80161ac <perror>
				continue;
 80009ba:	bf00      	nop
			if((bytes = recv(new_fd, &buffer, sizeof(buffer), 0)) == -1){
 80009bc:	e792      	b.n	80008e4 <tcp_server_task+0xa4>
			}
		}
		close(new_fd);
		close(sockfd);
	}
}
 80009be:	bf00      	nop
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20004230 	.word	0x20004230
 80009cc:	20004228 	.word	0x20004228
 80009d0:	080175a4 	.word	0x080175a4
 80009d4:	080175ac 	.word	0x080175ac
 80009d8:	080175b4 	.word	0x080175b4
 80009dc:	2000422c 	.word	0x2000422c
 80009e0:	080175bc 	.word	0x080175bc
 80009e4:	20004238 	.word	0x20004238
 80009e8:	20004234 	.word	0x20004234
 80009ec:	080175c4 	.word	0x080175c4
 80009f0:	aaaaaaab 	.word	0xaaaaaaab
 80009f4:	40020400 	.word	0x40020400
 80009f8:	20004244 	.word	0x20004244
 80009fc:	080175cc 	.word	0x080175cc

08000a00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a08:	f002 fe52 	bl	80036b0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcp_server_task();
 8000a0c:	f7ff ff18 	bl	8000840 <tcp_server_task>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f003 fc52 	bl	80042ba <osDelay>
 8000a16:	e7fb      	b.n	8000a10 <StartDefaultTask+0x10>

08000a18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a2a:	f000 f9ab 	bl	8000d84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40010000 	.word	0x40010000

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <Error_Handler+0x6>

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4a11      	ldr	r2, [pc, #68]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	f06f 0001 	mvn.w	r0, #1
 8000a82:	f000 fa77 	bl	8000f74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	; 0x30
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	2019      	movs	r0, #25
 8000aaa:	f000 fa63 	bl	8000f74 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000aae:	2019      	movs	r0, #25
 8000ab0:	f000 fa7c 	bl	8000fac <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ab4:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <HAL_InitTick+0xa0>)
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <HAL_InitTick+0xa0>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <HAL_InitTick+0xa0>)
 8000ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000acc:	f107 0210 	add.w	r2, r7, #16
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 fad8 	bl	800308c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000adc:	f002 fac2 	bl	8003064 <HAL_RCC_GetPCLK2Freq>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae8:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <HAL_InitTick+0xa4>)
 8000aea:	fba2 2303 	umull	r2, r3, r2, r3
 8000aee:	0c9b      	lsrs	r3, r3, #18
 8000af0:	3b01      	subs	r3, #1
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_InitTick+0xa8>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <HAL_InitTick+0xac>)
 8000af8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_InitTick+0xa8>)
 8000afc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b00:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_InitTick+0xa8>)
 8000b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b06:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_InitTick+0xa8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <HAL_InitTick+0xa8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b14:	4809      	ldr	r0, [pc, #36]	; (8000b3c <HAL_InitTick+0xa8>)
 8000b16:	f002 faeb 	bl	80030f0 <HAL_TIM_Base_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d104      	bne.n	8000b2a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b20:	4806      	ldr	r0, [pc, #24]	; (8000b3c <HAL_InitTick+0xa8>)
 8000b22:	f002 fb47 	bl	80031b4 <HAL_TIM_Base_Start_IT>
 8000b26:	4603      	mov	r3, r0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3730      	adds	r7, #48	; 0x30
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800
 8000b38:	431bde83 	.word	0x431bde83
 8000b3c:	20004248 	.word	0x20004248
 8000b40:	40010000 	.word	0x40010000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b76:	f002 fb95 	bl	80032a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20004248 	.word	0x20004248

08000b84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b8a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b8e:	f001 fd79 	bl	8002684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000b92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b96:	4814      	ldr	r0, [pc, #80]	; (8000be8 <EXTI15_10_IRQHandler+0x64>)
 8000b98:	f001 fd42 	bl	8002620 <HAL_GPIO_ReadPin>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d01e      	beq.n	8000be0 <EXTI15_10_IRQHandler+0x5c>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 8000ba2:	bf00      	nop
 8000ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba8:	480f      	ldr	r0, [pc, #60]	; (8000be8 <EXTI15_10_IRQHandler+0x64>)
 8000baa:	f001 fd39 	bl	8002620 <HAL_GPIO_ReadPin>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1f7      	bne.n	8000ba4 <EXTI15_10_IRQHandler+0x20>
	  for(int i=0;i<1500000;i++);
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	e002      	b.n	8000bc0 <EXTI15_10_IRQHandler+0x3c>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <EXTI15_10_IRQHandler+0x68>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	ddf8      	ble.n	8000bba <EXTI15_10_IRQHandler+0x36>
	  count++;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <EXTI15_10_IRQHandler+0x6c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <EXTI15_10_IRQHandler+0x6c>)
 8000bd0:	6013      	str	r3, [r2, #0]
	  result = '0' + count;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <EXTI15_10_IRQHandler+0x6c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	3330      	adds	r3, #48	; 0x30
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <EXTI15_10_IRQHandler+0x70>)
 8000bde:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40020800 	.word	0x40020800
 8000bec:	0016e35f 	.word	0x0016e35f
 8000bf0:	20004240 	.word	0x20004240
 8000bf4:	20004244 	.word	0x20004244

08000bf8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <ETH_IRQHandler+0x10>)
 8000bfe:	f000 fdc7 	bl	8001790 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20005bbc 	.word	0x20005bbc

08000c0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b087      	sub	sp, #28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	e00a      	b.n	8000c34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c1e:	68bc      	ldr	r4, [r7, #8]
 8000c20:	1c63      	adds	r3, r4, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	f3af 8000 	nop.w
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dbf0      	blt.n	8000c1e <_read+0x12>
	}

return len;
 8000c3c:	687b      	ldr	r3, [r7, #4]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	371c      	adds	r7, #28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd90      	pop	{r4, r7, pc}

08000c46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	e009      	b.n	8000c6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	60ba      	str	r2, [r7, #8]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbf1      	blt.n	8000c58 <_write+0x12>
	}
	return len;
 8000c74:	687b      	ldr	r3, [r7, #4]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x50>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x16>
		heap_end = &end;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <_sbrk+0x50>)
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <_sbrk+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <_sbrk+0x50>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <_sbrk+0x50>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	466a      	mov	r2, sp
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d905      	bls.n	8000cb6 <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <_sbrk+0x58>)
 8000cac:	220c      	movs	r2, #12
 8000cae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	e006      	b.n	8000cc4 <_sbrk+0x44>
	}

	heap_end += incr;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <_sbrk+0x50>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <_sbrk+0x50>)
 8000cc0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	200002f0 	.word	0x200002f0
 8000cd4:	2000e510 	.word	0x2000e510
 8000cd8:	2000e508 	.word	0x2000e508

08000cdc <_close>:

int _close(int file)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	return -1;
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d04:	605a      	str	r2, [r3, #4]
	return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_isatty>:

int _isatty(int file)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	return 1;
 8000d1c:	2301      	movs	r3, #1
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b085      	sub	sp, #20
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
	return 0;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <SystemInit+0x20>)
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <SystemInit+0x20>)
 8000d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f8f6 	bl	8000f5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	200f      	movs	r0, #15
 8000d74:	f7ff fe8e 	bl	8000a94 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d78:	f7ff fe64 	bl	8000a44 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20004294 	.word	0x20004294

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20004294 	.word	0x20004294

08000dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dcc:	f7ff ffee 	bl	8000dac <HAL_GetTick>
 8000dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ddc:	d005      	beq.n	8000dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_Delay+0x40>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4413      	add	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dea:	bf00      	nop
 8000dec:	f7ff ffde 	bl	8000dac <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	1ad2      	subs	r2, r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d3f7      	bcc.n	8000dec <HAL_Delay+0x28>
  {
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000008 	.word	0x20000008

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <__NVIC_SetPriorityGrouping+0x40>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x40>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	05fa0000 	.word	0x05fa0000

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db0b      	blt.n	8000e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7e:	4909      	ldr	r1, [pc, #36]	; (8000ea4 <__NVIC_EnableIRQ+0x38>)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	095b      	lsrs	r3, r3, #5
 8000e86:	79fa      	ldrb	r2, [r7, #7]
 8000e88:	f002 021f 	and.w	r2, r2, #31
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000e100 	.word	0xe000e100

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	490d      	ldr	r1, [pc, #52]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	4909      	ldr	r1, [pc, #36]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	2201      	movs	r2, #1
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	1e5a      	subs	r2, r3, #1
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f42:	2101      	movs	r1, #1
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	1e59      	subs	r1, r3, #1
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ff4e 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f86:	f7ff ff63 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000f8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	68b9      	ldr	r1, [r7, #8]
 8000f90:	6978      	ldr	r0, [r7, #20]
 8000f92:	f7ff ffb3 	bl	8000efc <NVIC_EncodePriority>
 8000f96:	4602      	mov	r2, r0
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff82 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fa4:	bf00      	nop
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ff56 	bl	8000e6c <__NVIC_EnableIRQ>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000fd8:	4ba9      	ldr	r3, [pc, #676]	; (8001280 <HAL_ETH_Init+0x2b8>)
 8000fda:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e183      	b.n	80012f6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d106      	bne.n	8001008 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f002 fcb0 	bl	8003968 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001008:	4a9e      	ldr	r2, [pc, #632]	; (8001284 <HAL_ETH_Init+0x2bc>)
 800100a:	4b9e      	ldr	r3, [pc, #632]	; (8001284 <HAL_ETH_Init+0x2bc>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001012:	6453      	str	r3, [r2, #68]	; 0x44
 8001014:	4b9b      	ldr	r3, [pc, #620]	; (8001284 <HAL_ETH_Init+0x2bc>)
 8001016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001020:	4a99      	ldr	r2, [pc, #612]	; (8001288 <HAL_ETH_Init+0x2c0>)
 8001022:	4b99      	ldr	r3, [pc, #612]	; (8001288 <HAL_ETH_Init+0x2c0>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800102a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800102c:	4996      	ldr	r1, [pc, #600]	; (8001288 <HAL_ETH_Init+0x2c0>)
 800102e:	4b96      	ldr	r3, [pc, #600]	; (8001288 <HAL_ETH_Init+0x2c0>)
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4313      	orrs	r3, r2
 8001038:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6812      	ldr	r2, [r2, #0]
 8001042:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001046:	6812      	ldr	r2, [r2, #0]
 8001048:	f042 0201 	orr.w	r2, r2, #1
 800104c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001050:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001052:	f7ff feab 	bl	8000dac <HAL_GetTick>
 8001056:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001058:	e011      	b.n	800107e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800105a:	f7ff fea7 	bl	8000dac <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001068:	d909      	bls.n	800107e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2203      	movs	r2, #3
 800106e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e13b      	b.n	80012f6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1e4      	bne.n	800105a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f023 031c 	bic.w	r3, r3, #28
 800109e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80010a0:	f001 ffd4 	bl	800304c <HAL_RCC_GetHCLKFreq>
 80010a4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	4a78      	ldr	r2, [pc, #480]	; (800128c <HAL_ETH_Init+0x2c4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d908      	bls.n	80010c0 <HAL_ETH_Init+0xf8>
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	4a77      	ldr	r2, [pc, #476]	; (8001290 <HAL_ETH_Init+0x2c8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d804      	bhi.n	80010c0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	e027      	b.n	8001110 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	4a73      	ldr	r2, [pc, #460]	; (8001290 <HAL_ETH_Init+0x2c8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d908      	bls.n	80010da <HAL_ETH_Init+0x112>
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	4a72      	ldr	r2, [pc, #456]	; (8001294 <HAL_ETH_Init+0x2cc>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d804      	bhi.n	80010da <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f043 030c 	orr.w	r3, r3, #12
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	e01a      	b.n	8001110 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	4a6d      	ldr	r2, [pc, #436]	; (8001294 <HAL_ETH_Init+0x2cc>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d903      	bls.n	80010ea <HAL_ETH_Init+0x122>
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4a6c      	ldr	r2, [pc, #432]	; (8001298 <HAL_ETH_Init+0x2d0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d911      	bls.n	800110e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	4a6a      	ldr	r2, [pc, #424]	; (8001298 <HAL_ETH_Init+0x2d0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d908      	bls.n	8001104 <HAL_ETH_Init+0x13c>
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	4a69      	ldr	r2, [pc, #420]	; (800129c <HAL_ETH_Init+0x2d4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d804      	bhi.n	8001104 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e005      	b.n	8001110 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f043 0310 	orr.w	r3, r3, #16
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	e000      	b.n	8001110 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800110e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001118:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800111c:	2100      	movs	r1, #0
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 fc19 	bl	8001956 <HAL_ETH_WritePHYRegister>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800112e:	6939      	ldr	r1, [r7, #16]
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 fdcd 	bl	8001cd0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e0d9      	b.n	80012f6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001142:	20ff      	movs	r0, #255	; 0xff
 8001144:	f7ff fe3e 	bl	8000dc4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80a7 	beq.w	80012a0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001152:	f7ff fe2b 	bl	8000dac <HAL_GetTick>
 8001156:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	461a      	mov	r2, r3
 800115e:	2101      	movs	r1, #1
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fb90 	bl	8001886 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001166:	f7ff fe21 	bl	8000dac <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f241 3288 	movw	r2, #5000	; 0x1388
 8001174:	4293      	cmp	r3, r2
 8001176:	d90f      	bls.n	8001198 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800117c:	6939      	ldr	r1, [r7, #16]
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 fda6 	bl	8001cd0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e0ae      	b.n	80012f6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0da      	beq.n	8001158 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80011a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011a6:	2100      	movs	r1, #0
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 fbd4 	bl	8001956 <HAL_ETH_WritePHYRegister>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00b      	beq.n	80011cc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011b8:	6939      	ldr	r1, [r7, #16]
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 fd88 	bl	8001cd0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80011c8:	2301      	movs	r3, #1
 80011ca:	e094      	b.n	80012f6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80011cc:	f7ff fdee 	bl	8000dac <HAL_GetTick>
 80011d0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	461a      	mov	r2, r3
 80011d8:	2101      	movs	r1, #1
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fb53 	bl	8001886 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80011e0:	f7ff fde4 	bl	8000dac <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d90f      	bls.n	8001212 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80011f6:	6939      	ldr	r1, [r7, #16]
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 fd69 	bl	8001cd0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e071      	b.n	80012f6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f003 0320 	and.w	r3, r3, #32
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0da      	beq.n	80011d2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	461a      	mov	r2, r3
 8001222:	2110      	movs	r1, #16
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 fb2e 	bl	8001886 <HAL_ETH_ReadPHYRegister>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00b      	beq.n	8001248 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001234:	6939      	ldr	r1, [r7, #16]
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 fd4a 	bl	8001cd0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001244:	2301      	movs	r3, #1
 8001246:	e056      	b.n	80012f6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	e002      	b.n	8001262 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	e037      	b.n	80012e4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	e032      	b.n	80012e4 <HAL_ETH_Init+0x31c>
 800127e:	bf00      	nop
 8001280:	03938700 	.word	0x03938700
 8001284:	40023800 	.word	0x40023800
 8001288:	40013800 	.word	0x40013800
 800128c:	01312cff 	.word	0x01312cff
 8001290:	02160ebf 	.word	0x02160ebf
 8001294:	039386ff 	.word	0x039386ff
 8001298:	05f5e0ff 	.word	0x05f5e0ff
 800129c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	085b      	lsrs	r3, r3, #1
 80012ae:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	2100      	movs	r1, #0
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 fb4c 	bl	8001956 <HAL_ETH_WritePHYRegister>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00b      	beq.n	80012dc <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012c8:	6939      	ldr	r1, [r7, #16]
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 fd00 	bl	8001cd0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e00c      	b.n	80012f6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80012dc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80012e0:	f7ff fd70 	bl	8000dc4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80012e4:	6939      	ldr	r1, [r7, #16]
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 fcf2 	bl	8001cd0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop

08001300 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <HAL_ETH_DMATxDescListInit+0x20>
 800131c:	2302      	movs	r3, #2
 800131e:	e052      	b.n	80013c6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2202      	movs	r2, #2
 800132c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	e030      	b.n	800139e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	015b      	lsls	r3, r3, #5
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	4413      	add	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800134c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001354:	fb02 f303 	mul.w	r3, r2, r3
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	461a      	mov	r2, r3
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d105      	bne.n	8001376 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	1e5a      	subs	r2, r3, #1
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	429a      	cmp	r2, r3
 800137e:	d908      	bls.n	8001392 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3301      	adds	r3, #1
 8001384:	015b      	lsls	r3, r3, #5
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	4413      	add	r3, r2
 800138a:	461a      	mov	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	e002      	b.n	8001398 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3301      	adds	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d3ca      	bcc.n	800133c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6819      	ldr	r1, [r3, #0]
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f241 0310 	movw	r3, #4112	; 0x1010
 80013b0:	440b      	add	r3, r1
 80013b2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b087      	sub	sp, #28
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <HAL_ETH_DMARxDescListInit+0x20>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e056      	b.n	80014a0 <HAL_ETH_DMARxDescListInit+0xce>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2202      	movs	r2, #2
 80013fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e034      	b.n	8001478 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	015b      	lsls	r3, r3, #5
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	4413      	add	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800141e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001426:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	461a      	mov	r2, r3
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d105      	bne.n	8001450 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	1e5a      	subs	r2, r3, #1
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	429a      	cmp	r2, r3
 8001458:	d908      	bls.n	800146c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3301      	adds	r3, #1
 800145e:	015b      	lsls	r3, r3, #5
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	4413      	add	r3, r2
 8001464:	461a      	mov	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	e002      	b.n	8001472 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d3c6      	bcc.n	800140e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	f241 030c 	movw	r3, #4108	; 0x100c
 800148a:	440b      	add	r3, r1
 800148c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	371c      	adds	r7, #28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <HAL_ETH_TransmitFrame+0x24>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e0cd      	b.n	800166c <HAL_ETH_TransmitFrame+0x1c0>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2202      	movs	r2, #2
 80014dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0b8      	b.n	800166c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	da09      	bge.n	8001518 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2212      	movs	r2, #18
 8001508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0a9      	b.n	800166c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800151e:	4293      	cmp	r3, r2
 8001520:	d915      	bls.n	800154e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	4a54      	ldr	r2, [pc, #336]	; (8001678 <HAL_ETH_TransmitFrame+0x1cc>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	0a9b      	lsrs	r3, r3, #10
 800152c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	4b51      	ldr	r3, [pc, #324]	; (8001678 <HAL_ETH_TransmitFrame+0x1cc>)
 8001532:	fba3 1302 	umull	r1, r3, r3, r2
 8001536:	0a9b      	lsrs	r3, r3, #10
 8001538:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800153c:	fb01 f303 	mul.w	r3, r1, r3
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	e001      	b.n	8001552 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d11c      	bne.n	8001592 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001566:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001572:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001582:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	461a      	mov	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001590:	e04b      	b.n	800162a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	e044      	b.n	8001622 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015a6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d107      	bne.n	80015be <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015bc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015c6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	1e5a      	subs	r2, r3, #1
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d116      	bne.n	8001600 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80015e0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	4a25      	ldr	r2, [pc, #148]	; (800167c <HAL_ETH_TransmitFrame+0x1d0>)
 80015e6:	fb02 f203 	mul.w	r2, r2, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	4413      	add	r3, r2
 80015ee:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80015f2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80015fe:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800160e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	461a      	mov	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	3301      	adds	r3, #1
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	429a      	cmp	r2, r3
 8001628:	d3b6      	bcc.n	8001598 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001632:	4413      	add	r3, r2
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00d      	beq.n	800165a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	f241 0314 	movw	r3, #4116	; 0x1014
 8001646:	4413      	add	r3, r2
 8001648:	2204      	movs	r2, #4
 800164a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	f241 0304 	movw	r3, #4100	; 0x1004
 8001654:	4413      	add	r3, r2
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	371c      	adds	r7, #28
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	ac02b00b 	.word	0xac02b00b
 800167c:	fffffa0c 	.word	0xfffffa0c

08001680 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001696:	2302      	movs	r3, #2
 8001698:	e074      	b.n	8001784 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2202      	movs	r2, #2
 80016a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80016aa:	e05a      	b.n	8001762 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3301      	adds	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016c0:	d10d      	bne.n	80016de <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	461a      	mov	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
 80016dc:	e041      	b.n	8001762 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10b      	bne.n	8001704 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
 8001702:	e02e      	b.n	8001762 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171a:	2b01      	cmp	r3, #1
 800171c:	d103      	bne.n	8001726 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	0c1b      	lsrs	r3, r3, #16
 800172e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001732:	1f1a      	subs	r2, r3, #4
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e010      	b.n	8001784 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	db02      	blt.n	8001772 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b03      	cmp	r3, #3
 8001770:	d99c      	bls.n	80016ac <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	f241 0314 	movw	r3, #4116	; 0x1014
 80017a0:	4413      	add	r3, r2
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a8:	2b40      	cmp	r3, #64	; 0x40
 80017aa:	d112      	bne.n	80017d2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f002 f99b 	bl	8003ae8 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f241 0314 	movw	r3, #4116	; 0x1014
 80017ba:	4413      	add	r3, r2
 80017bc:	2240      	movs	r2, #64	; 0x40
 80017be:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017d0:	e01b      	b.n	800180a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	f241 0314 	movw	r3, #4116	; 0x1014
 80017da:	4413      	add	r3, r2
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d111      	bne.n	800180a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f839 	bl	800185e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	f241 0314 	movw	r3, #4116	; 0x1014
 80017f4:	4413      	add	r3, r2
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001812:	4413      	add	r3, r2
 8001814:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001818:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001822:	4413      	add	r3, r2
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800182a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800182e:	d112      	bne.n	8001856 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f81e 	bl	8001872 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	f241 0314 	movw	r3, #4116	; 0x1014
 800183e:	4413      	add	r3, r2
 8001840:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001844:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	460b      	mov	r3, r1
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b82      	cmp	r3, #130	; 0x82
 80018a6:	d101      	bne.n	80018ac <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80018a8:	2302      	movs	r3, #2
 80018aa:	e050      	b.n	800194e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2282      	movs	r2, #130	; 0x82
 80018b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f003 031c 	and.w	r3, r3, #28
 80018c2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8a1b      	ldrh	r3, [r3, #16]
 80018c8:	02db      	lsls	r3, r3, #11
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80018d2:	897b      	ldrh	r3, [r7, #10]
 80018d4:	019b      	lsls	r3, r3, #6
 80018d6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4313      	orrs	r3, r2
 80018de:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f023 0302 	bic.w	r3, r3, #2
 80018e6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80018f8:	f7ff fa58 	bl	8000dac <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018fe:	e015      	b.n	800192c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001900:	f7ff fa54 	bl	8000dac <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190e:	d309      	bcc.n	8001924 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e014      	b.n	800194e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1e4      	bne.n	8001900 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	b29b      	uxth	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	460b      	mov	r3, r1
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b42      	cmp	r3, #66	; 0x42
 8001976:	d101      	bne.n	800197c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001978:	2302      	movs	r3, #2
 800197a:	e04e      	b.n	8001a1a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2242      	movs	r2, #66	; 0x42
 8001980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 031c 	and.w	r3, r3, #28
 8001992:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8a1b      	ldrh	r3, [r3, #16]
 8001998:	02db      	lsls	r3, r3, #11
 800199a:	b29b      	uxth	r3, r3
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	4313      	orrs	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80019a2:	897b      	ldrh	r3, [r7, #10]
 80019a4:	019b      	lsls	r3, r3, #6
 80019a6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f043 0302 	orr.w	r3, r3, #2
 80019b6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	b292      	uxth	r2, r2
 80019c8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019d2:	f7ff f9eb 	bl	8000dac <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019d8:	e015      	b.n	8001a06 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80019da:	f7ff f9e7 	bl	8000dac <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e8:	d309      	bcc.n	80019fe <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e00d      	b.n	8001a1a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1e4      	bne.n	80019da <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_ETH_Start+0x16>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e01f      	b.n	8001a78 <HAL_ETH_Start+0x56>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fb41 	bl	80020d0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fb78 	bl	8002144 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 fc0f 	bl	8002278 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 fbac 	bl	80021b8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fbd9 	bl	8002218 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_ETH_Stop+0x16>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e01f      	b.n	8001ad6 <HAL_ETH_Stop+0x56>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fb9e 	bl	80021e8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 fbcb 	bl	8002248 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fb63 	bl	800217e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fbdd 	bl	8002278 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fb23 	bl	800210a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_ETH_ConfigMAC+0x1c>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e0e3      	b.n	8001cc4 <HAL_ETH_ConfigMAC+0x1e4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80b0 	beq.w	8001c74 <HAL_ETH_ConfigMAC+0x194>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4b6b      	ldr	r3, [pc, #428]	; (8001ccc <HAL_ETH_ConfigMAC+0x1ec>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001b2c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001b32:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001b38:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001b3e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001b44:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001b4a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001b50:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001b56:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001b5c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001b62:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001b68:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001b6e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b86:	2001      	movs	r0, #1
 8001b88:	f7ff f91c 	bl	8000dc4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ba0:	4311      	orrs	r1, r2
                                          macconf->PassControlFrames |
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	6b52      	ldr	r2, [r2, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001ba6:	4311      	orrs	r1, r2
                                          macconf->BroadcastFramesReception | 
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001bac:	4311      	orrs	r1, r2
                                          macconf->DestinationAddrFilter |
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001bb2:	4311      	orrs	r1, r2
                                          macconf->PromiscuousMode |
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001bb8:	4311      	orrs	r1, r2
                                          macconf->MulticastFramesFilter |
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	6c52      	ldr	r2, [r2, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001bbe:	4311      	orrs	r1, r2
                                          macconf->UnicastFramesFilter);
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
                                          macconf->MulticastFramesFilter |
 8001bc4:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bc6:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f7ff f8f7 	bl	8000dc4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001be6:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bf0:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c00:	4013      	ands	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c08:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001c0e:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001c14:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001c1a:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001c20:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001c26:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f7ff f8c0 	bl	8000dc4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	6f12      	ldr	r2, [r2, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff f8ad 	bl	8000dc4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	61da      	str	r2, [r3, #28]
 8001c72:	e01e      	b.n	8001cb2 <HAL_ETH_ConfigMAC+0x1d2>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001c82:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff f88d 	bl	8000dc4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	ff20810f 	.word	0xff20810f

08001cd0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b0b0      	sub	sp, #192	; 0xc0
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cec:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cf4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d103      	bne.n	8001d1e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d1a:	663b      	str	r3, [r7, #96]	; 0x60
 8001d1c:	e001      	b.n	8001d22 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d26:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001d3c:	2340      	movs	r3, #64	; 0x40
 8001d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001da4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001da8:	4baa      	ldr	r3, [pc, #680]	; (8002054 <ETH_MACDMAConfig+0x384>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001db0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001db4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001db8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001dbc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001dc2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001dc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001dc6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001dca:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001dd0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001dd4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001dd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001dd8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001dda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001ddc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001de0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001de4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001de6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001df8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e04:	2001      	movs	r0, #1
 8001e06:	f7fe ffdd 	bl	8000dc4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e12:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001e1a:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e1c:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 8001e1e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001e20:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 8001e22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001e26:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 8001e28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001e2c:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 8001e2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001e32:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 8001e34:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001e38:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 8001e3a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 8001e3e:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e40:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f7fe ffb9 	bl	8000dc4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e5a:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e64:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001e6e:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001e7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e7e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e82:	4013      	ands	r3, r2
 8001e84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e8c:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001e92:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001e94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001e98:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001e9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001e9e:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001ea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001ea4:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ea6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001eaa:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001eac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ebe:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f7fe ff7a 	bl	8000dc4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ed8:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001ee2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f7fe ff65 	bl	8000dc4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f02:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001f08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f0c:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001f12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f16:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001f28:	2304      	movs	r3, #4
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001f2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f58:	4413      	add	r3, r2
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001f60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f64:	4b3c      	ldr	r3, [pc, #240]	; (8002058 <ETH_MACDMAConfig+0x388>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f6c:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001f6e:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f70:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001f72:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001f74:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001f76:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001f78:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001f7a:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001f7c:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001f7e:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001f80:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001f82:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001f84:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001f88:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001f8c:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fa6:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fb0:	4413      	add	r3, r2
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f7fe ff03 	bl	8000dc4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fcc:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001fd6:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001fda:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 8001fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001fde:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 8001fe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001fe2:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2) |
 8001fe4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001fe6:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001fe8:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 8001fea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001fec:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001fee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff6:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002006:	2001      	movs	r0, #1
 8002008:	f7fe fedc 	bl	8000dc4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002014:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002018:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d10d      	bne.n	800203e <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6819      	ldr	r1, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f241 031c 	movw	r3, #4124	; 0x101c
 800202e:	4413      	add	r3, r2
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <ETH_MACDMAConfig+0x38c>)
 8002034:	431a      	orrs	r2, r3
 8002036:	f241 031c 	movw	r3, #4124	; 0x101c
 800203a:	440b      	add	r3, r1
 800203c:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	461a      	mov	r2, r3
 8002044:	2100      	movs	r1, #0
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f80a 	bl	8002060 <ETH_MACAddressConfig>
}
 800204c:	bf00      	nop
 800204e:	37c0      	adds	r7, #192	; 0xc0
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	ff20810f 	.word	0xff20810f
 8002058:	f8de3f23 	.word	0xf8de3f23
 800205c:	00010040 	.word	0x00010040

08002060 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3305      	adds	r3, #5
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	3204      	adds	r2, #4
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	4313      	orrs	r3, r2
 800207c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <ETH_MACAddressConfig+0x68>)
 8002082:	4413      	add	r3, r2
 8002084:	461a      	mov	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3303      	adds	r3, #3
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	061a      	lsls	r2, r3, #24
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3302      	adds	r3, #2
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	041b      	lsls	r3, r3, #16
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3301      	adds	r3, #1
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	4313      	orrs	r3, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	7812      	ldrb	r2, [r2, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <ETH_MACAddressConfig+0x6c>)
 80020b2:	4413      	add	r3, r2
 80020b4:	461a      	mov	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6013      	str	r3, [r2, #0]
}
 80020ba:	bf00      	nop
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40028040 	.word	0x40028040
 80020cc:	40028044 	.word	0x40028044

080020d0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	f042 0208 	orr.w	r2, r2, #8
 80020ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f4:	2001      	movs	r0, #1
 80020f6:	f7fe fe65 	bl	8000dc4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	601a      	str	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	f022 0208 	bic.w	r2, r2, #8
 8002124:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800212e:	2001      	movs	r0, #1
 8002130:	f7fe fe48 	bl	8000dc4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	601a      	str	r2, [r3, #0]
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	f042 0204 	orr.w	r2, r2, #4
 800215e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002168:	2001      	movs	r0, #1
 800216a:	f7fe fe2b 	bl	8000dc4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	601a      	str	r2, [r3, #0]
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	f022 0204 	bic.w	r2, r2, #4
 8002198:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a2:	2001      	movs	r0, #1
 80021a4:	f7fe fe0e 	bl	8000dc4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	601a      	str	r2, [r3, #0]
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6819      	ldr	r1, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	f241 0318 	movw	r3, #4120	; 0x1018
 80021cc:	4413      	add	r3, r2
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80021d8:	440b      	add	r3, r1
 80021da:	601a      	str	r2, [r3, #0]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	f241 0318 	movw	r3, #4120	; 0x1018
 80021fc:	4413      	add	r3, r2
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002204:	f241 0318 	movw	r3, #4120	; 0x1018
 8002208:	440b      	add	r3, r1
 800220a:	601a      	str	r2, [r3, #0]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6819      	ldr	r1, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	f241 0318 	movw	r3, #4120	; 0x1018
 800222c:	4413      	add	r3, r2
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f043 0202 	orr.w	r2, r3, #2
 8002234:	f241 0318 	movw	r3, #4120	; 0x1018
 8002238:	440b      	add	r3, r1
 800223a:	601a      	str	r2, [r3, #0]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	f241 0318 	movw	r3, #4120	; 0x1018
 800225c:	4413      	add	r3, r2
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 0202 	bic.w	r2, r3, #2
 8002264:	f241 0318 	movw	r3, #4120	; 0x1018
 8002268:	440b      	add	r3, r1
 800226a:	601a      	str	r2, [r3, #0]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6819      	ldr	r1, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002290:	4413      	add	r3, r2
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002298:	f241 0318 	movw	r3, #4120	; 0x1018
 800229c:	440b      	add	r3, r1
 800229e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	f241 0318 	movw	r3, #4120	; 0x1018
 80022a8:	4413      	add	r3, r2
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ae:	2001      	movs	r0, #1
 80022b0:	f7fe fd88 	bl	8000dc4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6819      	ldr	r1, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	f241 0318 	movw	r3, #4120	; 0x1018
 80022be:	440b      	add	r3, r1
 80022c0:	601a      	str	r2, [r3, #0]
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	; 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	e175      	b.n	80025d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022ec:	2201      	movs	r2, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	429a      	cmp	r2, r3
 8002306:	f040 8164 	bne.w	80025d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d00b      	beq.n	800232a <HAL_GPIO_Init+0x5e>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d007      	beq.n	800232a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800231e:	2b11      	cmp	r3, #17
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b12      	cmp	r3, #18
 8002328:	d130      	bne.n	800238c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	2203      	movs	r2, #3
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002360:	2201      	movs	r2, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 0201 	and.w	r2, r3, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	2203      	movs	r2, #3
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x100>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b12      	cmp	r3, #18
 80023ca:	d123      	bne.n	8002414 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	08da      	lsrs	r2, r3, #3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3208      	adds	r2, #8
 80023d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	220f      	movs	r2, #15
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	08da      	lsrs	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	69b9      	ldr	r1, [r7, #24]
 8002410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0203 	and.w	r2, r3, #3
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80be 	beq.w	80025d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002456:	4a65      	ldr	r2, [pc, #404]	; (80025ec <HAL_GPIO_Init+0x320>)
 8002458:	4b64      	ldr	r3, [pc, #400]	; (80025ec <HAL_GPIO_Init+0x320>)
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002460:	6453      	str	r3, [r2, #68]	; 0x44
 8002462:	4b62      	ldr	r3, [pc, #392]	; (80025ec <HAL_GPIO_Init+0x320>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800246e:	4a60      	ldr	r2, [pc, #384]	; (80025f0 <HAL_GPIO_Init+0x324>)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3302      	adds	r3, #2
 8002476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	220f      	movs	r2, #15
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a57      	ldr	r2, [pc, #348]	; (80025f4 <HAL_GPIO_Init+0x328>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d037      	beq.n	800250a <HAL_GPIO_Init+0x23e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a56      	ldr	r2, [pc, #344]	; (80025f8 <HAL_GPIO_Init+0x32c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d031      	beq.n	8002506 <HAL_GPIO_Init+0x23a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a55      	ldr	r2, [pc, #340]	; (80025fc <HAL_GPIO_Init+0x330>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d02b      	beq.n	8002502 <HAL_GPIO_Init+0x236>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a54      	ldr	r2, [pc, #336]	; (8002600 <HAL_GPIO_Init+0x334>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d025      	beq.n	80024fe <HAL_GPIO_Init+0x232>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a53      	ldr	r2, [pc, #332]	; (8002604 <HAL_GPIO_Init+0x338>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d01f      	beq.n	80024fa <HAL_GPIO_Init+0x22e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a52      	ldr	r2, [pc, #328]	; (8002608 <HAL_GPIO_Init+0x33c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d019      	beq.n	80024f6 <HAL_GPIO_Init+0x22a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a51      	ldr	r2, [pc, #324]	; (800260c <HAL_GPIO_Init+0x340>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d013      	beq.n	80024f2 <HAL_GPIO_Init+0x226>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a50      	ldr	r2, [pc, #320]	; (8002610 <HAL_GPIO_Init+0x344>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00d      	beq.n	80024ee <HAL_GPIO_Init+0x222>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a4f      	ldr	r2, [pc, #316]	; (8002614 <HAL_GPIO_Init+0x348>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d007      	beq.n	80024ea <HAL_GPIO_Init+0x21e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4e      	ldr	r2, [pc, #312]	; (8002618 <HAL_GPIO_Init+0x34c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d101      	bne.n	80024e6 <HAL_GPIO_Init+0x21a>
 80024e2:	2309      	movs	r3, #9
 80024e4:	e012      	b.n	800250c <HAL_GPIO_Init+0x240>
 80024e6:	230a      	movs	r3, #10
 80024e8:	e010      	b.n	800250c <HAL_GPIO_Init+0x240>
 80024ea:	2308      	movs	r3, #8
 80024ec:	e00e      	b.n	800250c <HAL_GPIO_Init+0x240>
 80024ee:	2307      	movs	r3, #7
 80024f0:	e00c      	b.n	800250c <HAL_GPIO_Init+0x240>
 80024f2:	2306      	movs	r3, #6
 80024f4:	e00a      	b.n	800250c <HAL_GPIO_Init+0x240>
 80024f6:	2305      	movs	r3, #5
 80024f8:	e008      	b.n	800250c <HAL_GPIO_Init+0x240>
 80024fa:	2304      	movs	r3, #4
 80024fc:	e006      	b.n	800250c <HAL_GPIO_Init+0x240>
 80024fe:	2303      	movs	r3, #3
 8002500:	e004      	b.n	800250c <HAL_GPIO_Init+0x240>
 8002502:	2302      	movs	r3, #2
 8002504:	e002      	b.n	800250c <HAL_GPIO_Init+0x240>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_GPIO_Init+0x240>
 800250a:	2300      	movs	r3, #0
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	f002 0203 	and.w	r2, r2, #3
 8002512:	0092      	lsls	r2, r2, #2
 8002514:	4093      	lsls	r3, r2
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800251c:	4934      	ldr	r1, [pc, #208]	; (80025f0 <HAL_GPIO_Init+0x324>)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	089b      	lsrs	r3, r3, #2
 8002522:	3302      	adds	r3, #2
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800252a:	4b3c      	ldr	r3, [pc, #240]	; (800261c <HAL_GPIO_Init+0x350>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800254e:	4a33      	ldr	r2, [pc, #204]	; (800261c <HAL_GPIO_Init+0x350>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002554:	4b31      	ldr	r3, [pc, #196]	; (800261c <HAL_GPIO_Init+0x350>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002578:	4a28      	ldr	r2, [pc, #160]	; (800261c <HAL_GPIO_Init+0x350>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800257e:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_GPIO_Init+0x350>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025a2:	4a1e      	ldr	r2, [pc, #120]	; (800261c <HAL_GPIO_Init+0x350>)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a8:	4b1c      	ldr	r3, [pc, #112]	; (800261c <HAL_GPIO_Init+0x350>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025cc:	4a13      	ldr	r2, [pc, #76]	; (800261c <HAL_GPIO_Init+0x350>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3301      	adds	r3, #1
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	2b0f      	cmp	r3, #15
 80025dc:	f67f ae86 	bls.w	80022ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025e0:	bf00      	nop
 80025e2:	3724      	adds	r7, #36	; 0x24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40013800 	.word	0x40013800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40020400 	.word	0x40020400
 80025fc:	40020800 	.word	0x40020800
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40021000 	.word	0x40021000
 8002608:	40021400 	.word	0x40021400
 800260c:	40021800 	.word	0x40021800
 8002610:	40021c00 	.word	0x40021c00
 8002614:	40022000 	.word	0x40022000
 8002618:	40022400 	.word	0x40022400
 800261c:	40013c00 	.word	0x40013c00

08002620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	e001      	b.n	8002642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002660:	787b      	ldrb	r3, [r7, #1]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800266c:	e003      	b.n	8002676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800266e:	887b      	ldrh	r3, [r7, #2]
 8002670:	041a      	lsls	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	619a      	str	r2, [r3, #24]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800269a:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f806 	bl	80026b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40013c00 	.word	0x40013c00

080026b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	4a23      	ldr	r2, [pc, #140]	; (8002764 <HAL_PWREx_EnableOverDrive+0x98>)
 80026d8:	4b22      	ldr	r3, [pc, #136]	; (8002764 <HAL_PWREx_EnableOverDrive+0x98>)
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_PWREx_EnableOverDrive+0x98>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026ee:	4a1e      	ldr	r2, [pc, #120]	; (8002768 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026f0:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026fa:	f7fe fb57 	bl	8000dac <HAL_GetTick>
 80026fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002700:	e009      	b.n	8002716 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002702:	f7fe fb53 	bl	8000dac <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002710:	d901      	bls.n	8002716 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e022      	b.n	800275c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002716:	4b14      	ldr	r3, [pc, #80]	; (8002768 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002722:	d1ee      	bne.n	8002702 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002724:	4a10      	ldr	r2, [pc, #64]	; (8002768 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002730:	f7fe fb3c 	bl	8000dac <HAL_GetTick>
 8002734:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002736:	e009      	b.n	800274c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002738:	f7fe fb38 	bl	8000dac <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002746:	d901      	bls.n	800274c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e007      	b.n	800275c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_PWREx_EnableOverDrive+0x9c>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002758:	d1ee      	bne.n	8002738 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	40007000 	.word	0x40007000

0800276c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002774:	2300      	movs	r3, #0
 8002776:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e29b      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 8087 	beq.w	800289e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002790:	4b96      	ldr	r3, [pc, #600]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b04      	cmp	r3, #4
 800279a:	d00c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279c:	4b93      	ldr	r3, [pc, #588]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d112      	bne.n	80027ce <HAL_RCC_OscConfig+0x62>
 80027a8:	4b90      	ldr	r3, [pc, #576]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b4:	d10b      	bne.n	80027ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b6:	4b8d      	ldr	r3, [pc, #564]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d06c      	beq.n	800289c <HAL_RCC_OscConfig+0x130>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d168      	bne.n	800289c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e275      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x7a>
 80027d8:	4a84      	ldr	r2, [pc, #528]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027da:	4b84      	ldr	r3, [pc, #528]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	e02e      	b.n	8002844 <HAL_RCC_OscConfig+0xd8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x9c>
 80027ee:	4a7f      	ldr	r2, [pc, #508]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027f0:	4b7e      	ldr	r3, [pc, #504]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4a7c      	ldr	r2, [pc, #496]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027fc:	4b7b      	ldr	r3, [pc, #492]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e01d      	b.n	8002844 <HAL_RCC_OscConfig+0xd8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0xc0>
 8002812:	4a76      	ldr	r2, [pc, #472]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002814:	4b75      	ldr	r3, [pc, #468]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4a73      	ldr	r2, [pc, #460]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002820:	4b72      	ldr	r3, [pc, #456]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0xd8>
 800282c:	4a6f      	ldr	r2, [pc, #444]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800282e:	4b6f      	ldr	r3, [pc, #444]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4a6c      	ldr	r2, [pc, #432]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800283a:	4b6c      	ldr	r3, [pc, #432]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe faae 	bl	8000dac <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe faaa 	bl	8000dac <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e229      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b61      	ldr	r3, [pc, #388]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0xe8>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fa9a 	bl	8000dac <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe fa96 	bl	8000dac <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e215      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	4b57      	ldr	r3, [pc, #348]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x110>
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d069      	beq.n	800297e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028aa:	4b50      	ldr	r3, [pc, #320]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b6:	4b4d      	ldr	r3, [pc, #308]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d11c      	bne.n	80028fc <HAL_RCC_OscConfig+0x190>
 80028c2:	4b4a      	ldr	r3, [pc, #296]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d116      	bne.n	80028fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_RCC_OscConfig+0x17a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e1e9      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e6:	4941      	ldr	r1, [pc, #260]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028e8:	4b40      	ldr	r3, [pc, #256]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	e040      	b.n	800297e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d023      	beq.n	800294c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002904:	4a39      	ldr	r2, [pc, #228]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002906:	4b39      	ldr	r3, [pc, #228]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe fa4c 	bl	8000dac <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002918:	f7fe fa48 	bl	8000dac <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e1c7      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	4b30      	ldr	r3, [pc, #192]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	492d      	ldr	r1, [pc, #180]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002938:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
 800294a:	e018      	b.n	800297e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294c:	4a27      	ldr	r2, [pc, #156]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800294e:	4b27      	ldr	r3, [pc, #156]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe fa28 	bl	8000dac <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002960:	f7fe fa24 	bl	8000dac <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e1a3      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d038      	beq.n	80029fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d019      	beq.n	80029c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002992:	4a16      	ldr	r2, [pc, #88]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002994:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299e:	f7fe fa05 	bl	8000dac <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a6:	f7fe fa01 	bl	8000dac <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e180      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80029ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x23a>
 80029c4:	e01a      	b.n	80029fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80029c8:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80029ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7fe f9eb 	bl	8000dac <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029da:	f7fe f9e7 	bl	8000dac <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d903      	bls.n	80029f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e166      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>
 80029ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	4b92      	ldr	r3, [pc, #584]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 80029f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1ee      	bne.n	80029da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80a4 	beq.w	8002b52 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0a:	4b8c      	ldr	r3, [pc, #560]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10d      	bne.n	8002a32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	4a89      	ldr	r2, [pc, #548]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a18:	4b88      	ldr	r3, [pc, #544]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b86      	ldr	r3, [pc, #536]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a32:	4b83      	ldr	r3, [pc, #524]	; (8002c40 <HAL_RCC_OscConfig+0x4d4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d118      	bne.n	8002a70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a3e:	4a80      	ldr	r2, [pc, #512]	; (8002c40 <HAL_RCC_OscConfig+0x4d4>)
 8002a40:	4b7f      	ldr	r3, [pc, #508]	; (8002c40 <HAL_RCC_OscConfig+0x4d4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4a:	f7fe f9af 	bl	8000dac <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a52:	f7fe f9ab 	bl	8000dac <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b64      	cmp	r3, #100	; 0x64
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e12a      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a64:	4b76      	ldr	r3, [pc, #472]	; (8002c40 <HAL_RCC_OscConfig+0x4d4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x31a>
 8002a78:	4a70      	ldr	r2, [pc, #448]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a7a:	4b70      	ldr	r3, [pc, #448]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6713      	str	r3, [r2, #112]	; 0x70
 8002a84:	e02d      	b.n	8002ae2 <HAL_RCC_OscConfig+0x376>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x33c>
 8002a8e:	4a6b      	ldr	r2, [pc, #428]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a90:	4b6a      	ldr	r3, [pc, #424]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9a:	4a68      	ldr	r2, [pc, #416]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a9c:	4b67      	ldr	r3, [pc, #412]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	f023 0304 	bic.w	r3, r3, #4
 8002aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa6:	e01c      	b.n	8002ae2 <HAL_RCC_OscConfig+0x376>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b05      	cmp	r3, #5
 8002aae:	d10c      	bne.n	8002aca <HAL_RCC_OscConfig+0x35e>
 8002ab0:	4a62      	ldr	r2, [pc, #392]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002ab2:	4b62      	ldr	r3, [pc, #392]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	f043 0304 	orr.w	r3, r3, #4
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
 8002abc:	4a5f      	ldr	r2, [pc, #380]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002abe:	4b5f      	ldr	r3, [pc, #380]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac8:	e00b      	b.n	8002ae2 <HAL_RCC_OscConfig+0x376>
 8002aca:	4a5c      	ldr	r2, [pc, #368]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002acc:	4b5b      	ldr	r3, [pc, #364]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad6:	4a59      	ldr	r2, [pc, #356]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002ad8:	4b58      	ldr	r3, [pc, #352]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	f023 0304 	bic.w	r3, r3, #4
 8002ae0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d015      	beq.n	8002b16 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7fe f95f 	bl	8000dac <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7fe f95b 	bl	8000dac <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e0d8      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b08:	4b4c      	ldr	r3, [pc, #304]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0ee      	beq.n	8002af2 <HAL_RCC_OscConfig+0x386>
 8002b14:	e014      	b.n	8002b40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7fe f949 	bl	8000dac <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7fe f945 	bl	8000dac <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e0c2      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b34:	4b41      	ldr	r3, [pc, #260]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1ee      	bne.n	8002b1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d105      	bne.n	8002b52 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b46:	4a3d      	ldr	r2, [pc, #244]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002b48:	4b3c      	ldr	r3, [pc, #240]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80ae 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b5c:	4b37      	ldr	r3, [pc, #220]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d06d      	beq.n	8002c44 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d14b      	bne.n	8002c08 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b70:	4a32      	ldr	r2, [pc, #200]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002b72:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe f916 	bl	8000dac <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe f912 	bl	8000dac <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e091      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b96:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba2:	4926      	ldr	r1, [pc, #152]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	019b      	lsls	r3, r3, #6
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	041b      	lsls	r3, r3, #16
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	061b      	lsls	r3, r3, #24
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	071b      	lsls	r3, r3, #28
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd4:	4a19      	ldr	r2, [pc, #100]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002bd6:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe f8e4 	bl	8000dac <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe f8e0 	bl	8000dac <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e05f      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x47c>
 8002c06:	e057      	b.n	8002cb8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c08:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe f8ca 	bl	8000dac <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe f8c6 	bl	8000dac <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e045      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4b0>
 8002c3a:	e03d      	b.n	8002cb8 <HAL_RCC_OscConfig+0x54c>
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c44:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <HAL_RCC_OscConfig+0x558>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d030      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d129      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d122      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c74:	4013      	ands	r3, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d119      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	085b      	lsrs	r3, r3, #1
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d10f      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d107      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800

08002cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0d0      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b6a      	ldr	r3, [pc, #424]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 020f 	and.w	r2, r3, #15
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d210      	bcs.n	8002d10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4967      	ldr	r1, [pc, #412]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	4b66      	ldr	r3, [pc, #408]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f023 020f 	bic.w	r2, r3, #15
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b63      	ldr	r3, [pc, #396]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 020f 	and.w	r2, r3, #15
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0b8      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d28:	4a59      	ldr	r2, [pc, #356]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2a:	4b59      	ldr	r3, [pc, #356]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d40:	4a53      	ldr	r2, [pc, #332]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d42:	4b53      	ldr	r3, [pc, #332]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4c:	4950      	ldr	r1, [pc, #320]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4e:	4b50      	ldr	r3, [pc, #320]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d040      	beq.n	8002dec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b47      	ldr	r3, [pc, #284]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d115      	bne.n	8002daa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e07f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8a:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e073      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9a:	4b3d      	ldr	r3, [pc, #244]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e06b      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002daa:	4939      	ldr	r1, [pc, #228]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002dac:	4b38      	ldr	r3, [pc, #224]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f023 0203 	bic.w	r2, r3, #3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dbc:	f7fd fff6 	bl	8000dac <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc4:	f7fd fff2 	bl	8000dac <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e053      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 020c 	and.w	r2, r3, #12
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d1eb      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dec:	4b27      	ldr	r3, [pc, #156]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 020f 	and.w	r2, r3, #15
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d910      	bls.n	8002e1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4924      	ldr	r1, [pc, #144]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f023 020f 	bic.w	r2, r3, #15
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 020f 	and.w	r2, r3, #15
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e032      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e28:	4919      	ldr	r1, [pc, #100]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2a:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e46:	4912      	ldr	r1, [pc, #72]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e5a:	f000 f821 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8002e5e:	4601      	mov	r1, r0
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <HAL_RCC_ClockConfig+0x1cc>)
 8002e6c:	5cd3      	ldrb	r3, [r2, r3]
 8002e6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e72:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <HAL_RCC_ClockConfig+0x1d0>)
 8002e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_RCC_ClockConfig+0x1d4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd fe0a 	bl	8000a94 <HAL_InitTick>

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023c00 	.word	0x40023c00
 8002e90:	40023800 	.word	0x40023800
 8002e94:	0801af18 	.word	0x0801af18
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	20000004 	.word	0x20000004

08002ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea4:	b08f      	sub	sp, #60	; 0x3c
 8002ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eac:	2300      	movs	r3, #0
 8002eae:	637b      	str	r3, [r7, #52]	; 0x34
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb8:	4b62      	ldr	r3, [pc, #392]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d007      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d008      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x3a>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f040 80b2 	bne.w	8003032 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ece:	4b5e      	ldr	r3, [pc, #376]	; (8003048 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ed0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ed2:	e0b1      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ed4:	4b5c      	ldr	r3, [pc, #368]	; (8003048 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ed6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ed8:	e0ae      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eda:	4b5a      	ldr	r3, [pc, #360]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ee4:	4b57      	ldr	r3, [pc, #348]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d04e      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef0:	4b54      	ldr	r3, [pc, #336]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	099b      	lsrs	r3, r3, #6
 8002ef6:	f04f 0400 	mov.w	r4, #0
 8002efa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	ea01 0103 	and.w	r1, r1, r3
 8002f06:	ea02 0204 	and.w	r2, r2, r4
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4614      	mov	r4, r2
 8002f0e:	0160      	lsls	r0, r4, #5
 8002f10:	6278      	str	r0, [r7, #36]	; 0x24
 8002f12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f14:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002f18:	6278      	str	r0, [r7, #36]	; 0x24
 8002f1a:	015b      	lsls	r3, r3, #5
 8002f1c:	623b      	str	r3, [r7, #32]
 8002f1e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002f22:	1a5b      	subs	r3, r3, r1
 8002f24:	eb64 0402 	sbc.w	r4, r4, r2
 8002f28:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002f2c:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002f30:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002f34:	ebb8 0803 	subs.w	r8, r8, r3
 8002f38:	eb69 0904 	sbc.w	r9, r9, r4
 8002f3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002f54:	eb18 0801 	adds.w	r8, r8, r1
 8002f58:	eb49 0902 	adc.w	r9, r9, r2
 8002f5c:	ea4f 2389 	mov.w	r3, r9, lsl #10
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	ea43 5398 	orr.w	r3, r3, r8, lsr #22
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	ea4f 2388 	mov.w	r3, r8, lsl #10
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002f74:	4640      	mov	r0, r8
 8002f76:	4649      	mov	r1, r9
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	f04f 0400 	mov.w	r4, #0
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4623      	mov	r3, r4
 8002f82:	f7fd f9ad 	bl	80002e0 <__aeabi_uldivmod>
 8002f86:	4603      	mov	r3, r0
 8002f88:	460c      	mov	r4, r1
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8c:	e043      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8e:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	099b      	lsrs	r3, r3, #6
 8002f94:	f04f 0400 	mov.w	r4, #0
 8002f98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	ea01 0103 	and.w	r1, r1, r3
 8002fa4:	ea02 0204 	and.w	r2, r2, r4
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4614      	mov	r4, r2
 8002fac:	0160      	lsls	r0, r4, #5
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	015b      	lsls	r3, r3, #5
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002fc0:	1a5b      	subs	r3, r3, r1
 8002fc2:	eb64 0402 	sbc.w	r4, r4, r2
 8002fc6:	01a6      	lsls	r6, r4, #6
 8002fc8:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002fcc:	019d      	lsls	r5, r3, #6
 8002fce:	1aed      	subs	r5, r5, r3
 8002fd0:	eb66 0604 	sbc.w	r6, r6, r4
 8002fd4:	00f3      	lsls	r3, r6, #3
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	00eb      	lsls	r3, r5, #3
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002fe8:	186d      	adds	r5, r5, r1
 8002fea:	eb46 0602 	adc.w	r6, r6, r2
 8002fee:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002ff2:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8002ff6:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002ffa:	4655      	mov	r5, sl
 8002ffc:	465e      	mov	r6, fp
 8002ffe:	4628      	mov	r0, r5
 8003000:	4631      	mov	r1, r6
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	f04f 0400 	mov.w	r4, #0
 8003008:	461a      	mov	r2, r3
 800300a:	4623      	mov	r3, r4
 800300c:	f7fd f968 	bl	80002e0 <__aeabi_uldivmod>
 8003010:	4603      	mov	r3, r0
 8003012:	460c      	mov	r4, r1
 8003014:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	0c1b      	lsrs	r3, r3, #16
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	3301      	adds	r3, #1
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco / pllp;
 8003026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003030:	e002      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003034:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003036:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800303a:	4618      	mov	r0, r3
 800303c:	373c      	adds	r7, #60	; 0x3c
 800303e:	46bd      	mov	sp, r7
 8003040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003044:	40023800 	.word	0x40023800
 8003048:	00f42400 	.word	0x00f42400

0800304c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_RCC_GetHCLKFreq+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000000 	.word	0x20000000

08003064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003068:	f7ff fff0 	bl	800304c <HAL_RCC_GetHCLKFreq>
 800306c:	4601      	mov	r1, r0
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	0b5b      	lsrs	r3, r3, #13
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	4a03      	ldr	r2, [pc, #12]	; (8003088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	0801af28 	.word	0x0801af28

0800308c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	220f      	movs	r2, #15
 800309a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800309c:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <HAL_RCC_GetClockConfig+0x5c>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0203 	and.w	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030a8:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <HAL_RCC_GetClockConfig+0x5c>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <HAL_RCC_GetClockConfig+0x5c>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <HAL_RCC_GetClockConfig+0x5c>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	08db      	lsrs	r3, r3, #3
 80030c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030ce:	4b07      	ldr	r3, [pc, #28]	; (80030ec <HAL_RCC_GetClockConfig+0x60>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 020f 	and.w	r2, r3, #15
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	601a      	str	r2, [r3, #0]
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40023c00 	.word	0x40023c00

080030f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e049      	b.n	8003196 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f841 	bl	800319e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f000 fa00 	bl	8003534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d001      	beq.n	80031cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e054      	b.n	8003276 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	68d2      	ldr	r2, [r2, #12]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a26      	ldr	r2, [pc, #152]	; (8003284 <HAL_TIM_Base_Start_IT+0xd0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d022      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x80>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f6:	d01d      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x80>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a22      	ldr	r2, [pc, #136]	; (8003288 <HAL_TIM_Base_Start_IT+0xd4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d018      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x80>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a21      	ldr	r2, [pc, #132]	; (800328c <HAL_TIM_Base_Start_IT+0xd8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d013      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x80>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1f      	ldr	r2, [pc, #124]	; (8003290 <HAL_TIM_Base_Start_IT+0xdc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00e      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x80>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1e      	ldr	r2, [pc, #120]	; (8003294 <HAL_TIM_Base_Start_IT+0xe0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d009      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x80>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <HAL_TIM_Base_Start_IT+0xe4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x80>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1b      	ldr	r2, [pc, #108]	; (800329c <HAL_TIM_Base_Start_IT+0xe8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d115      	bne.n	8003260 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <HAL_TIM_Base_Start_IT+0xec>)
 800323c:	4013      	ands	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b06      	cmp	r3, #6
 8003244:	d015      	beq.n	8003272 <HAL_TIM_Base_Start_IT+0xbe>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324c:	d011      	beq.n	8003272 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325e:	e008      	b.n	8003272 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	e000      	b.n	8003274 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003272:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40010000 	.word	0x40010000
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800
 8003290:	40000c00 	.word	0x40000c00
 8003294:	40010400 	.word	0x40010400
 8003298:	40014000 	.word	0x40014000
 800329c:	40001800 	.word	0x40001800
 80032a0:	00010007 	.word	0x00010007

080032a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d122      	bne.n	8003300 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d11b      	bne.n	8003300 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0202 	mvn.w	r2, #2
 80032d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f905 	bl	80034f6 <HAL_TIM_IC_CaptureCallback>
 80032ec:	e005      	b.n	80032fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8f7 	bl	80034e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f908 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b04      	cmp	r3, #4
 800330c:	d122      	bne.n	8003354 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b04      	cmp	r3, #4
 800331a:	d11b      	bne.n	8003354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0204 	mvn.w	r2, #4
 8003324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f8db 	bl	80034f6 <HAL_TIM_IC_CaptureCallback>
 8003340:	e005      	b.n	800334e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f8cd 	bl	80034e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f8de 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b08      	cmp	r3, #8
 8003360:	d122      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b08      	cmp	r3, #8
 800336e:	d11b      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0208 	mvn.w	r2, #8
 8003378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2204      	movs	r2, #4
 800337e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f8b1 	bl	80034f6 <HAL_TIM_IC_CaptureCallback>
 8003394:	e005      	b.n	80033a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f8a3 	bl	80034e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f8b4 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d122      	bne.n	80033fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d11b      	bne.n	80033fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0210 	mvn.w	r2, #16
 80033cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2208      	movs	r2, #8
 80033d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f887 	bl	80034f6 <HAL_TIM_IC_CaptureCallback>
 80033e8:	e005      	b.n	80033f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f879 	bl	80034e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f88a 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b01      	cmp	r3, #1
 8003408:	d10e      	bne.n	8003428 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0201 	mvn.w	r2, #1
 8003420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd faf8 	bl	8000a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003432:	2b80      	cmp	r3, #128	; 0x80
 8003434:	d10e      	bne.n	8003454 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003440:	2b80      	cmp	r3, #128	; 0x80
 8003442:	d107      	bne.n	8003454 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800344c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f91a 	bl	8003688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003462:	d10e      	bne.n	8003482 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	2b80      	cmp	r3, #128	; 0x80
 8003470:	d107      	bne.n	8003482 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800347a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f90d 	bl	800369c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d10e      	bne.n	80034ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b40      	cmp	r3, #64	; 0x40
 800349c:	d107      	bne.n	80034ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f838 	bl	800351e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d10e      	bne.n	80034da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d107      	bne.n	80034da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f06f 0220 	mvn.w	r2, #32
 80034d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f8cd 	bl	8003674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a40      	ldr	r2, [pc, #256]	; (8003648 <TIM_Base_SetConfig+0x114>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003552:	d00f      	beq.n	8003574 <TIM_Base_SetConfig+0x40>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a3d      	ldr	r2, [pc, #244]	; (800364c <TIM_Base_SetConfig+0x118>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00b      	beq.n	8003574 <TIM_Base_SetConfig+0x40>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3c      	ldr	r2, [pc, #240]	; (8003650 <TIM_Base_SetConfig+0x11c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d007      	beq.n	8003574 <TIM_Base_SetConfig+0x40>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a3b      	ldr	r2, [pc, #236]	; (8003654 <TIM_Base_SetConfig+0x120>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <TIM_Base_SetConfig+0x40>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a3a      	ldr	r2, [pc, #232]	; (8003658 <TIM_Base_SetConfig+0x124>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d108      	bne.n	8003586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2f      	ldr	r2, [pc, #188]	; (8003648 <TIM_Base_SetConfig+0x114>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d02b      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003594:	d027      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2c      	ldr	r2, [pc, #176]	; (800364c <TIM_Base_SetConfig+0x118>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d023      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a2b      	ldr	r2, [pc, #172]	; (8003650 <TIM_Base_SetConfig+0x11c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d01f      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2a      	ldr	r2, [pc, #168]	; (8003654 <TIM_Base_SetConfig+0x120>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01b      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a29      	ldr	r2, [pc, #164]	; (8003658 <TIM_Base_SetConfig+0x124>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d017      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a28      	ldr	r2, [pc, #160]	; (800365c <TIM_Base_SetConfig+0x128>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a27      	ldr	r2, [pc, #156]	; (8003660 <TIM_Base_SetConfig+0x12c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00f      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a26      	ldr	r2, [pc, #152]	; (8003664 <TIM_Base_SetConfig+0x130>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00b      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a25      	ldr	r2, [pc, #148]	; (8003668 <TIM_Base_SetConfig+0x134>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d007      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a24      	ldr	r2, [pc, #144]	; (800366c <TIM_Base_SetConfig+0x138>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d003      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a23      	ldr	r2, [pc, #140]	; (8003670 <TIM_Base_SetConfig+0x13c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d108      	bne.n	80035f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <TIM_Base_SetConfig+0x114>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_Base_SetConfig+0xf8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a0c      	ldr	r2, [pc, #48]	; (8003658 <TIM_Base_SetConfig+0x124>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d103      	bne.n	8003634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	615a      	str	r2, [r3, #20]
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40010000 	.word	0x40010000
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40010400 	.word	0x40010400
 800365c:	40014000 	.word	0x40014000
 8003660:	40014400 	.word	0x40014400
 8003664:	40014800 	.word	0x40014800
 8003668:	40001800 	.word	0x40001800
 800366c:	40001c00 	.word	0x40001c00
 8003670:	40002000 	.word	0x40002000

08003674 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80036b0:	b5b0      	push	{r4, r5, r7, lr}
 80036b2:	b08e      	sub	sp, #56	; 0x38
 80036b4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80036b6:	4b9f      	ldr	r3, [pc, #636]	; (8003934 <MX_LWIP_Init+0x284>)
 80036b8:	22c0      	movs	r2, #192	; 0xc0
 80036ba:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80036bc:	4b9d      	ldr	r3, [pc, #628]	; (8003934 <MX_LWIP_Init+0x284>)
 80036be:	22a8      	movs	r2, #168	; 0xa8
 80036c0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80036c2:	4b9c      	ldr	r3, [pc, #624]	; (8003934 <MX_LWIP_Init+0x284>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80036c8:	4b9a      	ldr	r3, [pc, #616]	; (8003934 <MX_LWIP_Init+0x284>)
 80036ca:	220a      	movs	r2, #10
 80036cc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80036ce:	4b9a      	ldr	r3, [pc, #616]	; (8003938 <MX_LWIP_Init+0x288>)
 80036d0:	22ff      	movs	r2, #255	; 0xff
 80036d2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80036d4:	4b98      	ldr	r3, [pc, #608]	; (8003938 <MX_LWIP_Init+0x288>)
 80036d6:	22ff      	movs	r2, #255	; 0xff
 80036d8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80036da:	4b97      	ldr	r3, [pc, #604]	; (8003938 <MX_LWIP_Init+0x288>)
 80036dc:	22ff      	movs	r2, #255	; 0xff
 80036de:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80036e0:	4b95      	ldr	r3, [pc, #596]	; (8003938 <MX_LWIP_Init+0x288>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80036e6:	4b95      	ldr	r3, [pc, #596]	; (800393c <MX_LWIP_Init+0x28c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80036ec:	4b93      	ldr	r3, [pc, #588]	; (800393c <MX_LWIP_Init+0x28c>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80036f2:	4b92      	ldr	r3, [pc, #584]	; (800393c <MX_LWIP_Init+0x28c>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80036f8:	4b90      	ldr	r3, [pc, #576]	; (800393c <MX_LWIP_Init+0x28c>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80036fe:	2100      	movs	r1, #0
 8003700:	2000      	movs	r0, #0
 8003702:	f007 fa75 	bl	800abf0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003706:	4b8b      	ldr	r3, [pc, #556]	; (8003934 <MX_LWIP_Init+0x284>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	061a      	lsls	r2, r3, #24
 800370c:	4b89      	ldr	r3, [pc, #548]	; (8003934 <MX_LWIP_Init+0x284>)
 800370e:	785b      	ldrb	r3, [r3, #1]
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	431a      	orrs	r2, r3
 8003714:	4b87      	ldr	r3, [pc, #540]	; (8003934 <MX_LWIP_Init+0x284>)
 8003716:	789b      	ldrb	r3, [r3, #2]
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	4313      	orrs	r3, r2
 800371c:	4a85      	ldr	r2, [pc, #532]	; (8003934 <MX_LWIP_Init+0x284>)
 800371e:	78d2      	ldrb	r2, [r2, #3]
 8003720:	4313      	orrs	r3, r2
 8003722:	061a      	lsls	r2, r3, #24
 8003724:	4b83      	ldr	r3, [pc, #524]	; (8003934 <MX_LWIP_Init+0x284>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	0619      	lsls	r1, r3, #24
 800372a:	4b82      	ldr	r3, [pc, #520]	; (8003934 <MX_LWIP_Init+0x284>)
 800372c:	785b      	ldrb	r3, [r3, #1]
 800372e:	041b      	lsls	r3, r3, #16
 8003730:	4319      	orrs	r1, r3
 8003732:	4b80      	ldr	r3, [pc, #512]	; (8003934 <MX_LWIP_Init+0x284>)
 8003734:	789b      	ldrb	r3, [r3, #2]
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	430b      	orrs	r3, r1
 800373a:	497e      	ldr	r1, [pc, #504]	; (8003934 <MX_LWIP_Init+0x284>)
 800373c:	78c9      	ldrb	r1, [r1, #3]
 800373e:	430b      	orrs	r3, r1
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003746:	431a      	orrs	r2, r3
 8003748:	4b7a      	ldr	r3, [pc, #488]	; (8003934 <MX_LWIP_Init+0x284>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	0619      	lsls	r1, r3, #24
 800374e:	4b79      	ldr	r3, [pc, #484]	; (8003934 <MX_LWIP_Init+0x284>)
 8003750:	785b      	ldrb	r3, [r3, #1]
 8003752:	041b      	lsls	r3, r3, #16
 8003754:	4319      	orrs	r1, r3
 8003756:	4b77      	ldr	r3, [pc, #476]	; (8003934 <MX_LWIP_Init+0x284>)
 8003758:	789b      	ldrb	r3, [r3, #2]
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	430b      	orrs	r3, r1
 800375e:	4975      	ldr	r1, [pc, #468]	; (8003934 <MX_LWIP_Init+0x284>)
 8003760:	78c9      	ldrb	r1, [r1, #3]
 8003762:	430b      	orrs	r3, r1
 8003764:	0a1b      	lsrs	r3, r3, #8
 8003766:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800376a:	431a      	orrs	r2, r3
 800376c:	4b71      	ldr	r3, [pc, #452]	; (8003934 <MX_LWIP_Init+0x284>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	0619      	lsls	r1, r3, #24
 8003772:	4b70      	ldr	r3, [pc, #448]	; (8003934 <MX_LWIP_Init+0x284>)
 8003774:	785b      	ldrb	r3, [r3, #1]
 8003776:	041b      	lsls	r3, r3, #16
 8003778:	4319      	orrs	r1, r3
 800377a:	4b6e      	ldr	r3, [pc, #440]	; (8003934 <MX_LWIP_Init+0x284>)
 800377c:	789b      	ldrb	r3, [r3, #2]
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	430b      	orrs	r3, r1
 8003782:	496c      	ldr	r1, [pc, #432]	; (8003934 <MX_LWIP_Init+0x284>)
 8003784:	78c9      	ldrb	r1, [r1, #3]
 8003786:	430b      	orrs	r3, r1
 8003788:	0e1b      	lsrs	r3, r3, #24
 800378a:	4313      	orrs	r3, r2
 800378c:	4a6c      	ldr	r2, [pc, #432]	; (8003940 <MX_LWIP_Init+0x290>)
 800378e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003790:	4b69      	ldr	r3, [pc, #420]	; (8003938 <MX_LWIP_Init+0x288>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	061a      	lsls	r2, r3, #24
 8003796:	4b68      	ldr	r3, [pc, #416]	; (8003938 <MX_LWIP_Init+0x288>)
 8003798:	785b      	ldrb	r3, [r3, #1]
 800379a:	041b      	lsls	r3, r3, #16
 800379c:	431a      	orrs	r2, r3
 800379e:	4b66      	ldr	r3, [pc, #408]	; (8003938 <MX_LWIP_Init+0x288>)
 80037a0:	789b      	ldrb	r3, [r3, #2]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	4313      	orrs	r3, r2
 80037a6:	4a64      	ldr	r2, [pc, #400]	; (8003938 <MX_LWIP_Init+0x288>)
 80037a8:	78d2      	ldrb	r2, [r2, #3]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	061a      	lsls	r2, r3, #24
 80037ae:	4b62      	ldr	r3, [pc, #392]	; (8003938 <MX_LWIP_Init+0x288>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	0619      	lsls	r1, r3, #24
 80037b4:	4b60      	ldr	r3, [pc, #384]	; (8003938 <MX_LWIP_Init+0x288>)
 80037b6:	785b      	ldrb	r3, [r3, #1]
 80037b8:	041b      	lsls	r3, r3, #16
 80037ba:	4319      	orrs	r1, r3
 80037bc:	4b5e      	ldr	r3, [pc, #376]	; (8003938 <MX_LWIP_Init+0x288>)
 80037be:	789b      	ldrb	r3, [r3, #2]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	430b      	orrs	r3, r1
 80037c4:	495c      	ldr	r1, [pc, #368]	; (8003938 <MX_LWIP_Init+0x288>)
 80037c6:	78c9      	ldrb	r1, [r1, #3]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037d0:	431a      	orrs	r2, r3
 80037d2:	4b59      	ldr	r3, [pc, #356]	; (8003938 <MX_LWIP_Init+0x288>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	0619      	lsls	r1, r3, #24
 80037d8:	4b57      	ldr	r3, [pc, #348]	; (8003938 <MX_LWIP_Init+0x288>)
 80037da:	785b      	ldrb	r3, [r3, #1]
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	4319      	orrs	r1, r3
 80037e0:	4b55      	ldr	r3, [pc, #340]	; (8003938 <MX_LWIP_Init+0x288>)
 80037e2:	789b      	ldrb	r3, [r3, #2]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	430b      	orrs	r3, r1
 80037e8:	4953      	ldr	r1, [pc, #332]	; (8003938 <MX_LWIP_Init+0x288>)
 80037ea:	78c9      	ldrb	r1, [r1, #3]
 80037ec:	430b      	orrs	r3, r1
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80037f4:	431a      	orrs	r2, r3
 80037f6:	4b50      	ldr	r3, [pc, #320]	; (8003938 <MX_LWIP_Init+0x288>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	0619      	lsls	r1, r3, #24
 80037fc:	4b4e      	ldr	r3, [pc, #312]	; (8003938 <MX_LWIP_Init+0x288>)
 80037fe:	785b      	ldrb	r3, [r3, #1]
 8003800:	041b      	lsls	r3, r3, #16
 8003802:	4319      	orrs	r1, r3
 8003804:	4b4c      	ldr	r3, [pc, #304]	; (8003938 <MX_LWIP_Init+0x288>)
 8003806:	789b      	ldrb	r3, [r3, #2]
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	430b      	orrs	r3, r1
 800380c:	494a      	ldr	r1, [pc, #296]	; (8003938 <MX_LWIP_Init+0x288>)
 800380e:	78c9      	ldrb	r1, [r1, #3]
 8003810:	430b      	orrs	r3, r1
 8003812:	0e1b      	lsrs	r3, r3, #24
 8003814:	4313      	orrs	r3, r2
 8003816:	4a4b      	ldr	r2, [pc, #300]	; (8003944 <MX_LWIP_Init+0x294>)
 8003818:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800381a:	4b48      	ldr	r3, [pc, #288]	; (800393c <MX_LWIP_Init+0x28c>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	061a      	lsls	r2, r3, #24
 8003820:	4b46      	ldr	r3, [pc, #280]	; (800393c <MX_LWIP_Init+0x28c>)
 8003822:	785b      	ldrb	r3, [r3, #1]
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	431a      	orrs	r2, r3
 8003828:	4b44      	ldr	r3, [pc, #272]	; (800393c <MX_LWIP_Init+0x28c>)
 800382a:	789b      	ldrb	r3, [r3, #2]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	4313      	orrs	r3, r2
 8003830:	4a42      	ldr	r2, [pc, #264]	; (800393c <MX_LWIP_Init+0x28c>)
 8003832:	78d2      	ldrb	r2, [r2, #3]
 8003834:	4313      	orrs	r3, r2
 8003836:	061a      	lsls	r2, r3, #24
 8003838:	4b40      	ldr	r3, [pc, #256]	; (800393c <MX_LWIP_Init+0x28c>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	0619      	lsls	r1, r3, #24
 800383e:	4b3f      	ldr	r3, [pc, #252]	; (800393c <MX_LWIP_Init+0x28c>)
 8003840:	785b      	ldrb	r3, [r3, #1]
 8003842:	041b      	lsls	r3, r3, #16
 8003844:	4319      	orrs	r1, r3
 8003846:	4b3d      	ldr	r3, [pc, #244]	; (800393c <MX_LWIP_Init+0x28c>)
 8003848:	789b      	ldrb	r3, [r3, #2]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	430b      	orrs	r3, r1
 800384e:	493b      	ldr	r1, [pc, #236]	; (800393c <MX_LWIP_Init+0x28c>)
 8003850:	78c9      	ldrb	r1, [r1, #3]
 8003852:	430b      	orrs	r3, r1
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800385a:	431a      	orrs	r2, r3
 800385c:	4b37      	ldr	r3, [pc, #220]	; (800393c <MX_LWIP_Init+0x28c>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	0619      	lsls	r1, r3, #24
 8003862:	4b36      	ldr	r3, [pc, #216]	; (800393c <MX_LWIP_Init+0x28c>)
 8003864:	785b      	ldrb	r3, [r3, #1]
 8003866:	041b      	lsls	r3, r3, #16
 8003868:	4319      	orrs	r1, r3
 800386a:	4b34      	ldr	r3, [pc, #208]	; (800393c <MX_LWIP_Init+0x28c>)
 800386c:	789b      	ldrb	r3, [r3, #2]
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	430b      	orrs	r3, r1
 8003872:	4932      	ldr	r1, [pc, #200]	; (800393c <MX_LWIP_Init+0x28c>)
 8003874:	78c9      	ldrb	r1, [r1, #3]
 8003876:	430b      	orrs	r3, r1
 8003878:	0a1b      	lsrs	r3, r3, #8
 800387a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800387e:	431a      	orrs	r2, r3
 8003880:	4b2e      	ldr	r3, [pc, #184]	; (800393c <MX_LWIP_Init+0x28c>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	0619      	lsls	r1, r3, #24
 8003886:	4b2d      	ldr	r3, [pc, #180]	; (800393c <MX_LWIP_Init+0x28c>)
 8003888:	785b      	ldrb	r3, [r3, #1]
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	4319      	orrs	r1, r3
 800388e:	4b2b      	ldr	r3, [pc, #172]	; (800393c <MX_LWIP_Init+0x28c>)
 8003890:	789b      	ldrb	r3, [r3, #2]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	430b      	orrs	r3, r1
 8003896:	4929      	ldr	r1, [pc, #164]	; (800393c <MX_LWIP_Init+0x28c>)
 8003898:	78c9      	ldrb	r1, [r1, #3]
 800389a:	430b      	orrs	r3, r1
 800389c:	0e1b      	lsrs	r3, r3, #24
 800389e:	4313      	orrs	r3, r2
 80038a0:	4a29      	ldr	r2, [pc, #164]	; (8003948 <MX_LWIP_Init+0x298>)
 80038a2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80038a4:	4b29      	ldr	r3, [pc, #164]	; (800394c <MX_LWIP_Init+0x29c>)
 80038a6:	9302      	str	r3, [sp, #8]
 80038a8:	4b29      	ldr	r3, [pc, #164]	; (8003950 <MX_LWIP_Init+0x2a0>)
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	2300      	movs	r3, #0
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	4b25      	ldr	r3, [pc, #148]	; (8003948 <MX_LWIP_Init+0x298>)
 80038b2:	4a24      	ldr	r2, [pc, #144]	; (8003944 <MX_LWIP_Init+0x294>)
 80038b4:	4922      	ldr	r1, [pc, #136]	; (8003940 <MX_LWIP_Init+0x290>)
 80038b6:	4827      	ldr	r0, [pc, #156]	; (8003954 <MX_LWIP_Init+0x2a4>)
 80038b8:	f00a f8f8 	bl	800daac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80038bc:	4825      	ldr	r0, [pc, #148]	; (8003954 <MX_LWIP_Init+0x2a4>)
 80038be:	f00a faa7 	bl	800de10 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <MX_LWIP_Init+0x2a4>)
 80038c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80038d0:	4820      	ldr	r0, [pc, #128]	; (8003954 <MX_LWIP_Init+0x2a4>)
 80038d2:	f00a faad 	bl	800de30 <netif_set_up>
 80038d6:	e002      	b.n	80038de <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80038d8:	481e      	ldr	r0, [pc, #120]	; (8003954 <MX_LWIP_Init+0x2a4>)
 80038da:	f00a fb15 	bl	800df08 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80038de:	491e      	ldr	r1, [pc, #120]	; (8003958 <MX_LWIP_Init+0x2a8>)
 80038e0:	481c      	ldr	r0, [pc, #112]	; (8003954 <MX_LWIP_Init+0x2a4>)
 80038e2:	f00a fba7 	bl	800e034 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80038e6:	2300      	movs	r3, #0
 80038e8:	623b      	str	r3, [r7, #32]
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80038ee:	f107 0320 	add.w	r3, r7, #32
 80038f2:	2101      	movs	r1, #1
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fd91 	bl	800441c <osSemaphoreCreate>
 80038fa:	4602      	mov	r2, r0
 80038fc:	4b17      	ldr	r3, [pc, #92]	; (800395c <MX_LWIP_Init+0x2ac>)
 80038fe:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8003900:	4b17      	ldr	r3, [pc, #92]	; (8003960 <MX_LWIP_Init+0x2b0>)
 8003902:	4a14      	ldr	r2, [pc, #80]	; (8003954 <MX_LWIP_Init+0x2a4>)
 8003904:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003906:	4b15      	ldr	r3, [pc, #84]	; (800395c <MX_LWIP_Init+0x2ac>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a15      	ldr	r2, [pc, #84]	; (8003960 <MX_LWIP_Init+0x2b0>)
 800390c:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800390e:	4b15      	ldr	r3, [pc, #84]	; (8003964 <MX_LWIP_Init+0x2b4>)
 8003910:	1d3c      	adds	r4, r7, #4
 8003912:	461d      	mov	r5, r3
 8003914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003918:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800391c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8003920:	1d3b      	adds	r3, r7, #4
 8003922:	490f      	ldr	r1, [pc, #60]	; (8003960 <MX_LWIP_Init+0x2b0>)
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fc7c 	bl	8004222 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800392a:	bf00      	nop
 800392c:	3728      	adds	r7, #40	; 0x28
 800392e:	46bd      	mov	sp, r7
 8003930:	bdb0      	pop	{r4, r5, r7, pc}
 8003932:	bf00      	nop
 8003934:	200042e0 	.word	0x200042e0
 8003938:	200042dc 	.word	0x200042dc
 800393c:	200042a0 	.word	0x200042a0
 8003940:	200042d8 	.word	0x200042d8
 8003944:	200042e4 	.word	0x200042e4
 8003948:	200042e8 	.word	0x200042e8
 800394c:	0800ab01 	.word	0x0800ab01
 8003950:	08003fbd 	.word	0x08003fbd
 8003954:	200042a4 	.word	0x200042a4
 8003958:	0800409d 	.word	0x0800409d
 800395c:	200002f4 	.word	0x200002f4
 8003960:	20004298 	.word	0x20004298
 8003964:	080175dc 	.word	0x080175dc

08003968 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08e      	sub	sp, #56	; 0x38
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a52      	ldr	r2, [pc, #328]	; (8003ad0 <HAL_ETH_MspInit+0x168>)
 8003986:	4293      	cmp	r3, r2
 8003988:	f040 809e 	bne.w	8003ac8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800398c:	4a51      	ldr	r2, [pc, #324]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 800398e:	4b51      	ldr	r3, [pc, #324]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003996:	6313      	str	r3, [r2, #48]	; 0x30
 8003998:	4b4e      	ldr	r3, [pc, #312]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a0:	623b      	str	r3, [r7, #32]
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	4a4b      	ldr	r2, [pc, #300]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 80039a6:	4b4b      	ldr	r3, [pc, #300]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039ae:	6313      	str	r3, [r2, #48]	; 0x30
 80039b0:	4b48      	ldr	r3, [pc, #288]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	4a45      	ldr	r2, [pc, #276]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 80039be:	4b45      	ldr	r3, [pc, #276]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039c6:	6313      	str	r3, [r2, #48]	; 0x30
 80039c8:	4b42      	ldr	r3, [pc, #264]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039d4:	4a3f      	ldr	r2, [pc, #252]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 80039d6:	4b3f      	ldr	r3, [pc, #252]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f043 0304 	orr.w	r3, r3, #4
 80039de:	6313      	str	r3, [r2, #48]	; 0x30
 80039e0:	4b3c      	ldr	r3, [pc, #240]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ec:	4a39      	ldr	r2, [pc, #228]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 80039ee:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	6313      	str	r3, [r2, #48]	; 0x30
 80039f8:	4b36      	ldr	r3, [pc, #216]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a04:	4a33      	ldr	r2, [pc, #204]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 8003a06:	4b33      	ldr	r3, [pc, #204]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	f043 0302 	orr.w	r3, r3, #2
 8003a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a10:	4b30      	ldr	r3, [pc, #192]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a1c:	4a2d      	ldr	r2, [pc, #180]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 8003a1e:	4b2d      	ldr	r3, [pc, #180]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a26:	6313      	str	r3, [r2, #48]	; 0x30
 8003a28:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <HAL_ETH_MspInit+0x16c>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003a34:	2332      	movs	r3, #50	; 0x32
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a40:	2303      	movs	r3, #3
 8003a42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a44:	230b      	movs	r3, #11
 8003a46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4822      	ldr	r0, [pc, #136]	; (8003ad8 <HAL_ETH_MspInit+0x170>)
 8003a50:	f7fe fc3c 	bl	80022cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003a54:	2386      	movs	r3, #134	; 0x86
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a60:	2303      	movs	r3, #3
 8003a62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a64:	230b      	movs	r3, #11
 8003a66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	481b      	ldr	r0, [pc, #108]	; (8003adc <HAL_ETH_MspInit+0x174>)
 8003a70:	f7fe fc2c 	bl	80022cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a86:	230b      	movs	r3, #11
 8003a88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4813      	ldr	r0, [pc, #76]	; (8003ae0 <HAL_ETH_MspInit+0x178>)
 8003a92:	f7fe fc1b 	bl	80022cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003a96:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003aa8:	230b      	movs	r3, #11
 8003aaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	480c      	ldr	r0, [pc, #48]	; (8003ae4 <HAL_ETH_MspInit+0x17c>)
 8003ab4:	f7fe fc0a 	bl	80022cc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2105      	movs	r1, #5
 8003abc:	203d      	movs	r0, #61	; 0x3d
 8003abe:	f7fd fa59 	bl	8000f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003ac2:	203d      	movs	r0, #61	; 0x3d
 8003ac4:	f7fd fa72 	bl	8000fac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003ac8:	bf00      	nop
 8003aca:	3738      	adds	r7, #56	; 0x38
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40028000 	.word	0x40028000
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40020800 	.word	0x40020800
 8003adc:	40020000 	.word	0x40020000
 8003ae0:	40020400 	.word	0x40020400
 8003ae4:	40021800 	.word	0x40021800

08003ae8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003af0:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <HAL_ETH_RxCpltCallback+0x1c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fd13 	bl	8004520 <osSemaphoreRelease>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200002f8 	.word	0x200002f8

08003b08 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003b08:	b5b0      	push	{r4, r5, r7, lr}
 8003b0a:	b090      	sub	sp, #64	; 0x40
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003b14:	4b60      	ldr	r3, [pc, #384]	; (8003c98 <low_level_init+0x190>)
 8003b16:	4a61      	ldr	r2, [pc, #388]	; (8003c9c <low_level_init+0x194>)
 8003b18:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003b1a:	4b5f      	ldr	r3, [pc, #380]	; (8003c98 <low_level_init+0x190>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003b20:	4b5d      	ldr	r3, [pc, #372]	; (8003c98 <low_level_init+0x190>)
 8003b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b26:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003b28:	4b5b      	ldr	r3, [pc, #364]	; (8003c98 <low_level_init+0x190>)
 8003b2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b2e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003b30:	4b59      	ldr	r3, [pc, #356]	; (8003c98 <low_level_init+0x190>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8003b3c:	2380      	movs	r3, #128	; 0x80
 8003b3e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8003b42:	23e1      	movs	r3, #225	; 0xe1
 8003b44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8003b54:	2300      	movs	r3, #0
 8003b56:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8003b5a:	4a4f      	ldr	r2, [pc, #316]	; (8003c98 <low_level_init+0x190>)
 8003b5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b60:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8003b62:	4b4d      	ldr	r3, [pc, #308]	; (8003c98 <low_level_init+0x190>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003b68:	4b4b      	ldr	r3, [pc, #300]	; (8003c98 <low_level_init+0x190>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003b6e:	4b4a      	ldr	r3, [pc, #296]	; (8003c98 <low_level_init+0x190>)
 8003b70:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003b74:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003b76:	4848      	ldr	r0, [pc, #288]	; (8003c98 <low_level_init+0x190>)
 8003b78:	f7fd fa26 	bl	8000fc8 <HAL_ETH_Init>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8003b82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d108      	bne.n	8003b9c <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003b90:	f043 0304 	orr.w	r3, r3, #4
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	4a40      	ldr	r2, [pc, #256]	; (8003ca0 <low_level_init+0x198>)
 8003ba0:	4940      	ldr	r1, [pc, #256]	; (8003ca4 <low_level_init+0x19c>)
 8003ba2:	483d      	ldr	r0, [pc, #244]	; (8003c98 <low_level_init+0x190>)
 8003ba4:	f7fd fbac 	bl	8001300 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003ba8:	2304      	movs	r3, #4
 8003baa:	4a3f      	ldr	r2, [pc, #252]	; (8003ca8 <low_level_init+0x1a0>)
 8003bac:	493f      	ldr	r1, [pc, #252]	; (8003cac <low_level_init+0x1a4>)
 8003bae:	483a      	ldr	r0, [pc, #232]	; (8003c98 <low_level_init+0x190>)
 8003bb0:	f7fd fc0f 	bl	80013d2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2206      	movs	r2, #6
 8003bb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003bbc:	4b36      	ldr	r3, [pc, #216]	; (8003c98 <low_level_init+0x190>)
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003bc8:	4b33      	ldr	r3, [pc, #204]	; (8003c98 <low_level_init+0x190>)
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	785a      	ldrb	r2, [r3, #1]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003bd4:	4b30      	ldr	r3, [pc, #192]	; (8003c98 <low_level_init+0x190>)
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	789a      	ldrb	r2, [r3, #2]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003be0:	4b2d      	ldr	r3, [pc, #180]	; (8003c98 <low_level_init+0x190>)
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	78da      	ldrb	r2, [r3, #3]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003bec:	4b2a      	ldr	r3, [pc, #168]	; (8003c98 <low_level_init+0x190>)
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	791a      	ldrb	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <low_level_init+0x190>)
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	795a      	ldrb	r2, [r3, #5]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003c0a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003c12:	f043 030a 	orr.w	r3, r3, #10
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8003c1e:	2300      	movs	r3, #0
 8003c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c22:	2300      	movs	r3, #0
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8003c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fbf5 	bl	800441c <osSemaphoreCreate>
 8003c32:	4602      	mov	r2, r0
 8003c34:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <low_level_init+0x1a8>)
 8003c36:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8003c38:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <low_level_init+0x1ac>)
 8003c3a:	f107 040c 	add.w	r4, r7, #12
 8003c3e:	461d      	mov	r5, r3
 8003c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8003c4c:	f107 030c 	add.w	r3, r7, #12
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fae5 	bl	8004222 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003c58:	480f      	ldr	r0, [pc, #60]	; (8003c98 <low_level_init+0x190>)
 8003c5a:	f7fd fee2 	bl	8001a22 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003c5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c62:	461a      	mov	r2, r3
 8003c64:	211d      	movs	r1, #29
 8003c66:	480c      	ldr	r0, [pc, #48]	; (8003c98 <low_level_init+0x190>)
 8003c68:	f7fd fe0d 	bl	8001886 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	f043 030b 	orr.w	r3, r3, #11
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	461a      	mov	r2, r3
 8003c78:	211d      	movs	r1, #29
 8003c7a:	4807      	ldr	r0, [pc, #28]	; (8003c98 <low_level_init+0x190>)
 8003c7c:	f7fd fe6b 	bl	8001956 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003c80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c84:	461a      	mov	r2, r3
 8003c86:	211d      	movs	r1, #29
 8003c88:	4803      	ldr	r0, [pc, #12]	; (8003c98 <low_level_init+0x190>)
 8003c8a:	f7fd fdfc 	bl	8001886 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003c8e:	bf00      	nop
 8003c90:	3740      	adds	r7, #64	; 0x40
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bdb0      	pop	{r4, r5, r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20005bbc 	.word	0x20005bbc
 8003c9c:	40028000 	.word	0x40028000
 8003ca0:	20005c04 	.word	0x20005c04
 8003ca4:	200042ec 	.word	0x200042ec
 8003ca8:	2000436c 	.word	0x2000436c
 8003cac:	20005b3c 	.word	0x20005b3c
 8003cb0:	200002f8 	.word	0x200002f8
 8003cb4:	08017600 	.word	0x08017600

08003cb8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	; 0x28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003cc2:	4b4b      	ldr	r3, [pc, #300]	; (8003df0 <low_level_output+0x138>)
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003cda:	4b45      	ldr	r3, [pc, #276]	; (8003df0 <low_level_output+0x138>)
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	623b      	str	r3, [r7, #32]
 8003ce8:	e05a      	b.n	8003da0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	da03      	bge.n	8003cfa <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003cf2:	23f8      	movs	r3, #248	; 0xf8
 8003cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003cf8:	e05c      	b.n	8003db4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	895b      	ldrh	r3, [r3, #10]
 8003cfe:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003d04:	e02f      	b.n	8003d66 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	18d0      	adds	r0, r2, r3
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	18d1      	adds	r1, r2, r3
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f012 fa0c 	bl	801613a <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	da03      	bge.n	8003d38 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003d30:	23f8      	movs	r3, #248	; 0xf8
 8003d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003d36:	e03d      	b.n	8003db4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003d48:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003d54:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003d60:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d8c8      	bhi.n	8003d06 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	18d0      	adds	r0, r2, r3
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4413      	add	r3, r2
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4619      	mov	r1, r3
 8003d86:	f012 f9d8 	bl	801613a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	623b      	str	r3, [r7, #32]
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1a1      	bne.n	8003cea <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003da6:	6979      	ldr	r1, [r7, #20]
 8003da8:	4811      	ldr	r0, [pc, #68]	; (8003df0 <low_level_output+0x138>)
 8003daa:	f7fd fb7f 	bl	80014ac <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003db4:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <low_level_output+0x138>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	f241 0314 	movw	r3, #4116	; 0x1014
 8003dbc:	4413      	add	r3, r2
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00d      	beq.n	8003de4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003dc8:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <low_level_output+0x138>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	f241 0314 	movw	r3, #4116	; 0x1014
 8003dd0:	4413      	add	r3, r2
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <low_level_output+0x138>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	f241 0304 	movw	r3, #4100	; 0x1004
 8003dde:	4413      	add	r3, r2
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003de4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3728      	adds	r7, #40	; 0x28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20005bbc 	.word	0x20005bbc

08003df4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08c      	sub	sp, #48	; 0x30
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003e18:	484f      	ldr	r0, [pc, #316]	; (8003f58 <low_level_input+0x164>)
 8003e1a:	f7fd fc31 	bl	8001680 <HAL_ETH_GetReceivedFrame_IT>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <low_level_input+0x34>

    return NULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	e092      	b.n	8003f4e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003e28:	4b4b      	ldr	r3, [pc, #300]	; (8003f58 <low_level_input+0x164>)
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003e2e:	4b4a      	ldr	r3, [pc, #296]	; (8003f58 <low_level_input+0x164>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003e34:	89fb      	ldrh	r3, [r7, #14]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003e3a:	89fb      	ldrh	r3, [r7, #14]
 8003e3c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003e40:	4619      	mov	r1, r3
 8003e42:	2000      	movs	r0, #0
 8003e44:	f00a f9c0 	bl	800e1c8 <pbuf_alloc>
 8003e48:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d04b      	beq.n	8003ee8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003e50:	4b41      	ldr	r3, [pc, #260]	; (8003f58 <low_level_input+0x164>)
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5e:	e040      	b.n	8003ee2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	895b      	ldrh	r3, [r3, #10]
 8003e64:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003e6a:	e021      	b.n	8003eb0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	18d0      	adds	r0, r2, r3
 8003e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	18d1      	adds	r1, r2, r3
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	461a      	mov	r2, r3
 8003e84:	f012 f959 	bl	801613a <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003e9e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003eaa:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d8d6      	bhi.n	8003e6c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	18d0      	adds	r0, r2, r3
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	4413      	add	r3, r2
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	f012 f933 	bl	801613a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	4413      	add	r3, r2
 8003eda:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1bb      	bne.n	8003e60 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <low_level_input+0x164>)
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	e00b      	b.n	8003f0c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <low_level_input+0x164>)
 8003f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d8ee      	bhi.n	8003ef4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <low_level_input+0x164>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003f1c:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <low_level_input+0x164>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	f241 0314 	movw	r3, #4116	; 0x1014
 8003f24:	4413      	add	r3, r2
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00d      	beq.n	8003f4c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003f30:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <low_level_input+0x164>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	f241 0314 	movw	r3, #4116	; 0x1014
 8003f38:	4413      	add	r3, r2
 8003f3a:	2280      	movs	r2, #128	; 0x80
 8003f3c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <low_level_input+0x164>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	f241 0308 	movw	r3, #4104	; 0x1008
 8003f46:	4413      	add	r3, r2
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3730      	adds	r7, #48	; 0x30
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20005bbc 	.word	0x20005bbc

08003f5c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003f68:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <ethernetif_input+0x58>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fa87 	bl	8004484 <osSemaphoreWait>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f5      	bne.n	8003f68 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8003f7c:	480e      	ldr	r0, [pc, #56]	; (8003fb8 <ethernetif_input+0x5c>)
 8003f7e:	f012 f81f 	bl	8015fc0 <sys_mutex_lock>
        p = low_level_input( netif );
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f7ff ff36 	bl	8003df4 <low_level_input>
 8003f88:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	68f9      	ldr	r1, [r7, #12]
 8003f96:	68b8      	ldr	r0, [r7, #8]
 8003f98:	4798      	blx	r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8003fa0:	68b8      	ldr	r0, [r7, #8]
 8003fa2:	f00a fc25 	bl	800e7f0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8003fa6:	4804      	ldr	r0, [pc, #16]	; (8003fb8 <ethernetif_input+0x5c>)
 8003fa8:	f012 f819 	bl	8015fde <sys_mutex_unlock>
      } while(p!=NULL);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e4      	bne.n	8003f7c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003fb2:	e7d9      	b.n	8003f68 <ethernetif_input+0xc>
 8003fb4:	200002f8 	.word	0x200002f8
 8003fb8:	20007414 	.word	0x20007414

08003fbc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <ethernetif_init+0x1c>
 8003fca:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <ethernetif_init+0x48>)
 8003fcc:	f240 2235 	movw	r2, #565	; 0x235
 8003fd0:	490d      	ldr	r1, [pc, #52]	; (8004008 <ethernetif_init+0x4c>)
 8003fd2:	480e      	ldr	r0, [pc, #56]	; (800400c <ethernetif_init+0x50>)
 8003fd4:	f012 f8f2 	bl	80161bc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2273      	movs	r2, #115	; 0x73
 8003fdc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2274      	movs	r2, #116	; 0x74
 8003fe4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a09      	ldr	r2, [pc, #36]	; (8004010 <ethernetif_init+0x54>)
 8003fec:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a08      	ldr	r2, [pc, #32]	; (8004014 <ethernetif_init+0x58>)
 8003ff2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff fd87 	bl	8003b08 <low_level_init>

  return ERR_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	0801761c 	.word	0x0801761c
 8004008:	08017638 	.word	0x08017638
 800400c:	08017648 	.word	0x08017648
 8004010:	0800b5a9 	.word	0x0800b5a9
 8004014:	08003cb9 	.word	0x08003cb9

08004018 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800401c:	f7fc fec6 	bl	8000dac <HAL_GetTick>
 8004020:	4603      	mov	r3, r0
}
 8004022:	4618      	mov	r0, r3
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004038:	f107 0308 	add.w	r3, r7, #8
 800403c:	461a      	mov	r2, r3
 800403e:	2101      	movs	r1, #1
 8004040:	4815      	ldr	r0, [pc, #84]	; (8004098 <ethernetif_set_link+0x70>)
 8004042:	f7fd fc20 	bl	8001886 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d108      	bne.n	8004070 <ethernetif_set_link+0x48>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f009 ff7f 	bl	800df6c <netif_set_link_up>
 800406e:	e00f      	b.n	8004090 <ethernetif_set_link+0x68>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <ethernetif_set_link+0x68>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d104      	bne.n	8004090 <ethernetif_set_link+0x68>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f009 ffa2 	bl	800dfd4 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004090:	20c8      	movs	r0, #200	; 0xc8
 8004092:	f000 f912 	bl	80042ba <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004096:	e7cf      	b.n	8004038 <ethernetif_set_link+0x10>
 8004098:	20005bbc 	.word	0x20005bbc

0800409c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d05b      	beq.n	8004172 <ethernetif_update_config+0xd6>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80040ba:	4b33      	ldr	r3, [pc, #204]	; (8004188 <ethernetif_update_config+0xec>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d040      	beq.n	8004144 <ethernetif_update_config+0xa8>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80040c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040c6:	2100      	movs	r1, #0
 80040c8:	482f      	ldr	r0, [pc, #188]	; (8004188 <ethernetif_update_config+0xec>)
 80040ca:	f7fd fc44 	bl	8001956 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80040ce:	f7fc fe6d 	bl	8000dac <HAL_GetTick>
 80040d2:	4603      	mov	r3, r0
 80040d4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80040d6:	f107 0308 	add.w	r3, r7, #8
 80040da:	461a      	mov	r2, r3
 80040dc:	2101      	movs	r1, #1
 80040de:	482a      	ldr	r0, [pc, #168]	; (8004188 <ethernetif_update_config+0xec>)
 80040e0:	f7fd fbd1 	bl	8001886 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80040e4:	f7fc fe62 	bl	8000dac <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040f2:	d826      	bhi.n	8004142 <ethernetif_update_config+0xa6>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0eb      	beq.n	80040d6 <ethernetif_update_config+0x3a>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80040fe:	f107 0308 	add.w	r3, r7, #8
 8004102:	461a      	mov	r2, r3
 8004104:	2110      	movs	r1, #16
 8004106:	4820      	ldr	r0, [pc, #128]	; (8004188 <ethernetif_update_config+0xec>)
 8004108:	f7fd fbbd 	bl	8001886 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <ethernetif_update_config+0x84>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004116:	4b1c      	ldr	r3, [pc, #112]	; (8004188 <ethernetif_update_config+0xec>)
 8004118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800411c:	60da      	str	r2, [r3, #12]
 800411e:	e002      	b.n	8004126 <ethernetif_update_config+0x8a>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <ethernetif_update_config+0xec>)
 8004122:	2200      	movs	r2, #0
 8004124:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <ethernetif_update_config+0x9c>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004130:	4b15      	ldr	r3, [pc, #84]	; (8004188 <ethernetif_update_config+0xec>)
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
 8004136:	e014      	b.n	8004162 <ethernetif_update_config+0xc6>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004138:	4b13      	ldr	r3, [pc, #76]	; (8004188 <ethernetif_update_config+0xec>)
 800413a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	e00f      	b.n	8004162 <ethernetif_update_config+0xc6>
          goto error;
 8004142:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004144:	4b10      	ldr	r3, [pc, #64]	; (8004188 <ethernetif_update_config+0xec>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	08db      	lsrs	r3, r3, #3
 800414a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800414c:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <ethernetif_update_config+0xec>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	085b      	lsrs	r3, r3, #1
 8004152:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004154:	4313      	orrs	r3, r2
 8004156:	b29b      	uxth	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	2100      	movs	r1, #0
 800415c:	480a      	ldr	r0, [pc, #40]	; (8004188 <ethernetif_update_config+0xec>)
 800415e:	f7fd fbfa 	bl	8001956 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004162:	2100      	movs	r1, #0
 8004164:	4808      	ldr	r0, [pc, #32]	; (8004188 <ethernetif_update_config+0xec>)
 8004166:	f7fd fcbb 	bl	8001ae0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800416a:	4807      	ldr	r0, [pc, #28]	; (8004188 <ethernetif_update_config+0xec>)
 800416c:	f7fd fc59 	bl	8001a22 <HAL_ETH_Start>
 8004170:	e002      	b.n	8004178 <ethernetif_update_config+0xdc>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004172:	4805      	ldr	r0, [pc, #20]	; (8004188 <ethernetif_update_config+0xec>)
 8004174:	f7fd fc84 	bl	8001a80 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f807 	bl	800418c <ethernetif_notify_conn_changed>
}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20005bbc 	.word	0x20005bbc

0800418c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80041ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041b2:	2b84      	cmp	r3, #132	; 0x84
 80041b4:	d005      	beq.n	80041c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80041b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4413      	add	r3, r2
 80041be:	3303      	adds	r3, #3
 80041c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80041c2:	68fb      	ldr	r3, [r7, #12]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041d6:	f3ef 8305 	mrs	r3, IPSR
 80041da:	607b      	str	r3, [r7, #4]
  return(result);
 80041dc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bf14      	ite	ne
 80041e2:	2301      	movne	r3, #1
 80041e4:	2300      	moveq	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80041f8:	f002 f95c 	bl	80064b4 <vTaskStartScheduler>
  
  return osOK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	bd80      	pop	{r7, pc}

08004202 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004206:	f7ff ffe3 	bl	80041d0 <inHandlerMode>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004210:	f002 fa6e 	bl	80066f0 <xTaskGetTickCountFromISR>
 8004214:	4603      	mov	r3, r0
 8004216:	e002      	b.n	800421e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004218:	f002 fa5a 	bl	80066d0 <xTaskGetTickCount>
 800421c:	4603      	mov	r3, r0
  }
}
 800421e:	4618      	mov	r0, r3
 8004220:	bd80      	pop	{r7, pc}

08004222 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004222:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004224:	b089      	sub	sp, #36	; 0x24
 8004226:	af04      	add	r7, sp, #16
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d020      	beq.n	8004276 <osThreadCreate+0x54>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01c      	beq.n	8004276 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685c      	ldr	r4, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681d      	ldr	r5, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691e      	ldr	r6, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff ffa6 	bl	80041a0 <makeFreeRtosPriority>
 8004254:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800425e:	9202      	str	r2, [sp, #8]
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	9100      	str	r1, [sp, #0]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	4632      	mov	r2, r6
 8004268:	4629      	mov	r1, r5
 800426a:	4620      	mov	r0, r4
 800426c:	f001 ff54 	bl	8006118 <xTaskCreateStatic>
 8004270:	4603      	mov	r3, r0
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e01c      	b.n	80042b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685c      	ldr	r4, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004282:	b29e      	uxth	r6, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff ff88 	bl	80041a0 <makeFreeRtosPriority>
 8004290:	4602      	mov	r2, r0
 8004292:	f107 030c 	add.w	r3, r7, #12
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	9200      	str	r2, [sp, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	4632      	mov	r2, r6
 800429e:	4629      	mov	r1, r5
 80042a0:	4620      	mov	r0, r4
 80042a2:	f001 ff99 	bl	80061d8 <xTaskCreate>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d001      	beq.n	80042b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	e000      	b.n	80042b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80042b0:	68fb      	ldr	r3, [r7, #12]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <osDelay+0x16>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	e000      	b.n	80042d2 <osDelay+0x18>
 80042d0:	2301      	movs	r3, #1
 80042d2:	4618      	mov	r0, r3
 80042d4:	f002 f8b8 	bl	8006448 <vTaskDelay>
  
  return osOK;
 80042d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4619      	mov	r1, r3
 80042f8:	2001      	movs	r0, #1
 80042fa:	f001 f898 	bl	800542e <xQueueCreateMutexStatic>
 80042fe:	4603      	mov	r3, r0
 8004300:	e003      	b.n	800430a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004302:	2001      	movs	r0, #1
 8004304:	f001 f87b 	bl	80053fe <xQueueCreateMutex>
 8004308:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <osMutexWait+0x18>
    return osErrorParameter;
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	e03a      	b.n	80043a2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004336:	d103      	bne.n	8004340 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004338:	f04f 33ff 	mov.w	r3, #4294967295
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	e009      	b.n	8004354 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d006      	beq.n	8004354 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <osMutexWait+0x40>
      ticks = 1;
 8004350:	2301      	movs	r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004354:	f7ff ff3c 	bl	80041d0 <inHandlerMode>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d017      	beq.n	800438e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800435e:	f107 0308 	add.w	r3, r7, #8
 8004362:	461a      	mov	r2, r3
 8004364:	2100      	movs	r1, #0
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f001 fc9e 	bl	8005ca8 <xQueueReceiveFromISR>
 800436c:	4603      	mov	r3, r0
 800436e:	2b01      	cmp	r3, #1
 8004370:	d001      	beq.n	8004376 <osMutexWait+0x62>
      return osErrorOS;
 8004372:	23ff      	movs	r3, #255	; 0xff
 8004374:	e015      	b.n	80043a2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d011      	beq.n	80043a0 <osMutexWait+0x8c>
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <osMutexWait+0x98>)
 800437e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	e008      	b.n	80043a0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800438e:	68f9      	ldr	r1, [r7, #12]
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f001 fb79 	bl	8005a88 <xQueueSemaphoreTake>
 8004396:	4603      	mov	r3, r0
 8004398:	2b01      	cmp	r3, #1
 800439a:	d001      	beq.n	80043a0 <osMutexWait+0x8c>
    return osErrorOS;
 800439c:	23ff      	movs	r3, #255	; 0xff
 800439e:	e000      	b.n	80043a2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	e000ed04 	.word	0xe000ed04

080043b0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80043bc:	2300      	movs	r3, #0
 80043be:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80043c0:	f7ff ff06 	bl	80041d0 <inHandlerMode>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80043ca:	f107 0308 	add.w	r3, r7, #8
 80043ce:	4619      	mov	r1, r3
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f001 f9e5 	bl	80057a0 <xQueueGiveFromISR>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d001      	beq.n	80043e0 <osMutexRelease+0x30>
      return osErrorOS;
 80043dc:	23ff      	movs	r3, #255	; 0xff
 80043de:	e017      	b.n	8004410 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d013      	beq.n	800440e <osMutexRelease+0x5e>
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <osMutexRelease+0x68>)
 80043e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	e00a      	b.n	800440e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80043f8:	2300      	movs	r3, #0
 80043fa:	2200      	movs	r2, #0
 80043fc:	2100      	movs	r1, #0
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f001 f830 	bl	8005464 <xQueueGenericSend>
 8004404:	4603      	mov	r3, r0
 8004406:	2b01      	cmp	r3, #1
 8004408:	d001      	beq.n	800440e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800440a:	23ff      	movs	r3, #255	; 0xff
 800440c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800440e:	68fb      	ldr	r3, [r7, #12]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af02      	add	r7, sp, #8
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d010      	beq.n	8004450 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d10b      	bne.n	800444c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	2303      	movs	r3, #3
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	2200      	movs	r2, #0
 8004440:	2100      	movs	r1, #0
 8004442:	2001      	movs	r0, #1
 8004444:	f000 fee4 	bl	8005210 <xQueueGenericCreateStatic>
 8004448:	4603      	mov	r3, r0
 800444a:	e016      	b.n	800447a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800444c:	2300      	movs	r3, #0
 800444e:	e014      	b.n	800447a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d110      	bne.n	8004478 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004456:	2203      	movs	r2, #3
 8004458:	2100      	movs	r1, #0
 800445a:	2001      	movs	r0, #1
 800445c:	f000 ff55 	bl	800530a <xQueueGenericCreate>
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <osSemaphoreCreate+0x58>
 8004468:	2300      	movs	r3, #0
 800446a:	2200      	movs	r2, #0
 800446c:	2100      	movs	r1, #0
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fff8 	bl	8005464 <xQueueGenericSend>
      return sema;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	e000      	b.n	800447a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004478:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004498:	2380      	movs	r3, #128	; 0x80
 800449a:	e03a      	b.n	8004512 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a6:	d103      	bne.n	80044b0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80044a8:	f04f 33ff 	mov.w	r3, #4294967295
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	e009      	b.n	80044c4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d006      	beq.n	80044c4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <osSemaphoreWait+0x40>
      ticks = 1;
 80044c0:	2301      	movs	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80044c4:	f7ff fe84 	bl	80041d0 <inHandlerMode>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d017      	beq.n	80044fe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80044ce:	f107 0308 	add.w	r3, r7, #8
 80044d2:	461a      	mov	r2, r3
 80044d4:	2100      	movs	r1, #0
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f001 fbe6 	bl	8005ca8 <xQueueReceiveFromISR>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d001      	beq.n	80044e6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80044e2:	23ff      	movs	r3, #255	; 0xff
 80044e4:	e015      	b.n	8004512 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d011      	beq.n	8004510 <osSemaphoreWait+0x8c>
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <osSemaphoreWait+0x98>)
 80044ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	e008      	b.n	8004510 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80044fe:	68f9      	ldr	r1, [r7, #12]
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f001 fac1 	bl	8005a88 <xQueueSemaphoreTake>
 8004506:	4603      	mov	r3, r0
 8004508:	2b01      	cmp	r3, #1
 800450a:	d001      	beq.n	8004510 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800450c:	23ff      	movs	r3, #255	; 0xff
 800450e:	e000      	b.n	8004512 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	e000ed04 	.word	0xe000ed04

08004520 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800452c:	2300      	movs	r3, #0
 800452e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004530:	f7ff fe4e 	bl	80041d0 <inHandlerMode>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d016      	beq.n	8004568 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800453a:	f107 0308 	add.w	r3, r7, #8
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f001 f92d 	bl	80057a0 <xQueueGiveFromISR>
 8004546:	4603      	mov	r3, r0
 8004548:	2b01      	cmp	r3, #1
 800454a:	d001      	beq.n	8004550 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800454c:	23ff      	movs	r3, #255	; 0xff
 800454e:	e017      	b.n	8004580 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d013      	beq.n	800457e <osSemaphoreRelease+0x5e>
 8004556:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <osSemaphoreRelease+0x68>)
 8004558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	e00a      	b.n	800457e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004568:	2300      	movs	r3, #0
 800456a:	2200      	movs	r2, #0
 800456c:	2100      	movs	r1, #0
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 ff78 	bl	8005464 <xQueueGenericSend>
 8004574:	4603      	mov	r3, r0
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800457a:	23ff      	movs	r3, #255	; 0xff
 800457c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800457e:	68fb      	ldr	r3, [r7, #12]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004594:	f7ff fe1c 	bl	80041d0 <inHandlerMode>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800459e:	2382      	movs	r3, #130	; 0x82
 80045a0:	e003      	b.n	80045aa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f001 fc41 	bl	8005e2a <vQueueDelete>

  return osOK; 
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80045b2:	b590      	push	{r4, r7, lr}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af02      	add	r7, sp, #8
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d012      	beq.n	80045ea <osMessageCreate+0x38>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00e      	beq.n	80045ea <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6859      	ldr	r1, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68dc      	ldr	r4, [r3, #12]
 80045dc:	2300      	movs	r3, #0
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	4623      	mov	r3, r4
 80045e2:	f000 fe15 	bl	8005210 <xQueueGenericCreateStatic>
 80045e6:	4603      	mov	r3, r0
 80045e8:	e008      	b.n	80045fc <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	4619      	mov	r1, r3
 80045f6:	f000 fe88 	bl	800530a <xQueueGenericCreate>
 80045fa:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	bd90      	pop	{r4, r7, pc}

08004604 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004610:	2300      	movs	r3, #0
 8004612:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <osMessagePut+0x1e>
    ticks = 1;
 800461e:	2301      	movs	r3, #1
 8004620:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004622:	f7ff fdd5 	bl	80041d0 <inHandlerMode>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d018      	beq.n	800465e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800462c:	f107 0210 	add.w	r2, r7, #16
 8004630:	f107 0108 	add.w	r1, r7, #8
 8004634:	2300      	movs	r3, #0
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f001 f816 	bl	8005668 <xQueueGenericSendFromISR>
 800463c:	4603      	mov	r3, r0
 800463e:	2b01      	cmp	r3, #1
 8004640:	d001      	beq.n	8004646 <osMessagePut+0x42>
      return osErrorOS;
 8004642:	23ff      	movs	r3, #255	; 0xff
 8004644:	e018      	b.n	8004678 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d014      	beq.n	8004676 <osMessagePut+0x72>
 800464c:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <osMessagePut+0x7c>)
 800464e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	e00b      	b.n	8004676 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800465e:	f107 0108 	add.w	r1, r7, #8
 8004662:	2300      	movs	r3, #0
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fefc 	bl	8005464 <xQueueGenericSend>
 800466c:	4603      	mov	r3, r0
 800466e:	2b01      	cmp	r3, #1
 8004670:	d001      	beq.n	8004676 <osMessagePut+0x72>
      return osErrorOS;
 8004672:	23ff      	movs	r3, #255	; 0xff
 8004674:	e000      	b.n	8004678 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004684:	b590      	push	{r4, r7, lr}
 8004686:	b08b      	sub	sp, #44	; 0x2c
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	617b      	str	r3, [r7, #20]
    return event;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	461c      	mov	r4, r3
 80046a6:	f107 0314 	add.w	r3, r7, #20
 80046aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046b2:	e054      	b.n	800475e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d103      	bne.n	80046cc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80046c4:	f04f 33ff 	mov.w	r3, #4294967295
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ca:	e009      	b.n	80046e0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d006      	beq.n	80046e0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <osMessageGet+0x5c>
      ticks = 1;
 80046dc:	2301      	movs	r3, #1
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80046e0:	f7ff fd76 	bl	80041d0 <inHandlerMode>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d01c      	beq.n	8004724 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80046ea:	f107 0220 	add.w	r2, r7, #32
 80046ee:	f107 0314 	add.w	r3, r7, #20
 80046f2:	3304      	adds	r3, #4
 80046f4:	4619      	mov	r1, r3
 80046f6:	68b8      	ldr	r0, [r7, #8]
 80046f8:	f001 fad6 	bl	8005ca8 <xQueueReceiveFromISR>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d102      	bne.n	8004708 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004702:	2310      	movs	r3, #16
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e001      	b.n	800470c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01d      	beq.n	800474e <osMessageGet+0xca>
 8004712:	4b15      	ldr	r3, [pc, #84]	; (8004768 <osMessageGet+0xe4>)
 8004714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	e014      	b.n	800474e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004724:	f107 0314 	add.w	r3, r7, #20
 8004728:	3304      	adds	r3, #4
 800472a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472c:	4619      	mov	r1, r3
 800472e:	68b8      	ldr	r0, [r7, #8]
 8004730:	f001 f8c8 	bl	80058c4 <xQueueReceive>
 8004734:	4603      	mov	r3, r0
 8004736:	2b01      	cmp	r3, #1
 8004738:	d102      	bne.n	8004740 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800473a:	2310      	movs	r3, #16
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e006      	b.n	800474e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <osMessageGet+0xc6>
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <osMessageGet+0xc8>
 800474a:	2340      	movs	r3, #64	; 0x40
 800474c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	461c      	mov	r4, r3
 8004752:	f107 0314 	add.w	r3, r7, #20
 8004756:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800475a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	372c      	adds	r7, #44	; 0x2c
 8004762:	46bd      	mov	sp, r7
 8004764:	bd90      	pop	{r4, r7, pc}
 8004766:	bf00      	nop
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004774:	f7ff fd2c 	bl	80041d0 <inHandlerMode>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f001 fb34 	bl	8005dec <uxQueueMessagesWaitingFromISR>
 8004784:	4603      	mov	r3, r0
 8004786:	e003      	b.n	8004790 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f001 fb10 	bl	8005dae <uxQueueMessagesWaiting>
 800478e:	4603      	mov	r3, r0
  }
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80047a0:	f7ff fd16 	bl	80041d0 <inHandlerMode>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <osMessageDelete+0x16>
    return osErrorISR;
 80047aa:	2382      	movs	r3, #130	; 0x82
 80047ac:	e003      	b.n	80047b6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f001 fb3b 	bl	8005e2a <vQueueDelete>

  return osOK; 
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f103 0208 	add.w	r2, r3, #8
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f04f 32ff 	mov.w	r2, #4294967295
 80047d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f103 0208 	add.w	r2, r3, #8
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f103 0208 	add.w	r2, r3, #8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	601a      	str	r2, [r3, #0]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004876:	d103      	bne.n	8004880 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	e00c      	b.n	800489a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3308      	adds	r3, #8
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	e002      	b.n	800488e <vListInsert+0x2e>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	d9f6      	bls.n	8004888 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	601a      	str	r2, [r3, #0]
}
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6892      	ldr	r2, [r2, #8]
 80048e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6852      	ldr	r2, [r2, #4]
 80048f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d103      	bne.n	8004906 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	1e5a      	subs	r2, r3, #1
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3b04      	subs	r3, #4
 8004938:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3b04      	subs	r3, #4
 8004946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f023 0201 	bic.w	r2, r3, #1
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3b04      	subs	r3, #4
 8004956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004958:	4a0c      	ldr	r2, [pc, #48]	; (800498c <pxPortInitialiseStack+0x64>)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3b14      	subs	r3, #20
 8004962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3b04      	subs	r3, #4
 800496e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f06f 0202 	mvn.w	r2, #2
 8004976:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3b20      	subs	r3, #32
 800497c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800497e:	68fb      	ldr	r3, [r7, #12]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	08004991 	.word	0x08004991

08004990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004996:	2300      	movs	r3, #0
 8004998:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800499a:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <prvTaskExitError+0x58>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d00b      	beq.n	80049bc <prvTaskExitError+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	b672      	cpsid	i
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	b662      	cpsie	i
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	e7fe      	b.n	80049ba <prvTaskExitError+0x2a>
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	b672      	cpsid	i
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	b662      	cpsie	i
 80049d0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049d2:	bf00      	nop
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0fc      	beq.n	80049d4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	2000000c 	.word	0x2000000c
 80049ec:	00000000 	.word	0x00000000

080049f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049f0:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <pxCurrentTCBConst2>)
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	6808      	ldr	r0, [r1, #0]
 80049f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fa:	f380 8809 	msr	PSP, r0
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f04f 0000 	mov.w	r0, #0
 8004a06:	f380 8811 	msr	BASEPRI, r0
 8004a0a:	4770      	bx	lr
 8004a0c:	f3af 8000 	nop.w

08004a10 <pxCurrentTCBConst2>:
 8004a10:	20003f1c 	.word	0x20003f1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop

08004a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a18:	4808      	ldr	r0, [pc, #32]	; (8004a3c <prvPortStartFirstTask+0x24>)
 8004a1a:	6800      	ldr	r0, [r0, #0]
 8004a1c:	6800      	ldr	r0, [r0, #0]
 8004a1e:	f380 8808 	msr	MSP, r0
 8004a22:	f04f 0000 	mov.w	r0, #0
 8004a26:	f380 8814 	msr	CONTROL, r0
 8004a2a:	b662      	cpsie	i
 8004a2c:	b661      	cpsie	f
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	df00      	svc	0
 8004a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a3a:	bf00      	nop
 8004a3c:	e000ed08 	.word	0xe000ed08

08004a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a46:	4b36      	ldr	r3, [pc, #216]	; (8004b20 <xPortStartScheduler+0xe0>)
 8004a48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	22ff      	movs	r2, #255	; 0xff
 8004a56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <xPortStartScheduler+0xe4>)
 8004a6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <xPortStartScheduler+0xe8>)
 8004a70:	2207      	movs	r2, #7
 8004a72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a74:	e009      	b.n	8004a8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004a76:	4b2c      	ldr	r3, [pc, #176]	; (8004b28 <xPortStartScheduler+0xe8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	4a2a      	ldr	r2, [pc, #168]	; (8004b28 <xPortStartScheduler+0xe8>)
 8004a7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a8a:	78fb      	ldrb	r3, [r7, #3]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a92:	2b80      	cmp	r3, #128	; 0x80
 8004a94:	d0ef      	beq.n	8004a76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a96:	4b24      	ldr	r3, [pc, #144]	; (8004b28 <xPortStartScheduler+0xe8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f1c3 0307 	rsb	r3, r3, #7
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d00b      	beq.n	8004aba <xPortStartScheduler+0x7a>
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	b672      	cpsid	i
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	b662      	cpsie	i
 8004ab6:	60bb      	str	r3, [r7, #8]
 8004ab8:	e7fe      	b.n	8004ab8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004aba:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <xPortStartScheduler+0xe8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	4a19      	ldr	r2, [pc, #100]	; (8004b28 <xPortStartScheduler+0xe8>)
 8004ac2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ac4:	4b18      	ldr	r3, [pc, #96]	; (8004b28 <xPortStartScheduler+0xe8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004acc:	4a16      	ldr	r2, [pc, #88]	; (8004b28 <xPortStartScheduler+0xe8>)
 8004ace:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ad8:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <xPortStartScheduler+0xec>)
 8004ada:	4b14      	ldr	r3, [pc, #80]	; (8004b2c <xPortStartScheduler+0xec>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ae2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ae4:	4a11      	ldr	r2, [pc, #68]	; (8004b2c <xPortStartScheduler+0xec>)
 8004ae6:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <xPortStartScheduler+0xec>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004aee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004af0:	f000 f8d4 	bl	8004c9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004af4:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <xPortStartScheduler+0xf0>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004afa:	f000 f8f3 	bl	8004ce4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004afe:	4a0d      	ldr	r2, [pc, #52]	; (8004b34 <xPortStartScheduler+0xf4>)
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <xPortStartScheduler+0xf4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b08:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b0a:	f7ff ff85 	bl	8004a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b0e:	f001 febb 	bl	8006888 <vTaskSwitchContext>
	prvTaskExitError();
 8004b12:	f7ff ff3d 	bl	8004990 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	e000e400 	.word	0xe000e400
 8004b24:	200002fc 	.word	0x200002fc
 8004b28:	20000300 	.word	0x20000300
 8004b2c:	e000ed20 	.word	0xe000ed20
 8004b30:	2000000c 	.word	0x2000000c
 8004b34:	e000ef34 	.word	0xe000ef34

08004b38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	b672      	cpsid	i
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	b662      	cpsie	i
 8004b52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <vPortEnterCritical+0x5c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	4a0e      	ldr	r2, [pc, #56]	; (8004b94 <vPortEnterCritical+0x5c>)
 8004b5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <vPortEnterCritical+0x5c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d110      	bne.n	8004b88 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b66:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <vPortEnterCritical+0x60>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00b      	beq.n	8004b88 <vPortEnterCritical+0x50>
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	b672      	cpsid	i
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	b662      	cpsie	i
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	e7fe      	b.n	8004b86 <vPortEnterCritical+0x4e>
	}
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	2000000c 	.word	0x2000000c
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ba2:	4b12      	ldr	r3, [pc, #72]	; (8004bec <vPortExitCritical+0x50>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10b      	bne.n	8004bc2 <vPortExitCritical+0x26>
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	b672      	cpsid	i
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	b662      	cpsie	i
 8004bbe:	607b      	str	r3, [r7, #4]
 8004bc0:	e7fe      	b.n	8004bc0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <vPortExitCritical+0x50>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	4a08      	ldr	r2, [pc, #32]	; (8004bec <vPortExitCritical+0x50>)
 8004bca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bcc:	4b07      	ldr	r3, [pc, #28]	; (8004bec <vPortExitCritical+0x50>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d104      	bne.n	8004bde <vPortExitCritical+0x42>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	2000000c 	.word	0x2000000c

08004bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004bf0:	f3ef 8009 	mrs	r0, PSP
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <pxCurrentTCBConst>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	f01e 0f10 	tst.w	lr, #16
 8004c00:	bf08      	it	eq
 8004c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0a:	6010      	str	r0, [r2, #0]
 8004c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c14:	b672      	cpsid	i
 8004c16:	f380 8811 	msr	BASEPRI, r0
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	b662      	cpsie	i
 8004c24:	f001 fe30 	bl	8006888 <vTaskSwitchContext>
 8004c28:	f04f 0000 	mov.w	r0, #0
 8004c2c:	f380 8811 	msr	BASEPRI, r0
 8004c30:	bc09      	pop	{r0, r3}
 8004c32:	6819      	ldr	r1, [r3, #0]
 8004c34:	6808      	ldr	r0, [r1, #0]
 8004c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3a:	f01e 0f10 	tst.w	lr, #16
 8004c3e:	bf08      	it	eq
 8004c40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c44:	f380 8809 	msr	PSP, r0
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop

08004c50 <pxCurrentTCBConst>:
 8004c50:	20003f1c 	.word	0x20003f1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop

08004c58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	b672      	cpsid	i
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	b662      	cpsie	i
 8004c72:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c74:	f001 fd4e 	bl	8006714 <xTaskIncrementTick>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <SysTick_Handler+0x40>)
 8004c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	2300      	movs	r3, #0
 8004c88:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c90:	bf00      	nop
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	e000ed04 	.word	0xe000ed04

08004c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <vPortSetupTimerInterrupt+0x34>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <vPortSetupTimerInterrupt+0x38>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cac:	4a0a      	ldr	r2, [pc, #40]	; (8004cd8 <vPortSetupTimerInterrupt+0x3c>)
 8004cae:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <vPortSetupTimerInterrupt+0x40>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	490b      	ldr	r1, [pc, #44]	; (8004ce0 <vPortSetupTimerInterrupt+0x44>)
 8004cb4:	fba1 1303 	umull	r1, r3, r1, r3
 8004cb8:	099b      	lsrs	r3, r3, #6
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cbe:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <vPortSetupTimerInterrupt+0x34>)
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	601a      	str	r2, [r3, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	e000e010 	.word	0xe000e010
 8004cd4:	e000e018 	.word	0xe000e018
 8004cd8:	e000e014 	.word	0xe000e014
 8004cdc:	20000000 	.word	0x20000000
 8004ce0:	10624dd3 	.word	0x10624dd3

08004ce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ce4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004cf4 <vPortEnableVFP+0x10>
 8004ce8:	6801      	ldr	r1, [r0, #0]
 8004cea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cee:	6001      	str	r1, [r0, #0]
 8004cf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004cf2:	bf00      	nop
 8004cf4:	e000ed88 	.word	0xe000ed88

08004cf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cfe:	f3ef 8305 	mrs	r3, IPSR
 8004d02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b0f      	cmp	r3, #15
 8004d08:	d915      	bls.n	8004d36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d0a:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <vPortValidateInterruptPriority+0x74>)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d14:	4b16      	ldr	r3, [pc, #88]	; (8004d70 <vPortValidateInterruptPriority+0x78>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	7afa      	ldrb	r2, [r7, #11]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d20b      	bcs.n	8004d36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	b672      	cpsid	i
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	b662      	cpsie	i
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	e7fe      	b.n	8004d34 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d36:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <vPortValidateInterruptPriority+0x7c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d3e:	4b0e      	ldr	r3, [pc, #56]	; (8004d78 <vPortValidateInterruptPriority+0x80>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d90b      	bls.n	8004d5e <vPortValidateInterruptPriority+0x66>
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	b672      	cpsid	i
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	b662      	cpsie	i
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	e7fe      	b.n	8004d5c <vPortValidateInterruptPriority+0x64>
	}
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	e000e3f0 	.word	0xe000e3f0
 8004d70:	200002fc 	.word	0x200002fc
 8004d74:	e000ed0c 	.word	0xe000ed0c
 8004d78:	20000300 	.word	0x20000300

08004d7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	; 0x28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d84:	2300      	movs	r3, #0
 8004d86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d88:	f001 fbf6 	bl	8006578 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d8c:	4b5a      	ldr	r3, [pc, #360]	; (8004ef8 <pvPortMalloc+0x17c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d94:	f000 f916 	bl	8004fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d98:	4b58      	ldr	r3, [pc, #352]	; (8004efc <pvPortMalloc+0x180>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f040 8090 	bne.w	8004ec6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d01e      	beq.n	8004dea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004dac:	2208      	movs	r2, #8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4413      	add	r3, r2
 8004db2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d015      	beq.n	8004dea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f023 0307 	bic.w	r3, r3, #7
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00b      	beq.n	8004dea <pvPortMalloc+0x6e>
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	b672      	cpsid	i
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	b662      	cpsie	i
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	e7fe      	b.n	8004de8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d06a      	beq.n	8004ec6 <pvPortMalloc+0x14a>
 8004df0:	4b43      	ldr	r3, [pc, #268]	; (8004f00 <pvPortMalloc+0x184>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d865      	bhi.n	8004ec6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004dfa:	4b42      	ldr	r3, [pc, #264]	; (8004f04 <pvPortMalloc+0x188>)
 8004dfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004dfe:	4b41      	ldr	r3, [pc, #260]	; (8004f04 <pvPortMalloc+0x188>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e04:	e004      	b.n	8004e10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d203      	bcs.n	8004e22 <pvPortMalloc+0xa6>
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f1      	bne.n	8004e06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e22:	4b35      	ldr	r3, [pc, #212]	; (8004ef8 <pvPortMalloc+0x17c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d04c      	beq.n	8004ec6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2208      	movs	r2, #8
 8004e32:	4413      	add	r3, r2
 8004e34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	1ad2      	subs	r2, r2, r3
 8004e46:	2308      	movs	r3, #8
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d920      	bls.n	8004e90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4413      	add	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00b      	beq.n	8004e78 <pvPortMalloc+0xfc>
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	b672      	cpsid	i
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	b662      	cpsie	i
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	e7fe      	b.n	8004e76 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	1ad2      	subs	r2, r2, r3
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e8a:	69b8      	ldr	r0, [r7, #24]
 8004e8c:	f000 f8fc 	bl	8005088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e90:	4b1b      	ldr	r3, [pc, #108]	; (8004f00 <pvPortMalloc+0x184>)
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	4a19      	ldr	r2, [pc, #100]	; (8004f00 <pvPortMalloc+0x184>)
 8004e9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e9e:	4b18      	ldr	r3, [pc, #96]	; (8004f00 <pvPortMalloc+0x184>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4b19      	ldr	r3, [pc, #100]	; (8004f08 <pvPortMalloc+0x18c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d203      	bcs.n	8004eb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004eaa:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <pvPortMalloc+0x184>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a16      	ldr	r2, [pc, #88]	; (8004f08 <pvPortMalloc+0x18c>)
 8004eb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	4b11      	ldr	r3, [pc, #68]	; (8004efc <pvPortMalloc+0x180>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ec6:	f001 fb65 	bl	8006594 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00b      	beq.n	8004eec <pvPortMalloc+0x170>
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	b672      	cpsid	i
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	b662      	cpsie	i
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	e7fe      	b.n	8004eea <pvPortMalloc+0x16e>
	return pvReturn;
 8004eec:	69fb      	ldr	r3, [r7, #28]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3728      	adds	r7, #40	; 0x28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20003f0c 	.word	0x20003f0c
 8004efc:	20003f18 	.word	0x20003f18
 8004f00:	20003f10 	.word	0x20003f10
 8004f04:	20003f04 	.word	0x20003f04
 8004f08:	20003f14 	.word	0x20003f14

08004f0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d04a      	beq.n	8004fb4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f1e:	2308      	movs	r3, #8
 8004f20:	425b      	negs	r3, r3
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4413      	add	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	4b22      	ldr	r3, [pc, #136]	; (8004fbc <vPortFree+0xb0>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10b      	bne.n	8004f52 <vPortFree+0x46>
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	b672      	cpsid	i
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	b662      	cpsie	i
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	e7fe      	b.n	8004f50 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00b      	beq.n	8004f72 <vPortFree+0x66>
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	b672      	cpsid	i
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	b662      	cpsie	i
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	e7fe      	b.n	8004f70 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <vPortFree+0xb0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d019      	beq.n	8004fb4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d115      	bne.n	8004fb4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <vPortFree+0xb0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	401a      	ands	r2, r3
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f98:	f001 faee 	bl	8006578 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <vPortFree+0xb4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	4a06      	ldr	r2, [pc, #24]	; (8004fc0 <vPortFree+0xb4>)
 8004fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004faa:	6938      	ldr	r0, [r7, #16]
 8004fac:	f000 f86c 	bl	8005088 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004fb0:	f001 faf0 	bl	8006594 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fb4:	bf00      	nop
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20003f18 	.word	0x20003f18
 8004fc0:	20003f10 	.word	0x20003f10

08004fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fd0:	4b27      	ldr	r3, [pc, #156]	; (8005070 <prvHeapInit+0xac>)
 8004fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00c      	beq.n	8004ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3307      	adds	r3, #7
 8004fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0307 	bic.w	r3, r3, #7
 8004fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <prvHeapInit+0xac>)
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ffc:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <prvHeapInit+0xb0>)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005002:	4b1c      	ldr	r3, [pc, #112]	; (8005074 <prvHeapInit+0xb0>)
 8005004:	2200      	movs	r2, #0
 8005006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4413      	add	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005010:	2208      	movs	r2, #8
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0307 	bic.w	r3, r3, #7
 800501e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a15      	ldr	r2, [pc, #84]	; (8005078 <prvHeapInit+0xb4>)
 8005024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005026:	4b14      	ldr	r3, [pc, #80]	; (8005078 <prvHeapInit+0xb4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2200      	movs	r2, #0
 800502c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800502e:	4b12      	ldr	r3, [pc, #72]	; (8005078 <prvHeapInit+0xb4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	1ad2      	subs	r2, r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <prvHeapInit+0xb4>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4a0a      	ldr	r2, [pc, #40]	; (800507c <prvHeapInit+0xb8>)
 8005052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4a09      	ldr	r2, [pc, #36]	; (8005080 <prvHeapInit+0xbc>)
 800505a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800505c:	4b09      	ldr	r3, [pc, #36]	; (8005084 <prvHeapInit+0xc0>)
 800505e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005062:	601a      	str	r2, [r3, #0]
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	20000304 	.word	0x20000304
 8005074:	20003f04 	.word	0x20003f04
 8005078:	20003f0c 	.word	0x20003f0c
 800507c:	20003f14 	.word	0x20003f14
 8005080:	20003f10 	.word	0x20003f10
 8005084:	20003f18 	.word	0x20003f18

08005088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005090:	4b28      	ldr	r3, [pc, #160]	; (8005134 <prvInsertBlockIntoFreeList+0xac>)
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e002      	b.n	800509c <prvInsertBlockIntoFreeList+0x14>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d3f7      	bcc.n	8005096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	441a      	add	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d108      	bne.n	80050ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	441a      	add	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	441a      	add	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d118      	bne.n	8005110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4b15      	ldr	r3, [pc, #84]	; (8005138 <prvInsertBlockIntoFreeList+0xb0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d00d      	beq.n	8005106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	441a      	add	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	e008      	b.n	8005118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005106:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <prvInsertBlockIntoFreeList+0xb0>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	e003      	b.n	8005118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	429a      	cmp	r2, r3
 800511e:	d002      	beq.n	8005126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005126:	bf00      	nop
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20003f04 	.word	0x20003f04
 8005138:	20003f0c 	.word	0x20003f0c

0800513c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <xQueueGenericReset+0x2c>
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	b672      	cpsid	i
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	b662      	cpsie	i
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	e7fe      	b.n	8005166 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8005168:	f7ff fce6 	bl	8004b38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005174:	68f9      	ldr	r1, [r7, #12]
 8005176:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	441a      	add	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005198:	3b01      	subs	r3, #1
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800519e:	fb01 f303 	mul.w	r3, r1, r3
 80051a2:	441a      	add	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	22ff      	movs	r2, #255	; 0xff
 80051ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	22ff      	movs	r2, #255	; 0xff
 80051b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d114      	bne.n	80051e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d01a      	beq.n	80051fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3310      	adds	r3, #16
 80051ca:	4618      	mov	r0, r3
 80051cc:	f001 fbde 	bl	800698c <xTaskRemoveFromEventList>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d012      	beq.n	80051fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051d6:	4b0d      	ldr	r3, [pc, #52]	; (800520c <xQueueGenericReset+0xd0>)
 80051d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	e009      	b.n	80051fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3310      	adds	r3, #16
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff fae6 	bl	80047be <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3324      	adds	r3, #36	; 0x24
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff fae1 	bl	80047be <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051fc:	f7ff fcce 	bl	8004b9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005200:	2301      	movs	r3, #1
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	e000ed04 	.word	0xe000ed04

08005210 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08e      	sub	sp, #56	; 0x38
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <xQueueGenericCreateStatic+0x2c>
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	b672      	cpsid	i
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	b662      	cpsie	i
 8005238:	62bb      	str	r3, [r7, #40]	; 0x28
 800523a:	e7fe      	b.n	800523a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10b      	bne.n	800525a <xQueueGenericCreateStatic+0x4a>
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	b672      	cpsid	i
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	b662      	cpsie	i
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
 8005258:	e7fe      	b.n	8005258 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <xQueueGenericCreateStatic+0x56>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <xQueueGenericCreateStatic+0x5a>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <xQueueGenericCreateStatic+0x5c>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10b      	bne.n	8005288 <xQueueGenericCreateStatic+0x78>
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	b672      	cpsid	i
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	b662      	cpsie	i
 8005284:	623b      	str	r3, [r7, #32]
 8005286:	e7fe      	b.n	8005286 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d102      	bne.n	8005294 <xQueueGenericCreateStatic+0x84>
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <xQueueGenericCreateStatic+0x88>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <xQueueGenericCreateStatic+0x8a>
 8005298:	2300      	movs	r3, #0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10b      	bne.n	80052b6 <xQueueGenericCreateStatic+0xa6>
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	b672      	cpsid	i
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	b662      	cpsie	i
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	e7fe      	b.n	80052b4 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052b6:	2348      	movs	r3, #72	; 0x48
 80052b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b48      	cmp	r3, #72	; 0x48
 80052be:	d00b      	beq.n	80052d8 <xQueueGenericCreateStatic+0xc8>
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	b672      	cpsid	i
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	b662      	cpsie	i
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	e7fe      	b.n	80052d6 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00d      	beq.n	8005300 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052ec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	4613      	mov	r3, r2
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f846 	bl	800538c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005302:	4618      	mov	r0, r3
 8005304:	3730      	adds	r7, #48	; 0x30
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800530a:	b580      	push	{r7, lr}
 800530c:	b08a      	sub	sp, #40	; 0x28
 800530e:	af02      	add	r7, sp, #8
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	4613      	mov	r3, r2
 8005316:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10b      	bne.n	8005336 <xQueueGenericCreate+0x2c>
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	b672      	cpsid	i
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	b662      	cpsie	i
 8005332:	613b      	str	r3, [r7, #16]
 8005334:	e7fe      	b.n	8005334 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800533c:	2300      	movs	r3, #0
 800533e:	61fb      	str	r3, [r7, #28]
 8005340:	e004      	b.n	800534c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	3348      	adds	r3, #72	; 0x48
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff fd13 	bl	8004d7c <pvPortMalloc>
 8005356:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d011      	beq.n	8005382 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	3348      	adds	r3, #72	; 0x48
 8005366:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005370:	79fa      	ldrb	r2, [r7, #7]
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	4613      	mov	r3, r2
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f805 	bl	800538c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005382:	69bb      	ldr	r3, [r7, #24]
	}
 8005384:	4618      	mov	r0, r3
 8005386:	3720      	adds	r7, #32
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d103      	bne.n	80053a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	e002      	b.n	80053ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053ba:	2101      	movs	r1, #1
 80053bc:	69b8      	ldr	r0, [r7, #24]
 80053be:	f7ff febd 	bl	800513c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053c2:	bf00      	nop
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b082      	sub	sp, #8
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00e      	beq.n	80053f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80053ea:	2300      	movs	r3, #0
 80053ec:	2200      	movs	r2, #0
 80053ee:	2100      	movs	r1, #0
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f837 	bl	8005464 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b086      	sub	sp, #24
 8005402:	af00      	add	r7, sp, #0
 8005404:	4603      	mov	r3, r0
 8005406:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005408:	2301      	movs	r3, #1
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	2300      	movs	r3, #0
 800540e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	461a      	mov	r2, r3
 8005414:	6939      	ldr	r1, [r7, #16]
 8005416:	6978      	ldr	r0, [r7, #20]
 8005418:	f7ff ff77 	bl	800530a <xQueueGenericCreate>
 800541c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f7ff ffd3 	bl	80053ca <prvInitialiseMutex>

		return xNewQueue;
 8005424:	68fb      	ldr	r3, [r7, #12]
	}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800542e:	b580      	push	{r7, lr}
 8005430:	b088      	sub	sp, #32
 8005432:	af02      	add	r7, sp, #8
 8005434:	4603      	mov	r3, r0
 8005436:	6039      	str	r1, [r7, #0]
 8005438:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800543a:	2301      	movs	r3, #1
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2200      	movs	r2, #0
 800544a:	6939      	ldr	r1, [r7, #16]
 800544c:	6978      	ldr	r0, [r7, #20]
 800544e:	f7ff fedf 	bl	8005210 <xQueueGenericCreateStatic>
 8005452:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f7ff ffb8 	bl	80053ca <prvInitialiseMutex>

		return xNewQueue;
 800545a:	68fb      	ldr	r3, [r7, #12]
	}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08e      	sub	sp, #56	; 0x38
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005472:	2300      	movs	r3, #0
 8005474:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10b      	bne.n	8005498 <xQueueGenericSend+0x34>
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	b672      	cpsid	i
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	b662      	cpsie	i
 8005494:	62bb      	str	r3, [r7, #40]	; 0x28
 8005496:	e7fe      	b.n	8005496 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d103      	bne.n	80054a6 <xQueueGenericSend+0x42>
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <xQueueGenericSend+0x46>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e000      	b.n	80054ac <xQueueGenericSend+0x48>
 80054aa:	2300      	movs	r3, #0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10b      	bne.n	80054c8 <xQueueGenericSend+0x64>
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	b672      	cpsid	i
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	b662      	cpsie	i
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
 80054c6:	e7fe      	b.n	80054c6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d103      	bne.n	80054d6 <xQueueGenericSend+0x72>
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <xQueueGenericSend+0x76>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <xQueueGenericSend+0x78>
 80054da:	2300      	movs	r3, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10b      	bne.n	80054f8 <xQueueGenericSend+0x94>
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	b672      	cpsid	i
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	b662      	cpsie	i
 80054f4:	623b      	str	r3, [r7, #32]
 80054f6:	e7fe      	b.n	80054f6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054f8:	f001 fc06 	bl	8006d08 <xTaskGetSchedulerState>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <xQueueGenericSend+0xa4>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <xQueueGenericSend+0xa8>
 8005508:	2301      	movs	r3, #1
 800550a:	e000      	b.n	800550e <xQueueGenericSend+0xaa>
 800550c:	2300      	movs	r3, #0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <xQueueGenericSend+0xc6>
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	b672      	cpsid	i
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	b662      	cpsie	i
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	e7fe      	b.n	8005528 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800552a:	f7ff fb05 	bl	8004b38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005536:	429a      	cmp	r2, r3
 8005538:	d302      	bcc.n	8005540 <xQueueGenericSend+0xdc>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d129      	bne.n	8005594 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005546:	f000 fcac 	bl	8005ea2 <prvCopyDataToQueue>
 800554a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	2b00      	cmp	r3, #0
 8005552:	d010      	beq.n	8005576 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	3324      	adds	r3, #36	; 0x24
 8005558:	4618      	mov	r0, r3
 800555a:	f001 fa17 	bl	800698c <xTaskRemoveFromEventList>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d013      	beq.n	800558c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005564:	4b3f      	ldr	r3, [pc, #252]	; (8005664 <xQueueGenericSend+0x200>)
 8005566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	e00a      	b.n	800558c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d007      	beq.n	800558c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800557c:	4b39      	ldr	r3, [pc, #228]	; (8005664 <xQueueGenericSend+0x200>)
 800557e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800558c:	f7ff fb06 	bl	8004b9c <vPortExitCritical>
				return pdPASS;
 8005590:	2301      	movs	r3, #1
 8005592:	e063      	b.n	800565c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800559a:	f7ff faff 	bl	8004b9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800559e:	2300      	movs	r3, #0
 80055a0:	e05c      	b.n	800565c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055a8:	f107 0314 	add.w	r3, r7, #20
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 fa51 	bl	8006a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055b2:	2301      	movs	r3, #1
 80055b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055b6:	f7ff faf1 	bl	8004b9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055ba:	f000 ffdd 	bl	8006578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055be:	f7ff fabb 	bl	8004b38 <vPortEnterCritical>
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055c8:	b25b      	sxtb	r3, r3
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d103      	bne.n	80055d8 <xQueueGenericSend+0x174>
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055de:	b25b      	sxtb	r3, r3
 80055e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e4:	d103      	bne.n	80055ee <xQueueGenericSend+0x18a>
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055ee:	f7ff fad5 	bl	8004b9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055f2:	1d3a      	adds	r2, r7, #4
 80055f4:	f107 0314 	add.w	r3, r7, #20
 80055f8:	4611      	mov	r1, r2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 fa40 	bl	8006a80 <xTaskCheckForTimeOut>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d124      	bne.n	8005650 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005608:	f000 fd43 	bl	8006092 <prvIsQueueFull>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d018      	beq.n	8005644 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	3310      	adds	r3, #16
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	4611      	mov	r1, r2
 800561a:	4618      	mov	r0, r3
 800561c:	f001 f990 	bl	8006940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005622:	f000 fcce 	bl	8005fc2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005626:	f000 ffb5 	bl	8006594 <xTaskResumeAll>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	f47f af7c 	bne.w	800552a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005632:	4b0c      	ldr	r3, [pc, #48]	; (8005664 <xQueueGenericSend+0x200>)
 8005634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	e772      	b.n	800552a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005646:	f000 fcbc 	bl	8005fc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800564a:	f000 ffa3 	bl	8006594 <xTaskResumeAll>
 800564e:	e76c      	b.n	800552a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005652:	f000 fcb6 	bl	8005fc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005656:	f000 ff9d 	bl	8006594 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800565a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800565c:	4618      	mov	r0, r3
 800565e:	3738      	adds	r7, #56	; 0x38
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08e      	sub	sp, #56	; 0x38
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10b      	bne.n	8005698 <xQueueGenericSendFromISR+0x30>
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	b672      	cpsid	i
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	b662      	cpsie	i
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
 8005696:	e7fe      	b.n	8005696 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d103      	bne.n	80056a6 <xQueueGenericSendFromISR+0x3e>
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <xQueueGenericSendFromISR+0x42>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <xQueueGenericSendFromISR+0x44>
 80056aa:	2300      	movs	r3, #0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <xQueueGenericSendFromISR+0x60>
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	b672      	cpsid	i
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	b662      	cpsie	i
 80056c4:	623b      	str	r3, [r7, #32]
 80056c6:	e7fe      	b.n	80056c6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d103      	bne.n	80056d6 <xQueueGenericSendFromISR+0x6e>
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <xQueueGenericSendFromISR+0x72>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <xQueueGenericSendFromISR+0x74>
 80056da:	2300      	movs	r3, #0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <xQueueGenericSendFromISR+0x90>
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	b672      	cpsid	i
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	b662      	cpsie	i
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	e7fe      	b.n	80056f6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056f8:	f7ff fafe 	bl	8004cf8 <vPortValidateInterruptPriority>
	__asm volatile
 80056fc:	f3ef 8211 	mrs	r2, BASEPRI
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	b672      	cpsid	i
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	b662      	cpsie	i
 8005714:	61ba      	str	r2, [r7, #24]
 8005716:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005718:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800571c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005724:	429a      	cmp	r2, r3
 8005726:	d302      	bcc.n	800572e <xQueueGenericSendFromISR+0xc6>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d12c      	bne.n	8005788 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800573e:	f000 fbb0 	bl	8005ea2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005742:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574a:	d112      	bne.n	8005772 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	2b00      	cmp	r3, #0
 8005752:	d016      	beq.n	8005782 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	3324      	adds	r3, #36	; 0x24
 8005758:	4618      	mov	r0, r3
 800575a:	f001 f917 	bl	800698c <xTaskRemoveFromEventList>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00e      	beq.n	8005782 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00b      	beq.n	8005782 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	e007      	b.n	8005782 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005772:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005776:	3301      	adds	r3, #1
 8005778:	b2db      	uxtb	r3, r3
 800577a:	b25a      	sxtb	r2, r3
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005782:	2301      	movs	r3, #1
 8005784:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005786:	e001      	b.n	800578c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005788:	2300      	movs	r3, #0
 800578a:	637b      	str	r3, [r7, #52]	; 0x34
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005798:	4618      	mov	r0, r3
 800579a:	3738      	adds	r7, #56	; 0x38
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08e      	sub	sp, #56	; 0x38
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10b      	bne.n	80057cc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	b672      	cpsid	i
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	b662      	cpsie	i
 80057c8:	623b      	str	r3, [r7, #32]
 80057ca:	e7fe      	b.n	80057ca <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <xQueueGiveFromISR+0x4c>
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	b672      	cpsid	i
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	b662      	cpsie	i
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	e7fe      	b.n	80057ea <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d103      	bne.n	80057fc <xQueueGiveFromISR+0x5c>
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <xQueueGiveFromISR+0x60>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <xQueueGiveFromISR+0x62>
 8005800:	2300      	movs	r3, #0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10b      	bne.n	800581e <xQueueGiveFromISR+0x7e>
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	b672      	cpsid	i
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	b662      	cpsie	i
 800581a:	61bb      	str	r3, [r7, #24]
 800581c:	e7fe      	b.n	800581c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800581e:	f7ff fa6b 	bl	8004cf8 <vPortValidateInterruptPriority>
	__asm volatile
 8005822:	f3ef 8211 	mrs	r2, BASEPRI
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	b672      	cpsid	i
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	b662      	cpsie	i
 800583a:	617a      	str	r2, [r7, #20]
 800583c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800583e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005840:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	429a      	cmp	r2, r3
 8005850:	d92b      	bls.n	80058aa <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005864:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586c:	d112      	bne.n	8005894 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	2b00      	cmp	r3, #0
 8005874:	d016      	beq.n	80058a4 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	3324      	adds	r3, #36	; 0x24
 800587a:	4618      	mov	r0, r3
 800587c:	f001 f886 	bl	800698c <xTaskRemoveFromEventList>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00e      	beq.n	80058a4 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2201      	movs	r2, #1
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	e007      	b.n	80058a4 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005898:	3301      	adds	r3, #1
 800589a:	b2db      	uxtb	r3, r3
 800589c:	b25a      	sxtb	r2, r3
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058a4:	2301      	movs	r3, #1
 80058a6:	637b      	str	r3, [r7, #52]	; 0x34
 80058a8:	e001      	b.n	80058ae <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	637b      	str	r3, [r7, #52]	; 0x34
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3738      	adds	r7, #56	; 0x38
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08c      	sub	sp, #48	; 0x30
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058d0:	2300      	movs	r3, #0
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10b      	bne.n	80058f6 <xQueueReceive+0x32>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	b672      	cpsid	i
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	b662      	cpsie	i
 80058f2:	623b      	str	r3, [r7, #32]
 80058f4:	e7fe      	b.n	80058f4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d103      	bne.n	8005904 <xQueueReceive+0x40>
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <xQueueReceive+0x44>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <xQueueReceive+0x46>
 8005908:	2300      	movs	r3, #0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10b      	bne.n	8005926 <xQueueReceive+0x62>
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	b672      	cpsid	i
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	b662      	cpsie	i
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	e7fe      	b.n	8005924 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005926:	f001 f9ef 	bl	8006d08 <xTaskGetSchedulerState>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d102      	bne.n	8005936 <xQueueReceive+0x72>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <xQueueReceive+0x76>
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <xQueueReceive+0x78>
 800593a:	2300      	movs	r3, #0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10b      	bne.n	8005958 <xQueueReceive+0x94>
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	b672      	cpsid	i
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	b662      	cpsie	i
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	e7fe      	b.n	8005956 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005958:	f7ff f8ee 	bl	8004b38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01f      	beq.n	80059a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800596c:	f000 fb03 	bl	8005f76 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	1e5a      	subs	r2, r3, #1
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00f      	beq.n	80059a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	3310      	adds	r3, #16
 8005984:	4618      	mov	r0, r3
 8005986:	f001 f801 	bl	800698c <xTaskRemoveFromEventList>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d007      	beq.n	80059a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005990:	4b3c      	ldr	r3, [pc, #240]	; (8005a84 <xQueueReceive+0x1c0>)
 8005992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059a0:	f7ff f8fc 	bl	8004b9c <vPortExitCritical>
				return pdPASS;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e069      	b.n	8005a7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d103      	bne.n	80059b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059ae:	f7ff f8f5 	bl	8004b9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e062      	b.n	8005a7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059bc:	f107 0310 	add.w	r3, r7, #16
 80059c0:	4618      	mov	r0, r3
 80059c2:	f001 f847 	bl	8006a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059c6:	2301      	movs	r3, #1
 80059c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059ca:	f7ff f8e7 	bl	8004b9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059ce:	f000 fdd3 	bl	8006578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059d2:	f7ff f8b1 	bl	8004b38 <vPortEnterCritical>
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059dc:	b25b      	sxtb	r3, r3
 80059de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e2:	d103      	bne.n	80059ec <xQueueReceive+0x128>
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059f2:	b25b      	sxtb	r3, r3
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d103      	bne.n	8005a02 <xQueueReceive+0x13e>
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a02:	f7ff f8cb 	bl	8004b9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a06:	1d3a      	adds	r2, r7, #4
 8005a08:	f107 0310 	add.w	r3, r7, #16
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 f836 	bl	8006a80 <xTaskCheckForTimeOut>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d123      	bne.n	8005a62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a1c:	f000 fb23 	bl	8006066 <prvIsQueueEmpty>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d017      	beq.n	8005a56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	3324      	adds	r3, #36	; 0x24
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 ff86 	bl	8006940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a36:	f000 fac4 	bl	8005fc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a3a:	f000 fdab 	bl	8006594 <xTaskResumeAll>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d189      	bne.n	8005958 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005a44:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <xQueueReceive+0x1c0>)
 8005a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	e780      	b.n	8005958 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a58:	f000 fab3 	bl	8005fc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a5c:	f000 fd9a 	bl	8006594 <xTaskResumeAll>
 8005a60:	e77a      	b.n	8005958 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a64:	f000 faad 	bl	8005fc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a68:	f000 fd94 	bl	8006594 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a6e:	f000 fafa 	bl	8006066 <prvIsQueueEmpty>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f43f af6f 	beq.w	8005958 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3730      	adds	r7, #48	; 0x30
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	e000ed04 	.word	0xe000ed04

08005a88 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08e      	sub	sp, #56	; 0x38
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10b      	bne.n	8005abc <xQueueSemaphoreTake+0x34>
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	b672      	cpsid	i
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	b662      	cpsie	i
 8005ab8:	623b      	str	r3, [r7, #32]
 8005aba:	e7fe      	b.n	8005aba <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00b      	beq.n	8005adc <xQueueSemaphoreTake+0x54>
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	b672      	cpsid	i
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	b662      	cpsie	i
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	e7fe      	b.n	8005ada <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005adc:	f001 f914 	bl	8006d08 <xTaskGetSchedulerState>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d102      	bne.n	8005aec <xQueueSemaphoreTake+0x64>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <xQueueSemaphoreTake+0x68>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <xQueueSemaphoreTake+0x6a>
 8005af0:	2300      	movs	r3, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10b      	bne.n	8005b0e <xQueueSemaphoreTake+0x86>
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	b672      	cpsid	i
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	b662      	cpsie	i
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	e7fe      	b.n	8005b0c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b0e:	f7ff f813 	bl	8004b38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d024      	beq.n	8005b68 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	1e5a      	subs	r2, r3, #1
 8005b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d104      	bne.n	8005b38 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b2e:	f001 faad 	bl	800708c <pvTaskIncrementMutexHeldCount>
 8005b32:	4602      	mov	r2, r0
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b36:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00f      	beq.n	8005b60 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	3310      	adds	r3, #16
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 ff21 	bl	800698c <xTaskRemoveFromEventList>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b50:	4b54      	ldr	r3, [pc, #336]	; (8005ca4 <xQueueSemaphoreTake+0x21c>)
 8005b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b60:	f7ff f81c 	bl	8004b9c <vPortExitCritical>
				return pdPASS;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e098      	b.n	8005c9a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d112      	bne.n	8005b94 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00b      	beq.n	8005b8c <xQueueSemaphoreTake+0x104>
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	b672      	cpsid	i
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	b662      	cpsie	i
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	e7fe      	b.n	8005b8a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b8c:	f7ff f806 	bl	8004b9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e082      	b.n	8005c9a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b9a:	f107 030c 	add.w	r3, r7, #12
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 ff58 	bl	8006a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ba8:	f7fe fff8 	bl	8004b9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bac:	f000 fce4 	bl	8006578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bb0:	f7fe ffc2 	bl	8004b38 <vPortEnterCritical>
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bba:	b25b      	sxtb	r3, r3
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d103      	bne.n	8005bca <xQueueSemaphoreTake+0x142>
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bd0:	b25b      	sxtb	r3, r3
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d103      	bne.n	8005be0 <xQueueSemaphoreTake+0x158>
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005be0:	f7fe ffdc 	bl	8004b9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005be4:	463a      	mov	r2, r7
 8005be6:	f107 030c 	add.w	r3, r7, #12
 8005bea:	4611      	mov	r1, r2
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 ff47 	bl	8006a80 <xTaskCheckForTimeOut>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d132      	bne.n	8005c5e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bfa:	f000 fa34 	bl	8006066 <prvIsQueueEmpty>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d026      	beq.n	8005c52 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d109      	bne.n	8005c20 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005c0c:	f7fe ff94 	bl	8004b38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 f895 	bl	8006d44 <xTaskPriorityInherit>
 8005c1a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005c1c:	f7fe ffbe 	bl	8004b9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	3324      	adds	r3, #36	; 0x24
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	4611      	mov	r1, r2
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fe89 	bl	8006940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c30:	f000 f9c7 	bl	8005fc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c34:	f000 fcae 	bl	8006594 <xTaskResumeAll>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f47f af67 	bne.w	8005b0e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005c40:	4b18      	ldr	r3, [pc, #96]	; (8005ca4 <xQueueSemaphoreTake+0x21c>)
 8005c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	e75d      	b.n	8005b0e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c54:	f000 f9b5 	bl	8005fc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c58:	f000 fc9c 	bl	8006594 <xTaskResumeAll>
 8005c5c:	e757      	b.n	8005b0e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c60:	f000 f9af 	bl	8005fc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c64:	f000 fc96 	bl	8006594 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c6a:	f000 f9fc 	bl	8006066 <prvIsQueueEmpty>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f43f af4c 	beq.w	8005b0e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00d      	beq.n	8005c98 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005c7c:	f7fe ff5c 	bl	8004b38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c82:	f000 f8f6 	bl	8005e72 <prvGetDisinheritPriorityAfterTimeout>
 8005c86:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f001 f960 	bl	8006f54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c94:	f7fe ff82 	bl	8004b9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3738      	adds	r7, #56	; 0x38
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	e000ed04 	.word	0xe000ed04

08005ca8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08e      	sub	sp, #56	; 0x38
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10b      	bne.n	8005cd6 <xQueueReceiveFromISR+0x2e>
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	b672      	cpsid	i
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	b662      	cpsie	i
 8005cd2:	623b      	str	r3, [r7, #32]
 8005cd4:	e7fe      	b.n	8005cd4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d103      	bne.n	8005ce4 <xQueueReceiveFromISR+0x3c>
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <xQueueReceiveFromISR+0x40>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e000      	b.n	8005cea <xQueueReceiveFromISR+0x42>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10b      	bne.n	8005d06 <xQueueReceiveFromISR+0x5e>
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	b672      	cpsid	i
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	b662      	cpsie	i
 8005d02:	61fb      	str	r3, [r7, #28]
 8005d04:	e7fe      	b.n	8005d04 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d06:	f7fe fff7 	bl	8004cf8 <vPortValidateInterruptPriority>
	__asm volatile
 8005d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	b672      	cpsid	i
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	b662      	cpsie	i
 8005d22:	61ba      	str	r2, [r7, #24]
 8005d24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d02f      	beq.n	8005d96 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d44:	f000 f917 	bl	8005f76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	1e5a      	subs	r2, r3, #1
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005d50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d58:	d112      	bne.n	8005d80 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d016      	beq.n	8005d90 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	3310      	adds	r3, #16
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fe10 	bl	800698c <xTaskRemoveFromEventList>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00e      	beq.n	8005d90 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00b      	beq.n	8005d90 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	e007      	b.n	8005d90 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d84:	3301      	adds	r3, #1
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	b25a      	sxtb	r2, r3
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005d90:	2301      	movs	r3, #1
 8005d92:	637b      	str	r3, [r7, #52]	; 0x34
 8005d94:	e001      	b.n	8005d9a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8005d96:	2300      	movs	r3, #0
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3738      	adds	r7, #56	; 0x38
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	b672      	cpsid	i
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	b662      	cpsie	i
 8005dd0:	60bb      	str	r3, [r7, #8]
 8005dd2:	e7fe      	b.n	8005dd2 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8005dd4:	f7fe feb0 	bl	8004b38 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005dde:	f7fe fedd 	bl	8004b9c <vPortExitCritical>

	return uxReturn;
 8005de2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10b      	bne.n	8005e16 <uxQueueMessagesWaitingFromISR+0x2a>
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	b672      	cpsid	i
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	b662      	cpsie	i
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	e7fe      	b.n	8005e14 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005e1c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e1e:	4618      	mov	r0, r3
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10b      	bne.n	8005e54 <vQueueDelete+0x2a>
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	b672      	cpsid	i
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	b662      	cpsie	i
 8005e50:	60bb      	str	r3, [r7, #8]
 8005e52:	e7fe      	b.n	8005e52 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 f935 	bl	80060c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f7ff f851 	bl	8004f0c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005e6a:	bf00      	nop
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005e72:	b480      	push	{r7}
 8005e74:	b085      	sub	sp, #20
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d006      	beq.n	8005e90 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f1c3 0307 	rsb	r3, r3, #7
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	e001      	b.n	8005e94 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005e94:	68fb      	ldr	r3, [r7, #12]
	}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b086      	sub	sp, #24
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10d      	bne.n	8005edc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d14d      	bne.n	8005f64 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 ffb9 	bl	8006e44 <xTaskPriorityDisinherit>
 8005ed2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	609a      	str	r2, [r3, #8]
 8005eda:	e043      	b.n	8005f64 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d119      	bne.n	8005f16 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6858      	ldr	r0, [r3, #4]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	461a      	mov	r2, r3
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	f010 f924 	bl	801613a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	441a      	add	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d32b      	bcc.n	8005f64 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	605a      	str	r2, [r3, #4]
 8005f14:	e026      	b.n	8005f64 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	68d8      	ldr	r0, [r3, #12]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	461a      	mov	r2, r3
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	f010 f90a 	bl	801613a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	425b      	negs	r3, r3
 8005f30:	441a      	add	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d207      	bcs.n	8005f52 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	425b      	negs	r3, r3
 8005f4c:	441a      	add	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d105      	bne.n	8005f64 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f6c:	697b      	ldr	r3, [r7, #20]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d018      	beq.n	8005fba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	441a      	add	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d303      	bcc.n	8005faa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68d9      	ldr	r1, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	6838      	ldr	r0, [r7, #0]
 8005fb6:	f010 f8c0 	bl	801613a <memcpy>
	}
}
 8005fba:	bf00      	nop
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fca:	f7fe fdb5 	bl	8004b38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fd4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fd6:	e011      	b.n	8005ffc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d012      	beq.n	8006006 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3324      	adds	r3, #36	; 0x24
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fcd1 	bl	800698c <xTaskRemoveFromEventList>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ff0:	f000 fdaa 	bl	8006b48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006000:	2b00      	cmp	r3, #0
 8006002:	dce9      	bgt.n	8005fd8 <prvUnlockQueue+0x16>
 8006004:	e000      	b.n	8006008 <prvUnlockQueue+0x46>
					break;
 8006006:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	22ff      	movs	r2, #255	; 0xff
 800600c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006010:	f7fe fdc4 	bl	8004b9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006014:	f7fe fd90 	bl	8004b38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800601e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006020:	e011      	b.n	8006046 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d012      	beq.n	8006050 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3310      	adds	r3, #16
 800602e:	4618      	mov	r0, r3
 8006030:	f000 fcac 	bl	800698c <xTaskRemoveFromEventList>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800603a:	f000 fd85 	bl	8006b48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800603e:	7bbb      	ldrb	r3, [r7, #14]
 8006040:	3b01      	subs	r3, #1
 8006042:	b2db      	uxtb	r3, r3
 8006044:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006046:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800604a:	2b00      	cmp	r3, #0
 800604c:	dce9      	bgt.n	8006022 <prvUnlockQueue+0x60>
 800604e:	e000      	b.n	8006052 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006050:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	22ff      	movs	r2, #255	; 0xff
 8006056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800605a:	f7fe fd9f 	bl	8004b9c <vPortExitCritical>
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800606e:	f7fe fd63 	bl	8004b38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	2b00      	cmp	r3, #0
 8006078:	d102      	bne.n	8006080 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800607a:	2301      	movs	r3, #1
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	e001      	b.n	8006084 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006084:	f7fe fd8a 	bl	8004b9c <vPortExitCritical>

	return xReturn;
 8006088:	68fb      	ldr	r3, [r7, #12]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800609a:	f7fe fd4d 	bl	8004b38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d102      	bne.n	80060b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060aa:	2301      	movs	r3, #1
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e001      	b.n	80060b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060b4:	f7fe fd72 	bl	8004b9c <vPortExitCritical>

	return xReturn;
 80060b8:	68fb      	ldr	r3, [r7, #12]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	e016      	b.n	8006100 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80060d2:	4a10      	ldr	r2, [pc, #64]	; (8006114 <vQueueUnregisterQueue+0x50>)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	4413      	add	r3, r2
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d10b      	bne.n	80060fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80060e2:	4a0c      	ldr	r2, [pc, #48]	; (8006114 <vQueueUnregisterQueue+0x50>)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2100      	movs	r1, #0
 80060e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80060ec:	4a09      	ldr	r2, [pc, #36]	; (8006114 <vQueueUnregisterQueue+0x50>)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	4413      	add	r3, r2
 80060f4:	2200      	movs	r2, #0
 80060f6:	605a      	str	r2, [r3, #4]
				break;
 80060f8:	e005      	b.n	8006106 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3301      	adds	r3, #1
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b07      	cmp	r3, #7
 8006104:	d9e5      	bls.n	80060d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006106:	bf00      	nop
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	200073d4 	.word	0x200073d4

08006118 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08e      	sub	sp, #56	; 0x38
 800611c:	af04      	add	r7, sp, #16
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10b      	bne.n	8006144 <xTaskCreateStatic+0x2c>
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	b672      	cpsid	i
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	b662      	cpsie	i
 8006140:	623b      	str	r3, [r7, #32]
 8006142:	e7fe      	b.n	8006142 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10b      	bne.n	8006162 <xTaskCreateStatic+0x4a>
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	b672      	cpsid	i
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	b662      	cpsie	i
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	e7fe      	b.n	8006160 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006162:	2354      	movs	r3, #84	; 0x54
 8006164:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2b54      	cmp	r3, #84	; 0x54
 800616a:	d00b      	beq.n	8006184 <xTaskCreateStatic+0x6c>
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	b672      	cpsid	i
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	b662      	cpsie	i
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	e7fe      	b.n	8006182 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006184:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01e      	beq.n	80061ca <xTaskCreateStatic+0xb2>
 800618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618e:	2b00      	cmp	r3, #0
 8006190:	d01b      	beq.n	80061ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800619a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061a4:	2300      	movs	r3, #0
 80061a6:	9303      	str	r3, [sp, #12]
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	9302      	str	r3, [sp, #8]
 80061ac:	f107 0314 	add.w	r3, r7, #20
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f850 	bl	8006262 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061c4:	f000 f8d6 	bl	8006374 <prvAddNewTaskToReadyList>
 80061c8:	e001      	b.n	80061ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061ce:	697b      	ldr	r3, [r7, #20]
	}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3728      	adds	r7, #40	; 0x28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08c      	sub	sp, #48	; 0x30
 80061dc:	af04      	add	r7, sp, #16
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	4613      	mov	r3, r2
 80061e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe fdc5 	bl	8004d7c <pvPortMalloc>
 80061f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00e      	beq.n	8006218 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061fa:	2054      	movs	r0, #84	; 0x54
 80061fc:	f7fe fdbe 	bl	8004d7c <pvPortMalloc>
 8006200:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	631a      	str	r2, [r3, #48]	; 0x30
 800620e:	e005      	b.n	800621c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006210:	6978      	ldr	r0, [r7, #20]
 8006212:	f7fe fe7b 	bl	8004f0c <vPortFree>
 8006216:	e001      	b.n	800621c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006218:	2300      	movs	r3, #0
 800621a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d017      	beq.n	8006252 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800622a:	88fa      	ldrh	r2, [r7, #6]
 800622c:	2300      	movs	r3, #0
 800622e:	9303      	str	r3, [sp, #12]
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	9302      	str	r3, [sp, #8]
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 f80e 	bl	8006262 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006246:	69f8      	ldr	r0, [r7, #28]
 8006248:	f000 f894 	bl	8006374 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800624c:	2301      	movs	r3, #1
 800624e:	61bb      	str	r3, [r7, #24]
 8006250:	e002      	b.n	8006258 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006252:	f04f 33ff 	mov.w	r3, #4294967295
 8006256:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006258:	69bb      	ldr	r3, [r7, #24]
	}
 800625a:	4618      	mov	r0, r3
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b088      	sub	sp, #32
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
 800626e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800627a:	440b      	add	r3, r1
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	f023 0307 	bic.w	r3, r3, #7
 8006288:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00b      	beq.n	80062ac <prvInitialiseNewTask+0x4a>
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	b672      	cpsid	i
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	b662      	cpsie	i
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	e7fe      	b.n	80062aa <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d01f      	beq.n	80062f2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062b2:	2300      	movs	r3, #0
 80062b4:	61fb      	str	r3, [r7, #28]
 80062b6:	e012      	b.n	80062de <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	4413      	add	r3, r2
 80062be:	7819      	ldrb	r1, [r3, #0]
 80062c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	3334      	adds	r3, #52	; 0x34
 80062c8:	460a      	mov	r2, r1
 80062ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	4413      	add	r3, r2
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d006      	beq.n	80062e6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	3301      	adds	r3, #1
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	2b0f      	cmp	r3, #15
 80062e2:	d9e9      	bls.n	80062b8 <prvInitialiseNewTask+0x56>
 80062e4:	e000      	b.n	80062e8 <prvInitialiseNewTask+0x86>
			{
				break;
 80062e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062f0:	e003      	b.n	80062fa <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	2b06      	cmp	r3, #6
 80062fe:	d901      	bls.n	8006304 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006300:	2306      	movs	r3, #6
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006308:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800630e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	2200      	movs	r2, #0
 8006314:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	3304      	adds	r3, #4
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe fa6f 	bl	80047fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	3318      	adds	r3, #24
 8006324:	4618      	mov	r0, r3
 8006326:	f7fe fa6a 	bl	80047fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800632e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006332:	f1c3 0207 	rsb	r2, r3, #7
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800633e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	2200      	movs	r2, #0
 8006344:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	68f9      	ldr	r1, [r7, #12]
 8006352:	69b8      	ldr	r0, [r7, #24]
 8006354:	f7fe fae8 	bl	8004928 <pxPortInitialiseStack>
 8006358:	4602      	mov	r2, r0
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006368:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800636a:	bf00      	nop
 800636c:	3720      	adds	r7, #32
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800637c:	f7fe fbdc 	bl	8004b38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006380:	4b2a      	ldr	r3, [pc, #168]	; (800642c <prvAddNewTaskToReadyList+0xb8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3301      	adds	r3, #1
 8006386:	4a29      	ldr	r2, [pc, #164]	; (800642c <prvAddNewTaskToReadyList+0xb8>)
 8006388:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800638a:	4b29      	ldr	r3, [pc, #164]	; (8006430 <prvAddNewTaskToReadyList+0xbc>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d109      	bne.n	80063a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006392:	4a27      	ldr	r2, [pc, #156]	; (8006430 <prvAddNewTaskToReadyList+0xbc>)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006398:	4b24      	ldr	r3, [pc, #144]	; (800642c <prvAddNewTaskToReadyList+0xb8>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d110      	bne.n	80063c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063a0:	f000 fbf6 	bl	8006b90 <prvInitialiseTaskLists>
 80063a4:	e00d      	b.n	80063c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063a6:	4b23      	ldr	r3, [pc, #140]	; (8006434 <prvAddNewTaskToReadyList+0xc0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d109      	bne.n	80063c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063ae:	4b20      	ldr	r3, [pc, #128]	; (8006430 <prvAddNewTaskToReadyList+0xbc>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d802      	bhi.n	80063c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063bc:	4a1c      	ldr	r2, [pc, #112]	; (8006430 <prvAddNewTaskToReadyList+0xbc>)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063c2:	4b1d      	ldr	r3, [pc, #116]	; (8006438 <prvAddNewTaskToReadyList+0xc4>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3301      	adds	r3, #1
 80063c8:	4a1b      	ldr	r2, [pc, #108]	; (8006438 <prvAddNewTaskToReadyList+0xc4>)
 80063ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	2201      	movs	r2, #1
 80063d2:	409a      	lsls	r2, r3
 80063d4:	4b19      	ldr	r3, [pc, #100]	; (800643c <prvAddNewTaskToReadyList+0xc8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4313      	orrs	r3, r2
 80063da:	4a18      	ldr	r2, [pc, #96]	; (800643c <prvAddNewTaskToReadyList+0xc8>)
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4a15      	ldr	r2, [pc, #84]	; (8006440 <prvAddNewTaskToReadyList+0xcc>)
 80063ec:	441a      	add	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f7fe fa0f 	bl	8004818 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063fa:	f7fe fbcf 	bl	8004b9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063fe:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <prvAddNewTaskToReadyList+0xc0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00e      	beq.n	8006424 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006406:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <prvAddNewTaskToReadyList+0xbc>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	429a      	cmp	r2, r3
 8006412:	d207      	bcs.n	8006424 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006414:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <prvAddNewTaskToReadyList+0xd0>)
 8006416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006424:	bf00      	nop
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	2000401c 	.word	0x2000401c
 8006430:	20003f1c 	.word	0x20003f1c
 8006434:	20004028 	.word	0x20004028
 8006438:	20004038 	.word	0x20004038
 800643c:	20004024 	.word	0x20004024
 8006440:	20003f20 	.word	0x20003f20
 8006444:	e000ed04 	.word	0xe000ed04

08006448 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d018      	beq.n	800648c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800645a:	4b14      	ldr	r3, [pc, #80]	; (80064ac <vTaskDelay+0x64>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <vTaskDelay+0x32>
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	b672      	cpsid	i
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	b662      	cpsie	i
 8006476:	60bb      	str	r3, [r7, #8]
 8006478:	e7fe      	b.n	8006478 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800647a:	f000 f87d 	bl	8006578 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800647e:	2100      	movs	r1, #0
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fe17 	bl	80070b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006486:	f000 f885 	bl	8006594 <xTaskResumeAll>
 800648a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d107      	bne.n	80064a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006492:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <vTaskDelay+0x68>)
 8006494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20004044 	.word	0x20004044
 80064b0:	e000ed04 	.word	0xe000ed04

080064b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08a      	sub	sp, #40	; 0x28
 80064b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064c2:	463a      	mov	r2, r7
 80064c4:	1d39      	adds	r1, r7, #4
 80064c6:	f107 0308 	add.w	r3, r7, #8
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fa f890 	bl	80005f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	9202      	str	r2, [sp, #8]
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	2300      	movs	r3, #0
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	2300      	movs	r3, #0
 80064e0:	460a      	mov	r2, r1
 80064e2:	491f      	ldr	r1, [pc, #124]	; (8006560 <vTaskStartScheduler+0xac>)
 80064e4:	481f      	ldr	r0, [pc, #124]	; (8006564 <vTaskStartScheduler+0xb0>)
 80064e6:	f7ff fe17 	bl	8006118 <xTaskCreateStatic>
 80064ea:	4602      	mov	r2, r0
 80064ec:	4b1e      	ldr	r3, [pc, #120]	; (8006568 <vTaskStartScheduler+0xb4>)
 80064ee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064f0:	4b1d      	ldr	r3, [pc, #116]	; (8006568 <vTaskStartScheduler+0xb4>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064f8:	2301      	movs	r3, #1
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	e001      	b.n	8006502 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064fe:	2300      	movs	r3, #0
 8006500:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d117      	bne.n	8006538 <vTaskStartScheduler+0x84>
 8006508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650c:	b672      	cpsid	i
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	b662      	cpsie	i
 800651c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800651e:	4b13      	ldr	r3, [pc, #76]	; (800656c <vTaskStartScheduler+0xb8>)
 8006520:	f04f 32ff 	mov.w	r2, #4294967295
 8006524:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006526:	4b12      	ldr	r3, [pc, #72]	; (8006570 <vTaskStartScheduler+0xbc>)
 8006528:	2201      	movs	r2, #1
 800652a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800652c:	4b11      	ldr	r3, [pc, #68]	; (8006574 <vTaskStartScheduler+0xc0>)
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006532:	f7fe fa85 	bl	8004a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006536:	e00f      	b.n	8006558 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653e:	d10b      	bne.n	8006558 <vTaskStartScheduler+0xa4>
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	b672      	cpsid	i
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	b662      	cpsie	i
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	e7fe      	b.n	8006556 <vTaskStartScheduler+0xa2>
}
 8006558:	bf00      	nop
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	08017670 	.word	0x08017670
 8006564:	08006b61 	.word	0x08006b61
 8006568:	20004040 	.word	0x20004040
 800656c:	2000403c 	.word	0x2000403c
 8006570:	20004028 	.word	0x20004028
 8006574:	20004020 	.word	0x20004020

08006578 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800657c:	4b04      	ldr	r3, [pc, #16]	; (8006590 <vTaskSuspendAll+0x18>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3301      	adds	r3, #1
 8006582:	4a03      	ldr	r2, [pc, #12]	; (8006590 <vTaskSuspendAll+0x18>)
 8006584:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006586:	bf00      	nop
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	20004044 	.word	0x20004044

08006594 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800659e:	2300      	movs	r3, #0
 80065a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065a2:	4b42      	ldr	r3, [pc, #264]	; (80066ac <xTaskResumeAll+0x118>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <xTaskResumeAll+0x2e>
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	b672      	cpsid	i
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	b662      	cpsie	i
 80065be:	603b      	str	r3, [r7, #0]
 80065c0:	e7fe      	b.n	80065c0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065c2:	f7fe fab9 	bl	8004b38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065c6:	4b39      	ldr	r3, [pc, #228]	; (80066ac <xTaskResumeAll+0x118>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	4a37      	ldr	r2, [pc, #220]	; (80066ac <xTaskResumeAll+0x118>)
 80065ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065d0:	4b36      	ldr	r3, [pc, #216]	; (80066ac <xTaskResumeAll+0x118>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d161      	bne.n	800669c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065d8:	4b35      	ldr	r3, [pc, #212]	; (80066b0 <xTaskResumeAll+0x11c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d05d      	beq.n	800669c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065e0:	e02e      	b.n	8006640 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e2:	4b34      	ldr	r3, [pc, #208]	; (80066b4 <xTaskResumeAll+0x120>)
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3318      	adds	r3, #24
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fe f96f 	bl	80048d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3304      	adds	r3, #4
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe f96a 	bl	80048d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006602:	2201      	movs	r2, #1
 8006604:	409a      	lsls	r2, r3
 8006606:	4b2c      	ldr	r3, [pc, #176]	; (80066b8 <xTaskResumeAll+0x124>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4313      	orrs	r3, r2
 800660c:	4a2a      	ldr	r2, [pc, #168]	; (80066b8 <xTaskResumeAll+0x124>)
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4a27      	ldr	r2, [pc, #156]	; (80066bc <xTaskResumeAll+0x128>)
 800661e:	441a      	add	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3304      	adds	r3, #4
 8006624:	4619      	mov	r1, r3
 8006626:	4610      	mov	r0, r2
 8006628:	f7fe f8f6 	bl	8004818 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	4b23      	ldr	r3, [pc, #140]	; (80066c0 <xTaskResumeAll+0x12c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	429a      	cmp	r2, r3
 8006638:	d302      	bcc.n	8006640 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800663a:	4b22      	ldr	r3, [pc, #136]	; (80066c4 <xTaskResumeAll+0x130>)
 800663c:	2201      	movs	r2, #1
 800663e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006640:	4b1c      	ldr	r3, [pc, #112]	; (80066b4 <xTaskResumeAll+0x120>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1cc      	bne.n	80065e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800664e:	f000 fb3b 	bl	8006cc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006652:	4b1d      	ldr	r3, [pc, #116]	; (80066c8 <xTaskResumeAll+0x134>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d010      	beq.n	8006680 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800665e:	f000 f859 	bl	8006714 <xTaskIncrementTick>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006668:	4b16      	ldr	r3, [pc, #88]	; (80066c4 <xTaskResumeAll+0x130>)
 800666a:	2201      	movs	r2, #1
 800666c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3b01      	subs	r3, #1
 8006672:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1f1      	bne.n	800665e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800667a:	4b13      	ldr	r3, [pc, #76]	; (80066c8 <xTaskResumeAll+0x134>)
 800667c:	2200      	movs	r2, #0
 800667e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006680:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <xTaskResumeAll+0x130>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d009      	beq.n	800669c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006688:	2301      	movs	r3, #1
 800668a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800668c:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <xTaskResumeAll+0x138>)
 800668e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800669c:	f7fe fa7e 	bl	8004b9c <vPortExitCritical>

	return xAlreadyYielded;
 80066a0:	68bb      	ldr	r3, [r7, #8]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20004044 	.word	0x20004044
 80066b0:	2000401c 	.word	0x2000401c
 80066b4:	20003fdc 	.word	0x20003fdc
 80066b8:	20004024 	.word	0x20004024
 80066bc:	20003f20 	.word	0x20003f20
 80066c0:	20003f1c 	.word	0x20003f1c
 80066c4:	20004030 	.word	0x20004030
 80066c8:	2000402c 	.word	0x2000402c
 80066cc:	e000ed04 	.word	0xe000ed04

080066d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066d6:	4b05      	ldr	r3, [pc, #20]	; (80066ec <xTaskGetTickCount+0x1c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066dc:	687b      	ldr	r3, [r7, #4]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	20004020 	.word	0x20004020

080066f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066f6:	f7fe faff 	bl	8004cf8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80066fa:	2300      	movs	r3, #0
 80066fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80066fe:	4b04      	ldr	r3, [pc, #16]	; (8006710 <xTaskGetTickCountFromISR+0x20>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006704:	683b      	ldr	r3, [r7, #0]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20004020 	.word	0x20004020

08006714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800671e:	4b4f      	ldr	r3, [pc, #316]	; (800685c <xTaskIncrementTick+0x148>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	f040 8089 	bne.w	800683a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006728:	4b4d      	ldr	r3, [pc, #308]	; (8006860 <xTaskIncrementTick+0x14c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3301      	adds	r3, #1
 800672e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006730:	4a4b      	ldr	r2, [pc, #300]	; (8006860 <xTaskIncrementTick+0x14c>)
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d121      	bne.n	8006780 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800673c:	4b49      	ldr	r3, [pc, #292]	; (8006864 <xTaskIncrementTick+0x150>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <xTaskIncrementTick+0x4a>
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	b672      	cpsid	i
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	b662      	cpsie	i
 800675a:	603b      	str	r3, [r7, #0]
 800675c:	e7fe      	b.n	800675c <xTaskIncrementTick+0x48>
 800675e:	4b41      	ldr	r3, [pc, #260]	; (8006864 <xTaskIncrementTick+0x150>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	4b40      	ldr	r3, [pc, #256]	; (8006868 <xTaskIncrementTick+0x154>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a3e      	ldr	r2, [pc, #248]	; (8006864 <xTaskIncrementTick+0x150>)
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	4a3e      	ldr	r2, [pc, #248]	; (8006868 <xTaskIncrementTick+0x154>)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	4b3e      	ldr	r3, [pc, #248]	; (800686c <xTaskIncrementTick+0x158>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3301      	adds	r3, #1
 8006778:	4a3c      	ldr	r2, [pc, #240]	; (800686c <xTaskIncrementTick+0x158>)
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	f000 faa4 	bl	8006cc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006780:	4b3b      	ldr	r3, [pc, #236]	; (8006870 <xTaskIncrementTick+0x15c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	429a      	cmp	r2, r3
 8006788:	d348      	bcc.n	800681c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800678a:	4b36      	ldr	r3, [pc, #216]	; (8006864 <xTaskIncrementTick+0x150>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d104      	bne.n	800679e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006794:	4b36      	ldr	r3, [pc, #216]	; (8006870 <xTaskIncrementTick+0x15c>)
 8006796:	f04f 32ff 	mov.w	r2, #4294967295
 800679a:	601a      	str	r2, [r3, #0]
					break;
 800679c:	e03e      	b.n	800681c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800679e:	4b31      	ldr	r3, [pc, #196]	; (8006864 <xTaskIncrementTick+0x150>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d203      	bcs.n	80067be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067b6:	4a2e      	ldr	r2, [pc, #184]	; (8006870 <xTaskIncrementTick+0x15c>)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067bc:	e02e      	b.n	800681c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	3304      	adds	r3, #4
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe f885 	bl	80048d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d004      	beq.n	80067da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	3318      	adds	r3, #24
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7fe f87c 	bl	80048d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	2201      	movs	r2, #1
 80067e0:	409a      	lsls	r2, r3
 80067e2:	4b24      	ldr	r3, [pc, #144]	; (8006874 <xTaskIncrementTick+0x160>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	4a22      	ldr	r2, [pc, #136]	; (8006874 <xTaskIncrementTick+0x160>)
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4a1f      	ldr	r2, [pc, #124]	; (8006878 <xTaskIncrementTick+0x164>)
 80067fa:	441a      	add	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	3304      	adds	r3, #4
 8006800:	4619      	mov	r1, r3
 8006802:	4610      	mov	r0, r2
 8006804:	f7fe f808 	bl	8004818 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680c:	4b1b      	ldr	r3, [pc, #108]	; (800687c <xTaskIncrementTick+0x168>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	429a      	cmp	r2, r3
 8006814:	d3b9      	bcc.n	800678a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006816:	2301      	movs	r3, #1
 8006818:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800681a:	e7b6      	b.n	800678a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800681c:	4b17      	ldr	r3, [pc, #92]	; (800687c <xTaskIncrementTick+0x168>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006822:	4915      	ldr	r1, [pc, #84]	; (8006878 <xTaskIncrementTick+0x164>)
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	440b      	add	r3, r1
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d907      	bls.n	8006844 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8006834:	2301      	movs	r3, #1
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	e004      	b.n	8006844 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800683a:	4b11      	ldr	r3, [pc, #68]	; (8006880 <xTaskIncrementTick+0x16c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3301      	adds	r3, #1
 8006840:	4a0f      	ldr	r2, [pc, #60]	; (8006880 <xTaskIncrementTick+0x16c>)
 8006842:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006844:	4b0f      	ldr	r3, [pc, #60]	; (8006884 <xTaskIncrementTick+0x170>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800684c:	2301      	movs	r3, #1
 800684e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006850:	697b      	ldr	r3, [r7, #20]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20004044 	.word	0x20004044
 8006860:	20004020 	.word	0x20004020
 8006864:	20003fd4 	.word	0x20003fd4
 8006868:	20003fd8 	.word	0x20003fd8
 800686c:	20004034 	.word	0x20004034
 8006870:	2000403c 	.word	0x2000403c
 8006874:	20004024 	.word	0x20004024
 8006878:	20003f20 	.word	0x20003f20
 800687c:	20003f1c 	.word	0x20003f1c
 8006880:	2000402c 	.word	0x2000402c
 8006884:	20004030 	.word	0x20004030

08006888 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800688e:	4b27      	ldr	r3, [pc, #156]	; (800692c <vTaskSwitchContext+0xa4>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006896:	4b26      	ldr	r3, [pc, #152]	; (8006930 <vTaskSwitchContext+0xa8>)
 8006898:	2201      	movs	r2, #1
 800689a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800689c:	e040      	b.n	8006920 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800689e:	4b24      	ldr	r3, [pc, #144]	; (8006930 <vTaskSwitchContext+0xa8>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a4:	4b23      	ldr	r3, [pc, #140]	; (8006934 <vTaskSwitchContext+0xac>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	fab3 f383 	clz	r3, r3
 80068b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80068b2:	7afb      	ldrb	r3, [r7, #11]
 80068b4:	f1c3 031f 	rsb	r3, r3, #31
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	491f      	ldr	r1, [pc, #124]	; (8006938 <vTaskSwitchContext+0xb0>)
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10b      	bne.n	80068e6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	b672      	cpsid	i
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	b662      	cpsie	i
 80068e2:	607b      	str	r3, [r7, #4]
 80068e4:	e7fe      	b.n	80068e4 <vTaskSwitchContext+0x5c>
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	4613      	mov	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4a11      	ldr	r2, [pc, #68]	; (8006938 <vTaskSwitchContext+0xb0>)
 80068f2:	4413      	add	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	605a      	str	r2, [r3, #4]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	3308      	adds	r3, #8
 8006908:	429a      	cmp	r2, r3
 800690a:	d104      	bne.n	8006916 <vTaskSwitchContext+0x8e>
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	605a      	str	r2, [r3, #4]
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	4a07      	ldr	r2, [pc, #28]	; (800693c <vTaskSwitchContext+0xb4>)
 800691e:	6013      	str	r3, [r2, #0]
}
 8006920:	bf00      	nop
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	20004044 	.word	0x20004044
 8006930:	20004030 	.word	0x20004030
 8006934:	20004024 	.word	0x20004024
 8006938:	20003f20 	.word	0x20003f20
 800693c:	20003f1c 	.word	0x20003f1c

08006940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10b      	bne.n	8006968 <vTaskPlaceOnEventList+0x28>
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	b672      	cpsid	i
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	b662      	cpsie	i
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e7fe      	b.n	8006966 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006968:	4b07      	ldr	r3, [pc, #28]	; (8006988 <vTaskPlaceOnEventList+0x48>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3318      	adds	r3, #24
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7fd ff75 	bl	8004860 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006976:	2101      	movs	r1, #1
 8006978:	6838      	ldr	r0, [r7, #0]
 800697a:	f000 fb9b 	bl	80070b4 <prvAddCurrentTaskToDelayedList>
}
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20003f1c 	.word	0x20003f1c

0800698c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10b      	bne.n	80069ba <xTaskRemoveFromEventList+0x2e>
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	b672      	cpsid	i
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	b662      	cpsie	i
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	e7fe      	b.n	80069b8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	3318      	adds	r3, #24
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fd ff87 	bl	80048d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069c4:	4b1d      	ldr	r3, [pc, #116]	; (8006a3c <xTaskRemoveFromEventList+0xb0>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d11c      	bne.n	8006a06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	3304      	adds	r3, #4
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fd ff7e 	bl	80048d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	2201      	movs	r2, #1
 80069dc:	409a      	lsls	r2, r3
 80069de:	4b18      	ldr	r3, [pc, #96]	; (8006a40 <xTaskRemoveFromEventList+0xb4>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	4a16      	ldr	r2, [pc, #88]	; (8006a40 <xTaskRemoveFromEventList+0xb4>)
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4a13      	ldr	r2, [pc, #76]	; (8006a44 <xTaskRemoveFromEventList+0xb8>)
 80069f6:	441a      	add	r2, r3
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	3304      	adds	r3, #4
 80069fc:	4619      	mov	r1, r3
 80069fe:	4610      	mov	r0, r2
 8006a00:	f7fd ff0a 	bl	8004818 <vListInsertEnd>
 8006a04:	e005      	b.n	8006a12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	3318      	adds	r3, #24
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	480e      	ldr	r0, [pc, #56]	; (8006a48 <xTaskRemoveFromEventList+0xbc>)
 8006a0e:	f7fd ff03 	bl	8004818 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a16:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <xTaskRemoveFromEventList+0xc0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d905      	bls.n	8006a2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a20:	2301      	movs	r3, #1
 8006a22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a24:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <xTaskRemoveFromEventList+0xc4>)
 8006a26:	2201      	movs	r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	e001      	b.n	8006a30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a30:	697b      	ldr	r3, [r7, #20]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3718      	adds	r7, #24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20004044 	.word	0x20004044
 8006a40:	20004024 	.word	0x20004024
 8006a44:	20003f20 	.word	0x20003f20
 8006a48:	20003fdc 	.word	0x20003fdc
 8006a4c:	20003f1c 	.word	0x20003f1c
 8006a50:	20004030 	.word	0x20004030

08006a54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a5c:	4b06      	ldr	r3, [pc, #24]	; (8006a78 <vTaskInternalSetTimeOutState+0x24>)
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a64:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <vTaskInternalSetTimeOutState+0x28>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	605a      	str	r2, [r3, #4]
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	20004034 	.word	0x20004034
 8006a7c:	20004020 	.word	0x20004020

08006a80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10b      	bne.n	8006aa8 <xTaskCheckForTimeOut+0x28>
 8006a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a94:	b672      	cpsid	i
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	b662      	cpsie	i
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	e7fe      	b.n	8006aa6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10b      	bne.n	8006ac6 <xTaskCheckForTimeOut+0x46>
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	b672      	cpsid	i
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	b662      	cpsie	i
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	e7fe      	b.n	8006ac4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8006ac6:	f7fe f837 	bl	8004b38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006aca:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <xTaskCheckForTimeOut+0xc0>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae2:	d102      	bne.n	8006aea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61fb      	str	r3, [r7, #28]
 8006ae8:	e023      	b.n	8006b32 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	4b15      	ldr	r3, [pc, #84]	; (8006b44 <xTaskCheckForTimeOut+0xc4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d007      	beq.n	8006b06 <xTaskCheckForTimeOut+0x86>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d802      	bhi.n	8006b06 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b00:	2301      	movs	r3, #1
 8006b02:	61fb      	str	r3, [r7, #28]
 8006b04:	e015      	b.n	8006b32 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d90b      	bls.n	8006b28 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	1ad2      	subs	r2, r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff ff99 	bl	8006a54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	61fb      	str	r3, [r7, #28]
 8006b26:	e004      	b.n	8006b32 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b32:	f7fe f833 	bl	8004b9c <vPortExitCritical>

	return xReturn;
 8006b36:	69fb      	ldr	r3, [r7, #28]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3720      	adds	r7, #32
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20004020 	.word	0x20004020
 8006b44:	20004034 	.word	0x20004034

08006b48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b4c:	4b03      	ldr	r3, [pc, #12]	; (8006b5c <vTaskMissedYield+0x14>)
 8006b4e:	2201      	movs	r2, #1
 8006b50:	601a      	str	r2, [r3, #0]
}
 8006b52:	bf00      	nop
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	20004030 	.word	0x20004030

08006b60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b68:	f000 f852 	bl	8006c10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b6c:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <prvIdleTask+0x28>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d9f9      	bls.n	8006b68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b74:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <prvIdleTask+0x2c>)
 8006b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b84:	e7f0      	b.n	8006b68 <prvIdleTask+0x8>
 8006b86:	bf00      	nop
 8006b88:	20003f20 	.word	0x20003f20
 8006b8c:	e000ed04 	.word	0xe000ed04

08006b90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b96:	2300      	movs	r3, #0
 8006b98:	607b      	str	r3, [r7, #4]
 8006b9a:	e00c      	b.n	8006bb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4a12      	ldr	r2, [pc, #72]	; (8006bf0 <prvInitialiseTaskLists+0x60>)
 8006ba8:	4413      	add	r3, r2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fd fe07 	bl	80047be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	607b      	str	r3, [r7, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b06      	cmp	r3, #6
 8006bba:	d9ef      	bls.n	8006b9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bbc:	480d      	ldr	r0, [pc, #52]	; (8006bf4 <prvInitialiseTaskLists+0x64>)
 8006bbe:	f7fd fdfe 	bl	80047be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bc2:	480d      	ldr	r0, [pc, #52]	; (8006bf8 <prvInitialiseTaskLists+0x68>)
 8006bc4:	f7fd fdfb 	bl	80047be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bc8:	480c      	ldr	r0, [pc, #48]	; (8006bfc <prvInitialiseTaskLists+0x6c>)
 8006bca:	f7fd fdf8 	bl	80047be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bce:	480c      	ldr	r0, [pc, #48]	; (8006c00 <prvInitialiseTaskLists+0x70>)
 8006bd0:	f7fd fdf5 	bl	80047be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bd4:	480b      	ldr	r0, [pc, #44]	; (8006c04 <prvInitialiseTaskLists+0x74>)
 8006bd6:	f7fd fdf2 	bl	80047be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bda:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <prvInitialiseTaskLists+0x78>)
 8006bdc:	4a05      	ldr	r2, [pc, #20]	; (8006bf4 <prvInitialiseTaskLists+0x64>)
 8006bde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006be0:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <prvInitialiseTaskLists+0x7c>)
 8006be2:	4a05      	ldr	r2, [pc, #20]	; (8006bf8 <prvInitialiseTaskLists+0x68>)
 8006be4:	601a      	str	r2, [r3, #0]
}
 8006be6:	bf00      	nop
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20003f20 	.word	0x20003f20
 8006bf4:	20003fac 	.word	0x20003fac
 8006bf8:	20003fc0 	.word	0x20003fc0
 8006bfc:	20003fdc 	.word	0x20003fdc
 8006c00:	20003ff0 	.word	0x20003ff0
 8006c04:	20004008 	.word	0x20004008
 8006c08:	20003fd4 	.word	0x20003fd4
 8006c0c:	20003fd8 	.word	0x20003fd8

08006c10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c16:	e019      	b.n	8006c4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c18:	f7fd ff8e 	bl	8004b38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c1c:	4b0f      	ldr	r3, [pc, #60]	; (8006c5c <prvCheckTasksWaitingTermination+0x4c>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3304      	adds	r3, #4
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fd fe52 	bl	80048d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c2e:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <prvCheckTasksWaitingTermination+0x50>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	4a0a      	ldr	r2, [pc, #40]	; (8006c60 <prvCheckTasksWaitingTermination+0x50>)
 8006c36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c38:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <prvCheckTasksWaitingTermination+0x54>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	4a09      	ldr	r2, [pc, #36]	; (8006c64 <prvCheckTasksWaitingTermination+0x54>)
 8006c40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c42:	f7fd ffab 	bl	8004b9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f80e 	bl	8006c68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c4c:	4b05      	ldr	r3, [pc, #20]	; (8006c64 <prvCheckTasksWaitingTermination+0x54>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e1      	bne.n	8006c18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c54:	bf00      	nop
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	20003ff0 	.word	0x20003ff0
 8006c60:	2000401c 	.word	0x2000401c
 8006c64:	20004004 	.word	0x20004004

08006c68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d108      	bne.n	8006c8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe f944 	bl	8004f0c <vPortFree>
				vPortFree( pxTCB );
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7fe f941 	bl	8004f0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c8a:	e019      	b.n	8006cc0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d103      	bne.n	8006c9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fe f938 	bl	8004f0c <vPortFree>
	}
 8006c9c:	e010      	b.n	8006cc0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d00b      	beq.n	8006cc0 <prvDeleteTCB+0x58>
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	b672      	cpsid	i
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	b662      	cpsie	i
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	e7fe      	b.n	8006cbe <prvDeleteTCB+0x56>
	}
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cce:	4b0c      	ldr	r3, [pc, #48]	; (8006d00 <prvResetNextTaskUnblockTime+0x38>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d104      	bne.n	8006ce2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cd8:	4b0a      	ldr	r3, [pc, #40]	; (8006d04 <prvResetNextTaskUnblockTime+0x3c>)
 8006cda:	f04f 32ff 	mov.w	r2, #4294967295
 8006cde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ce0:	e008      	b.n	8006cf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce2:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <prvResetNextTaskUnblockTime+0x38>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4a04      	ldr	r2, [pc, #16]	; (8006d04 <prvResetNextTaskUnblockTime+0x3c>)
 8006cf2:	6013      	str	r3, [r2, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	20003fd4 	.word	0x20003fd4
 8006d04:	2000403c 	.word	0x2000403c

08006d08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d0e:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <xTaskGetSchedulerState+0x34>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d102      	bne.n	8006d1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d16:	2301      	movs	r3, #1
 8006d18:	607b      	str	r3, [r7, #4]
 8006d1a:	e008      	b.n	8006d2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d1c:	4b08      	ldr	r3, [pc, #32]	; (8006d40 <xTaskGetSchedulerState+0x38>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d24:	2302      	movs	r3, #2
 8006d26:	607b      	str	r3, [r7, #4]
 8006d28:	e001      	b.n	8006d2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d2e:	687b      	ldr	r3, [r7, #4]
	}
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	20004028 	.word	0x20004028
 8006d40:	20004044 	.word	0x20004044

08006d44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d069      	beq.n	8006e2e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5e:	4b36      	ldr	r3, [pc, #216]	; (8006e38 <xTaskPriorityInherit+0xf4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d259      	bcs.n	8006e1c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	db06      	blt.n	8006d7e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d70:	4b31      	ldr	r3, [pc, #196]	; (8006e38 <xTaskPriorityInherit+0xf4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d76:	f1c3 0207 	rsb	r2, r3, #7
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	6959      	ldr	r1, [r3, #20]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d86:	4613      	mov	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4a2b      	ldr	r2, [pc, #172]	; (8006e3c <xTaskPriorityInherit+0xf8>)
 8006d90:	4413      	add	r3, r2
 8006d92:	4299      	cmp	r1, r3
 8006d94:	d13a      	bne.n	8006e0c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fd fd99 	bl	80048d2 <uxListRemove>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d115      	bne.n	8006dd2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006daa:	4924      	ldr	r1, [pc, #144]	; (8006e3c <xTaskPriorityInherit+0xf8>)
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <xTaskPriorityInherit+0x8e>
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc6:	43da      	mvns	r2, r3
 8006dc8:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <xTaskPriorityInherit+0xfc>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	4a1c      	ldr	r2, [pc, #112]	; (8006e40 <xTaskPriorityInherit+0xfc>)
 8006dd0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006dd2:	4b19      	ldr	r3, [pc, #100]	; (8006e38 <xTaskPriorityInherit+0xf4>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	2201      	movs	r2, #1
 8006de2:	409a      	lsls	r2, r3
 8006de4:	4b16      	ldr	r3, [pc, #88]	; (8006e40 <xTaskPriorityInherit+0xfc>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	4a15      	ldr	r2, [pc, #84]	; (8006e40 <xTaskPriorityInherit+0xfc>)
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4a10      	ldr	r2, [pc, #64]	; (8006e3c <xTaskPriorityInherit+0xf8>)
 8006dfc:	441a      	add	r2, r3
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f7fd fd07 	bl	8004818 <vListInsertEnd>
 8006e0a:	e004      	b.n	8006e16 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e0c:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <xTaskPriorityInherit+0xf4>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006e16:	2301      	movs	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	e008      	b.n	8006e2e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e20:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <xTaskPriorityInherit+0xf4>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d201      	bcs.n	8006e2e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
	}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20003f1c 	.word	0x20003f1c
 8006e3c:	20003f20 	.word	0x20003f20
 8006e40:	20004024 	.word	0x20004024

08006e44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d070      	beq.n	8006f3c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e5a:	4b3b      	ldr	r3, [pc, #236]	; (8006f48 <xTaskPriorityDisinherit+0x104>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d00b      	beq.n	8006e7c <xTaskPriorityDisinherit+0x38>
 8006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e68:	b672      	cpsid	i
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	b662      	cpsie	i
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	e7fe      	b.n	8006e7a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10b      	bne.n	8006e9c <xTaskPriorityDisinherit+0x58>
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	b672      	cpsid	i
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	b662      	cpsie	i
 8006e98:	60bb      	str	r3, [r7, #8]
 8006e9a:	e7fe      	b.n	8006e9a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea0:	1e5a      	subs	r2, r3, #1
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d044      	beq.n	8006f3c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d140      	bne.n	8006f3c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fd fd07 	bl	80048d2 <uxListRemove>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d115      	bne.n	8006ef6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ece:	491f      	ldr	r1, [pc, #124]	; (8006f4c <xTaskPriorityDisinherit+0x108>)
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	440b      	add	r3, r1
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10a      	bne.n	8006ef6 <xTaskPriorityDisinherit+0xb2>
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	43da      	mvns	r2, r3
 8006eec:	4b18      	ldr	r3, [pc, #96]	; (8006f50 <xTaskPriorityDisinherit+0x10c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	4a17      	ldr	r2, [pc, #92]	; (8006f50 <xTaskPriorityDisinherit+0x10c>)
 8006ef4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f02:	f1c3 0207 	rsb	r2, r3, #7
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0e:	2201      	movs	r2, #1
 8006f10:	409a      	lsls	r2, r3
 8006f12:	4b0f      	ldr	r3, [pc, #60]	; (8006f50 <xTaskPriorityDisinherit+0x10c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	4a0d      	ldr	r2, [pc, #52]	; (8006f50 <xTaskPriorityDisinherit+0x10c>)
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f20:	4613      	mov	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4a08      	ldr	r2, [pc, #32]	; (8006f4c <xTaskPriorityDisinherit+0x108>)
 8006f2a:	441a      	add	r2, r3
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f7fd fc70 	bl	8004818 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f3c:	697b      	ldr	r3, [r7, #20]
	}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	20003f1c 	.word	0x20003f1c
 8006f4c:	20003f20 	.word	0x20003f20
 8006f50:	20004024 	.word	0x20004024

08006f54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b088      	sub	sp, #32
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006f62:	2301      	movs	r3, #1
 8006f64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 8085 	beq.w	8007078 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10b      	bne.n	8006f8e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	b672      	cpsid	i
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	b662      	cpsie	i
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	e7fe      	b.n	8006f8c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d202      	bcs.n	8006f9e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	61fb      	str	r3, [r7, #28]
 8006f9c:	e002      	b.n	8006fa4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d064      	beq.n	8007078 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d15f      	bne.n	8007078 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006fb8:	4b31      	ldr	r3, [pc, #196]	; (8007080 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d10b      	bne.n	8006fda <vTaskPriorityDisinheritAfterTimeout+0x86>
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	b672      	cpsid	i
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	b662      	cpsie	i
 8006fd6:	60bb      	str	r3, [r7, #8]
 8006fd8:	e7fe      	b.n	8006fd8 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fde:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	69fa      	ldr	r2, [r7, #28]
 8006fe4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	db04      	blt.n	8006ff8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	f1c3 0207 	rsb	r2, r3, #7
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	6959      	ldr	r1, [r3, #20]
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4a1f      	ldr	r2, [pc, #124]	; (8007084 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007008:	4413      	add	r3, r2
 800700a:	4299      	cmp	r1, r3
 800700c:	d134      	bne.n	8007078 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	3304      	adds	r3, #4
 8007012:	4618      	mov	r0, r3
 8007014:	f7fd fc5d 	bl	80048d2 <uxListRemove>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d115      	bne.n	800704a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007022:	4918      	ldr	r1, [pc, #96]	; (8007084 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	440b      	add	r3, r1
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10a      	bne.n	800704a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	2201      	movs	r2, #1
 800703a:	fa02 f303 	lsl.w	r3, r2, r3
 800703e:	43da      	mvns	r2, r3
 8007040:	4b11      	ldr	r3, [pc, #68]	; (8007088 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4013      	ands	r3, r2
 8007046:	4a10      	ldr	r2, [pc, #64]	; (8007088 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007048:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	2201      	movs	r2, #1
 8007050:	409a      	lsls	r2, r3
 8007052:	4b0d      	ldr	r3, [pc, #52]	; (8007088 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4313      	orrs	r3, r2
 8007058:	4a0b      	ldr	r2, [pc, #44]	; (8007088 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007060:	4613      	mov	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4a06      	ldr	r2, [pc, #24]	; (8007084 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800706a:	441a      	add	r2, r3
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	3304      	adds	r3, #4
 8007070:	4619      	mov	r1, r3
 8007072:	4610      	mov	r0, r2
 8007074:	f7fd fbd0 	bl	8004818 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007078:	bf00      	nop
 800707a:	3720      	adds	r7, #32
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20003f1c 	.word	0x20003f1c
 8007084:	20003f20 	.word	0x20003f20
 8007088:	20004024 	.word	0x20004024

0800708c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007090:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d004      	beq.n	80070a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007098:	4b05      	ldr	r3, [pc, #20]	; (80070b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800709e:	3201      	adds	r2, #1
 80070a0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80070a2:	4b03      	ldr	r3, [pc, #12]	; (80070b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80070a4:	681b      	ldr	r3, [r3, #0]
	}
 80070a6:	4618      	mov	r0, r3
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	20003f1c 	.word	0x20003f1c

080070b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070be:	4b29      	ldr	r3, [pc, #164]	; (8007164 <prvAddCurrentTaskToDelayedList+0xb0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070c4:	4b28      	ldr	r3, [pc, #160]	; (8007168 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fd fc01 	bl	80048d2 <uxListRemove>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10b      	bne.n	80070ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80070d6:	4b24      	ldr	r3, [pc, #144]	; (8007168 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	2201      	movs	r2, #1
 80070de:	fa02 f303 	lsl.w	r3, r2, r3
 80070e2:	43da      	mvns	r2, r3
 80070e4:	4b21      	ldr	r3, [pc, #132]	; (800716c <prvAddCurrentTaskToDelayedList+0xb8>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4013      	ands	r3, r2
 80070ea:	4a20      	ldr	r2, [pc, #128]	; (800716c <prvAddCurrentTaskToDelayedList+0xb8>)
 80070ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d10a      	bne.n	800710c <prvAddCurrentTaskToDelayedList+0x58>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d007      	beq.n	800710c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070fc:	4b1a      	ldr	r3, [pc, #104]	; (8007168 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3304      	adds	r3, #4
 8007102:	4619      	mov	r1, r3
 8007104:	481a      	ldr	r0, [pc, #104]	; (8007170 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007106:	f7fd fb87 	bl	8004818 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800710a:	e026      	b.n	800715a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4413      	add	r3, r2
 8007112:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007114:	4b14      	ldr	r3, [pc, #80]	; (8007168 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	429a      	cmp	r2, r3
 8007122:	d209      	bcs.n	8007138 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007124:	4b13      	ldr	r3, [pc, #76]	; (8007174 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	4b0f      	ldr	r3, [pc, #60]	; (8007168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3304      	adds	r3, #4
 800712e:	4619      	mov	r1, r3
 8007130:	4610      	mov	r0, r2
 8007132:	f7fd fb95 	bl	8004860 <vListInsert>
}
 8007136:	e010      	b.n	800715a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007138:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <prvAddCurrentTaskToDelayedList+0xc4>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	4b0a      	ldr	r3, [pc, #40]	; (8007168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3304      	adds	r3, #4
 8007142:	4619      	mov	r1, r3
 8007144:	4610      	mov	r0, r2
 8007146:	f7fd fb8b 	bl	8004860 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800714a:	4b0c      	ldr	r3, [pc, #48]	; (800717c <prvAddCurrentTaskToDelayedList+0xc8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	429a      	cmp	r2, r3
 8007152:	d202      	bcs.n	800715a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007154:	4a09      	ldr	r2, [pc, #36]	; (800717c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	6013      	str	r3, [r2, #0]
}
 800715a:	bf00      	nop
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20004020 	.word	0x20004020
 8007168:	20003f1c 	.word	0x20003f1c
 800716c:	20004024 	.word	0x20004024
 8007170:	20004008 	.word	0x20004008
 8007174:	20003fd8 	.word	0x20003fd8
 8007178:	20003fd4 	.word	0x20003fd4
 800717c:	2000403c 	.word	0x2000403c

08007180 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	330c      	adds	r3, #12
 8007190:	461a      	mov	r2, r3
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f003 fd15 	bl	800abc4 <tcpip_send_msg_wait_sem>
 800719a:	4603      	mov	r3, r0
 800719c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800719e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d103      	bne.n	80071ae <netconn_apimsg+0x2e>
    return apimsg->err;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80071ac:	e001      	b.n	80071b2 <netconn_apimsg+0x32>
  }
  return err;
 80071ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08c      	sub	sp, #48	; 0x30
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	603a      	str	r2, [r7, #0]
 80071c6:	71fb      	strb	r3, [r7, #7]
 80071c8:	460b      	mov	r3, r1
 80071ca:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80071cc:	79fb      	ldrb	r3, [r7, #7]
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 f99f 	bl	8008514 <netconn_alloc>
 80071d6:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80071d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d054      	beq.n	8007288 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80071de:	79bb      	ldrb	r3, [r7, #6]
 80071e0:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80071e6:	f107 0308 	add.w	r3, r7, #8
 80071ea:	4619      	mov	r1, r3
 80071ec:	4829      	ldr	r0, [pc, #164]	; (8007294 <netconn_new_with_proto_and_callback+0xd8>)
 80071ee:	f7ff ffc7 	bl	8007180 <netconn_apimsg>
 80071f2:	4603      	mov	r3, r0
 80071f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80071f8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d043      	beq.n	8007288 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d005      	beq.n	8007214 <netconn_new_with_proto_and_callback+0x58>
 8007208:	4b23      	ldr	r3, [pc, #140]	; (8007298 <netconn_new_with_proto_and_callback+0xdc>)
 800720a:	22a3      	movs	r2, #163	; 0xa3
 800720c:	4923      	ldr	r1, [pc, #140]	; (800729c <netconn_new_with_proto_and_callback+0xe0>)
 800720e:	4824      	ldr	r0, [pc, #144]	; (80072a0 <netconn_new_with_proto_and_callback+0xe4>)
 8007210:	f00e ffd4 	bl	80161bc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	3310      	adds	r3, #16
 8007218:	4618      	mov	r0, r3
 800721a:	f00e fdf8 	bl	8015e0e <sys_mbox_valid>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d105      	bne.n	8007230 <netconn_new_with_proto_and_callback+0x74>
 8007224:	4b1c      	ldr	r3, [pc, #112]	; (8007298 <netconn_new_with_proto_and_callback+0xdc>)
 8007226:	22a4      	movs	r2, #164	; 0xa4
 8007228:	491e      	ldr	r1, [pc, #120]	; (80072a4 <netconn_new_with_proto_and_callback+0xe8>)
 800722a:	481d      	ldr	r0, [pc, #116]	; (80072a0 <netconn_new_with_proto_and_callback+0xe4>)
 800722c:	f00e ffc6 	bl	80161bc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007232:	3314      	adds	r3, #20
 8007234:	4618      	mov	r0, r3
 8007236:	f00e fdea 	bl	8015e0e <sys_mbox_valid>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d005      	beq.n	800724c <netconn_new_with_proto_and_callback+0x90>
 8007240:	4b15      	ldr	r3, [pc, #84]	; (8007298 <netconn_new_with_proto_and_callback+0xdc>)
 8007242:	22a6      	movs	r2, #166	; 0xa6
 8007244:	4918      	ldr	r1, [pc, #96]	; (80072a8 <netconn_new_with_proto_and_callback+0xec>)
 8007246:	4816      	ldr	r0, [pc, #88]	; (80072a0 <netconn_new_with_proto_and_callback+0xe4>)
 8007248:	f00e ffb8 	bl	80161bc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724e:	330c      	adds	r3, #12
 8007250:	4618      	mov	r0, r3
 8007252:	f00e fe6d 	bl	8015f30 <sys_sem_valid>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d105      	bne.n	8007268 <netconn_new_with_proto_and_callback+0xac>
 800725c:	4b0e      	ldr	r3, [pc, #56]	; (8007298 <netconn_new_with_proto_and_callback+0xdc>)
 800725e:	22a9      	movs	r2, #169	; 0xa9
 8007260:	4912      	ldr	r1, [pc, #72]	; (80072ac <netconn_new_with_proto_and_callback+0xf0>)
 8007262:	480f      	ldr	r0, [pc, #60]	; (80072a0 <netconn_new_with_proto_and_callback+0xe4>)
 8007264:	f00e ffaa 	bl	80161bc <iprintf>
      sys_sem_free(&conn->op_completed);
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	330c      	adds	r3, #12
 800726c:	4618      	mov	r0, r3
 800726e:	f00e fe52 	bl	8015f16 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007274:	3310      	adds	r3, #16
 8007276:	4618      	mov	r0, r3
 8007278:	f00e fd42 	bl	8015d00 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800727c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800727e:	2007      	movs	r0, #7
 8007280:	f006 fbe2 	bl	800da48 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007284:	2300      	movs	r3, #0
 8007286:	e000      	b.n	800728a <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800728a:	4618      	mov	r0, r3
 800728c:	3730      	adds	r7, #48	; 0x30
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	080084e9 	.word	0x080084e9
 8007298:	08017678 	.word	0x08017678
 800729c:	080176ac 	.word	0x080176ac
 80072a0:	080176d0 	.word	0x080176d0
 80072a4:	080176f8 	.word	0x080176f8
 80072a8:	08017710 	.word	0x08017710
 80072ac:	08017734 	.word	0x08017734

080072b0 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08c      	sub	sp, #48	; 0x30
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <netconn_prepare_delete+0x12>
    return ERR_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	e014      	b.n	80072ec <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80072c6:	2329      	movs	r3, #41	; 0x29
 80072c8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80072ca:	f107 030c 	add.w	r3, r7, #12
 80072ce:	4619      	mov	r1, r3
 80072d0:	4808      	ldr	r0, [pc, #32]	; (80072f4 <netconn_prepare_delete+0x44>)
 80072d2:	f7ff ff55 	bl	8007180 <netconn_apimsg>
 80072d6:	4603      	mov	r3, r0
 80072d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80072dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <netconn_prepare_delete+0x3a>
    return err;
 80072e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80072e8:	e000      	b.n	80072ec <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3730      	adds	r7, #48	; 0x30
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	08008a4d 	.word	0x08008a4d

080072f8 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <netconn_delete+0x12>
    return ERR_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	e00d      	b.n	8007326 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f7ff ffd0 	bl	80072b0 <netconn_prepare_delete>
 8007310:	4603      	mov	r3, r0
 8007312:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d102      	bne.n	8007322 <netconn_delete+0x2a>
    netconn_free(conn);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 f967 	bl	80085f0 <netconn_free>
  }
  return err;
 8007322:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08e      	sub	sp, #56	; 0x38
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d109      	bne.n	8007358 <netconn_getaddr+0x28>
 8007344:	4b1d      	ldr	r3, [pc, #116]	; (80073bc <netconn_getaddr+0x8c>)
 8007346:	f44f 7289 	mov.w	r2, #274	; 0x112
 800734a:	491d      	ldr	r1, [pc, #116]	; (80073c0 <netconn_getaddr+0x90>)
 800734c:	481d      	ldr	r0, [pc, #116]	; (80073c4 <netconn_getaddr+0x94>)
 800734e:	f00e ff35 	bl	80161bc <iprintf>
 8007352:	f06f 030f 	mvn.w	r3, #15
 8007356:	e02d      	b.n	80073b4 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d109      	bne.n	8007372 <netconn_getaddr+0x42>
 800735e:	4b17      	ldr	r3, [pc, #92]	; (80073bc <netconn_getaddr+0x8c>)
 8007360:	f240 1213 	movw	r2, #275	; 0x113
 8007364:	4918      	ldr	r1, [pc, #96]	; (80073c8 <netconn_getaddr+0x98>)
 8007366:	4817      	ldr	r0, [pc, #92]	; (80073c4 <netconn_getaddr+0x94>)
 8007368:	f00e ff28 	bl	80161bc <iprintf>
 800736c:	f06f 030f 	mvn.w	r3, #15
 8007370:	e020      	b.n	80073b4 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d109      	bne.n	800738c <netconn_getaddr+0x5c>
 8007378:	4b10      	ldr	r3, [pc, #64]	; (80073bc <netconn_getaddr+0x8c>)
 800737a:	f44f 728a 	mov.w	r2, #276	; 0x114
 800737e:	4913      	ldr	r1, [pc, #76]	; (80073cc <netconn_getaddr+0x9c>)
 8007380:	4810      	ldr	r0, [pc, #64]	; (80073c4 <netconn_getaddr+0x94>)
 8007382:	f00e ff1b 	bl	80161bc <iprintf>
 8007386:	f06f 030f 	mvn.w	r3, #15
 800738a:	e013      	b.n	80073b4 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800739e:	f107 0314 	add.w	r3, r7, #20
 80073a2:	4619      	mov	r1, r3
 80073a4:	480a      	ldr	r0, [pc, #40]	; (80073d0 <netconn_getaddr+0xa0>)
 80073a6:	f7ff feeb 	bl	8007180 <netconn_apimsg>
 80073aa:	4603      	mov	r3, r0
 80073ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 80073b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3738      	adds	r7, #56	; 0x38
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	08017678 	.word	0x08017678
 80073c0:	08017750 	.word	0x08017750
 80073c4:	080176d0 	.word	0x080176d0
 80073c8:	08017770 	.word	0x08017770
 80073cc:	08017790 	.word	0x08017790
 80073d0:	08009375 	.word	0x08009375

080073d4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08e      	sub	sp, #56	; 0x38
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d109      	bne.n	80073fc <netconn_bind+0x28>
 80073e8:	4b11      	ldr	r3, [pc, #68]	; (8007430 <netconn_bind+0x5c>)
 80073ea:	f44f 729c 	mov.w	r2, #312	; 0x138
 80073ee:	4911      	ldr	r1, [pc, #68]	; (8007434 <netconn_bind+0x60>)
 80073f0:	4811      	ldr	r0, [pc, #68]	; (8007438 <netconn_bind+0x64>)
 80073f2:	f00e fee3 	bl	80161bc <iprintf>
 80073f6:	f06f 030f 	mvn.w	r3, #15
 80073fa:	e015      	b.n	8007428 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007402:	4b0e      	ldr	r3, [pc, #56]	; (800743c <netconn_bind+0x68>)
 8007404:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007412:	f107 0314 	add.w	r3, r7, #20
 8007416:	4619      	mov	r1, r3
 8007418:	4809      	ldr	r0, [pc, #36]	; (8007440 <netconn_bind+0x6c>)
 800741a:	f7ff feb1 	bl	8007180 <netconn_apimsg>
 800741e:	4603      	mov	r3, r0
 8007420:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007424:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007428:	4618      	mov	r0, r3
 800742a:	3738      	adds	r7, #56	; 0x38
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	08017678 	.word	0x08017678
 8007434:	080177b0 	.word	0x080177b0
 8007438:	080176d0 	.word	0x080176d0
 800743c:	0801af78 	.word	0x0801af78
 8007440:	08008c15 	.word	0x08008c15

08007444 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08c      	sub	sp, #48	; 0x30
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <netconn_listen_with_backlog+0x26>
 8007456:	4b0d      	ldr	r3, [pc, #52]	; (800748c <netconn_listen_with_backlog+0x48>)
 8007458:	f240 12bb 	movw	r2, #443	; 0x1bb
 800745c:	490c      	ldr	r1, [pc, #48]	; (8007490 <netconn_listen_with_backlog+0x4c>)
 800745e:	480d      	ldr	r0, [pc, #52]	; (8007494 <netconn_listen_with_backlog+0x50>)
 8007460:	f00e feac 	bl	80161bc <iprintf>
 8007464:	f06f 030f 	mvn.w	r3, #15
 8007468:	e00c      	b.n	8007484 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800746e:	f107 030c 	add.w	r3, r7, #12
 8007472:	4619      	mov	r1, r3
 8007474:	4808      	ldr	r0, [pc, #32]	; (8007498 <netconn_listen_with_backlog+0x54>)
 8007476:	f7ff fe83 	bl	8007180 <netconn_apimsg>
 800747a:	4603      	mov	r3, r0
 800747c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007480:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007484:	4618      	mov	r0, r3
 8007486:	3730      	adds	r7, #48	; 0x30
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	08017678 	.word	0x08017678
 8007490:	08017830 	.word	0x08017830
 8007494:	080176d0 	.word	0x080176d0
 8007498:	08008c8d 	.word	0x08008c8d

0800749c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d109      	bne.n	80074c0 <netconn_accept+0x24>
 80074ac:	4b3d      	ldr	r3, [pc, #244]	; (80075a4 <netconn_accept+0x108>)
 80074ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 80074b2:	493d      	ldr	r1, [pc, #244]	; (80075a8 <netconn_accept+0x10c>)
 80074b4:	483d      	ldr	r0, [pc, #244]	; (80075ac <netconn_accept+0x110>)
 80074b6:	f00e fe81 	bl	80161bc <iprintf>
 80074ba:	f06f 030f 	mvn.w	r3, #15
 80074be:	e06c      	b.n	800759a <netconn_accept+0xfe>
  *new_conn = NULL;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d109      	bne.n	80074e0 <netconn_accept+0x44>
 80074cc:	4b35      	ldr	r3, [pc, #212]	; (80075a4 <netconn_accept+0x108>)
 80074ce:	f240 12e3 	movw	r2, #483	; 0x1e3
 80074d2:	4937      	ldr	r1, [pc, #220]	; (80075b0 <netconn_accept+0x114>)
 80074d4:	4835      	ldr	r0, [pc, #212]	; (80075ac <netconn_accept+0x110>)
 80074d6:	f00e fe71 	bl	80161bc <iprintf>
 80074da:	f06f 030f 	mvn.w	r3, #15
 80074de:	e05c      	b.n	800759a <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fb99 	bl	8007c18 <netconn_err>
 80074e6:	4603      	mov	r3, r0
 80074e8:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80074ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80074f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80074f6:	e050      	b.n	800759a <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3314      	adds	r3, #20
 80074fc:	4618      	mov	r0, r3
 80074fe:	f00e fc86 	bl	8015e0e <sys_mbox_valid>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d005      	beq.n	8007514 <netconn_accept+0x78>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	7f1b      	ldrb	r3, [r3, #28]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8007514:	f06f 030e 	mvn.w	r3, #14
 8007518:	e03f      	b.n	800759a <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	7f1b      	ldrb	r3, [r3, #28]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00e      	beq.n	8007544 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3314      	adds	r3, #20
 800752a:	f107 020c 	add.w	r2, r7, #12
 800752e:	4611      	mov	r1, r2
 8007530:	4618      	mov	r0, r3
 8007532:	f00e fc50 	bl	8015dd6 <sys_arch_mbox_tryfetch>
 8007536:	4603      	mov	r3, r0
 8007538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753c:	d10a      	bne.n	8007554 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800753e:	f06f 0306 	mvn.w	r3, #6
 8007542:	e02a      	b.n	800759a <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3314      	adds	r3, #20
 8007548:	f107 010c 	add.w	r1, r7, #12
 800754c:	2200      	movs	r2, #0
 800754e:	4618      	mov	r0, r3
 8007550:	f00e fc02 	bl	8015d58 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <netconn_accept+0xcc>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	2200      	movs	r2, #0
 8007562:	2101      	movs	r1, #1
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f107 0213 	add.w	r2, r7, #19
 800756e:	4611      	mov	r1, r2
 8007570:	4618      	mov	r0, r3
 8007572:	f000 fb9f 	bl	8007cb4 <lwip_netconn_is_err_msg>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800757c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007580:	e00b      	b.n	800759a <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8007588:	f06f 030e 	mvn.w	r3, #14
 800758c:	e005      	b.n	800759a <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007598:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	08017678 	.word	0x08017678
 80075a8:	08017850 	.word	0x08017850
 80075ac:	080176d0 	.word	0x080176d0
 80075b0:	08017870 	.word	0x08017870

080075b4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b088      	sub	sp, #32
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	4613      	mov	r3, r2
 80075c0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d109      	bne.n	80075e0 <netconn_recv_data+0x2c>
 80075cc:	4b58      	ldr	r3, [pc, #352]	; (8007730 <netconn_recv_data+0x17c>)
 80075ce:	f44f 7212 	mov.w	r2, #584	; 0x248
 80075d2:	4958      	ldr	r1, [pc, #352]	; (8007734 <netconn_recv_data+0x180>)
 80075d4:	4858      	ldr	r0, [pc, #352]	; (8007738 <netconn_recv_data+0x184>)
 80075d6:	f00e fdf1 	bl	80161bc <iprintf>
 80075da:	f06f 030f 	mvn.w	r3, #15
 80075de:	e0a2      	b.n	8007726 <netconn_recv_data+0x172>
  *new_buf = NULL;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d109      	bne.n	8007600 <netconn_recv_data+0x4c>
 80075ec:	4b50      	ldr	r3, [pc, #320]	; (8007730 <netconn_recv_data+0x17c>)
 80075ee:	f240 224a 	movw	r2, #586	; 0x24a
 80075f2:	4952      	ldr	r1, [pc, #328]	; (800773c <netconn_recv_data+0x188>)
 80075f4:	4850      	ldr	r0, [pc, #320]	; (8007738 <netconn_recv_data+0x184>)
 80075f6:	f00e fde1 	bl	80161bc <iprintf>
 80075fa:	f06f 030f 	mvn.w	r3, #15
 80075fe:	e092      	b.n	8007726 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	3310      	adds	r3, #16
 8007604:	4618      	mov	r0, r3
 8007606:	f00e fc02 	bl	8015e0e <sys_mbox_valid>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10e      	bne.n	800762e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 fb01 	bl	8007c18 <netconn_err>
 8007616:	4603      	mov	r3, r0
 8007618:	777b      	strb	r3, [r7, #29]
    if (err != ERR_OK) {
 800761a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007622:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007626:	e07e      	b.n	8007726 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007628:	f06f 030a 	mvn.w	r3, #10
 800762c:	e07b      	b.n	8007726 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	7f1b      	ldrb	r3, [r3, #28]
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10f      	bne.n	800765a <netconn_recv_data+0xa6>
 800763a:	79fb      	ldrb	r3, [r7, #7]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	7f1b      	ldrb	r3, [r3, #28]
 8007648:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d023      	beq.n	80076a2 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3310      	adds	r3, #16
 800765e:	f107 0218 	add.w	r2, r7, #24
 8007662:	4611      	mov	r1, r2
 8007664:	4618      	mov	r0, r3
 8007666:	f00e fbb6 	bl	8015dd6 <sys_arch_mbox_tryfetch>
 800766a:	4603      	mov	r3, r0
 800766c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007670:	d11f      	bne.n	80076b2 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 fad0 	bl	8007c18 <netconn_err>
 8007678:	4603      	mov	r3, r0
 800767a:	773b      	strb	r3, [r7, #28]
      if (err != ERR_OK) {
 800767c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8007684:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007688:	e04d      	b.n	8007726 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	7f1b      	ldrb	r3, [r3, #28]
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <netconn_recv_data+0xe8>
        return ERR_CONN;
 8007696:	f06f 030a 	mvn.w	r3, #10
 800769a:	e044      	b.n	8007726 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800769c:	f06f 0306 	mvn.w	r3, #6
 80076a0:	e041      	b.n	8007726 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	3310      	adds	r3, #16
 80076a6:	f107 0118 	add.w	r1, r7, #24
 80076aa:	2200      	movs	r2, #0
 80076ac:	4618      	mov	r0, r3
 80076ae:	f00e fb53 	bl	8015d58 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076ba:	2b10      	cmp	r3, #16
 80076bc:	d117      	bne.n	80076ee <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	f107 0217 	add.w	r2, r7, #23
 80076c4:	4611      	mov	r1, r2
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 faf4 	bl	8007cb4 <lwip_netconn_is_err_msg>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d009      	beq.n	80076e6 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80076d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076d6:	f113 0f0f 	cmn.w	r3, #15
 80076da:	d101      	bne.n	80076e0 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	e022      	b.n	8007726 <netconn_recv_data+0x172>
      }
      return err;
 80076e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076e4:	e01f      	b.n	8007726 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	891b      	ldrh	r3, [r3, #8]
 80076ea:	83fb      	strh	r3, [r7, #30]
 80076ec:	e00d      	b.n	800770a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d106      	bne.n	8007702 <netconn_recv_data+0x14e>
 80076f4:	4b0e      	ldr	r3, [pc, #56]	; (8007730 <netconn_recv_data+0x17c>)
 80076f6:	f240 2291 	movw	r2, #657	; 0x291
 80076fa:	4911      	ldr	r1, [pc, #68]	; (8007740 <netconn_recv_data+0x18c>)
 80076fc:	480e      	ldr	r0, [pc, #56]	; (8007738 <netconn_recv_data+0x184>)
 80076fe:	f00e fd5d 	bl	80161bc <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	891b      	ldrh	r3, [r3, #8]
 8007708:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	2b00      	cmp	r3, #0
 8007710:	d005      	beq.n	800771e <netconn_recv_data+0x16a>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	8bfa      	ldrh	r2, [r7, #30]
 8007718:	2101      	movs	r1, #1
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3720      	adds	r7, #32
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	08017678 	.word	0x08017678
 8007734:	08017890 	.word	0x08017890
 8007738:	080176d0 	.word	0x080176d0
 800773c:	080178b0 	.word	0x080178b0
 8007740:	080178cc 	.word	0x080178cc

08007744 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d005      	beq.n	8007762 <netconn_tcp_recvd_msg+0x1e>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800775e:	2b10      	cmp	r3, #16
 8007760:	d009      	beq.n	8007776 <netconn_tcp_recvd_msg+0x32>
 8007762:	4b0c      	ldr	r3, [pc, #48]	; (8007794 <netconn_tcp_recvd_msg+0x50>)
 8007764:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8007768:	490b      	ldr	r1, [pc, #44]	; (8007798 <netconn_tcp_recvd_msg+0x54>)
 800776a:	480c      	ldr	r0, [pc, #48]	; (800779c <netconn_tcp_recvd_msg+0x58>)
 800776c:	f00e fd26 	bl	80161bc <iprintf>
 8007770:	f06f 030f 	mvn.w	r3, #15
 8007774:	e00a      	b.n	800778c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	4806      	ldr	r0, [pc, #24]	; (80077a0 <netconn_tcp_recvd_msg+0x5c>)
 8007786:	f7ff fcfb 	bl	8007180 <netconn_apimsg>
 800778a:	4603      	mov	r3, r0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	08017678 	.word	0x08017678
 8007798:	080178d8 	.word	0x080178d8
 800779c:	080176d0 	.word	0x080176d0
 80077a0:	08008e59 	.word	0x08008e59

080077a4 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08c      	sub	sp, #48	; 0x30
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d005      	beq.n	80077c0 <netconn_tcp_recvd+0x1c>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077bc:	2b10      	cmp	r3, #16
 80077be:	d009      	beq.n	80077d4 <netconn_tcp_recvd+0x30>
 80077c0:	4b0c      	ldr	r3, [pc, #48]	; (80077f4 <netconn_tcp_recvd+0x50>)
 80077c2:	f240 22b6 	movw	r2, #694	; 0x2b6
 80077c6:	490c      	ldr	r1, [pc, #48]	; (80077f8 <netconn_tcp_recvd+0x54>)
 80077c8:	480c      	ldr	r0, [pc, #48]	; (80077fc <netconn_tcp_recvd+0x58>)
 80077ca:	f00e fcf7 	bl	80161bc <iprintf>
 80077ce:	f06f 030f 	mvn.w	r3, #15
 80077d2:	e00b      	b.n	80077ec <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 80077d4:	f107 030c 	add.w	r3, r7, #12
 80077d8:	461a      	mov	r2, r3
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff ffb1 	bl	8007744 <netconn_tcp_recvd_msg>
 80077e2:	4603      	mov	r3, r0
 80077e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 80077e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3730      	adds	r7, #48	; 0x30
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	08017678 	.word	0x08017678
 80077f8:	080178d8 	.word	0x080178d8
 80077fc:	080176d0 	.word	0x080176d0

08007800 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b090      	sub	sp, #64	; 0x40
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	4613      	mov	r3, r2
 800780c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3310      	adds	r3, #16
 8007812:	4618      	mov	r0, r3
 8007814:	f00e fafb 	bl	8015e0e <sys_mbox_valid>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d102      	bne.n	8007824 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800781e:	f06f 030a 	mvn.w	r3, #10
 8007822:	e06c      	b.n	80078fe <netconn_recv_data_tcp+0xfe>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	7f1b      	ldrb	r3, [r3, #28]
 8007828:	b25b      	sxtb	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	da07      	bge.n	800783e <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	7f1b      	ldrb	r3, [r3, #28]
 8007832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007836:	b2da      	uxtb	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800783c:	e038      	b.n	80078b0 <netconn_recv_data_tcp+0xb0>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	461a      	mov	r2, r3
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f7ff feb5 	bl	80075b4 <netconn_recv_data>
 800784a:	4603      	mov	r3, r0
 800784c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8007850:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8007858:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800785c:	e04f      	b.n	80078fe <netconn_recv_data_tcp+0xfe>
  }
  buf = *new_buf;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10e      	bne.n	800788c <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <netconn_recv_data_tcp+0x7a>
 8007874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007876:	891b      	ldrh	r3, [r3, #8]
 8007878:	e000      	b.n	800787c <netconn_recv_data_tcp+0x7c>
 800787a:	2301      	movs	r3, #1
 800787c:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800787e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007880:	f107 0214 	add.w	r2, r7, #20
 8007884:	4619      	mov	r1, r3
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7ff ff5c 	bl	8007744 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800788c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788e:	2b00      	cmp	r3, #0
 8007890:	d133      	bne.n	80078fa <netconn_recv_data_tcp+0xfa>
    if (apiflags & NETCONN_NOFIN) {
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	f003 0310 	and.w	r3, r3, #16
 8007898:	2b00      	cmp	r3, #0
 800789a:	d009      	beq.n	80078b0 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	7f1b      	ldrb	r3, [r3, #28]
 80078a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80078aa:	f06f 0306 	mvn.w	r3, #6
 80078ae:	e026      	b.n	80078fe <netconn_recv_data_tcp+0xfe>
    } else {
handle_fin:
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d005      	beq.n	80078c4 <netconn_recv_data_tcp+0xc4>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	2200      	movs	r2, #0
 80078be:	2101      	movs	r1, #1
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10f      	bne.n	80078ec <netconn_recv_data_tcp+0xec>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 f9a3 	bl	8007c18 <netconn_err>
 80078d2:	4603      	mov	r3, r0
 80078d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80078d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <netconn_recv_data_tcp+0xe6>
          return err;
 80078e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80078e4:	e00b      	b.n	80078fe <netconn_recv_data_tcp+0xfe>
        }
        return ERR_RST;
 80078e6:	f06f 030d 	mvn.w	r3, #13
 80078ea:	e008      	b.n	80078fe <netconn_recv_data_tcp+0xfe>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80078ec:	2101      	movs	r1, #1
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 f962 	bl	8007bb8 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80078f4:	f06f 030e 	mvn.w	r3, #14
 80078f8:	e001      	b.n	80078fe <netconn_recv_data_tcp+0xfe>
    }
  }
  return err;
 80078fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3740      	adds	r7, #64	; 0x40
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <netconn_recv_tcp_pbuf_flags+0x20>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007924:	2b10      	cmp	r3, #16
 8007926:	d009      	beq.n	800793c <netconn_recv_tcp_pbuf_flags+0x34>
 8007928:	4b0a      	ldr	r3, [pc, #40]	; (8007954 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800792a:	f240 3226 	movw	r2, #806	; 0x326
 800792e:	490a      	ldr	r1, [pc, #40]	; (8007958 <netconn_recv_tcp_pbuf_flags+0x50>)
 8007930:	480a      	ldr	r0, [pc, #40]	; (800795c <netconn_recv_tcp_pbuf_flags+0x54>)
 8007932:	f00e fc43 	bl	80161bc <iprintf>
 8007936:	f06f 030f 	mvn.w	r3, #15
 800793a:	e006      	b.n	800794a <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800793c:	79fb      	ldrb	r3, [r7, #7]
 800793e:	461a      	mov	r2, r3
 8007940:	68b9      	ldr	r1, [r7, #8]
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff ff5c 	bl	8007800 <netconn_recv_data_tcp>
 8007948:	4603      	mov	r3, r0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	08017678 	.word	0x08017678
 8007958:	080178d8 	.word	0x080178d8
 800795c:	080176d0 	.word	0x080176d0

08007960 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	4613      	mov	r3, r2
 800796c:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d005      	beq.n	8007980 <netconn_recv_udp_raw_netbuf_flags+0x20>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800797c:	2b10      	cmp	r3, #16
 800797e:	d109      	bne.n	8007994 <netconn_recv_udp_raw_netbuf_flags+0x34>
 8007980:	4b0a      	ldr	r3, [pc, #40]	; (80079ac <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 8007982:	f240 324d 	movw	r2, #845	; 0x34d
 8007986:	490a      	ldr	r1, [pc, #40]	; (80079b0 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8007988:	480a      	ldr	r0, [pc, #40]	; (80079b4 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800798a:	f00e fc17 	bl	80161bc <iprintf>
 800798e:	f06f 030f 	mvn.w	r3, #15
 8007992:	e006      	b.n	80079a2 <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	461a      	mov	r2, r3
 8007998:	68b9      	ldr	r1, [r7, #8]
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f7ff fe0a 	bl	80075b4 <netconn_recv_data>
 80079a0:	4603      	mov	r3, r0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	08017678 	.word	0x08017678
 80079b0:	080178fc 	.word	0x080178fc
 80079b4:	080176d0 	.word	0x080176d0

080079b8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08c      	sub	sp, #48	; 0x30
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d109      	bne.n	80079dc <netconn_send+0x24>
 80079c8:	4b0e      	ldr	r3, [pc, #56]	; (8007a04 <netconn_send+0x4c>)
 80079ca:	f240 32b2 	movw	r2, #946	; 0x3b2
 80079ce:	490e      	ldr	r1, [pc, #56]	; (8007a08 <netconn_send+0x50>)
 80079d0:	480e      	ldr	r0, [pc, #56]	; (8007a0c <netconn_send+0x54>)
 80079d2:	f00e fbf3 	bl	80161bc <iprintf>
 80079d6:	f06f 030f 	mvn.w	r3, #15
 80079da:	e00e      	b.n	80079fa <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 80079e4:	f107 030c 	add.w	r3, r7, #12
 80079e8:	4619      	mov	r1, r3
 80079ea:	4809      	ldr	r0, [pc, #36]	; (8007a10 <netconn_send+0x58>)
 80079ec:	f7ff fbc8 	bl	8007180 <netconn_apimsg>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80079f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3730      	adds	r7, #48	; 0x30
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	08017678 	.word	0x08017678
 8007a08:	08017934 	.word	0x08017934
 8007a0c:	080176d0 	.word	0x080176d0
 8007a10:	08008dbd 	.word	0x08008dbd

08007a14 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af02      	add	r7, sp, #8
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8007a2a:	78fa      	ldrb	r2, [r7, #3]
 8007a2c:	f107 0110 	add.w	r1, r7, #16
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	4613      	mov	r3, r2
 8007a36:	2201      	movs	r2, #1
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f805 	bl	8007a48 <netconn_write_vectors_partly>
 8007a3e:	4603      	mov	r3, r0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b092      	sub	sp, #72	; 0x48
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	4611      	mov	r1, r2
 8007a54:	461a      	mov	r2, r3
 8007a56:	460b      	mov	r3, r1
 8007a58:	80fb      	strh	r3, [r7, #6]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d109      	bne.n	8007a78 <netconn_write_vectors_partly+0x30>
 8007a64:	4b4e      	ldr	r3, [pc, #312]	; (8007ba0 <netconn_write_vectors_partly+0x158>)
 8007a66:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007a6a:	494e      	ldr	r1, [pc, #312]	; (8007ba4 <netconn_write_vectors_partly+0x15c>)
 8007a6c:	484e      	ldr	r0, [pc, #312]	; (8007ba8 <netconn_write_vectors_partly+0x160>)
 8007a6e:	f00e fba5 	bl	80161bc <iprintf>
 8007a72:	f06f 030f 	mvn.w	r3, #15
 8007a76:	e08e      	b.n	8007b96 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a80:	2b10      	cmp	r3, #16
 8007a82:	d009      	beq.n	8007a98 <netconn_write_vectors_partly+0x50>
 8007a84:	4b46      	ldr	r3, [pc, #280]	; (8007ba0 <netconn_write_vectors_partly+0x158>)
 8007a86:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8007a8a:	4948      	ldr	r1, [pc, #288]	; (8007bac <netconn_write_vectors_partly+0x164>)
 8007a8c:	4846      	ldr	r0, [pc, #280]	; (8007ba8 <netconn_write_vectors_partly+0x160>)
 8007a8e:	f00e fb95 	bl	80161bc <iprintf>
 8007a92:	f06f 0305 	mvn.w	r3, #5
 8007a96:	e07e      	b.n	8007b96 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	7f1b      	ldrb	r3, [r3, #28]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d104      	bne.n	8007aae <netconn_write_vectors_partly+0x66>
 8007aa4:	797b      	ldrb	r3, [r7, #5]
 8007aa6:	f003 0304 	and.w	r3, r3, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <netconn_write_vectors_partly+0x6a>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <netconn_write_vectors_partly+0x6c>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8007ab8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d005      	beq.n	8007acc <netconn_write_vectors_partly+0x84>
 8007ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d102      	bne.n	8007acc <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8007ac6:	f06f 0305 	mvn.w	r3, #5
 8007aca:	e064      	b.n	8007b96 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8007ad4:	e015      	b.n	8007b02 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8007ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	4413      	add	r3, r2
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ae2:	4413      	add	r3, r2
 8007ae4:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8007ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae8:	00db      	lsls	r3, r3, #3
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	4413      	add	r3, r2
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d902      	bls.n	8007afc <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8007af6:	f06f 0305 	mvn.w	r3, #5
 8007afa:	e04c      	b.n	8007b96 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8007afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007afe:	3301      	adds	r3, #1
 8007b00:	643b      	str	r3, [r7, #64]	; 0x40
 8007b02:	88fa      	ldrh	r2, [r7, #6]
 8007b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b06:	429a      	cmp	r2, r3
 8007b08:	dce5      	bgt.n	8007ad6 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8007b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	e040      	b.n	8007b96 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8007b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	da0a      	bge.n	8007b30 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8007b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8007b20:	f06f 0305 	mvn.w	r3, #5
 8007b24:	e037      	b.n	8007b96 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8007b26:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007b2a:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2e:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8007b38:	88fb      	ldrh	r3, [r7, #6]
 8007b3a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8007b40:	797b      	ldrb	r3, [r7, #5]
 8007b42:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8007b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b48:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8007b4e:	f107 0314 	add.w	r3, r7, #20
 8007b52:	4619      	mov	r1, r3
 8007b54:	4816      	ldr	r0, [pc, #88]	; (8007bb0 <netconn_write_vectors_partly+0x168>)
 8007b56:	f7ff fb13 	bl	8007180 <netconn_apimsg>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8007b60:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d114      	bne.n	8007b92 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8007b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8007b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b72:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8007b74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10a      	bne.n	8007b92 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8007b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d006      	beq.n	8007b92 <netconn_write_vectors_partly+0x14a>
 8007b84:	4b06      	ldr	r3, [pc, #24]	; (8007ba0 <netconn_write_vectors_partly+0x158>)
 8007b86:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007b8a:	490a      	ldr	r1, [pc, #40]	; (8007bb4 <netconn_write_vectors_partly+0x16c>)
 8007b8c:	4806      	ldr	r0, [pc, #24]	; (8007ba8 <netconn_write_vectors_partly+0x160>)
 8007b8e:	f00e fb15 	bl	80161bc <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8007b92:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3748      	adds	r7, #72	; 0x48
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	08017678 	.word	0x08017678
 8007ba4:	08017950 	.word	0x08017950
 8007ba8:	080176d0 	.word	0x080176d0
 8007bac:	0801796c 	.word	0x0801796c
 8007bb0:	0800925d 	.word	0x0800925d
 8007bb4:	08017990 	.word	0x08017990

08007bb8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08c      	sub	sp, #48	; 0x30
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d109      	bne.n	8007bde <netconn_close_shutdown+0x26>
 8007bca:	4b0f      	ldr	r3, [pc, #60]	; (8007c08 <netconn_close_shutdown+0x50>)
 8007bcc:	f240 4247 	movw	r2, #1095	; 0x447
 8007bd0:	490e      	ldr	r1, [pc, #56]	; (8007c0c <netconn_close_shutdown+0x54>)
 8007bd2:	480f      	ldr	r0, [pc, #60]	; (8007c10 <netconn_close_shutdown+0x58>)
 8007bd4:	f00e faf2 	bl	80161bc <iprintf>
 8007bd8:	f06f 030f 	mvn.w	r3, #15
 8007bdc:	e010      	b.n	8007c00 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007be6:	2329      	movs	r3, #41	; 0x29
 8007be8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8007bea:	f107 030c 	add.w	r3, r7, #12
 8007bee:	4619      	mov	r1, r3
 8007bf0:	4808      	ldr	r0, [pc, #32]	; (8007c14 <netconn_close_shutdown+0x5c>)
 8007bf2:	f7ff fac5 	bl	8007180 <netconn_apimsg>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007bfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3730      	adds	r7, #48	; 0x30
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	08017678 	.word	0x08017678
 8007c0c:	080179b4 	.word	0x080179b4
 8007c10:	080176d0 	.word	0x080176d0
 8007c14:	08009481 	.word	0x08009481

08007c18 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <netconn_err+0x12>
    return ERR_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	e00d      	b.n	8007c46 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8007c2a:	f00e fa0b 	bl	8016044 <sys_arch_protect>
 8007c2e:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	7a1b      	ldrb	r3, [r3, #8]
 8007c34:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f00e fa0f 	bl	8016060 <sys_arch_unprotect>
  return err;
 8007c42:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
	...

08007c50 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	4603      	mov	r3, r0
 8007c58:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8007c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c5e:	f113 0f0e 	cmn.w	r3, #14
 8007c62:	d008      	beq.n	8007c76 <lwip_netconn_err_to_msg+0x26>
 8007c64:	f113 0f0d 	cmn.w	r3, #13
 8007c68:	d003      	beq.n	8007c72 <lwip_netconn_err_to_msg+0x22>
 8007c6a:	f113 0f0f 	cmn.w	r3, #15
 8007c6e:	d004      	beq.n	8007c7a <lwip_netconn_err_to_msg+0x2a>
 8007c70:	e005      	b.n	8007c7e <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8007c72:	4b0a      	ldr	r3, [pc, #40]	; (8007c9c <lwip_netconn_err_to_msg+0x4c>)
 8007c74:	e00e      	b.n	8007c94 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8007c76:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <lwip_netconn_err_to_msg+0x50>)
 8007c78:	e00c      	b.n	8007c94 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8007c7a:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <lwip_netconn_err_to_msg+0x54>)
 8007c7c:	e00a      	b.n	8007c94 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8007c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d005      	beq.n	8007c92 <lwip_netconn_err_to_msg+0x42>
 8007c86:	4b08      	ldr	r3, [pc, #32]	; (8007ca8 <lwip_netconn_err_to_msg+0x58>)
 8007c88:	227d      	movs	r2, #125	; 0x7d
 8007c8a:	4908      	ldr	r1, [pc, #32]	; (8007cac <lwip_netconn_err_to_msg+0x5c>)
 8007c8c:	4808      	ldr	r0, [pc, #32]	; (8007cb0 <lwip_netconn_err_to_msg+0x60>)
 8007c8e:	f00e fa95 	bl	80161bc <iprintf>
      return NULL;
 8007c92:	2300      	movs	r3, #0
  }
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	0801af30 	.word	0x0801af30
 8007ca0:	0801af31 	.word	0x0801af31
 8007ca4:	0801af32 	.word	0x0801af32
 8007ca8:	080179d0 	.word	0x080179d0
 8007cac:	08017a04 	.word	0x08017a04
 8007cb0:	08017a14 	.word	0x08017a14

08007cb4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d105      	bne.n	8007cd0 <lwip_netconn_is_err_msg+0x1c>
 8007cc4:	4b12      	ldr	r3, [pc, #72]	; (8007d10 <lwip_netconn_is_err_msg+0x5c>)
 8007cc6:	2285      	movs	r2, #133	; 0x85
 8007cc8:	4912      	ldr	r1, [pc, #72]	; (8007d14 <lwip_netconn_is_err_msg+0x60>)
 8007cca:	4813      	ldr	r0, [pc, #76]	; (8007d18 <lwip_netconn_is_err_msg+0x64>)
 8007ccc:	f00e fa76 	bl	80161bc <iprintf>

  if (msg == &netconn_aborted) {
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a12      	ldr	r2, [pc, #72]	; (8007d1c <lwip_netconn_is_err_msg+0x68>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d104      	bne.n	8007ce2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	22f3      	movs	r2, #243	; 0xf3
 8007cdc:	701a      	strb	r2, [r3, #0]
    return 1;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e012      	b.n	8007d08 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a0e      	ldr	r2, [pc, #56]	; (8007d20 <lwip_netconn_is_err_msg+0x6c>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d104      	bne.n	8007cf4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	22f2      	movs	r2, #242	; 0xf2
 8007cee:	701a      	strb	r2, [r3, #0]
    return 1;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e009      	b.n	8007d08 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a0b      	ldr	r2, [pc, #44]	; (8007d24 <lwip_netconn_is_err_msg+0x70>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d104      	bne.n	8007d06 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	22f1      	movs	r2, #241	; 0xf1
 8007d00:	701a      	strb	r2, [r3, #0]
    return 1;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e000      	b.n	8007d08 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	080179d0 	.word	0x080179d0
 8007d14:	08017a3c 	.word	0x08017a3c
 8007d18:	08017a14 	.word	0x08017a14
 8007d1c:	0801af30 	.word	0x0801af30
 8007d20:	0801af31 	.word	0x0801af31
 8007d24:	0801af32 	.word	0x0801af32

08007d28 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b088      	sub	sp, #32
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d105      	bne.n	8007d48 <recv_udp+0x20>
 8007d3c:	4b34      	ldr	r3, [pc, #208]	; (8007e10 <recv_udp+0xe8>)
 8007d3e:	22e5      	movs	r2, #229	; 0xe5
 8007d40:	4934      	ldr	r1, [pc, #208]	; (8007e14 <recv_udp+0xec>)
 8007d42:	4835      	ldr	r0, [pc, #212]	; (8007e18 <recv_udp+0xf0>)
 8007d44:	f00e fa3a 	bl	80161bc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d105      	bne.n	8007d5a <recv_udp+0x32>
 8007d4e:	4b30      	ldr	r3, [pc, #192]	; (8007e10 <recv_udp+0xe8>)
 8007d50:	22e6      	movs	r2, #230	; 0xe6
 8007d52:	4932      	ldr	r1, [pc, #200]	; (8007e1c <recv_udp+0xf4>)
 8007d54:	4830      	ldr	r0, [pc, #192]	; (8007e18 <recv_udp+0xf0>)
 8007d56:	f00e fa31 	bl	80161bc <iprintf>
  conn = (struct netconn *)arg;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d103      	bne.n	8007d6c <recv_udp+0x44>
    pbuf_free(p);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f006 fd43 	bl	800e7f0 <pbuf_free>
    return;
 8007d6a:	e04d      	b.n	8007e08 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d005      	beq.n	8007d82 <recv_udp+0x5a>
 8007d76:	4b26      	ldr	r3, [pc, #152]	; (8007e10 <recv_udp+0xe8>)
 8007d78:	22ee      	movs	r2, #238	; 0xee
 8007d7a:	4929      	ldr	r1, [pc, #164]	; (8007e20 <recv_udp+0xf8>)
 8007d7c:	4826      	ldr	r0, [pc, #152]	; (8007e18 <recv_udp+0xf0>)
 8007d7e:	f00e fa1d 	bl	80161bc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	3310      	adds	r3, #16
 8007d86:	4618      	mov	r0, r3
 8007d88:	f00e f841 	bl	8015e0e <sys_mbox_valid>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d103      	bne.n	8007d9a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f006 fd2c 	bl	800e7f0 <pbuf_free>
    return;
 8007d98:	e036      	b.n	8007e08 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007d9a:	2006      	movs	r0, #6
 8007d9c:	f005 fe02 	bl	800d9a4 <memp_malloc>
 8007da0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d103      	bne.n	8007db0 <recv_udp+0x88>
    pbuf_free(p);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f006 fd21 	bl	800e7f0 <pbuf_free>
    return;
 8007dae:	e02b      	b.n	8007e08 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d002      	beq.n	8007dc8 <recv_udp+0xa0>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	e000      	b.n	8007dca <recv_udp+0xa2>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007dd2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	891b      	ldrh	r3, [r3, #8]
 8007dd8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	3310      	adds	r3, #16
 8007dde:	69b9      	ldr	r1, [r7, #24]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f00d ff9f 	bl	8015d24 <sys_mbox_trypost>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <recv_udp+0xcc>
    netbuf_delete(buf);
 8007dec:	69b8      	ldr	r0, [r7, #24]
 8007dee:	f001 fbf1 	bl	80095d4 <netbuf_delete>
    return;
 8007df2:	e009      	b.n	8007e08 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d005      	beq.n	8007e08 <recv_udp+0xe0>
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	8afa      	ldrh	r2, [r7, #22]
 8007e02:	2100      	movs	r1, #0
 8007e04:	69f8      	ldr	r0, [r7, #28]
 8007e06:	4798      	blx	r3
  }
}
 8007e08:	3720      	adds	r7, #32
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	080179d0 	.word	0x080179d0
 8007e14:	08017a48 	.word	0x08017a48
 8007e18:	08017a14 	.word	0x08017a14
 8007e1c:	08017a6c 	.word	0x08017a6c
 8007e20:	08017a8c 	.word	0x08017a8c

08007e24 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d106      	bne.n	8007e46 <recv_tcp+0x22>
 8007e38:	4b36      	ldr	r3, [pc, #216]	; (8007f14 <recv_tcp+0xf0>)
 8007e3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007e3e:	4936      	ldr	r1, [pc, #216]	; (8007f18 <recv_tcp+0xf4>)
 8007e40:	4836      	ldr	r0, [pc, #216]	; (8007f1c <recv_tcp+0xf8>)
 8007e42:	f00e f9bb 	bl	80161bc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d106      	bne.n	8007e5a <recv_tcp+0x36>
 8007e4c:	4b31      	ldr	r3, [pc, #196]	; (8007f14 <recv_tcp+0xf0>)
 8007e4e:	f240 122d 	movw	r2, #301	; 0x12d
 8007e52:	4933      	ldr	r1, [pc, #204]	; (8007f20 <recv_tcp+0xfc>)
 8007e54:	4831      	ldr	r0, [pc, #196]	; (8007f1c <recv_tcp+0xf8>)
 8007e56:	f00e f9b1 	bl	80161bc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8007e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d006      	beq.n	8007e70 <recv_tcp+0x4c>
 8007e62:	4b2c      	ldr	r3, [pc, #176]	; (8007f14 <recv_tcp+0xf0>)
 8007e64:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8007e68:	492e      	ldr	r1, [pc, #184]	; (8007f24 <recv_tcp+0x100>)
 8007e6a:	482c      	ldr	r0, [pc, #176]	; (8007f1c <recv_tcp+0xf8>)
 8007e6c:	f00e f9a6 	bl	80161bc <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d102      	bne.n	8007e80 <recv_tcp+0x5c>
    return ERR_VAL;
 8007e7a:	f06f 0305 	mvn.w	r3, #5
 8007e7e:	e045      	b.n	8007f0c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d006      	beq.n	8007e98 <recv_tcp+0x74>
 8007e8a:	4b22      	ldr	r3, [pc, #136]	; (8007f14 <recv_tcp+0xf0>)
 8007e8c:	f240 1235 	movw	r2, #309	; 0x135
 8007e90:	4925      	ldr	r1, [pc, #148]	; (8007f28 <recv_tcp+0x104>)
 8007e92:	4822      	ldr	r0, [pc, #136]	; (8007f1c <recv_tcp+0xf8>)
 8007e94:	f00e f992 	bl	80161bc <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	3310      	adds	r3, #16
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f00d ffb6 	bl	8015e0e <sys_mbox_valid>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10d      	bne.n	8007ec4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d008      	beq.n	8007ec0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	891b      	ldrh	r3, [r3, #8]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	68b8      	ldr	r0, [r7, #8]
 8007eb6:	f007 fc5b 	bl	800f770 <tcp_recved>
      pbuf_free(p);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f006 fc98 	bl	800e7f0 <pbuf_free>
    }
    return ERR_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	e023      	b.n	8007f0c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d005      	beq.n	8007ed6 <recv_tcp+0xb2>
    msg = p;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	891b      	ldrh	r3, [r3, #8]
 8007ed2:	83fb      	strh	r3, [r7, #30]
 8007ed4:	e003      	b.n	8007ede <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8007ed6:	4b15      	ldr	r3, [pc, #84]	; (8007f2c <recv_tcp+0x108>)
 8007ed8:	61bb      	str	r3, [r7, #24]
    len = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	3310      	adds	r3, #16
 8007ee2:	69b9      	ldr	r1, [r7, #24]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f00d ff1d 	bl	8015d24 <sys_mbox_trypost>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8007ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef4:	e00a      	b.n	8007f0c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d005      	beq.n	8007f0a <recv_tcp+0xe6>
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	8bfa      	ldrh	r2, [r7, #30]
 8007f04:	2100      	movs	r1, #0
 8007f06:	6978      	ldr	r0, [r7, #20]
 8007f08:	4798      	blx	r3
  }

  return ERR_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3720      	adds	r7, #32
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	080179d0 	.word	0x080179d0
 8007f18:	08017aac 	.word	0x08017aac
 8007f1c:	08017a14 	.word	0x08017a14
 8007f20:	08017ad0 	.word	0x08017ad0
 8007f24:	08017af0 	.word	0x08017af0
 8007f28:	08017b08 	.word	0x08017b08
 8007f2c:	0801af32 	.word	0x0801af32

08007f30 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d106      	bne.n	8007f52 <poll_tcp+0x22>
 8007f44:	4b29      	ldr	r3, [pc, #164]	; (8007fec <poll_tcp+0xbc>)
 8007f46:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8007f4a:	4929      	ldr	r1, [pc, #164]	; (8007ff0 <poll_tcp+0xc0>)
 8007f4c:	4829      	ldr	r0, [pc, #164]	; (8007ff4 <poll_tcp+0xc4>)
 8007f4e:	f00e f935 	bl	80161bc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	785b      	ldrb	r3, [r3, #1]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d104      	bne.n	8007f64 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 ffb1 	bl	8008ec4 <lwip_netconn_do_writemore>
 8007f62:	e016      	b.n	8007f92 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	785b      	ldrb	r3, [r3, #1]
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	d112      	bne.n	8007f92 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00a      	beq.n	8007f8a <poll_tcp+0x5a>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	7a5b      	ldrb	r3, [r3, #9]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d005      	beq.n	8007f8a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	7a5a      	ldrb	r2, [r3, #9]
 8007f84:	3a01      	subs	r2, #1
 8007f86:	b2d2      	uxtb	r2, r2
 8007f88:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 fbf7 	bl	8008780 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	7f1b      	ldrb	r3, [r3, #28]
 8007f96:	f003 0310 	and.w	r3, r3, #16
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d021      	beq.n	8007fe2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d01d      	beq.n	8007fe2 <poll_tcp+0xb2>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007fae:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007fb2:	d316      	bcc.n	8007fe2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	d810      	bhi.n	8007fe2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	7f1b      	ldrb	r3, [r3, #28]
 8007fc4:	f023 0310 	bic.w	r3, r3, #16
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d005      	beq.n	8007fe2 <poll_tcp+0xb2>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2102      	movs	r1, #2
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	080179d0 	.word	0x080179d0
 8007ff0:	08017b28 	.word	0x08017b28
 8007ff4:	08017a14 	.word	0x08017a14

08007ff8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d106      	bne.n	800801e <sent_tcp+0x26>
 8008010:	4b20      	ldr	r3, [pc, #128]	; (8008094 <sent_tcp+0x9c>)
 8008012:	f240 1293 	movw	r2, #403	; 0x193
 8008016:	4920      	ldr	r1, [pc, #128]	; (8008098 <sent_tcp+0xa0>)
 8008018:	4820      	ldr	r0, [pc, #128]	; (800809c <sent_tcp+0xa4>)
 800801a:	f00e f8cf 	bl	80161bc <iprintf>

  if (conn) {
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d032      	beq.n	800808a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	785b      	ldrb	r3, [r3, #1]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d104      	bne.n	8008036 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800802c:	2101      	movs	r1, #1
 800802e:	6978      	ldr	r0, [r7, #20]
 8008030:	f000 ff48 	bl	8008ec4 <lwip_netconn_do_writemore>
 8008034:	e007      	b.n	8008046 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	2b04      	cmp	r3, #4
 800803c:	d103      	bne.n	8008046 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800803e:	2101      	movs	r1, #1
 8008040:	6978      	ldr	r0, [r7, #20]
 8008042:	f000 fb9d 	bl	8008780 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d01d      	beq.n	800808a <sent_tcp+0x92>
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008056:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800805a:	d316      	bcc.n	800808a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008064:	2b04      	cmp	r3, #4
 8008066:	d810      	bhi.n	800808a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	7f1b      	ldrb	r3, [r3, #28]
 800806c:	f023 0310 	bic.w	r3, r3, #16
 8008070:	b2da      	uxtb	r2, r3
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <sent_tcp+0x92>
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008082:	88fa      	ldrh	r2, [r7, #6]
 8008084:	2102      	movs	r1, #2
 8008086:	6978      	ldr	r0, [r7, #20]
 8008088:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	080179d0 	.word	0x080179d0
 8008098:	08017b28 	.word	0x08017b28
 800809c:	08017a14 	.word	0x08017a14

080080a0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d106      	bne.n	80080c4 <err_tcp+0x24>
 80080b6:	4b5f      	ldr	r3, [pc, #380]	; (8008234 <err_tcp+0x194>)
 80080b8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80080bc:	495e      	ldr	r1, [pc, #376]	; (8008238 <err_tcp+0x198>)
 80080be:	485f      	ldr	r0, [pc, #380]	; (800823c <err_tcp+0x19c>)
 80080c0:	f00e f87c 	bl	80161bc <iprintf>

  SYS_ARCH_PROTECT(lev);
 80080c4:	f00d ffbe 	bl	8016044 <sys_arch_protect>
 80080c8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	2200      	movs	r2, #0
 80080ce:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	78fa      	ldrb	r2, [r7, #3]
 80080d4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	7f1b      	ldrb	r3, [r3, #28]
 80080da:	f043 0301 	orr.w	r3, r3, #1
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	785b      	ldrb	r3, [r3, #1]
 80080e8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	2200      	movs	r2, #0
 80080ee:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80080f0:	69b8      	ldr	r0, [r7, #24]
 80080f2:	f00d ffb5 	bl	8016060 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d005      	beq.n	800810a <err_tcp+0x6a>
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	2200      	movs	r2, #0
 8008104:	2104      	movs	r1, #4
 8008106:	69f8      	ldr	r0, [r7, #28]
 8008108:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	2b00      	cmp	r3, #0
 8008110:	d005      	beq.n	800811e <err_tcp+0x7e>
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	2200      	movs	r2, #0
 8008118:	2100      	movs	r1, #0
 800811a:	69f8      	ldr	r0, [r7, #28]
 800811c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	2b00      	cmp	r3, #0
 8008124:	d005      	beq.n	8008132 <err_tcp+0x92>
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	2200      	movs	r2, #0
 800812c:	2102      	movs	r1, #2
 800812e:	69f8      	ldr	r0, [r7, #28]
 8008130:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008136:	4618      	mov	r0, r3
 8008138:	f7ff fd8a 	bl	8007c50 <lwip_netconn_err_to_msg>
 800813c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	3310      	adds	r3, #16
 8008142:	4618      	mov	r0, r3
 8008144:	f00d fe63 	bl	8015e0e <sys_mbox_valid>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	3310      	adds	r3, #16
 8008152:	6939      	ldr	r1, [r7, #16]
 8008154:	4618      	mov	r0, r3
 8008156:	f00d fde5 	bl	8015d24 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	3314      	adds	r3, #20
 800815e:	4618      	mov	r0, r3
 8008160:	f00d fe55 	bl	8015e0e <sys_mbox_valid>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d005      	beq.n	8008176 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	3314      	adds	r3, #20
 800816e:	6939      	ldr	r1, [r7, #16]
 8008170:	4618      	mov	r0, r3
 8008172:	f00d fdd7 	bl	8015d24 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d005      	beq.n	8008188 <err_tcp+0xe8>
 800817c:	7dfb      	ldrb	r3, [r7, #23]
 800817e:	2b04      	cmp	r3, #4
 8008180:	d002      	beq.n	8008188 <err_tcp+0xe8>
 8008182:	7dfb      	ldrb	r3, [r7, #23]
 8008184:	2b03      	cmp	r3, #3
 8008186:	d143      	bne.n	8008210 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	7f1b      	ldrb	r3, [r3, #28]
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b00      	cmp	r3, #0
 8008192:	bf14      	ite	ne
 8008194:	2301      	movne	r3, #1
 8008196:	2300      	moveq	r3, #0
 8008198:	b2db      	uxtb	r3, r3
 800819a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	7f1b      	ldrb	r3, [r3, #28]
 80081a0:	f023 0304 	bic.w	r3, r3, #4
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d13b      	bne.n	8008228 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d106      	bne.n	80081c6 <err_tcp+0x126>
 80081b8:	4b1e      	ldr	r3, [pc, #120]	; (8008234 <err_tcp+0x194>)
 80081ba:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80081be:	4920      	ldr	r1, [pc, #128]	; (8008240 <err_tcp+0x1a0>)
 80081c0:	481e      	ldr	r0, [pc, #120]	; (800823c <err_tcp+0x19c>)
 80081c2:	f00d fffb 	bl	80161bc <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d104      	bne.n	80081d6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	6a1b      	ldr	r3, [r3, #32]
 80081d0:	2200      	movs	r2, #0
 80081d2:	711a      	strb	r2, [r3, #4]
 80081d4:	e003      	b.n	80081de <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	78fa      	ldrb	r2, [r7, #3]
 80081dc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	330c      	adds	r3, #12
 80081e6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80081e8:	68b8      	ldr	r0, [r7, #8]
 80081ea:	f00d fea1 	bl	8015f30 <sys_sem_valid>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d106      	bne.n	8008202 <err_tcp+0x162>
 80081f4:	4b0f      	ldr	r3, [pc, #60]	; (8008234 <err_tcp+0x194>)
 80081f6:	f240 12ef 	movw	r2, #495	; 0x1ef
 80081fa:	4912      	ldr	r1, [pc, #72]	; (8008244 <err_tcp+0x1a4>)
 80081fc:	480f      	ldr	r0, [pc, #60]	; (800823c <err_tcp+0x19c>)
 80081fe:	f00d ffdd 	bl	80161bc <iprintf>
      conn->current_msg = NULL;
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	2200      	movs	r2, #0
 8008206:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008208:	68b8      	ldr	r0, [r7, #8]
 800820a:	f00d fe77 	bl	8015efc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800820e:	e00b      	b.n	8008228 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d008      	beq.n	800822a <err_tcp+0x18a>
 8008218:	4b06      	ldr	r3, [pc, #24]	; (8008234 <err_tcp+0x194>)
 800821a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800821e:	490a      	ldr	r1, [pc, #40]	; (8008248 <err_tcp+0x1a8>)
 8008220:	4806      	ldr	r0, [pc, #24]	; (800823c <err_tcp+0x19c>)
 8008222:	f00d ffcb 	bl	80161bc <iprintf>
  }
}
 8008226:	e000      	b.n	800822a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008228:	bf00      	nop
}
 800822a:	bf00      	nop
 800822c:	3720      	adds	r7, #32
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	080179d0 	.word	0x080179d0
 8008238:	08017b28 	.word	0x08017b28
 800823c:	08017a14 	.word	0x08017a14
 8008240:	08017b38 	.word	0x08017b38
 8008244:	08017b54 	.word	0x08017b54
 8008248:	08017b70 	.word	0x08017b70

0800824c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f008 f949 	bl	80104f4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008262:	490a      	ldr	r1, [pc, #40]	; (800828c <setup_tcp+0x40>)
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f008 f957 	bl	8010518 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800826a:	4909      	ldr	r1, [pc, #36]	; (8008290 <setup_tcp+0x44>)
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f008 f975 	bl	801055c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008272:	2202      	movs	r2, #2
 8008274:	4907      	ldr	r1, [pc, #28]	; (8008294 <setup_tcp+0x48>)
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f008 f9cc 	bl	8010614 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800827c:	4906      	ldr	r1, [pc, #24]	; (8008298 <setup_tcp+0x4c>)
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f008 f98e 	bl	80105a0 <tcp_err>
}
 8008284:	bf00      	nop
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	08007e25 	.word	0x08007e25
 8008290:	08007ff9 	.word	0x08007ff9
 8008294:	08007f31 	.word	0x08007f31
 8008298:	080080a1 	.word	0x080080a1

0800829c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800829c:	b590      	push	{r4, r7, lr}
 800829e:	b089      	sub	sp, #36	; 0x24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	4613      	mov	r3, r2
 80082a8:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d102      	bne.n	80082ba <accept_function+0x1e>
    return ERR_VAL;
 80082b4:	f06f 0305 	mvn.w	r3, #5
 80082b8:	e0a1      	b.n	80083fe <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	3314      	adds	r3, #20
 80082be:	4618      	mov	r0, r3
 80082c0:	f00d fda5 	bl	8015e0e <sys_mbox_valid>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d102      	bne.n	80082d0 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80082ca:	f06f 0305 	mvn.w	r3, #5
 80082ce:	e096      	b.n	80083fe <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d11b      	bne.n	800830e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	f103 0414 	add.w	r4, r3, #20
 80082dc:	f06f 000c 	mvn.w	r0, #12
 80082e0:	f7ff fcb6 	bl	8007c50 <lwip_netconn_err_to_msg>
 80082e4:	4603      	mov	r3, r0
 80082e6:	4619      	mov	r1, r3
 80082e8:	4620      	mov	r0, r4
 80082ea:	f00d fd1b 	bl	8015d24 <sys_mbox_trypost>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d109      	bne.n	8008308 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d005      	beq.n	8008308 <accept_function+0x6c>
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	2200      	movs	r2, #0
 8008302:	2100      	movs	r1, #0
 8008304:	69f8      	ldr	r0, [r7, #28]
 8008306:	4798      	blx	r3
    }
    return ERR_VAL;
 8008308:	f06f 0305 	mvn.w	r3, #5
 800830c:	e077      	b.n	80083fe <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800830e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d006      	beq.n	8008324 <accept_function+0x88>
 8008316:	4b3c      	ldr	r3, [pc, #240]	; (8008408 <accept_function+0x16c>)
 8008318:	f240 222a 	movw	r2, #554	; 0x22a
 800831c:	493b      	ldr	r1, [pc, #236]	; (800840c <accept_function+0x170>)
 800831e:	483c      	ldr	r0, [pc, #240]	; (8008410 <accept_function+0x174>)
 8008320:	f00d ff4c 	bl	80161bc <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	781a      	ldrb	r2, [r3, #0]
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	4619      	mov	r1, r3
 800832e:	4610      	mov	r0, r2
 8008330:	f000 f8f0 	bl	8008514 <netconn_alloc>
 8008334:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d11b      	bne.n	8008374 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	f103 0414 	add.w	r4, r3, #20
 8008342:	f06f 000c 	mvn.w	r0, #12
 8008346:	f7ff fc83 	bl	8007c50 <lwip_netconn_err_to_msg>
 800834a:	4603      	mov	r3, r0
 800834c:	4619      	mov	r1, r3
 800834e:	4620      	mov	r0, r4
 8008350:	f00d fce8 	bl	8015d24 <sys_mbox_trypost>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d109      	bne.n	800836e <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	2b00      	cmp	r3, #0
 8008360:	d005      	beq.n	800836e <accept_function+0xd2>
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	2200      	movs	r2, #0
 8008368:	2100      	movs	r1, #0
 800836a:	69f8      	ldr	r0, [r7, #28]
 800836c:	4798      	blx	r3
    }
    return ERR_MEM;
 800836e:	f04f 33ff 	mov.w	r3, #4294967295
 8008372:	e044      	b.n	80083fe <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800837a:	69b8      	ldr	r0, [r7, #24]
 800837c:	f7ff ff66 	bl	800824c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	3314      	adds	r3, #20
 8008384:	69b9      	ldr	r1, [r7, #24]
 8008386:	4618      	mov	r0, r3
 8008388:	f00d fccc 	bl	8015d24 <sys_mbox_trypost>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d02a      	beq.n	80083e8 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008398:	2100      	movs	r1, #0
 800839a:	6978      	ldr	r0, [r7, #20]
 800839c:	f008 f8aa 	bl	80104f4 <tcp_arg>
    tcp_recv(pcb, NULL);
 80083a0:	2100      	movs	r1, #0
 80083a2:	6978      	ldr	r0, [r7, #20]
 80083a4:	f008 f8b8 	bl	8010518 <tcp_recv>
    tcp_sent(pcb, NULL);
 80083a8:	2100      	movs	r1, #0
 80083aa:	6978      	ldr	r0, [r7, #20]
 80083ac:	f008 f8d6 	bl	801055c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80083b0:	2200      	movs	r2, #0
 80083b2:	2100      	movs	r1, #0
 80083b4:	6978      	ldr	r0, [r7, #20]
 80083b6:	f008 f92d 	bl	8010614 <tcp_poll>
    tcp_err(pcb, NULL);
 80083ba:	2100      	movs	r1, #0
 80083bc:	6978      	ldr	r0, [r7, #20]
 80083be:	f008 f8ef 	bl	80105a0 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2200      	movs	r2, #0
 80083c6:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	3310      	adds	r3, #16
 80083cc:	4618      	mov	r0, r3
 80083ce:	f00d fc97 	bl	8015d00 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	3310      	adds	r3, #16
 80083d6:	4618      	mov	r0, r3
 80083d8:	f00d fd2a 	bl	8015e30 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80083dc:	69b8      	ldr	r0, [r7, #24]
 80083de:	f000 f907 	bl	80085f0 <netconn_free>
    return ERR_MEM;
 80083e2:	f04f 33ff 	mov.w	r3, #4294967295
 80083e6:	e00a      	b.n	80083fe <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d005      	beq.n	80083fc <accept_function+0x160>
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f4:	2200      	movs	r2, #0
 80083f6:	2100      	movs	r1, #0
 80083f8:	69f8      	ldr	r0, [r7, #28]
 80083fa:	4798      	blx	r3
  }

  return ERR_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3724      	adds	r7, #36	; 0x24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd90      	pop	{r4, r7, pc}
 8008406:	bf00      	nop
 8008408:	080179d0 	.word	0x080179d0
 800840c:	08017b8c 	.word	0x08017b8c
 8008410:	08017a14 	.word	0x08017a14

08008414 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008414:	b590      	push	{r4, r7, lr}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800841c:	2300      	movs	r3, #0
 800841e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d006      	beq.n	8008438 <pcb_new+0x24>
 800842a:	4b2b      	ldr	r3, [pc, #172]	; (80084d8 <pcb_new+0xc4>)
 800842c:	f240 2265 	movw	r2, #613	; 0x265
 8008430:	492a      	ldr	r1, [pc, #168]	; (80084dc <pcb_new+0xc8>)
 8008432:	482b      	ldr	r0, [pc, #172]	; (80084e0 <pcb_new+0xcc>)
 8008434:	f00d fec2 	bl	80161bc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008442:	2b10      	cmp	r3, #16
 8008444:	d022      	beq.n	800848c <pcb_new+0x78>
 8008446:	2b20      	cmp	r3, #32
 8008448:	d133      	bne.n	80084b2 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681c      	ldr	r4, [r3, #0]
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	4618      	mov	r0, r3
 8008452:	f00d fb20 	bl	8015a96 <udp_new_ip_type>
 8008456:	4603      	mov	r3, r0
 8008458:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d02a      	beq.n	80084ba <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b22      	cmp	r3, #34	; 0x22
 800846c:	d104      	bne.n	8008478 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6858      	ldr	r0, [r3, #4]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	4917      	ldr	r1, [pc, #92]	; (80084e4 <pcb_new+0xd0>)
 8008486:	f00d fa8d 	bl	80159a4 <udp_recv>
      }
      break;
 800848a:	e016      	b.n	80084ba <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681c      	ldr	r4, [r3, #0]
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	4618      	mov	r0, r3
 8008494:	f008 f820 	bl	80104d8 <tcp_new_ip_type>
 8008498:	4603      	mov	r3, r0
 800849a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00b      	beq.n	80084be <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7ff fece 	bl	800824c <setup_tcp>
      }
      break;
 80084b0:	e005      	b.n	80084be <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	22fa      	movs	r2, #250	; 0xfa
 80084b6:	711a      	strb	r2, [r3, #4]
      return;
 80084b8:	e00a      	b.n	80084d0 <pcb_new+0xbc>
      break;
 80084ba:	bf00      	nop
 80084bc:	e000      	b.n	80084c0 <pcb_new+0xac>
      break;
 80084be:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d102      	bne.n	80084d0 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	22ff      	movs	r2, #255	; 0xff
 80084ce:	711a      	strb	r2, [r3, #4]
  }
}
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd90      	pop	{r4, r7, pc}
 80084d6:	bf00      	nop
 80084d8:	080179d0 	.word	0x080179d0
 80084dc:	08017bb4 	.word	0x08017bb4
 80084e0:	08017a14 	.word	0x08017a14
 80084e4:	08007d29 	.word	0x08007d29

080084e8 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d102      	bne.n	800850a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f7ff ff85 	bl	8008414 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800850a:	bf00      	nop
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
	...

08008514 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	6039      	str	r1, [r7, #0]
 800851e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008524:	2007      	movs	r0, #7
 8008526:	f005 fa3d 	bl	800d9a4 <memp_malloc>
 800852a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <netconn_alloc+0x22>
    return NULL;
 8008532:	2300      	movs	r3, #0
 8008534:	e052      	b.n	80085dc <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	79fa      	ldrb	r2, [r7, #7]
 8008540:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008548:	79fb      	ldrb	r3, [r7, #7]
 800854a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800854e:	2b10      	cmp	r3, #16
 8008550:	d004      	beq.n	800855c <netconn_alloc+0x48>
 8008552:	2b20      	cmp	r3, #32
 8008554:	d105      	bne.n	8008562 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008556:	2306      	movs	r3, #6
 8008558:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800855a:	e00a      	b.n	8008572 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800855c:	2306      	movs	r3, #6
 800855e:	617b      	str	r3, [r7, #20]
      break;
 8008560:	e007      	b.n	8008572 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008562:	4b20      	ldr	r3, [pc, #128]	; (80085e4 <netconn_alloc+0xd0>)
 8008564:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008568:	491f      	ldr	r1, [pc, #124]	; (80085e8 <netconn_alloc+0xd4>)
 800856a:	4820      	ldr	r0, [pc, #128]	; (80085ec <netconn_alloc+0xd8>)
 800856c:	f00d fe26 	bl	80161bc <iprintf>
      goto free_and_return;
 8008570:	e02f      	b.n	80085d2 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3310      	adds	r3, #16
 8008576:	6979      	ldr	r1, [r7, #20]
 8008578:	4618      	mov	r0, r3
 800857a:	f00d fb9f 	bl	8015cbc <sys_mbox_new>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d125      	bne.n	80085d0 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	330c      	adds	r3, #12
 8008588:	2100      	movs	r1, #0
 800858a:	4618      	mov	r0, r3
 800858c:	f00d fc5d 	bl	8015e4a <sys_sem_new>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d005      	beq.n	80085a2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3310      	adds	r3, #16
 800859a:	4618      	mov	r0, r3
 800859c:	f00d fbb0 	bl	8015d00 <sys_mbox_free>
    goto free_and_return;
 80085a0:	e017      	b.n	80085d2 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3314      	adds	r3, #20
 80085a6:	4618      	mov	r0, r3
 80085a8:	f00d fc42 	bl	8015e30 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f04f 32ff 	mov.w	r2, #4294967295
 80085b8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	7cfa      	ldrb	r2, [r7, #19]
 80085ca:	771a      	strb	r2, [r3, #28]
  return conn;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	e005      	b.n	80085dc <netconn_alloc+0xc8>
    goto free_and_return;
 80085d0:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80085d2:	68f9      	ldr	r1, [r7, #12]
 80085d4:	2007      	movs	r0, #7
 80085d6:	f005 fa37 	bl	800da48 <memp_free>
  return NULL;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	080179d0 	.word	0x080179d0
 80085e8:	08017bd4 	.word	0x08017bd4
 80085ec:	08017a14 	.word	0x08017a14

080085f0 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d006      	beq.n	800860e <netconn_free+0x1e>
 8008600:	4b1b      	ldr	r3, [pc, #108]	; (8008670 <netconn_free+0x80>)
 8008602:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008606:	491b      	ldr	r1, [pc, #108]	; (8008674 <netconn_free+0x84>)
 8008608:	481b      	ldr	r0, [pc, #108]	; (8008678 <netconn_free+0x88>)
 800860a:	f00d fdd7 	bl	80161bc <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3310      	adds	r3, #16
 8008612:	4618      	mov	r0, r3
 8008614:	f00d fbfb 	bl	8015e0e <sys_mbox_valid>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d006      	beq.n	800862c <netconn_free+0x3c>
 800861e:	4b14      	ldr	r3, [pc, #80]	; (8008670 <netconn_free+0x80>)
 8008620:	f44f 7249 	mov.w	r2, #804	; 0x324
 8008624:	4915      	ldr	r1, [pc, #84]	; (800867c <netconn_free+0x8c>)
 8008626:	4814      	ldr	r0, [pc, #80]	; (8008678 <netconn_free+0x88>)
 8008628:	f00d fdc8 	bl	80161bc <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	3314      	adds	r3, #20
 8008630:	4618      	mov	r0, r3
 8008632:	f00d fbec 	bl	8015e0e <sys_mbox_valid>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d006      	beq.n	800864a <netconn_free+0x5a>
 800863c:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <netconn_free+0x80>)
 800863e:	f240 3227 	movw	r2, #807	; 0x327
 8008642:	490f      	ldr	r1, [pc, #60]	; (8008680 <netconn_free+0x90>)
 8008644:	480c      	ldr	r0, [pc, #48]	; (8008678 <netconn_free+0x88>)
 8008646:	f00d fdb9 	bl	80161bc <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	330c      	adds	r3, #12
 800864e:	4618      	mov	r0, r3
 8008650:	f00d fc61 	bl	8015f16 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	330c      	adds	r3, #12
 8008658:	4618      	mov	r0, r3
 800865a:	f00d fc7a 	bl	8015f52 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	2007      	movs	r0, #7
 8008662:	f005 f9f1 	bl	800da48 <memp_free>
}
 8008666:	bf00      	nop
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	080179d0 	.word	0x080179d0
 8008674:	08017bfc 	.word	0x08017bfc
 8008678:	08017a14 	.word	0x08017a14
 800867c:	08017c2c 	.word	0x08017c2c
 8008680:	08017c68 	.word	0x08017c68

08008684 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3310      	adds	r3, #16
 8008690:	4618      	mov	r0, r3
 8008692:	f00d fbbc 	bl	8015e0e <sys_mbox_valid>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d02f      	beq.n	80086fc <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800869c:	e018      	b.n	80086d0 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086a6:	2b10      	cmp	r3, #16
 80086a8:	d10e      	bne.n	80086c8 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f107 020f 	add.w	r2, r7, #15
 80086b0:	4611      	mov	r1, r2
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7ff fafe 	bl	8007cb4 <lwip_netconn_is_err_msg>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d108      	bne.n	80086d0 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f006 f895 	bl	800e7f0 <pbuf_free>
 80086c6:	e003      	b.n	80086d0 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 ff82 	bl	80095d4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3310      	adds	r3, #16
 80086d4:	f107 0210 	add.w	r2, r7, #16
 80086d8:	4611      	mov	r1, r2
 80086da:	4618      	mov	r0, r3
 80086dc:	f00d fb7b 	bl	8015dd6 <sys_arch_mbox_tryfetch>
 80086e0:	4603      	mov	r3, r0
 80086e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e6:	d1da      	bne.n	800869e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	3310      	adds	r3, #16
 80086ec:	4618      	mov	r0, r3
 80086ee:	f00d fb07 	bl	8015d00 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	3310      	adds	r3, #16
 80086f6:	4618      	mov	r0, r3
 80086f8:	f00d fb9a 	bl	8015e30 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	3314      	adds	r3, #20
 8008700:	4618      	mov	r0, r3
 8008702:	f00d fb84 	bl	8015e0e <sys_mbox_valid>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d034      	beq.n	8008776 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800870c:	e01d      	b.n	800874a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f107 020e 	add.w	r2, r7, #14
 8008714:	4611      	mov	r1, r2
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff facc 	bl	8007cb4 <lwip_netconn_is_err_msg>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d113      	bne.n	800874a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008726:	6978      	ldr	r0, [r7, #20]
 8008728:	f7ff ffac 	bl	8008684 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d007      	beq.n	8008744 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	4618      	mov	r0, r3
 800873a:	f006 fe4f 	bl	800f3dc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2200      	movs	r2, #0
 8008742:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008744:	6978      	ldr	r0, [r7, #20]
 8008746:	f7ff ff53 	bl	80085f0 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	3314      	adds	r3, #20
 800874e:	f107 0210 	add.w	r2, r7, #16
 8008752:	4611      	mov	r1, r2
 8008754:	4618      	mov	r0, r3
 8008756:	f00d fb3e 	bl	8015dd6 <sys_arch_mbox_tryfetch>
 800875a:	4603      	mov	r3, r0
 800875c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008760:	d1d5      	bne.n	800870e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	3314      	adds	r3, #20
 8008766:	4618      	mov	r0, r3
 8008768:	f00d faca 	bl	8015d00 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	3314      	adds	r3, #20
 8008770:	4618      	mov	r0, r3
 8008772:	f00d fb5d 	bl	8015e30 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008776:	bf00      	nop
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
	...

08008780 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d106      	bne.n	80087a4 <lwip_netconn_do_close_internal+0x24>
 8008796:	4ba1      	ldr	r3, [pc, #644]	; (8008a1c <lwip_netconn_do_close_internal+0x29c>)
 8008798:	f240 32a2 	movw	r2, #930	; 0x3a2
 800879c:	49a0      	ldr	r1, [pc, #640]	; (8008a20 <lwip_netconn_do_close_internal+0x2a0>)
 800879e:	48a1      	ldr	r0, [pc, #644]	; (8008a24 <lwip_netconn_do_close_internal+0x2a4>)
 80087a0:	f00d fd0c 	bl	80161bc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087ac:	2b10      	cmp	r3, #16
 80087ae:	d006      	beq.n	80087be <lwip_netconn_do_close_internal+0x3e>
 80087b0:	4b9a      	ldr	r3, [pc, #616]	; (8008a1c <lwip_netconn_do_close_internal+0x29c>)
 80087b2:	f240 32a3 	movw	r2, #931	; 0x3a3
 80087b6:	499c      	ldr	r1, [pc, #624]	; (8008a28 <lwip_netconn_do_close_internal+0x2a8>)
 80087b8:	489a      	ldr	r0, [pc, #616]	; (8008a24 <lwip_netconn_do_close_internal+0x2a4>)
 80087ba:	f00d fcff 	bl	80161bc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	785b      	ldrb	r3, [r3, #1]
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	d006      	beq.n	80087d4 <lwip_netconn_do_close_internal+0x54>
 80087c6:	4b95      	ldr	r3, [pc, #596]	; (8008a1c <lwip_netconn_do_close_internal+0x29c>)
 80087c8:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80087cc:	4997      	ldr	r1, [pc, #604]	; (8008a2c <lwip_netconn_do_close_internal+0x2ac>)
 80087ce:	4895      	ldr	r0, [pc, #596]	; (8008a24 <lwip_netconn_do_close_internal+0x2a4>)
 80087d0:	f00d fcf4 	bl	80161bc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d106      	bne.n	80087ea <lwip_netconn_do_close_internal+0x6a>
 80087dc:	4b8f      	ldr	r3, [pc, #572]	; (8008a1c <lwip_netconn_do_close_internal+0x29c>)
 80087de:	f240 32a5 	movw	r2, #933	; 0x3a5
 80087e2:	4993      	ldr	r1, [pc, #588]	; (8008a30 <lwip_netconn_do_close_internal+0x2b0>)
 80087e4:	488f      	ldr	r0, [pc, #572]	; (8008a24 <lwip_netconn_do_close_internal+0x2a4>)
 80087e6:	f00d fce9 	bl	80161bc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d106      	bne.n	8008800 <lwip_netconn_do_close_internal+0x80>
 80087f2:	4b8a      	ldr	r3, [pc, #552]	; (8008a1c <lwip_netconn_do_close_internal+0x29c>)
 80087f4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80087f8:	498e      	ldr	r1, [pc, #568]	; (8008a34 <lwip_netconn_do_close_internal+0x2b4>)
 80087fa:	488a      	ldr	r0, [pc, #552]	; (8008a24 <lwip_netconn_do_close_internal+0x2a4>)
 80087fc:	f00d fcde 	bl	80161bc <iprintf>

  tpcb = conn->pcb.tcp;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	7a1b      	ldrb	r3, [r3, #8]
 800880c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008816:	7bfb      	ldrb	r3, [r7, #15]
 8008818:	f003 0302 	and.w	r3, r3, #2
 800881c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	2b03      	cmp	r3, #3
 8008822:	d102      	bne.n	800882a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8008824:	2301      	movs	r3, #1
 8008826:	75bb      	strb	r3, [r7, #22]
 8008828:	e01f      	b.n	800886a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800882a:	7bbb      	ldrb	r3, [r7, #14]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00e      	beq.n	800884e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008834:	2b05      	cmp	r3, #5
 8008836:	d007      	beq.n	8008848 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800883c:	2b06      	cmp	r3, #6
 800883e:	d003      	beq.n	8008848 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008844:	2b08      	cmp	r3, #8
 8008846:	d102      	bne.n	800884e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8008848:	2301      	movs	r3, #1
 800884a:	75bb      	strb	r3, [r7, #22]
 800884c:	e00d      	b.n	800886a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800884e:	7b7b      	ldrb	r3, [r7, #13]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d008      	beq.n	8008866 <lwip_netconn_do_close_internal+0xe6>
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	8b5b      	ldrh	r3, [r3, #26]
 8008858:	f003 0310 	and.w	r3, r3, #16
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8008860:	2301      	movs	r3, #1
 8008862:	75bb      	strb	r3, [r7, #22]
 8008864:	e001      	b.n	800886a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8008866:	2300      	movs	r3, #0
 8008868:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800886a:	7dbb      	ldrb	r3, [r7, #22]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d003      	beq.n	8008878 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008870:	2100      	movs	r1, #0
 8008872:	6938      	ldr	r0, [r7, #16]
 8008874:	f007 fe3e 	bl	80104f4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	7d1b      	ldrb	r3, [r3, #20]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d104      	bne.n	800888a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008880:	2100      	movs	r1, #0
 8008882:	6938      	ldr	r0, [r7, #16]
 8008884:	f007 feae 	bl	80105e4 <tcp_accept>
 8008888:	e01d      	b.n	80088c6 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800888a:	7bbb      	ldrb	r3, [r7, #14]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d007      	beq.n	80088a0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008890:	2100      	movs	r1, #0
 8008892:	6938      	ldr	r0, [r7, #16]
 8008894:	f007 fe40 	bl	8010518 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008898:	2100      	movs	r1, #0
 800889a:	6938      	ldr	r0, [r7, #16]
 800889c:	f007 fea2 	bl	80105e4 <tcp_accept>
    }
    if (shut_tx) {
 80088a0:	7b7b      	ldrb	r3, [r7, #13]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d003      	beq.n	80088ae <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80088a6:	2100      	movs	r1, #0
 80088a8:	6938      	ldr	r0, [r7, #16]
 80088aa:	f007 fe57 	bl	801055c <tcp_sent>
    }
    if (shut_close) {
 80088ae:	7dbb      	ldrb	r3, [r7, #22]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d008      	beq.n	80088c6 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80088b4:	2200      	movs	r2, #0
 80088b6:	2100      	movs	r1, #0
 80088b8:	6938      	ldr	r0, [r7, #16]
 80088ba:	f007 feab 	bl	8010614 <tcp_poll>
      tcp_err(tpcb, NULL);
 80088be:	2100      	movs	r1, #0
 80088c0:	6938      	ldr	r0, [r7, #16]
 80088c2:	f007 fe6d 	bl	80105a0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80088c6:	7dbb      	ldrb	r3, [r7, #22]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d005      	beq.n	80088d8 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80088cc:	6938      	ldr	r0, [r7, #16]
 80088ce:	f006 fc41 	bl	800f154 <tcp_close>
 80088d2:	4603      	mov	r3, r0
 80088d4:	75fb      	strb	r3, [r7, #23]
 80088d6:	e007      	b.n	80088e8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	7b7a      	ldrb	r2, [r7, #13]
 80088dc:	4619      	mov	r1, r3
 80088de:	6938      	ldr	r0, [r7, #16]
 80088e0:	f006 fc64 	bl	800f1ac <tcp_shutdown>
 80088e4:	4603      	mov	r3, r0
 80088e6:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80088e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d102      	bne.n	80088f6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80088f0:	2301      	movs	r3, #1
 80088f2:	757b      	strb	r3, [r7, #21]
 80088f4:	e016      	b.n	8008924 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80088f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fe:	d10f      	bne.n	8008920 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a1b      	ldr	r3, [r3, #32]
 8008904:	7a5b      	ldrb	r3, [r3, #9]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10c      	bne.n	8008924 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800890a:	2301      	movs	r3, #1
 800890c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800890e:	7dbb      	ldrb	r3, [r7, #22]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d007      	beq.n	8008924 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8008914:	6938      	ldr	r0, [r7, #16]
 8008916:	f006 fd61 	bl	800f3dc <tcp_abort>
          err = ERR_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	75fb      	strb	r3, [r7, #23]
 800891e:	e001      	b.n	8008924 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8008920:	2301      	movs	r3, #1
 8008922:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8008924:	7d7b      	ldrb	r3, [r7, #21]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d044      	beq.n	80089b4 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	330c      	adds	r3, #12
 8008932:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	7dfa      	ldrb	r2, [r7, #23]
 800893a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008948:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d129      	bne.n	80089a4 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8008950:	7dbb      	ldrb	r3, [r7, #22]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00c      	beq.n	8008970 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	2b00      	cmp	r3, #0
 8008962:	d005      	beq.n	8008970 <lwip_netconn_do_close_internal+0x1f0>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	2200      	movs	r2, #0
 800896a:	2104      	movs	r1, #4
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	4798      	blx	r3
      }
      if (shut_rx) {
 8008970:	7bbb      	ldrb	r3, [r7, #14]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d009      	beq.n	800898a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	2b00      	cmp	r3, #0
 800897c:	d005      	beq.n	800898a <lwip_netconn_do_close_internal+0x20a>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	2200      	movs	r2, #0
 8008984:	2100      	movs	r1, #0
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	4798      	blx	r3
      }
      if (shut_tx) {
 800898a:	7b7b      	ldrb	r3, [r7, #13]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d009      	beq.n	80089a4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	2b00      	cmp	r3, #0
 8008996:	d005      	beq.n	80089a4 <lwip_netconn_do_close_internal+0x224>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	2200      	movs	r2, #0
 800899e:	2102      	movs	r1, #2
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80089aa:	68b8      	ldr	r0, [r7, #8]
 80089ac:	f00d faa6 	bl	8015efc <sys_sem_signal>
    }
    return ERR_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	e02e      	b.n	8008a12 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 80089b4:	7d7b      	ldrb	r3, [r7, #21]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d11e      	bne.n	80089f8 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	7d1b      	ldrb	r3, [r3, #20]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d106      	bne.n	80089d0 <lwip_netconn_do_close_internal+0x250>
 80089c2:	4b16      	ldr	r3, [pc, #88]	; (8008a1c <lwip_netconn_do_close_internal+0x29c>)
 80089c4:	f240 4241 	movw	r2, #1089	; 0x441
 80089c8:	491b      	ldr	r1, [pc, #108]	; (8008a38 <lwip_netconn_do_close_internal+0x2b8>)
 80089ca:	4816      	ldr	r0, [pc, #88]	; (8008a24 <lwip_netconn_do_close_internal+0x2a4>)
 80089cc:	f00d fbf6 	bl	80161bc <iprintf>
    if (shut_tx) {
 80089d0:	7b7b      	ldrb	r3, [r7, #13]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 80089d6:	4919      	ldr	r1, [pc, #100]	; (8008a3c <lwip_netconn_do_close_internal+0x2bc>)
 80089d8:	6938      	ldr	r0, [r7, #16]
 80089da:	f007 fdbf 	bl	801055c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80089de:	2201      	movs	r2, #1
 80089e0:	4917      	ldr	r1, [pc, #92]	; (8008a40 <lwip_netconn_do_close_internal+0x2c0>)
 80089e2:	6938      	ldr	r0, [r7, #16]
 80089e4:	f007 fe16 	bl	8010614 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80089e8:	4916      	ldr	r1, [pc, #88]	; (8008a44 <lwip_netconn_do_close_internal+0x2c4>)
 80089ea:	6938      	ldr	r0, [r7, #16]
 80089ec:	f007 fdd8 	bl	80105a0 <tcp_err>
    tcp_arg(tpcb, conn);
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	6938      	ldr	r0, [r7, #16]
 80089f4:	f007 fd7e 	bl	80104f4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80089f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d106      	bne.n	8008a0e <lwip_netconn_do_close_internal+0x28e>
 8008a00:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <lwip_netconn_do_close_internal+0x29c>)
 8008a02:	f240 424d 	movw	r2, #1101	; 0x44d
 8008a06:	4910      	ldr	r1, [pc, #64]	; (8008a48 <lwip_netconn_do_close_internal+0x2c8>)
 8008a08:	4806      	ldr	r0, [pc, #24]	; (8008a24 <lwip_netconn_do_close_internal+0x2a4>)
 8008a0a:	f00d fbd7 	bl	80161bc <iprintf>
  return err;
 8008a0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3718      	adds	r7, #24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	080179d0 	.word	0x080179d0
 8008a20:	08017ca4 	.word	0x08017ca4
 8008a24:	08017a14 	.word	0x08017a14
 8008a28:	08017cb4 	.word	0x08017cb4
 8008a2c:	08017cd4 	.word	0x08017cd4
 8008a30:	08017cf8 	.word	0x08017cf8
 8008a34:	08017b38 	.word	0x08017b38
 8008a38:	08017d0c 	.word	0x08017d0c
 8008a3c:	08007ff9 	.word	0x08007ff9
 8008a40:	08007f31 	.word	0x08007f31
 8008a44:	080080a1 	.word	0x080080a1
 8008a48:	08017d30 	.word	0x08017d30

08008a4c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008a60:	7afb      	ldrb	r3, [r7, #11]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00d      	beq.n	8008a82 <lwip_netconn_do_delconn+0x36>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a70:	2b10      	cmp	r3, #16
 8008a72:	d006      	beq.n	8008a82 <lwip_netconn_do_delconn+0x36>
 8008a74:	4b60      	ldr	r3, [pc, #384]	; (8008bf8 <lwip_netconn_do_delconn+0x1ac>)
 8008a76:	f240 425f 	movw	r2, #1119	; 0x45f
 8008a7a:	4960      	ldr	r1, [pc, #384]	; (8008bfc <lwip_netconn_do_delconn+0x1b0>)
 8008a7c:	4860      	ldr	r0, [pc, #384]	; (8008c00 <lwip_netconn_do_delconn+0x1b4>)
 8008a7e:	f00d fb9d 	bl	80161bc <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8008a82:	7afb      	ldrb	r3, [r7, #11]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <lwip_netconn_do_delconn+0x48>
 8008a88:	7afb      	ldrb	r3, [r7, #11]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d002      	beq.n	8008a94 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8008a8e:	7afb      	ldrb	r3, [r7, #11]
 8008a90:	2b03      	cmp	r3, #3
 8008a92:	d109      	bne.n	8008aa8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8008a94:	7afb      	ldrb	r3, [r7, #11]
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d10a      	bne.n	8008ab0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	7f1b      	ldrb	r3, [r3, #28]
 8008aa0:	f003 0304 	and.w	r3, r3, #4
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d103      	bne.n	8008ab0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	22fb      	movs	r2, #251	; 0xfb
 8008aac:	711a      	strb	r2, [r3, #4]
 8008aae:	e097      	b.n	8008be0 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8008ab0:	7afb      	ldrb	r3, [r7, #11]
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	d10d      	bne.n	8008ad2 <lwip_netconn_do_delconn+0x86>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	7f1b      	ldrb	r3, [r3, #28]
 8008abc:	f003 0304 	and.w	r3, r3, #4
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d106      	bne.n	8008ad2 <lwip_netconn_do_delconn+0x86>
 8008ac4:	4b4c      	ldr	r3, [pc, #304]	; (8008bf8 <lwip_netconn_do_delconn+0x1ac>)
 8008ac6:	f240 427b 	movw	r2, #1147	; 0x47b
 8008aca:	494e      	ldr	r1, [pc, #312]	; (8008c04 <lwip_netconn_do_delconn+0x1b8>)
 8008acc:	484c      	ldr	r0, [pc, #304]	; (8008c00 <lwip_netconn_do_delconn+0x1b4>)
 8008ace:	f00d fb75 	bl	80161bc <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff fdd1 	bl	8008684 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d05f      	beq.n	8008bac <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008af6:	2b10      	cmp	r3, #16
 8008af8:	d00e      	beq.n	8008b18 <lwip_netconn_do_delconn+0xcc>
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	d000      	beq.n	8008b00 <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 8008afe:	e051      	b.n	8008ba4 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f00c ff67 	bl	80159e4 <udp_remove>
          break;
 8008b16:	e045      	b.n	8008ba4 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d006      	beq.n	8008b30 <lwip_netconn_do_delconn+0xe4>
 8008b22:	4b35      	ldr	r3, [pc, #212]	; (8008bf8 <lwip_netconn_do_delconn+0x1ac>)
 8008b24:	f240 4294 	movw	r2, #1172	; 0x494
 8008b28:	4937      	ldr	r1, [pc, #220]	; (8008c08 <lwip_netconn_do_delconn+0x1bc>)
 8008b2a:	4835      	ldr	r0, [pc, #212]	; (8008c00 <lwip_netconn_do_delconn+0x1b4>)
 8008b2c:	f00d fb46 	bl	80161bc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2204      	movs	r2, #4
 8008b36:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2203      	movs	r2, #3
 8008b3c:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7ff fe17 	bl	8008780 <lwip_netconn_do_close_internal>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d04a      	beq.n	8008bee <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	785b      	ldrb	r3, [r3, #1]
 8008b5e:	2b04      	cmp	r3, #4
 8008b60:	d006      	beq.n	8008b70 <lwip_netconn_do_delconn+0x124>
 8008b62:	4b25      	ldr	r3, [pc, #148]	; (8008bf8 <lwip_netconn_do_delconn+0x1ac>)
 8008b64:	f240 429a 	movw	r2, #1178	; 0x49a
 8008b68:	4928      	ldr	r1, [pc, #160]	; (8008c0c <lwip_netconn_do_delconn+0x1c0>)
 8008b6a:	4825      	ldr	r0, [pc, #148]	; (8008c00 <lwip_netconn_do_delconn+0x1b4>)
 8008b6c:	f00d fb26 	bl	80161bc <iprintf>
            UNLOCK_TCPIP_CORE();
 8008b70:	4827      	ldr	r0, [pc, #156]	; (8008c10 <lwip_netconn_do_delconn+0x1c4>)
 8008b72:	f00d fa34 	bl	8015fde <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	330c      	adds	r3, #12
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f00d f98b 	bl	8015e9a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8008b84:	4822      	ldr	r0, [pc, #136]	; (8008c10 <lwip_netconn_do_delconn+0x1c4>)
 8008b86:	f00d fa1b 	bl	8015fc0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d02c      	beq.n	8008bee <lwip_netconn_do_delconn+0x1a2>
 8008b94:	4b18      	ldr	r3, [pc, #96]	; (8008bf8 <lwip_netconn_do_delconn+0x1ac>)
 8008b96:	f240 429e 	movw	r2, #1182	; 0x49e
 8008b9a:	491c      	ldr	r1, [pc, #112]	; (8008c0c <lwip_netconn_do_delconn+0x1c0>)
 8008b9c:	4818      	ldr	r0, [pc, #96]	; (8008c00 <lwip_netconn_do_delconn+0x1b4>)
 8008b9e:	f00d fb0d 	bl	80161bc <iprintf>
          return;
 8008ba2:	e024      	b.n	8008bee <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d007      	beq.n	8008bc6 <lwip_netconn_do_delconn+0x17a>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	6810      	ldr	r0, [r2, #0]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d007      	beq.n	8008be0 <lwip_netconn_do_delconn+0x194>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	6810      	ldr	r0, [r2, #0]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2102      	movs	r1, #2
 8008bde:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	330c      	adds	r3, #12
 8008be6:	4618      	mov	r0, r3
 8008be8:	f00d f9a2 	bl	8015f30 <sys_sem_valid>
 8008bec:	e000      	b.n	8008bf0 <lwip_netconn_do_delconn+0x1a4>
          return;
 8008bee:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	080179d0 	.word	0x080179d0
 8008bfc:	08017d40 	.word	0x08017d40
 8008c00:	08017a14 	.word	0x08017a14
 8008c04:	08017d54 	.word	0x08017d54
 8008c08:	08017d74 	.word	0x08017d74
 8008c0c:	08017d90 	.word	0x08017d90
 8008c10:	20007414 	.word	0x20007414

08008c14 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d026      	beq.n	8008c78 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c34:	2b10      	cmp	r3, #16
 8008c36:	d00e      	beq.n	8008c56 <lwip_netconn_do_bind+0x42>
 8008c38:	2b20      	cmp	r3, #32
 8008c3a:	d119      	bne.n	8008c70 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6858      	ldr	r0, [r3, #4]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	6899      	ldr	r1, [r3, #8]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	899b      	ldrh	r3, [r3, #12]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	f00c fe22 	bl	8015894 <udp_bind>
 8008c50:	4603      	mov	r3, r0
 8008c52:	73fb      	strb	r3, [r7, #15]
        break;
 8008c54:	e012      	b.n	8008c7c <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6858      	ldr	r0, [r3, #4]
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	6899      	ldr	r1, [r3, #8]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	899b      	ldrh	r3, [r3, #12]
 8008c64:	461a      	mov	r2, r3
 8008c66:	f006 fbc5 	bl	800f3f4 <tcp_bind>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	73fb      	strb	r3, [r7, #15]
        break;
 8008c6e:	e005      	b.n	8008c7c <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8008c70:	23fa      	movs	r3, #250	; 0xfa
 8008c72:	73fb      	strb	r3, [r7, #15]
        break;
 8008c74:	bf00      	nop
 8008c76:	e001      	b.n	8008c7c <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 8008c78:	23fa      	movs	r3, #250	; 0xfa
 8008c7a:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	7bfa      	ldrb	r2, [r7, #15]
 8008c80:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8008c82:	bf00      	nop
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
	...

08008c8c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d07f      	beq.n	8008da2 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cac:	2b10      	cmp	r3, #16
 8008cae:	d175      	bne.n	8008d9c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	785b      	ldrb	r3, [r3, #1]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d165      	bne.n	8008d86 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	7d1b      	ldrb	r3, [r3, #20]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d002      	beq.n	8008ccc <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8008cc6:	23fa      	movs	r3, #250	; 0xfa
 8008cc8:	72fb      	strb	r3, [r7, #11]
 8008cca:	e06c      	b.n	8008da6 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8008ccc:	23ff      	movs	r3, #255	; 0xff
 8008cce:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f107 020b 	add.w	r2, r7, #11
 8008cda:	7cf9      	ldrb	r1, [r7, #19]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f006 fc41 	bl	800f564 <tcp_listen_with_backlog_and_err>
 8008ce2:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d05d      	beq.n	8008da6 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	3310      	adds	r3, #16
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f00d f88c 	bl	8015e0e <sys_mbox_valid>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00b      	beq.n	8008d14 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3310      	adds	r3, #16
 8008d02:	4618      	mov	r0, r3
 8008d04:	f00c fffc 	bl	8015d00 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3310      	adds	r3, #16
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f00d f88e 	bl	8015e30 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3314      	adds	r3, #20
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f00d f875 	bl	8015e0e <sys_mbox_valid>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d108      	bne.n	8008d3c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3314      	adds	r3, #20
 8008d30:	2106      	movs	r1, #6
 8008d32:	4618      	mov	r0, r3
 8008d34:	f00c ffc2 	bl	8015cbc <sys_mbox_new>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8008d3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d118      	bne.n	8008d76 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2202      	movs	r2, #2
 8008d4a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4610      	mov	r0, r2
 8008d62:	f007 fbc7 	bl	80104f4 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	4912      	ldr	r1, [pc, #72]	; (8008db8 <lwip_netconn_do_listen+0x12c>)
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f007 fc38 	bl	80105e4 <tcp_accept>
 8008d74:	e017      	b.n	8008da6 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f006 f9ec 	bl	800f154 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2200      	movs	r2, #0
 8008d82:	605a      	str	r2, [r3, #4]
 8008d84:	e00f      	b.n	8008da6 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	785b      	ldrb	r3, [r3, #1]
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d102      	bne.n	8008d96 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	72fb      	strb	r3, [r7, #11]
 8008d94:	e007      	b.n	8008da6 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8008d96:	23f5      	movs	r3, #245	; 0xf5
 8008d98:	72fb      	strb	r3, [r7, #11]
 8008d9a:	e004      	b.n	8008da6 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8008d9c:	23f0      	movs	r3, #240	; 0xf0
 8008d9e:	72fb      	strb	r3, [r7, #11]
 8008da0:	e001      	b.n	8008da6 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8008da2:	23f5      	movs	r3, #245	; 0xf5
 8008da4:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8008da6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8008dae:	bf00      	nop
 8008db0:	3718      	adds	r7, #24
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	0800829d 	.word	0x0800829d

08008dbc <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fe ff23 	bl	8007c18 <netconn_err>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d135      	bne.n	8008e4a <lwip_netconn_do_send+0x8e>
    if (msg->conn->pcb.tcp != NULL) {
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d02e      	beq.n	8008e46 <lwip_netconn_do_send+0x8a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008df2:	2b20      	cmp	r3, #32
 8008df4:	d123      	bne.n	8008e3e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10c      	bne.n	8008e1a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4610      	mov	r0, r2
 8008e10:	f00c fb54 	bl	80154bc <udp_send>
 8008e14:	4603      	mov	r3, r0
 8008e16:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8008e18:	e017      	b.n	8008e4a <lwip_netconn_do_send+0x8e>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6858      	ldr	r0, [r3, #4]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	6819      	ldr	r1, [r3, #0]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f103 0208 	add.w	r2, r3, #8
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	899b      	ldrh	r3, [r3, #12]
 8008e34:	f00c fb76 	bl	8015524 <udp_sendto>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73fb      	strb	r3, [r7, #15]
          break;
 8008e3c:	e005      	b.n	8008e4a <lwip_netconn_do_send+0x8e>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8008e3e:	23f5      	movs	r3, #245	; 0xf5
 8008e40:	73fb      	strb	r3, [r7, #15]
          break;
 8008e42:	bf00      	nop
 8008e44:	e001      	b.n	8008e4a <lwip_netconn_do_send+0x8e>
      }
    } else {
      err = ERR_CONN;
 8008e46:	23f5      	movs	r3, #245	; 0xf5
 8008e48:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	7bfa      	ldrb	r2, [r7, #15]
 8008e4e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8008e50:	bf00      	nop
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	2200      	movs	r2, #0
 8008e68:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d022      	beq.n	8008eba <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e7e:	2b10      	cmp	r3, #16
 8008e80:	d11b      	bne.n	8008eba <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e8e:	d202      	bcs.n	8008e96 <lwip_netconn_do_recv+0x3e>
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	e001      	b.n	8008e9a <lwip_netconn_do_recv+0x42>
 8008e96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e9a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	89fa      	ldrh	r2, [r7, #14]
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f006 fc62 	bl	800f770 <tcp_recved>
        remaining -= recved;
 8008eac:	89fb      	ldrh	r3, [r7, #14]
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1e6      	bne.n	8008e88 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8008eba:	bf00      	nop
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b088      	sub	sp, #32
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d106      	bne.n	8008ee8 <lwip_netconn_do_writemore+0x24>
 8008eda:	4b96      	ldr	r3, [pc, #600]	; (8009134 <lwip_netconn_do_writemore+0x270>)
 8008edc:	f240 6273 	movw	r2, #1651	; 0x673
 8008ee0:	4995      	ldr	r1, [pc, #596]	; (8009138 <lwip_netconn_do_writemore+0x274>)
 8008ee2:	4896      	ldr	r0, [pc, #600]	; (800913c <lwip_netconn_do_writemore+0x278>)
 8008ee4:	f00d f96a 	bl	80161bc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	785b      	ldrb	r3, [r3, #1]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d006      	beq.n	8008efe <lwip_netconn_do_writemore+0x3a>
 8008ef0:	4b90      	ldr	r3, [pc, #576]	; (8009134 <lwip_netconn_do_writemore+0x270>)
 8008ef2:	f240 6274 	movw	r2, #1652	; 0x674
 8008ef6:	4992      	ldr	r1, [pc, #584]	; (8009140 <lwip_netconn_do_writemore+0x27c>)
 8008ef8:	4890      	ldr	r0, [pc, #576]	; (800913c <lwip_netconn_do_writemore+0x278>)
 8008efa:	f00d f95f 	bl	80161bc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d106      	bne.n	8008f14 <lwip_netconn_do_writemore+0x50>
 8008f06:	4b8b      	ldr	r3, [pc, #556]	; (8009134 <lwip_netconn_do_writemore+0x270>)
 8008f08:	f240 6275 	movw	r2, #1653	; 0x675
 8008f0c:	498d      	ldr	r1, [pc, #564]	; (8009144 <lwip_netconn_do_writemore+0x280>)
 8008f0e:	488b      	ldr	r0, [pc, #556]	; (800913c <lwip_netconn_do_writemore+0x278>)
 8008f10:	f00d f954 	bl	80161bc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d106      	bne.n	8008f2a <lwip_netconn_do_writemore+0x66>
 8008f1c:	4b85      	ldr	r3, [pc, #532]	; (8009134 <lwip_netconn_do_writemore+0x270>)
 8008f1e:	f240 6276 	movw	r2, #1654	; 0x676
 8008f22:	4989      	ldr	r1, [pc, #548]	; (8009148 <lwip_netconn_do_writemore+0x284>)
 8008f24:	4885      	ldr	r0, [pc, #532]	; (800913c <lwip_netconn_do_writemore+0x278>)
 8008f26:	f00d f949 	bl	80161bc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	699a      	ldr	r2, [r3, #24]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d306      	bcc.n	8008f48 <lwip_netconn_do_writemore+0x84>
 8008f3a:	4b7e      	ldr	r3, [pc, #504]	; (8009134 <lwip_netconn_do_writemore+0x270>)
 8008f3c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8008f40:	4982      	ldr	r1, [pc, #520]	; (800914c <lwip_netconn_do_writemore+0x288>)
 8008f42:	487e      	ldr	r0, [pc, #504]	; (800913c <lwip_netconn_do_writemore+0x278>)
 8008f44:	f00d f93a 	bl	80161bc <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a1b      	ldr	r3, [r3, #32]
 8008f4c:	899b      	ldrh	r3, [r3, #12]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d106      	bne.n	8008f60 <lwip_netconn_do_writemore+0x9c>
 8008f52:	4b78      	ldr	r3, [pc, #480]	; (8009134 <lwip_netconn_do_writemore+0x270>)
 8008f54:	f240 6279 	movw	r2, #1657	; 0x679
 8008f58:	497d      	ldr	r1, [pc, #500]	; (8009150 <lwip_netconn_do_writemore+0x28c>)
 8008f5a:	4878      	ldr	r0, [pc, #480]	; (800913c <lwip_netconn_do_writemore+0x278>)
 8008f5c:	f00d f92e 	bl	80161bc <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	7f1b      	ldrb	r3, [r3, #28]
 8008f66:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	7f1b      	ldrb	r3, [r3, #28]
 8008f6c:	f003 0302 	and.w	r3, r3, #2
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d104      	bne.n	8008f7e <lwip_netconn_do_writemore+0xba>
 8008f74:	7ebb      	ldrb	r3, [r7, #26]
 8008f76:	f003 0304 	and.w	r3, r3, #4
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <lwip_netconn_do_writemore+0xbe>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e000      	b.n	8008f84 <lwip_netconn_do_writemore+0xc0>
 8008f82:	2300      	movs	r3, #0
 8008f84:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	4413      	add	r3, r2
 8008f96:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a1b      	ldr	r3, [r3, #32]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a1b      	ldr	r3, [r3, #32]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb0:	d307      	bcc.n	8008fc2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8008fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008fb6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8008fb8:	7ebb      	ldrb	r3, [r7, #26]
 8008fba:	f043 0302 	orr.w	r3, r3, #2
 8008fbe:	76bb      	strb	r3, [r7, #26]
 8008fc0:	e001      	b.n	8008fc6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008fce:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8008fd0:	89fa      	ldrh	r2, [r7, #14]
 8008fd2:	8bbb      	ldrh	r3, [r7, #28]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d216      	bcs.n	8009006 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8008fd8:	89fb      	ldrh	r3, [r7, #14]
 8008fda:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8008fdc:	7e3b      	ldrb	r3, [r7, #24]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00d      	beq.n	8008ffe <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8008fe2:	8bbb      	ldrh	r3, [r7, #28]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10e      	bne.n	8009006 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d102      	bne.n	8008ff8 <lwip_netconn_do_writemore+0x134>
 8008ff2:	f06f 0306 	mvn.w	r3, #6
 8008ff6:	e000      	b.n	8008ffa <lwip_netconn_do_writemore+0x136>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8008ffc:	e07c      	b.n	80090f8 <lwip_netconn_do_writemore+0x234>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8008ffe:	7ebb      	ldrb	r3, [r7, #26]
 8009000:	f043 0302 	orr.w	r3, r3, #2
 8009004:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	691a      	ldr	r2, [r3, #16]
 800900c:	8bbb      	ldrh	r3, [r7, #28]
 800900e:	441a      	add	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	429a      	cmp	r2, r3
 800901a:	d906      	bls.n	800902a <lwip_netconn_do_writemore+0x166>
 800901c:	4b45      	ldr	r3, [pc, #276]	; (8009134 <lwip_netconn_do_writemore+0x270>)
 800901e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8009022:	494c      	ldr	r1, [pc, #304]	; (8009154 <lwip_netconn_do_writemore+0x290>)
 8009024:	4845      	ldr	r0, [pc, #276]	; (800913c <lwip_netconn_do_writemore+0x278>)
 8009026:	f00d f8c9 	bl	80161bc <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800902a:	8bbb      	ldrh	r3, [r7, #28]
 800902c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009030:	4293      	cmp	r3, r2
 8009032:	d103      	bne.n	800903c <lwip_netconn_do_writemore+0x178>
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800903a:	d209      	bcs.n	8009050 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009040:	8bba      	ldrh	r2, [r7, #28]
 8009042:	429a      	cmp	r2, r3
 8009044:	d10b      	bne.n	800905e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	899b      	ldrh	r3, [r3, #12]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d906      	bls.n	800905e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009050:	2301      	movs	r3, #1
 8009052:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009054:	7ebb      	ldrb	r3, [r7, #26]
 8009056:	f043 0302 	orr.w	r3, r3, #2
 800905a:	76bb      	strb	r3, [r7, #26]
 800905c:	e001      	b.n	8009062 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6858      	ldr	r0, [r3, #4]
 8009066:	7ebb      	ldrb	r3, [r7, #26]
 8009068:	8bba      	ldrh	r2, [r7, #28]
 800906a:	6979      	ldr	r1, [r7, #20]
 800906c:	f00a f980 	bl	8013370 <tcp_write>
 8009070:	4603      	mov	r3, r0
 8009072:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009074:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d12c      	bne.n	80090d6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	6a12      	ldr	r2, [r2, #32]
 8009084:	6991      	ldr	r1, [r2, #24]
 8009086:	8bba      	ldrh	r2, [r7, #28]
 8009088:	440a      	add	r2, r1
 800908a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a1b      	ldr	r3, [r3, #32]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	6a12      	ldr	r2, [r2, #32]
 8009094:	6911      	ldr	r1, [r2, #16]
 8009096:	8bba      	ldrh	r2, [r7, #28]
 8009098:	440a      	add	r2, r1
 800909a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a1b      	ldr	r3, [r3, #32]
 80090a0:	691a      	ldr	r2, [r3, #16]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d113      	bne.n	80090d6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	899a      	ldrh	r2, [r3, #12]
 80090b4:	3a01      	subs	r2, #1
 80090b6:	b292      	uxth	r2, r2
 80090b8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	899b      	ldrh	r3, [r3, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d008      	beq.n	80090d6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a1b      	ldr	r3, [r3, #32]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	3208      	adds	r2, #8
 80090cc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	2200      	movs	r2, #0
 80090d4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80090d6:	7e7b      	ldrb	r3, [r7, #25]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d004      	beq.n	80090e6 <lwip_netconn_do_writemore+0x222>
 80090dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f43f af50 	beq.w	8008f86 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80090e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d004      	beq.n	80090f8 <lwip_netconn_do_writemore+0x234>
 80090ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80090f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f6:	d146      	bne.n	8009186 <lwip_netconn_do_writemore+0x2c2>
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80090f8:	7e3b      	ldrb	r3, [r7, #24]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d02c      	beq.n	8009158 <lwip_netconn_do_writemore+0x294>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	699a      	ldr	r2, [r3, #24]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a1b      	ldr	r3, [r3, #32]
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	429a      	cmp	r2, r3
 800910c:	d224      	bcs.n	8009158 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	2b00      	cmp	r3, #0
 8009114:	d005      	beq.n	8009122 <lwip_netconn_do_writemore+0x25e>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911a:	2200      	movs	r2, #0
 800911c:	2103      	movs	r1, #3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	7f1b      	ldrb	r3, [r3, #28]
 8009126:	f043 0310 	orr.w	r3, r3, #16
 800912a:	b2da      	uxtb	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	771a      	strb	r2, [r3, #28]
 8009130:	e029      	b.n	8009186 <lwip_netconn_do_writemore+0x2c2>
 8009132:	bf00      	nop
 8009134:	080179d0 	.word	0x080179d0
 8009138:	08017b28 	.word	0x08017b28
 800913c:	08017a14 	.word	0x08017a14
 8009140:	08017e30 	.word	0x08017e30
 8009144:	08017b38 	.word	0x08017b38
 8009148:	08017e50 	.word	0x08017e50
 800914c:	08017e68 	.word	0x08017e68
 8009150:	08017ea8 	.word	0x08017ea8
 8009154:	08017ed0 	.word	0x08017ed0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009160:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009164:	d305      	bcc.n	8009172 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800916e:	2b04      	cmp	r3, #4
 8009170:	d909      	bls.n	8009186 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009176:	2b00      	cmp	r3, #0
 8009178:	d005      	beq.n	8009186 <lwip_netconn_do_writemore+0x2c2>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917e:	2200      	movs	r2, #0
 8009180:	2103      	movs	r1, #3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009186:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d11d      	bne.n	80091ca <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	699a      	ldr	r2, [r3, #24]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a1b      	ldr	r3, [r3, #32]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	429a      	cmp	r2, r3
 800919c:	d002      	beq.n	80091a4 <lwip_netconn_do_writemore+0x2e0>
 800919e:	7e3b      	ldrb	r3, [r7, #24]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80091a4:	2301      	movs	r3, #1
 80091a6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f00a fecf 	bl	8013f50 <tcp_output>
 80091b2:	4603      	mov	r3, r0
 80091b4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80091b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80091ba:	f113 0f04 	cmn.w	r3, #4
 80091be:	d12c      	bne.n	800921a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80091c0:	7b7b      	ldrb	r3, [r7, #13]
 80091c2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80091c4:	2301      	movs	r3, #1
 80091c6:	76fb      	strb	r3, [r7, #27]
 80091c8:	e027      	b.n	800921a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 80091ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80091ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d2:	d120      	bne.n	8009216 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	4618      	mov	r0, r3
 80091da:	f00a feb9 	bl	8013f50 <tcp_output>
 80091de:	4603      	mov	r3, r0
 80091e0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80091e2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80091e6:	f113 0f04 	cmn.w	r3, #4
 80091ea:	d104      	bne.n	80091f6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80091ec:	7b3b      	ldrb	r3, [r7, #12]
 80091ee:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80091f0:	2301      	movs	r3, #1
 80091f2:	76fb      	strb	r3, [r7, #27]
 80091f4:	e011      	b.n	800921a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80091f6:	7e3b      	ldrb	r3, [r7, #24]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00e      	beq.n	800921a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a1b      	ldr	r3, [r3, #32]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d102      	bne.n	800920c <lwip_netconn_do_writemore+0x348>
 8009206:	f06f 0306 	mvn.w	r3, #6
 800920a:	e000      	b.n	800920e <lwip_netconn_do_writemore+0x34a>
 800920c:	2300      	movs	r3, #0
 800920e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009210:	2301      	movs	r3, #1
 8009212:	76fb      	strb	r3, [r7, #27]
 8009214:	e001      	b.n	800921a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009216:	2301      	movs	r3, #1
 8009218:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800921a:	7efb      	ldrb	r3, [r7, #27]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d015      	beq.n	800924c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	330c      	adds	r3, #12
 8009228:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	7ffa      	ldrb	r2, [r7, #31]
 8009230:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800923e:	78fb      	ldrb	r3, [r7, #3]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d006      	beq.n	8009252 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009244:	68b8      	ldr	r0, [r7, #8]
 8009246:	f00c fe59 	bl	8015efc <sys_sem_signal>
 800924a:	e002      	b.n	8009252 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800924c:	f04f 33ff 	mov.w	r3, #4294967295
 8009250:	e000      	b.n	8009254 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3720      	adds	r7, #32
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4618      	mov	r0, r3
 800926e:	f7fe fcd3 	bl	8007c18 <netconn_err>
 8009272:	4603      	mov	r3, r0
 8009274:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d166      	bne.n	800934c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009288:	2b10      	cmp	r3, #16
 800928a:	d15d      	bne.n	8009348 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	785b      	ldrb	r3, [r3, #1]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d002      	beq.n	800929c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009296:	23fb      	movs	r3, #251	; 0xfb
 8009298:	73fb      	strb	r3, [r7, #15]
 800929a:	e057      	b.n	800934c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d04d      	beq.n	8009342 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2201      	movs	r2, #1
 80092ac:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6a1b      	ldr	r3, [r3, #32]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d006      	beq.n	80092c6 <lwip_netconn_do_write+0x6a>
 80092b8:	4b28      	ldr	r3, [pc, #160]	; (800935c <lwip_netconn_do_write+0x100>)
 80092ba:	f240 7223 	movw	r2, #1827	; 0x723
 80092be:	4928      	ldr	r1, [pc, #160]	; (8009360 <lwip_netconn_do_write+0x104>)
 80092c0:	4828      	ldr	r0, [pc, #160]	; (8009364 <lwip_netconn_do_write+0x108>)
 80092c2:	f00c ff7b 	bl	80161bc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d106      	bne.n	80092dc <lwip_netconn_do_write+0x80>
 80092ce:	4b23      	ldr	r3, [pc, #140]	; (800935c <lwip_netconn_do_write+0x100>)
 80092d0:	f240 7224 	movw	r2, #1828	; 0x724
 80092d4:	4924      	ldr	r1, [pc, #144]	; (8009368 <lwip_netconn_do_write+0x10c>)
 80092d6:	4823      	ldr	r0, [pc, #140]	; (8009364 <lwip_netconn_do_write+0x108>)
 80092d8:	f00c ff70 	bl	80161bc <iprintf>
        msg->conn->current_msg = msg;
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2100      	movs	r1, #0
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7ff fdea 	bl	8008ec4 <lwip_netconn_do_writemore>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d02e      	beq.n	8009354 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	785b      	ldrb	r3, [r3, #1]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d006      	beq.n	800930e <lwip_netconn_do_write+0xb2>
 8009300:	4b16      	ldr	r3, [pc, #88]	; (800935c <lwip_netconn_do_write+0x100>)
 8009302:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009306:	4919      	ldr	r1, [pc, #100]	; (800936c <lwip_netconn_do_write+0x110>)
 8009308:	4816      	ldr	r0, [pc, #88]	; (8009364 <lwip_netconn_do_write+0x108>)
 800930a:	f00c ff57 	bl	80161bc <iprintf>
          UNLOCK_TCPIP_CORE();
 800930e:	4818      	ldr	r0, [pc, #96]	; (8009370 <lwip_netconn_do_write+0x114>)
 8009310:	f00c fe65 	bl	8015fde <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	330c      	adds	r3, #12
 800931a:	2100      	movs	r1, #0
 800931c:	4618      	mov	r0, r3
 800931e:	f00c fdbc 	bl	8015e9a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009322:	4813      	ldr	r0, [pc, #76]	; (8009370 <lwip_netconn_do_write+0x114>)
 8009324:	f00c fe4c 	bl	8015fc0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	785b      	ldrb	r3, [r3, #1]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d110      	bne.n	8009354 <lwip_netconn_do_write+0xf8>
 8009332:	4b0a      	ldr	r3, [pc, #40]	; (800935c <lwip_netconn_do_write+0x100>)
 8009334:	f240 722c 	movw	r2, #1836	; 0x72c
 8009338:	490c      	ldr	r1, [pc, #48]	; (800936c <lwip_netconn_do_write+0x110>)
 800933a:	480a      	ldr	r0, [pc, #40]	; (8009364 <lwip_netconn_do_write+0x108>)
 800933c:	f00c ff3e 	bl	80161bc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009340:	e008      	b.n	8009354 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009342:	23f5      	movs	r3, #245	; 0xf5
 8009344:	73fb      	strb	r3, [r7, #15]
 8009346:	e001      	b.n	800934c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009348:	23fa      	movs	r3, #250	; 0xfa
 800934a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	7bfa      	ldrb	r2, [r7, #15]
 8009350:	711a      	strb	r2, [r3, #4]
 8009352:	e000      	b.n	8009356 <lwip_netconn_do_write+0xfa>
        return;
 8009354:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	080179d0 	.word	0x080179d0
 8009360:	08017d74 	.word	0x08017d74
 8009364:	08017a14 	.word	0x08017a14
 8009368:	08017efc 	.word	0x08017efc
 800936c:	08017d90 	.word	0x08017d90
 8009370:	20007414 	.word	0x20007414

08009374 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d06c      	beq.n	8009464 <lwip_netconn_do_getaddr+0xf0>
    if (msg->msg.ad.local) {
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	7c1b      	ldrb	r3, [r3, #16]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d007      	beq.n	80093a2 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	6812      	ldr	r2, [r2, #0]
 800939a:	6852      	ldr	r2, [r2, #4]
 800939c:	6812      	ldr	r2, [r2, #0]
 800939e:	601a      	str	r2, [r3, #0]
 80093a0:	e006      	b.n	80093b0 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	6812      	ldr	r2, [r2, #0]
 80093aa:	6852      	ldr	r2, [r2, #4]
 80093ac:	6852      	ldr	r2, [r2, #4]
 80093ae:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093c0:	2b10      	cmp	r3, #16
 80093c2:	d021      	beq.n	8009408 <lwip_netconn_do_getaddr+0x94>
 80093c4:	2b20      	cmp	r3, #32
 80093c6:	d144      	bne.n	8009452 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	7c1b      	ldrb	r3, [r3, #16]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d007      	beq.n	80093e0 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	6812      	ldr	r2, [r2, #0]
 80093d8:	6852      	ldr	r2, [r2, #4]
 80093da:	8a52      	ldrh	r2, [r2, #18]
 80093dc:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 80093de:	e044      	b.n	800946a <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	7c1b      	ldrb	r3, [r3, #16]
 80093e8:	f003 0304 	and.w	r3, r3, #4
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d103      	bne.n	80093f8 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	22f5      	movs	r2, #245	; 0xf5
 80093f4:	711a      	strb	r2, [r3, #4]
        break;
 80093f6:	e038      	b.n	800946a <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	6812      	ldr	r2, [r2, #0]
 8009400:	6852      	ldr	r2, [r2, #4]
 8009402:	8a92      	ldrh	r2, [r2, #20]
 8009404:	801a      	strh	r2, [r3, #0]
        break;
 8009406:	e030      	b.n	800946a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	7c1b      	ldrb	r3, [r3, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10f      	bne.n	8009430 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 8009418:	2b00      	cmp	r3, #0
 800941a:	d005      	beq.n	8009428 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	7d1b      	ldrb	r3, [r3, #20]
 8009424:	2b01      	cmp	r3, #1
 8009426:	d103      	bne.n	8009430 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	22f5      	movs	r2, #245	; 0xf5
 800942c:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800942e:	e01c      	b.n	800946a <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	68da      	ldr	r2, [r3, #12]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	7c1b      	ldrb	r3, [r3, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d004      	beq.n	8009446 <lwip_netconn_do_getaddr+0xd2>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	8adb      	ldrh	r3, [r3, #22]
 8009444:	e003      	b.n	800944e <lwip_netconn_do_getaddr+0xda>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	8b1b      	ldrh	r3, [r3, #24]
 800944e:	8013      	strh	r3, [r2, #0]
        break;
 8009450:	e00b      	b.n	800946a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 8009452:	4b08      	ldr	r3, [pc, #32]	; (8009474 <lwip_netconn_do_getaddr+0x100>)
 8009454:	f240 727d 	movw	r2, #1917	; 0x77d
 8009458:	4907      	ldr	r1, [pc, #28]	; (8009478 <lwip_netconn_do_getaddr+0x104>)
 800945a:	4808      	ldr	r0, [pc, #32]	; (800947c <lwip_netconn_do_getaddr+0x108>)
 800945c:	f00c feae 	bl	80161bc <iprintf>
        break;
 8009460:	bf00      	nop
 8009462:	e002      	b.n	800946a <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	22f5      	movs	r2, #245	; 0xf5
 8009468:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800946a:	bf00      	nop
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	080179d0 	.word	0x080179d0
 8009478:	08017f10 	.word	0x08017f10
 800947c:	08017a14 	.word	0x08017a14

08009480 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	785b      	ldrb	r3, [r3, #1]
 8009492:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d069      	beq.n	8009572 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80094a8:	2b10      	cmp	r3, #16
 80094aa:	d162      	bne.n	8009572 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d002      	beq.n	80094ba <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80094b4:	7afb      	ldrb	r3, [r7, #11]
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d05b      	beq.n	8009572 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80094ba:	7afb      	ldrb	r3, [r7, #11]
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d103      	bne.n	80094c8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	22f5      	movs	r2, #245	; 0xf5
 80094c4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80094c6:	e059      	b.n	800957c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80094c8:	7afb      	ldrb	r3, [r7, #11]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d103      	bne.n	80094d6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	22fb      	movs	r2, #251	; 0xfb
 80094d2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80094d4:	e052      	b.n	800957c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	7a1b      	ldrb	r3, [r3, #8]
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d004      	beq.n	80094ec <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7ff f8cc 	bl	8008684 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d006      	beq.n	8009504 <lwip_netconn_do_close+0x84>
 80094f6:	4b23      	ldr	r3, [pc, #140]	; (8009584 <lwip_netconn_do_close+0x104>)
 80094f8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80094fc:	4922      	ldr	r1, [pc, #136]	; (8009588 <lwip_netconn_do_close+0x108>)
 80094fe:	4823      	ldr	r0, [pc, #140]	; (800958c <lwip_netconn_do_close+0x10c>)
 8009500:	f00c fe5c 	bl	80161bc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2204      	movs	r2, #4
 800950a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2100      	movs	r1, #0
 800951a:	4618      	mov	r0, r3
 800951c:	f7ff f930 	bl	8008780 <lwip_netconn_do_close_internal>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d029      	beq.n	800957a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	785b      	ldrb	r3, [r3, #1]
 800952c:	2b04      	cmp	r3, #4
 800952e:	d006      	beq.n	800953e <lwip_netconn_do_close+0xbe>
 8009530:	4b14      	ldr	r3, [pc, #80]	; (8009584 <lwip_netconn_do_close+0x104>)
 8009532:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009536:	4916      	ldr	r1, [pc, #88]	; (8009590 <lwip_netconn_do_close+0x110>)
 8009538:	4814      	ldr	r0, [pc, #80]	; (800958c <lwip_netconn_do_close+0x10c>)
 800953a:	f00c fe3f 	bl	80161bc <iprintf>
        UNLOCK_TCPIP_CORE();
 800953e:	4815      	ldr	r0, [pc, #84]	; (8009594 <lwip_netconn_do_close+0x114>)
 8009540:	f00c fd4d 	bl	8015fde <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	330c      	adds	r3, #12
 800954a:	2100      	movs	r1, #0
 800954c:	4618      	mov	r0, r3
 800954e:	f00c fca4 	bl	8015e9a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009552:	4810      	ldr	r0, [pc, #64]	; (8009594 <lwip_netconn_do_close+0x114>)
 8009554:	f00c fd34 	bl	8015fc0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	785b      	ldrb	r3, [r3, #1]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00b      	beq.n	800957a <lwip_netconn_do_close+0xfa>
 8009562:	4b08      	ldr	r3, [pc, #32]	; (8009584 <lwip_netconn_do_close+0x104>)
 8009564:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009568:	4909      	ldr	r1, [pc, #36]	; (8009590 <lwip_netconn_do_close+0x110>)
 800956a:	4808      	ldr	r0, [pc, #32]	; (800958c <lwip_netconn_do_close+0x10c>)
 800956c:	f00c fe26 	bl	80161bc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009570:	e003      	b.n	800957a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	22f5      	movs	r2, #245	; 0xf5
 8009576:	711a      	strb	r2, [r3, #4]
 8009578:	e000      	b.n	800957c <lwip_netconn_do_close+0xfc>
      return;
 800957a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	080179d0 	.word	0x080179d0
 8009588:	08017d74 	.word	0x08017d74
 800958c:	08017a14 	.word	0x08017a14
 8009590:	08017d90 	.word	0x08017d90
 8009594:	20007414 	.word	0x20007414

08009598 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 80095a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	dc04      	bgt.n	80095b4 <err_to_errno+0x1c>
 80095aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095ae:	425b      	negs	r3, r3
 80095b0:	2b10      	cmp	r3, #16
 80095b2:	dd01      	ble.n	80095b8 <err_to_errno+0x20>
    return EIO;
 80095b4:	2305      	movs	r3, #5
 80095b6:	e005      	b.n	80095c4 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 80095b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095bc:	425b      	negs	r3, r3
 80095be:	4a04      	ldr	r2, [pc, #16]	; (80095d0 <err_to_errno+0x38>)
 80095c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	0801af34 	.word	0x0801af34

080095d4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d013      	beq.n	800960a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00b      	beq.n	8009602 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f005 f8fe 	bl	800e7f0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	605a      	str	r2, [r3, #4]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	2006      	movs	r0, #6
 8009606:	f004 fa1f 	bl	800da48 <memp_free>
  }
}
 800960a:	bf00      	nop
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
	...

08009614 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d106      	bne.n	8009630 <netbuf_free+0x1c>
 8009622:	4b0d      	ldr	r3, [pc, #52]	; (8009658 <netbuf_free+0x44>)
 8009624:	2281      	movs	r2, #129	; 0x81
 8009626:	490d      	ldr	r1, [pc, #52]	; (800965c <netbuf_free+0x48>)
 8009628:	480d      	ldr	r0, [pc, #52]	; (8009660 <netbuf_free+0x4c>)
 800962a:	f00c fdc7 	bl	80161bc <iprintf>
 800962e:	e00f      	b.n	8009650 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d004      	beq.n	8009642 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4618      	mov	r0, r3
 800963e:	f005 f8d7 	bl	800e7f0 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	605a      	str	r2, [r3, #4]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	08017f28 	.word	0x08017f28
 800965c:	08017fc4 	.word	0x08017fc4
 8009660:	08017f78 	.word	0x08017f78

08009664 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	4613      	mov	r3, r2
 8009670:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d108      	bne.n	800968a <netbuf_ref+0x26>
 8009678:	4b1c      	ldr	r3, [pc, #112]	; (80096ec <netbuf_ref+0x88>)
 800967a:	2299      	movs	r2, #153	; 0x99
 800967c:	491c      	ldr	r1, [pc, #112]	; (80096f0 <netbuf_ref+0x8c>)
 800967e:	481d      	ldr	r0, [pc, #116]	; (80096f4 <netbuf_ref+0x90>)
 8009680:	f00c fd9c 	bl	80161bc <iprintf>
 8009684:	f06f 030f 	mvn.w	r3, #15
 8009688:	e02b      	b.n	80096e2 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d004      	beq.n	800969c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4618      	mov	r0, r3
 8009698:	f005 f8aa 	bl	800e7f0 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800969c:	2241      	movs	r2, #65	; 0x41
 800969e:	2100      	movs	r1, #0
 80096a0:	2036      	movs	r0, #54	; 0x36
 80096a2:	f004 fd91 	bl	800e1c8 <pbuf_alloc>
 80096a6:	4602      	mov	r2, r0
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d105      	bne.n	80096c0 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 80096ba:	f04f 33ff 	mov.w	r3, #4294967295
 80096be:	e010      	b.n	80096e2 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	88f9      	ldrh	r1, [r7, #6]
 80096d2:	8119      	strh	r1, [r3, #8]
 80096d4:	891b      	ldrh	r3, [r3, #8]
 80096d6:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	08017f28 	.word	0x08017f28
 80096f0:	08017fe0 	.word	0x08017fe0
 80096f4:	08017f78 	.word	0x08017f78

080096f8 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	db02      	blt.n	8009710 <tryget_socket_unconn_nouse+0x18>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2b03      	cmp	r3, #3
 800970e:	dd01      	ble.n	8009714 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8009710:	2300      	movs	r3, #0
 8009712:	e003      	b.n	800971c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	011b      	lsls	r3, r3, #4
 8009718:	4a03      	ldr	r2, [pc, #12]	; (8009728 <tryget_socket_unconn_nouse+0x30>)
 800971a:	4413      	add	r3, r2
}
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	20004048 	.word	0x20004048

0800972c <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff ffdf 	bl	80096f8 <tryget_socket_unconn_nouse>
 800973a:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800973c:	68fb      	ldr	r3, [r7, #12]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b084      	sub	sp, #16
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff ffec 	bl	800972c <tryget_socket_unconn>
 8009754:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d005      	beq.n	8009768 <tryget_socket+0x22>
    if (sock->conn) {
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <tryget_socket+0x22>
      return sock;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	e000      	b.n	800976a <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
	...

08009774 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f7ff ffe2 	bl	8009746 <tryget_socket>
 8009782:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d104      	bne.n	8009794 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800978a:	4b05      	ldr	r3, [pc, #20]	; (80097a0 <get_socket+0x2c>)
 800978c:	2209      	movs	r2, #9
 800978e:	601a      	str	r2, [r3, #0]
    return NULL;
 8009790:	2300      	movs	r3, #0
 8009792:	e000      	b.n	8009796 <get_socket+0x22>
  }
  return sock;
 8009794:	68fb      	ldr	r3, [r7, #12]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	2000e508 	.word	0x2000e508

080097a4 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80097ae:	2300      	movs	r3, #0
 80097b0:	60fb      	str	r3, [r7, #12]
 80097b2:	e052      	b.n	800985a <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 80097b4:	f00c fc46 	bl	8016044 <sys_arch_protect>
 80097b8:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 80097ba:	4a2c      	ldr	r2, [pc, #176]	; (800986c <alloc_socket+0xc8>)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	011b      	lsls	r3, r3, #4
 80097c0:	4413      	add	r3, r2
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d142      	bne.n	800984e <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 80097c8:	4a28      	ldr	r2, [pc, #160]	; (800986c <alloc_socket+0xc8>)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	011b      	lsls	r3, r3, #4
 80097ce:	4413      	add	r3, r2
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 80097d4:	68b8      	ldr	r0, [r7, #8]
 80097d6:	f00c fc43 	bl	8016060 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 80097da:	4a24      	ldr	r2, [pc, #144]	; (800986c <alloc_socket+0xc8>)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	011b      	lsls	r3, r3, #4
 80097e0:	4413      	add	r3, r2
 80097e2:	3304      	adds	r3, #4
 80097e4:	2200      	movs	r2, #0
 80097e6:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 80097e8:	4a20      	ldr	r2, [pc, #128]	; (800986c <alloc_socket+0xc8>)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	011b      	lsls	r3, r3, #4
 80097ee:	4413      	add	r3, r2
 80097f0:	330e      	adds	r3, #14
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d006      	beq.n	8009806 <alloc_socket+0x62>
 80097f8:	4b1d      	ldr	r3, [pc, #116]	; (8009870 <alloc_socket+0xcc>)
 80097fa:	f240 220e 	movw	r2, #526	; 0x20e
 80097fe:	491d      	ldr	r1, [pc, #116]	; (8009874 <alloc_socket+0xd0>)
 8009800:	481d      	ldr	r0, [pc, #116]	; (8009878 <alloc_socket+0xd4>)
 8009802:	f00c fcdb 	bl	80161bc <iprintf>
      sockets[i].rcvevent   = 0;
 8009806:	4a19      	ldr	r2, [pc, #100]	; (800986c <alloc_socket+0xc8>)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	011b      	lsls	r3, r3, #4
 800980c:	4413      	add	r3, r2
 800980e:	3308      	adds	r3, #8
 8009810:	2200      	movs	r2, #0
 8009812:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800981c:	2b10      	cmp	r3, #16
 800981e:	d102      	bne.n	8009826 <alloc_socket+0x82>
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <alloc_socket+0x86>
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <alloc_socket+0x88>
 800982a:	2300      	movs	r3, #0
 800982c:	b299      	uxth	r1, r3
 800982e:	4a0f      	ldr	r2, [pc, #60]	; (800986c <alloc_socket+0xc8>)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	011b      	lsls	r3, r3, #4
 8009834:	4413      	add	r3, r2
 8009836:	330a      	adds	r3, #10
 8009838:	460a      	mov	r2, r1
 800983a:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800983c:	4a0b      	ldr	r2, [pc, #44]	; (800986c <alloc_socket+0xc8>)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	011b      	lsls	r3, r3, #4
 8009842:	4413      	add	r3, r2
 8009844:	330c      	adds	r3, #12
 8009846:	2200      	movs	r2, #0
 8009848:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	e00a      	b.n	8009864 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800984e:	68b8      	ldr	r0, [r7, #8]
 8009850:	f00c fc06 	bl	8016060 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3301      	adds	r3, #1
 8009858:	60fb      	str	r3, [r7, #12]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b03      	cmp	r3, #3
 800985e:	dda9      	ble.n	80097b4 <alloc_socket+0x10>
  }
  return -1;
 8009860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20004048 	.word	0x20004048
 8009870:	080180c0 	.word	0x080180c0
 8009874:	080180f4 	.word	0x080180f4
 8009878:	08018114 	.word	0x08018114

0800987c <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	6852      	ldr	r2, [r2, #4]
 8009890:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	601a      	str	r2, [r3, #0]
  return 1;
 80098a6:	2301      	movs	r3, #1
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3714      	adds	r7, #20
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00d      	beq.n	80098e4 <free_socket_free_elements+0x30>
    if (is_tcp) {
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d005      	beq.n	80098da <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f004 ff8c 	bl	800e7f0 <pbuf_free>
 80098d8:	e004      	b.n	80098e4 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff fe78 	bl	80095d4 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 80098ea:	68b8      	ldr	r0, [r7, #8]
 80098ec:	f7fd fd04 	bl	80072f8 <netconn_delete>
  }
}
 80098f0:	bf00      	nop
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 8009902:	f00c fb9f 	bl	8016044 <sys_arch_protect>
 8009906:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8009908:	f107 0308 	add.w	r3, r7, #8
 800990c:	f107 020c 	add.w	r2, r7, #12
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7ff ffb2 	bl	800987c <free_socket_locked>
 8009918:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800991a:	6978      	ldr	r0, [r7, #20]
 800991c:	f00c fba0 	bl	8016060 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d006      	beq.n	8009934 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f107 0208 	add.w	r2, r7, #8
 800992c:	4619      	mov	r1, r3
 800992e:	6838      	ldr	r0, [r7, #0]
 8009930:	f7ff ffc0 	bl	80098b4 <free_socket_free_elements>
  }
}
 8009934:	bf00      	nop
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800993c:	b590      	push	{r4, r7, lr}
 800993e:	b099      	sub	sp, #100	; 0x64
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f7ff ff11 	bl	8009774 <get_socket>
 8009952:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 8009954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009956:	2b00      	cmp	r3, #0
 8009958:	d102      	bne.n	8009960 <lwip_accept+0x24>
    return -1;
 800995a:	f04f 33ff 	mov.w	r3, #4294967295
 800995e:	e0f8      	b.n	8009b52 <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 8009960:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009968:	4611      	mov	r1, r2
 800996a:	4618      	mov	r0, r3
 800996c:	f7fd fd96 	bl	800749c <netconn_accept>
 8009970:	4603      	mov	r3, r0
 8009972:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 8009976:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800997a:	2b00      	cmp	r3, #0
 800997c:	d02c      	beq.n	80099d8 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800997e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009988:	2b10      	cmp	r3, #16
 800998a:	d008      	beq.n	800999e <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800998c:	235f      	movs	r3, #95	; 0x5f
 800998e:	653b      	str	r3, [r7, #80]	; 0x50
 8009990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009992:	2b00      	cmp	r3, #0
 8009994:	d01d      	beq.n	80099d2 <lwip_accept+0x96>
 8009996:	4a71      	ldr	r2, [pc, #452]	; (8009b5c <lwip_accept+0x220>)
 8009998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800999a:	6013      	str	r3, [r2, #0]
 800999c:	e019      	b.n	80099d2 <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800999e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80099a2:	f113 0f0f 	cmn.w	r3, #15
 80099a6:	d108      	bne.n	80099ba <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 80099a8:	2316      	movs	r3, #22
 80099aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00f      	beq.n	80099d2 <lwip_accept+0x96>
 80099b2:	4a6a      	ldr	r2, [pc, #424]	; (8009b5c <lwip_accept+0x220>)
 80099b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	e00b      	b.n	80099d2 <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 80099ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80099be:	4618      	mov	r0, r3
 80099c0:	f7ff fdea 	bl	8009598 <err_to_errno>
 80099c4:	64b8      	str	r0, [r7, #72]	; 0x48
 80099c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <lwip_accept+0x96>
 80099cc:	4a63      	ldr	r2, [pc, #396]	; (8009b5c <lwip_accept+0x220>)
 80099ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099d0:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 80099d2:	f04f 33ff 	mov.w	r3, #4294967295
 80099d6:	e0bc      	b.n	8009b52 <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 80099d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d106      	bne.n	80099ec <lwip_accept+0xb0>
 80099de:	4b60      	ldr	r3, [pc, #384]	; (8009b60 <lwip_accept+0x224>)
 80099e0:	f240 228b 	movw	r2, #651	; 0x28b
 80099e4:	495f      	ldr	r1, [pc, #380]	; (8009b64 <lwip_accept+0x228>)
 80099e6:	4860      	ldr	r0, [pc, #384]	; (8009b68 <lwip_accept+0x22c>)
 80099e8:	f00c fbe8 	bl	80161bc <iprintf>

  newsock = alloc_socket(newconn, 1);
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	2101      	movs	r1, #1
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7ff fed7 	bl	80097a4 <alloc_socket>
 80099f6:	6478      	str	r0, [r7, #68]	; 0x44
  if (newsock == -1) {
 80099f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fe:	d10e      	bne.n	8009a1e <lwip_accept+0xe2>
    netconn_delete(newconn);
 8009a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fd fc78 	bl	80072f8 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 8009a08:	2317      	movs	r3, #23
 8009a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8009a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <lwip_accept+0xdc>
 8009a12:	4a52      	ldr	r2, [pc, #328]	; (8009b5c <lwip_accept+0x220>)
 8009a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a16:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8009a18:	f04f 33ff 	mov.w	r3, #4294967295
 8009a1c:	e099      	b.n	8009b52 <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8009a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	db02      	blt.n	8009a2a <lwip_accept+0xee>
 8009a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a26:	2b03      	cmp	r3, #3
 8009a28:	dd06      	ble.n	8009a38 <lwip_accept+0xfc>
 8009a2a:	4b4d      	ldr	r3, [pc, #308]	; (8009b60 <lwip_accept+0x224>)
 8009a2c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8009a30:	494e      	ldr	r1, [pc, #312]	; (8009b6c <lwip_accept+0x230>)
 8009a32:	484d      	ldr	r0, [pc, #308]	; (8009b68 <lwip_accept+0x22c>)
 8009a34:	f00c fbc2 	bl	80161bc <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 8009a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a3a:	011b      	lsls	r3, r3, #4
 8009a3c:	4a4c      	ldr	r2, [pc, #304]	; (8009b70 <lwip_accept+0x234>)
 8009a3e:	4413      	add	r3, r2
 8009a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 8009a42:	f00c faff 	bl	8016044 <sys_arch_protect>
 8009a46:	63b8      	str	r0, [r7, #56]	; 0x38
  recvevent = (s16_t)(-1 - newconn->socket);
 8009a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	b21b      	sxth	r3, r3
 8009a4e:	43db      	mvns	r3, r3
 8009a50:	b21b      	sxth	r3, r3
 8009a52:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 8009a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a58:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 8009a5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a5c:	f00c fb00 	bl	8016060 <sys_arch_unprotect>

  if (newconn->callback) {
 8009a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d012      	beq.n	8009a8e <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 8009a68:	4842      	ldr	r0, [pc, #264]	; (8009b74 <lwip_accept+0x238>)
 8009a6a:	f00c faa9 	bl	8015fc0 <sys_mutex_lock>
    while (recvevent > 0) {
 8009a6e:	e008      	b.n	8009a82 <lwip_accept+0x146>
      recvevent--;
 8009a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a72:	3b01      	subs	r3, #1
 8009a74:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 8009a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	2100      	movs	r1, #0
 8009a80:	4798      	blx	r3
    while (recvevent > 0) {
 8009a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	dcf3      	bgt.n	8009a70 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 8009a88:	483a      	ldr	r0, [pc, #232]	; (8009b74 <lwip_accept+0x238>)
 8009a8a:	f00c faa8 	bl	8015fde <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d055      	beq.n	8009b40 <lwip_accept+0x204>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d052      	beq.n	8009b40 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 8009a9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a9c:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8009aa0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f7fd fc43 	bl	8007330 <netconn_getaddr>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 8009ab0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d016      	beq.n	8009ae6 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 8009ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fd fc1c 	bl	80072f8 <netconn_delete>
      free_socket(nsock, 1);
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009ac4:	f7ff ff18 	bl	80098f8 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 8009ac8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7ff fd63 	bl	8009598 <err_to_errno>
 8009ad2:	6378      	str	r0, [r7, #52]	; 0x34
 8009ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d002      	beq.n	8009ae0 <lwip_accept+0x1a4>
 8009ada:	4a20      	ldr	r2, [pc, #128]	; (8009b5c <lwip_accept+0x220>)
 8009adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ade:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8009ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae4:	e035      	b.n	8009b52 <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 8009ae6:	f107 0314 	add.w	r3, r7, #20
 8009aea:	2210      	movs	r2, #16
 8009aec:	701a      	strb	r2, [r3, #0]
 8009aee:	f107 0314 	add.w	r3, r7, #20
 8009af2:	2202      	movs	r2, #2
 8009af4:	705a      	strb	r2, [r3, #1]
 8009af6:	f107 0414 	add.w	r4, r7, #20
 8009afa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009afc:	4618      	mov	r0, r3
 8009afe:	f001 f8c1 	bl	800ac84 <lwip_htons>
 8009b02:	4603      	mov	r3, r0
 8009b04:	8063      	strh	r3, [r4, #2]
 8009b06:	f107 0314 	add.w	r3, r7, #20
 8009b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b0c:	605a      	str	r2, [r3, #4]
 8009b0e:	f107 0314 	add.w	r3, r7, #20
 8009b12:	3308      	adds	r3, #8
 8009b14:	2208      	movs	r2, #8
 8009b16:	2100      	movs	r1, #0
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f00c fb19 	bl	8016150 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	7d3a      	ldrb	r2, [r7, #20]
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d903      	bls.n	8009b30 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 8009b28:	7d3b      	ldrb	r3, [r7, #20]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	f107 0314 	add.w	r3, r7, #20
 8009b38:	4619      	mov	r1, r3
 8009b3a:	68b8      	ldr	r0, [r7, #8]
 8009b3c:	f00c fafd 	bl	801613a <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 8009b40:	2300      	movs	r3, #0
 8009b42:	633b      	str	r3, [r7, #48]	; 0x30
 8009b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <lwip_accept+0x214>
 8009b4a:	4a04      	ldr	r2, [pc, #16]	; (8009b5c <lwip_accept+0x220>)
 8009b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 8009b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3764      	adds	r7, #100	; 0x64
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd90      	pop	{r4, r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	2000e508 	.word	0x2000e508
 8009b60:	080180c0 	.word	0x080180c0
 8009b64:	0801813c 	.word	0x0801813c
 8009b68:	08018114 	.word	0x08018114
 8009b6c:	0801814c 	.word	0x0801814c
 8009b70:	20004048 	.word	0x20004048
 8009b74:	20007414 	.word	0x20007414

08009b78 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b08a      	sub	sp, #40	; 0x28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7ff fdf5 	bl	8009774 <get_socket>
 8009b8a:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d102      	bne.n	8009b98 <lwip_bind+0x20>
    return -1;
 8009b92:	f04f 33ff 	mov.w	r3, #4294967295
 8009b96:	e051      	b.n	8009c3c <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2b10      	cmp	r3, #16
 8009b9c:	d108      	bne.n	8009bb0 <lwip_bind+0x38>
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	785b      	ldrb	r3, [r3, #1]
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d104      	bne.n	8009bb0 <lwip_bind+0x38>
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f003 0303 	and.w	r3, r3, #3
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d014      	beq.n	8009bda <lwip_bind+0x62>
 8009bb0:	4b24      	ldr	r3, [pc, #144]	; (8009c44 <lwip_bind+0xcc>)
 8009bb2:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009bb6:	4924      	ldr	r1, [pc, #144]	; (8009c48 <lwip_bind+0xd0>)
 8009bb8:	4824      	ldr	r0, [pc, #144]	; (8009c4c <lwip_bind+0xd4>)
 8009bba:	f00c faff 	bl	80161bc <iprintf>
 8009bbe:	f06f 000f 	mvn.w	r0, #15
 8009bc2:	f7ff fce9 	bl	8009598 <err_to_errno>
 8009bc6:	6178      	str	r0, [r7, #20]
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d002      	beq.n	8009bd4 <lwip_bind+0x5c>
 8009bce:	4a20      	ldr	r2, [pc, #128]	; (8009c50 <lwip_bind+0xd8>)
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	6013      	str	r3, [r2, #0]
 8009bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd8:	e030      	b.n	8009c3c <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	613b      	str	r3, [r7, #16]
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	885b      	ldrh	r3, [r3, #2]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f001 f84d 	bl	800ac84 <lwip_htons>
 8009bea:	4603      	mov	r3, r0
 8009bec:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 8009bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009bf4:	f107 0110 	add.w	r1, r7, #16
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fd fbeb 	bl	80073d4 <netconn_bind>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 8009c04:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00e      	beq.n	8009c2a <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8009c0c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff fcc1 	bl	8009598 <err_to_errno>
 8009c16:	61b8      	str	r0, [r7, #24]
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <lwip_bind+0xac>
 8009c1e:	4a0c      	ldr	r2, [pc, #48]	; (8009c50 <lwip_bind+0xd8>)
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8009c24:	f04f 33ff 	mov.w	r3, #4294967295
 8009c28:	e008      	b.n	8009c3c <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	61fb      	str	r3, [r7, #28]
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <lwip_bind+0xc2>
 8009c34:	4a06      	ldr	r2, [pc, #24]	; (8009c50 <lwip_bind+0xd8>)
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3728      	adds	r7, #40	; 0x28
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	080180c0 	.word	0x080180c0
 8009c48:	08018164 	.word	0x08018164
 8009c4c:	08018114 	.word	0x08018114
 8009c50:	2000e508 	.word	0x2000e508

08009c54 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b088      	sub	sp, #32
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff fd88 	bl	8009774 <get_socket>
 8009c64:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d102      	bne.n	8009c72 <lwip_listen+0x1e>
    return -1;
 8009c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c70:	e03e      	b.n	8009cf0 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2bfe      	cmp	r3, #254	; 0xfe
 8009c76:	dc03      	bgt.n	8009c80 <lwip_listen+0x2c>
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c7e:	e000      	b.n	8009c82 <lwip_listen+0x2e>
 8009c80:	23ff      	movs	r3, #255	; 0xff
 8009c82:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	683a      	ldr	r2, [r7, #0]
 8009c8a:	b2d2      	uxtb	r2, r2
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fd fbd8 	bl	8007444 <netconn_listen_with_backlog>
 8009c94:	4603      	mov	r3, r0
 8009c96:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 8009c98:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d01e      	beq.n	8009cde <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009caa:	2b10      	cmp	r3, #16
 8009cac:	d008      	beq.n	8009cc0 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 8009cae:	235f      	movs	r3, #95	; 0x5f
 8009cb0:	617b      	str	r3, [r7, #20]
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00f      	beq.n	8009cd8 <lwip_listen+0x84>
 8009cb8:	4a0f      	ldr	r2, [pc, #60]	; (8009cf8 <lwip_listen+0xa4>)
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	6013      	str	r3, [r2, #0]
 8009cbe:	e00b      	b.n	8009cd8 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 8009cc0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7ff fc67 	bl	8009598 <err_to_errno>
 8009cca:	6138      	str	r0, [r7, #16]
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d002      	beq.n	8009cd8 <lwip_listen+0x84>
 8009cd2:	4a09      	ldr	r2, [pc, #36]	; (8009cf8 <lwip_listen+0xa4>)
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 8009cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cdc:	e008      	b.n	8009cf0 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 8009cde:	2300      	movs	r3, #0
 8009ce0:	60fb      	str	r3, [r7, #12]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <lwip_listen+0x9a>
 8009ce8:	4a03      	ldr	r2, [pc, #12]	; (8009cf8 <lwip_listen+0xa4>)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3720      	adds	r7, #32
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	2000e508 	.word	0x2000e508

08009cfc <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08c      	sub	sp, #48	; 0x30
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 8009d0a:	2308      	movs	r3, #8
 8009d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	db01      	blt.n	8009d1e <lwip_recv_tcp+0x22>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	e001      	b.n	8009d22 <lwip_recv_tcp+0x26>
 8009d1e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009d22:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d106      	bne.n	8009d38 <lwip_recv_tcp+0x3c>
 8009d2a:	4b73      	ldr	r3, [pc, #460]	; (8009ef8 <lwip_recv_tcp+0x1fc>)
 8009d2c:	f240 329e 	movw	r2, #926	; 0x39e
 8009d30:	4972      	ldr	r1, [pc, #456]	; (8009efc <lwip_recv_tcp+0x200>)
 8009d32:	4873      	ldr	r0, [pc, #460]	; (8009f00 <lwip_recv_tcp+0x204>)
 8009d34:	f00c fa42 	bl	80161bc <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d42:	2b10      	cmp	r3, #16
 8009d44:	d006      	beq.n	8009d54 <lwip_recv_tcp+0x58>
 8009d46:	4b6c      	ldr	r3, [pc, #432]	; (8009ef8 <lwip_recv_tcp+0x1fc>)
 8009d48:	f240 329f 	movw	r2, #927	; 0x39f
 8009d4c:	496d      	ldr	r1, [pc, #436]	; (8009f04 <lwip_recv_tcp+0x208>)
 8009d4e:	486c      	ldr	r0, [pc, #432]	; (8009f00 <lwip_recv_tcp+0x204>)
 8009d50:	f00c fa34 	bl	80161bc <iprintf>

  if (flags & MSG_DONTWAIT) {
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	f003 0308 	and.w	r3, r3, #8
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d005      	beq.n	8009d6a <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 8009d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d62:	f043 0304 	orr.w	r3, r3, #4
 8009d66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	e036      	b.n	8009de8 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009d82:	f107 0114 	add.w	r1, r7, #20
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fd fdbe 	bl	8007908 <netconn_recv_tcp_pbuf_flags>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 8009d92:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d019      	beq.n	8009dce <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 8009d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f300 808d 	bgt.w	8009ebc <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 8009da2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7ff fbf6 	bl	8009598 <err_to_errno>
 8009dac:	61f8      	str	r0, [r7, #28]
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d002      	beq.n	8009dba <lwip_recv_tcp+0xbe>
 8009db4:	4a54      	ldr	r2, [pc, #336]	; (8009f08 <lwip_recv_tcp+0x20c>)
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8009dba:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8009dbe:	f113 0f0f 	cmn.w	r3, #15
 8009dc2:	d101      	bne.n	8009dc8 <lwip_recv_tcp+0xcc>
          return 0;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	e092      	b.n	8009eee <lwip_recv_tcp+0x1f2>
        } else {
          return -1;
 8009dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dcc:	e08f      	b.n	8009eee <lwip_recv_tcp+0x1f2>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d106      	bne.n	8009de2 <lwip_recv_tcp+0xe6>
 8009dd4:	4b48      	ldr	r3, [pc, #288]	; (8009ef8 <lwip_recv_tcp+0x1fc>)
 8009dd6:	f240 32c5 	movw	r2, #965	; 0x3c5
 8009dda:	494c      	ldr	r1, [pc, #304]	; (8009f0c <lwip_recv_tcp+0x210>)
 8009ddc:	4848      	ldr	r0, [pc, #288]	; (8009f00 <lwip_recv_tcp+0x204>)
 8009dde:	f00c f9ed 	bl	80161bc <iprintf>
      sock->lastdata.pbuf = p;
 8009de2:	697a      	ldr	r2, [r7, #20]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	891b      	ldrh	r3, [r3, #8]
 8009dec:	461a      	mov	r2, r3
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	429a      	cmp	r2, r3
 8009df2:	da03      	bge.n	8009dfc <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	891b      	ldrh	r3, [r3, #8]
 8009df8:	847b      	strh	r3, [r7, #34]	; 0x22
 8009dfa:	e001      	b.n	8009e00 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfe:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 8009e00:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e04:	441a      	add	r2, r3
 8009e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	da03      	bge.n	8009e14 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	43db      	mvns	r3, r3
 8009e12:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8009e14:	6978      	ldr	r0, [r7, #20]
 8009e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	18d1      	adds	r1, r2, r3
 8009e1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f004 feec 	bl	800ebfc <pbuf_copy_partial>

    recvd += copylen;
 8009e24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e28:	4413      	add	r3, r2
 8009e2a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8009e2c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	429a      	cmp	r2, r3
 8009e32:	dd06      	ble.n	8009e42 <lwip_recv_tcp+0x146>
 8009e34:	4b30      	ldr	r3, [pc, #192]	; (8009ef8 <lwip_recv_tcp+0x1fc>)
 8009e36:	f240 32dd 	movw	r2, #989	; 0x3dd
 8009e3a:	4935      	ldr	r1, [pc, #212]	; (8009f10 <lwip_recv_tcp+0x214>)
 8009e3c:	4830      	ldr	r0, [pc, #192]	; (8009f00 <lwip_recv_tcp+0x204>)
 8009e3e:	f00c f9bd 	bl	80161bc <iprintf>
    recv_left -= copylen;
 8009e42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	f003 0301 	and.w	r3, r3, #1
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d123      	bne.n	8009e9c <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	891b      	ldrh	r3, [r3, #8]
 8009e58:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d906      	bls.n	8009e6c <lwip_recv_tcp+0x170>
 8009e5e:	4b26      	ldr	r3, [pc, #152]	; (8009ef8 <lwip_recv_tcp+0x1fc>)
 8009e60:	f240 32e3 	movw	r2, #995	; 0x3e3
 8009e64:	492b      	ldr	r1, [pc, #172]	; (8009f14 <lwip_recv_tcp+0x218>)
 8009e66:	4826      	ldr	r0, [pc, #152]	; (8009f00 <lwip_recv_tcp+0x204>)
 8009e68:	f00c f9a8 	bl	80161bc <iprintf>
      if (p->tot_len - copylen > 0) {
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	891b      	ldrh	r3, [r3, #8]
 8009e70:	461a      	mov	r2, r3
 8009e72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	dd09      	ble.n	8009e8e <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009e7e:	4611      	mov	r1, r2
 8009e80:	4618      	mov	r0, r3
 8009e82:	f004 fc82 	bl	800e78a <pbuf_free_header>
 8009e86:	4602      	mov	r2, r0
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	605a      	str	r2, [r3, #4]
 8009e8c:	e006      	b.n	8009e9c <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f004 fcaa 	bl	800e7f0 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8009e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ea0:	f043 0314 	orr.w	r3, r3, #20
 8009ea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	dd07      	ble.n	8009ebe <lwip_recv_tcp+0x1c2>
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f43f af58 	beq.w	8009d6a <lwip_recv_tcp+0x6e>
 8009eba:	e000      	b.n	8009ebe <lwip_recv_tcp+0x1c2>
          goto lwip_recv_tcp_done;
 8009ebc:	bf00      	nop
lwip_recv_tcp_done:
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8009ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	dd0b      	ble.n	8009edc <lwip_recv_tcp+0x1e0>
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d106      	bne.n	8009edc <lwip_recv_tcp+0x1e0>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fd fc64 	bl	80077a4 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 8009edc:	2300      	movs	r3, #0
 8009ede:	61bb      	str	r3, [r7, #24]
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d002      	beq.n	8009eec <lwip_recv_tcp+0x1f0>
 8009ee6:	4a08      	ldr	r2, [pc, #32]	; (8009f08 <lwip_recv_tcp+0x20c>)
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	6013      	str	r3, [r2, #0]
  return recvd;
 8009eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3730      	adds	r7, #48	; 0x30
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	080180c0 	.word	0x080180c0
 8009efc:	080181b8 	.word	0x080181b8
 8009f00:	08018114 	.word	0x08018114
 8009f04:	080181c8 	.word	0x080181c8
 8009f08:	2000e508 	.word	0x2000e508
 8009f0c:	080181ec 	.word	0x080181ec
 8009f10:	080181f8 	.word	0x080181f8
 8009f14:	08018220 	.word	0x08018220

08009f18 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 8009f18:	b590      	push	{r4, r7, lr}
 8009f1a:	b08b      	sub	sp, #44	; 0x2c
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	603b      	str	r3, [r7, #0]
 8009f24:	4613      	mov	r3, r2
 8009f26:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d106      	bne.n	8009f40 <lwip_sock_make_addr+0x28>
 8009f32:	4b2b      	ldr	r3, [pc, #172]	; (8009fe0 <lwip_sock_make_addr+0xc8>)
 8009f34:	f240 4207 	movw	r2, #1031	; 0x407
 8009f38:	492a      	ldr	r1, [pc, #168]	; (8009fe4 <lwip_sock_make_addr+0xcc>)
 8009f3a:	482b      	ldr	r0, [pc, #172]	; (8009fe8 <lwip_sock_make_addr+0xd0>)
 8009f3c:	f00c f93e 	bl	80161bc <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d106      	bne.n	8009f54 <lwip_sock_make_addr+0x3c>
 8009f46:	4b26      	ldr	r3, [pc, #152]	; (8009fe0 <lwip_sock_make_addr+0xc8>)
 8009f48:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8009f4c:	4927      	ldr	r1, [pc, #156]	; (8009fec <lwip_sock_make_addr+0xd4>)
 8009f4e:	4826      	ldr	r0, [pc, #152]	; (8009fe8 <lwip_sock_make_addr+0xd0>)
 8009f50:	f00c f934 	bl	80161bc <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d106      	bne.n	8009f68 <lwip_sock_make_addr+0x50>
 8009f5a:	4b21      	ldr	r3, [pc, #132]	; (8009fe0 <lwip_sock_make_addr+0xc8>)
 8009f5c:	f240 4209 	movw	r2, #1033	; 0x409
 8009f60:	4923      	ldr	r1, [pc, #140]	; (8009ff0 <lwip_sock_make_addr+0xd8>)
 8009f62:	4821      	ldr	r0, [pc, #132]	; (8009fe8 <lwip_sock_make_addr+0xd0>)
 8009f64:	f00c f92a 	bl	80161bc <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8009f68:	f107 0314 	add.w	r3, r7, #20
 8009f6c:	2210      	movs	r2, #16
 8009f6e:	701a      	strb	r2, [r3, #0]
 8009f70:	f107 0314 	add.w	r3, r7, #20
 8009f74:	2202      	movs	r2, #2
 8009f76:	705a      	strb	r2, [r3, #1]
 8009f78:	f107 0414 	add.w	r4, r7, #20
 8009f7c:	88fb      	ldrh	r3, [r7, #6]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 fe80 	bl	800ac84 <lwip_htons>
 8009f84:	4603      	mov	r3, r0
 8009f86:	8063      	strh	r3, [r4, #2]
 8009f88:	f107 0314 	add.w	r3, r7, #20
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	6812      	ldr	r2, [r2, #0]
 8009f90:	605a      	str	r2, [r3, #4]
 8009f92:	f107 0314 	add.w	r3, r7, #20
 8009f96:	3308      	adds	r3, #8
 8009f98:	2208      	movs	r2, #8
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f00c f8d7 	bl	8016150 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	7d3a      	ldrb	r2, [r7, #20]
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d202      	bcs.n	8009fb2 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 8009fac:	2301      	movs	r3, #1
 8009fae:	627b      	str	r3, [r7, #36]	; 0x24
 8009fb0:	e008      	b.n	8009fc4 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 8009fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	7d3a      	ldrb	r2, [r7, #20]
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d903      	bls.n	8009fc4 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 8009fbc:	7d3b      	ldrb	r3, [r7, #20]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc2:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	f107 0314 	add.w	r3, r7, #20
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6838      	ldr	r0, [r7, #0]
 8009fd0:	f00c f8b3 	bl	801613a <memcpy>
  return truncated;
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	372c      	adds	r7, #44	; 0x2c
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd90      	pop	{r4, r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	080180c0 	.word	0x080180c0
 8009fe4:	08018230 	.word	0x08018230
 8009fe8:	08018114 	.word	0x08018114
 8009fec:	08018244 	.word	0x08018244
 8009ff0:	08018254 	.word	0x08018254

08009ff4 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b088      	sub	sp, #32
 8009ff8:	af02      	add	r7, sp, #8
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
 800a000:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <lwip_recv_tcp_from+0x18>
    return 0;
 800a008:	2300      	movs	r3, #0
 800a00a:	e021      	b.n	800a050 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d01d      	beq.n	800a04e <lwip_recv_tcp_from+0x5a>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d01a      	beq.n	800a04e <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6818      	ldr	r0, [r3, #0]
 800a01c:	f107 0216 	add.w	r2, r7, #22
 800a020:	f107 0110 	add.w	r1, r7, #16
 800a024:	2300      	movs	r3, #0
 800a026:	f7fd f983 	bl	8007330 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00e      	beq.n	800a04e <lwip_recv_tcp_from+0x5a>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00b      	beq.n	800a04e <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6818      	ldr	r0, [r3, #0]
 800a03a:	8afa      	ldrh	r2, [r7, #22]
 800a03c:	f107 0110 	add.w	r1, r7, #16
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f7ff ff67 	bl	8009f18 <lwip_sock_make_addr>
 800a04a:	4603      	mov	r3, r0
 800a04c:	e000      	b.n	800a050 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800a058:	b590      	push	{r4, r7, lr}
 800a05a:	b08d      	sub	sp, #52	; 0x34
 800a05c:	af02      	add	r7, sp, #8
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10d      	bne.n	800a08a <lwip_recvfrom_udp_raw+0x32>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	2b00      	cmp	r3, #0
 800a074:	dd09      	ble.n	800a08a <lwip_recvfrom_udp_raw+0x32>
 800a076:	4b5e      	ldr	r3, [pc, #376]	; (800a1f0 <lwip_recvfrom_udp_raw+0x198>)
 800a078:	f240 4249 	movw	r2, #1097	; 0x449
 800a07c:	495d      	ldr	r1, [pc, #372]	; (800a1f4 <lwip_recvfrom_udp_raw+0x19c>)
 800a07e:	485e      	ldr	r0, [pc, #376]	; (800a1f8 <lwip_recvfrom_udp_raw+0x1a0>)
 800a080:	f00c f89c 	bl	80161bc <iprintf>
 800a084:	f06f 030f 	mvn.w	r3, #15
 800a088:	e0ad      	b.n	800a1e6 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	f003 0308 	and.w	r3, r3, #8
 800a090:	2b00      	cmp	r3, #0
 800a092:	d003      	beq.n	800a09c <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800a094:	2304      	movs	r3, #4
 800a096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a09a:	e002      	b.n	800a0a2 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800a09c:	2300      	movs	r3, #0
 800a09e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d11e      	bne.n	800a0ec <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a0b6:	f107 0110 	add.w	r1, r7, #16
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fd fc50 	bl	8007960 <netconn_recv_udp_raw_netbuf_flags>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800a0c4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d002      	beq.n	800a0d2 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800a0cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a0d0:	e089      	b.n	800a1e6 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d106      	bne.n	800a0e6 <lwip_recvfrom_udp_raw+0x8e>
 800a0d8:	4b45      	ldr	r3, [pc, #276]	; (800a1f0 <lwip_recvfrom_udp_raw+0x198>)
 800a0da:	f240 425e 	movw	r2, #1118	; 0x45e
 800a0de:	4947      	ldr	r1, [pc, #284]	; (800a1fc <lwip_recvfrom_udp_raw+0x1a4>)
 800a0e0:	4845      	ldr	r0, [pc, #276]	; (800a1f8 <lwip_recvfrom_udp_raw+0x1a0>)
 800a0e2:	f00c f86b 	bl	80161bc <iprintf>
    sock->lastdata.netbuf = buf;
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	891b      	ldrh	r3, [r3, #8]
 800a0f2:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	61fb      	str	r3, [r7, #28]
 800a0fc:	e029      	b.n	800a152 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800a0fe:	8b3a      	ldrh	r2, [r7, #24]
 800a100:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	689a      	ldr	r2, [r3, #8]
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	00db      	lsls	r3, r3, #3
 800a10e:	4413      	add	r3, r2
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	8afb      	ldrh	r3, [r7, #22]
 800a114:	429a      	cmp	r2, r3
 800a116:	d902      	bls.n	800a11e <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800a118:	8afb      	ldrh	r3, [r7, #22]
 800a11a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a11c:	e006      	b.n	800a12c <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	689a      	ldr	r2, [r3, #8]
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	00db      	lsls	r3, r3, #3
 800a126:	4413      	add	r3, r2
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	6818      	ldr	r0, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	689a      	ldr	r2, [r3, #8]
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	00db      	lsls	r3, r3, #3
 800a138:	4413      	add	r3, r2
 800a13a:	6819      	ldr	r1, [r3, #0]
 800a13c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a13e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a140:	f004 fd5c 	bl	800ebfc <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800a144:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a146:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a148:	4413      	add	r3, r2
 800a14a:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	3301      	adds	r3, #1
 800a150:	61fb      	str	r3, [r7, #28]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68da      	ldr	r2, [r3, #12]
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	429a      	cmp	r2, r3
 800a15a:	dd03      	ble.n	800a164 <lwip_recvfrom_udp_raw+0x10c>
 800a15c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a15e:	8b3b      	ldrh	r3, [r7, #24]
 800a160:	429a      	cmp	r2, r3
 800a162:	d3cc      	bcc.n	800a0fe <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d01a      	beq.n	800a1a2 <lwip_recvfrom_udp_raw+0x14a>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d016      	beq.n	800a1a2 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d012      	beq.n	800a1a2 <lwip_recvfrom_udp_raw+0x14a>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00e      	beq.n	800a1a2 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6818      	ldr	r0, [r3, #0]
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f103 0108 	add.w	r1, r3, #8
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	3304      	adds	r3, #4
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	4623      	mov	r3, r4
 800a19e:	f7ff febb 	bl	8009f18 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d007      	beq.n	800a1c0 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800a1b4:	7d7b      	ldrb	r3, [r7, #21]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d102      	bne.n	800a1c0 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	f003 0301 	and.w	r3, r3, #1
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d106      	bne.n	800a1d8 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7ff f9fe 	bl	80095d4 <netbuf_delete>
  }
  if (datagram_len) {
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d002      	beq.n	800a1e4 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	8b3a      	ldrh	r2, [r7, #24]
 800a1e2:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	372c      	adds	r7, #44	; 0x2c
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd90      	pop	{r4, r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	080180c0 	.word	0x080180c0
 800a1f4:	08018264 	.word	0x08018264
 800a1f8:	08018114 	.word	0x08018114
 800a1fc:	08018290 	.word	0x08018290

0800a200 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b096      	sub	sp, #88	; 0x58
 800a204:	af02      	add	r7, sp, #8
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
 800a20c:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f7ff fab0 	bl	8009774 <get_socket>
 800a214:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800a216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d102      	bne.n	800a222 <lwip_recvfrom+0x22>
    return -1;
 800a21c:	f04f 33ff 	mov.w	r3, #4294967295
 800a220:	e070      	b.n	800a304 <lwip_recvfrom+0x104>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800a222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a22c:	2b10      	cmp	r3, #16
 800a22e:	d112      	bne.n	800a256 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	68b9      	ldr	r1, [r7, #8]
 800a236:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a238:	f7ff fd60 	bl	8009cfc <lwip_recv_tcp>
 800a23c:	64b8      	str	r0, [r7, #72]	; 0x48
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800a23e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a240:	9301      	str	r3, [sp, #4]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	4b31      	ldr	r3, [pc, #196]	; (800a30c <lwip_recvfrom+0x10c>)
 800a248:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a24a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a24c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a24e:	f7ff fed1 	bl	8009ff4 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800a252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a254:	e056      	b.n	800a304 <lwip_recvfrom+0x104>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800a256:	2300      	movs	r3, #0
 800a258:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800a262:	2300      	movs	r3, #0
 800a264:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800a26e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a272:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800a274:	2301      	movs	r3, #1
 800a276:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800a278:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a27a:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800a27c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d002      	beq.n	800a288 <lwip_recvfrom+0x88>
 800a282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	e000      	b.n	800a28a <lwip_recvfrom+0x8a>
 800a288:	2300      	movs	r3, #0
 800a28a:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800a28c:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800a290:	f107 0214 	add.w	r2, r7, #20
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	460b      	mov	r3, r1
 800a29a:	6839      	ldr	r1, [r7, #0]
 800a29c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a29e:	f7ff fedb 	bl	800a058 <lwip_recvfrom_udp_raw>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (err != ERR_OK) {
 800a2a8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00e      	beq.n	800a2ce <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800a2b0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7ff f96f 	bl	8009598 <err_to_errno>
 800a2ba:	6438      	str	r0, [r7, #64]	; 0x40
 800a2bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d002      	beq.n	800a2c8 <lwip_recvfrom+0xc8>
 800a2c2:	4a13      	ldr	r2, [pc, #76]	; (800a310 <lwip_recvfrom+0x110>)
 800a2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c6:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800a2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2cc:	e01a      	b.n	800a304 <lwip_recvfrom+0x104>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800a2ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	bf28      	it	cs
 800a2d8:	4613      	movcs	r3, r2
 800a2da:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	bf28      	it	cs
 800a2e2:	4613      	movcs	r3, r2
 800a2e4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (fromlen) {
 800a2e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <lwip_recvfrom+0xf2>
      *fromlen = msg.msg_namelen;
 800a2ec:	69ba      	ldr	r2, [r7, #24]
 800a2ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2f0:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <lwip_recvfrom+0x102>
 800a2fc:	4a04      	ldr	r2, [pc, #16]	; (800a310 <lwip_recvfrom+0x110>)
 800a2fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a300:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800a302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a304:	4618      	mov	r0, r3
 800a306:	3750      	adds	r7, #80	; 0x50
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	0801829c 	.word	0x0801829c
 800a310:	2000e508 	.word	0x2000e508

0800a314 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af02      	add	r7, sp, #8
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
 800a320:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800a322:	2300      	movs	r3, #0
 800a324:	9301      	str	r3, [sp, #4]
 800a326:	2300      	movs	r3, #0
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	68b9      	ldr	r1, [r7, #8]
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f7ff ff65 	bl	800a200 <lwip_recvfrom>
 800a336:	4603      	mov	r3, r0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b08a      	sub	sp, #40	; 0x28
 800a344:	af02      	add	r7, sp, #8
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f7ff fa10 	bl	8009774 <get_socket>
 800a354:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d102      	bne.n	800a362 <lwip_send+0x22>
    return -1;
 800a35c:	f04f 33ff 	mov.w	r3, #4294967295
 800a360:	e048      	b.n	800a3f4 <lwip_send+0xb4>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a36c:	2b10      	cmp	r3, #16
 800a36e:	d00b      	beq.n	800a388 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800a370:	2300      	movs	r3, #0
 800a372:	9301      	str	r3, [sp, #4]
 800a374:	2300      	movs	r3, #0
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	68b9      	ldr	r1, [r7, #8]
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f000 f83e 	bl	800a400 <lwip_sendto>
 800a384:	4603      	mov	r3, r0
 800a386:	e035      	b.n	800a3f4 <lwip_send+0xb4>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <lwip_send+0x56>
 800a392:	2203      	movs	r2, #3
 800a394:	e000      	b.n	800a398 <lwip_send+0x58>
 800a396:	2201      	movs	r2, #1
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	f003 0308 	and.w	r3, r3, #8
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d001      	beq.n	800a3a6 <lwip_send+0x66>
 800a3a2:	2304      	movs	r3, #4
 800a3a4:	e000      	b.n	800a3a8 <lwip_send+0x68>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800a3ac:	76fb      	strb	r3, [r7, #27]
  written = 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	6818      	ldr	r0, [r3, #0]
 800a3b6:	7efa      	ldrb	r2, [r7, #27]
 800a3b8:	f107 0310 	add.w	r3, r7, #16
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	68b9      	ldr	r1, [r7, #8]
 800a3c4:	f7fd fb26 	bl	8007a14 <netconn_write_partly>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800a3cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7ff f8e1 	bl	8009598 <err_to_errno>
 800a3d6:	6178      	str	r0, [r7, #20]
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d002      	beq.n	800a3e4 <lwip_send+0xa4>
 800a3de:	4a07      	ldr	r2, [pc, #28]	; (800a3fc <lwip_send+0xbc>)
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800a3e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <lwip_send+0xb0>
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	e001      	b.n	800a3f4 <lwip_send+0xb4>
 800a3f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3720      	adds	r7, #32
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	2000e508 	.word	0x2000e508

0800a400 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b08e      	sub	sp, #56	; 0x38
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f7ff f9b0 	bl	8009774 <get_socket>
 800a414:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d102      	bne.n	800a422 <lwip_sendto+0x22>
    return -1;
 800a41c:	f04f 33ff 	mov.w	r3, #4294967295
 800a420:	e093      	b.n	800a54a <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800a422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a42c:	2b10      	cmp	r3, #16
 800a42e:	d107      	bne.n	800a440 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	68b9      	ldr	r1, [r7, #8]
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f7ff ff82 	bl	800a340 <lwip_send>
 800a43c:	4603      	mov	r3, r0
 800a43e:	e084      	b.n	800a54a <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a446:	d30a      	bcc.n	800a45e <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800a448:	235a      	movs	r3, #90	; 0x5a
 800a44a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d002      	beq.n	800a458 <lwip_sendto+0x58>
 800a452:	4a40      	ldr	r2, [pc, #256]	; (800a554 <lwip_sendto+0x154>)
 800a454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a456:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a458:	f04f 33ff 	mov.w	r3, #4294967295
 800a45c:	e075      	b.n	800a54a <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	857b      	strh	r3, [r7, #42]	; 0x2a
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800a462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a464:	2b00      	cmp	r3, #0
 800a466:	d102      	bne.n	800a46e <lwip_sendto+0x6e>
 800a468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d023      	beq.n	800a4b6 <lwip_sendto+0xb6>
 800a46e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a470:	2b10      	cmp	r3, #16
 800a472:	d10b      	bne.n	800a48c <lwip_sendto+0x8c>
 800a474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a476:	2b00      	cmp	r3, #0
 800a478:	d008      	beq.n	800a48c <lwip_sendto+0x8c>
 800a47a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a47c:	785b      	ldrb	r3, [r3, #1]
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d104      	bne.n	800a48c <lwip_sendto+0x8c>
 800a482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a484:	f003 0303 	and.w	r3, r3, #3
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d014      	beq.n	800a4b6 <lwip_sendto+0xb6>
 800a48c:	4b32      	ldr	r3, [pc, #200]	; (800a558 <lwip_sendto+0x158>)
 800a48e:	f240 6255 	movw	r2, #1621	; 0x655
 800a492:	4932      	ldr	r1, [pc, #200]	; (800a55c <lwip_sendto+0x15c>)
 800a494:	4832      	ldr	r0, [pc, #200]	; (800a560 <lwip_sendto+0x160>)
 800a496:	f00b fe91 	bl	80161bc <iprintf>
 800a49a:	f06f 000f 	mvn.w	r0, #15
 800a49e:	f7ff f87b 	bl	8009598 <err_to_errno>
 800a4a2:	6278      	str	r0, [r7, #36]	; 0x24
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d002      	beq.n	800a4b0 <lwip_sendto+0xb0>
 800a4aa:	4a2a      	ldr	r2, [pc, #168]	; (800a554 <lwip_sendto+0x154>)
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b4:	e049      	b.n	800a54a <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	617b      	str	r3, [r7, #20]
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800a4be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00a      	beq.n	800a4da <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800a4c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	61bb      	str	r3, [r7, #24]
 800a4ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4cc:	885b      	ldrh	r3, [r3, #2]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f000 fbd8 	bl	800ac84 <lwip_htons>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a4d8:	e003      	b.n	800a4e2 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800a4de:	2300      	movs	r3, #0
 800a4e0:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800a4e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a4e4:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800a4e6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800a4e8:	f107 0310 	add.w	r3, r7, #16
 800a4ec:	68b9      	ldr	r1, [r7, #8]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff f8b8 	bl	8009664 <netbuf_ref>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800a4fa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10a      	bne.n	800a518 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800a502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f107 0210 	add.w	r2, r7, #16
 800a50a:	4611      	mov	r1, r2
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fd fa53 	bl	80079b8 <netconn_send>
 800a512:	4603      	mov	r3, r0
 800a514:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800a518:	f107 0310 	add.w	r3, r7, #16
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7ff f879 	bl	8009614 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800a522:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a526:	4618      	mov	r0, r3
 800a528:	f7ff f836 	bl	8009598 <err_to_errno>
 800a52c:	6238      	str	r0, [r7, #32]
 800a52e:	6a3b      	ldr	r3, [r7, #32]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <lwip_sendto+0x13a>
 800a534:	4a07      	ldr	r2, [pc, #28]	; (800a554 <lwip_sendto+0x154>)
 800a536:	6a3b      	ldr	r3, [r7, #32]
 800a538:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800a53a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <lwip_sendto+0x146>
 800a542:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a544:	e001      	b.n	800a54a <lwip_sendto+0x14a>
 800a546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3738      	adds	r7, #56	; 0x38
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	2000e508 	.word	0x2000e508
 800a558:	080180c0 	.word	0x080180c0
 800a55c:	080183a0 	.word	0x080183a0
 800a560:	08018114 	.word	0x08018114

0800a564 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	2b02      	cmp	r3, #2
 800a574:	d00d      	beq.n	800a592 <lwip_socket+0x2e>
 800a576:	2b03      	cmp	r3, #3
 800a578:	d002      	beq.n	800a580 <lwip_socket+0x1c>
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d016      	beq.n	800a5ac <lwip_socket+0x48>
 800a57e:	e01c      	b.n	800a5ba <lwip_socket+0x56>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	b2db      	uxtb	r3, r3
 800a584:	4a21      	ldr	r2, [pc, #132]	; (800a60c <lwip_socket+0xa8>)
 800a586:	4619      	mov	r1, r3
 800a588:	2040      	movs	r0, #64	; 0x40
 800a58a:	f7fc fe17 	bl	80071bc <netconn_new_with_proto_and_callback>
 800a58e:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800a590:	e019      	b.n	800a5c6 <lwip_socket+0x62>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2b88      	cmp	r3, #136	; 0x88
 800a596:	d101      	bne.n	800a59c <lwip_socket+0x38>
 800a598:	2321      	movs	r3, #33	; 0x21
 800a59a:	e000      	b.n	800a59e <lwip_socket+0x3a>
 800a59c:	2320      	movs	r3, #32
 800a59e:	4a1b      	ldr	r2, [pc, #108]	; (800a60c <lwip_socket+0xa8>)
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fc fe0a 	bl	80071bc <netconn_new_with_proto_and_callback>
 800a5a8:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a5aa:	e00c      	b.n	800a5c6 <lwip_socket+0x62>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800a5ac:	4a17      	ldr	r2, [pc, #92]	; (800a60c <lwip_socket+0xa8>)
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	2010      	movs	r0, #16
 800a5b2:	f7fc fe03 	bl	80071bc <netconn_new_with_proto_and_callback>
 800a5b6:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800a5b8:	e005      	b.n	800a5c6 <lwip_socket+0x62>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800a5ba:	4b15      	ldr	r3, [pc, #84]	; (800a610 <lwip_socket+0xac>)
 800a5bc:	2216      	movs	r2, #22
 800a5be:	601a      	str	r2, [r3, #0]
      return -1;
 800a5c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c4:	e01e      	b.n	800a604 <lwip_socket+0xa0>
  }

  if (!conn) {
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d105      	bne.n	800a5d8 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800a5cc:	4b10      	ldr	r3, [pc, #64]	; (800a610 <lwip_socket+0xac>)
 800a5ce:	2269      	movs	r2, #105	; 0x69
 800a5d0:	601a      	str	r2, [r3, #0]
    return -1;
 800a5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a5d6:	e015      	b.n	800a604 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 800a5d8:	2100      	movs	r1, #0
 800a5da:	6978      	ldr	r0, [r7, #20]
 800a5dc:	f7ff f8e2 	bl	80097a4 <alloc_socket>
 800a5e0:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e8:	d108      	bne.n	800a5fc <lwip_socket+0x98>
    netconn_delete(conn);
 800a5ea:	6978      	ldr	r0, [r7, #20]
 800a5ec:	f7fc fe84 	bl	80072f8 <netconn_delete>
    set_errno(ENFILE);
 800a5f0:	4b07      	ldr	r3, [pc, #28]	; (800a610 <lwip_socket+0xac>)
 800a5f2:	2217      	movs	r2, #23
 800a5f4:	601a      	str	r2, [r3, #0]
    return -1;
 800a5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5fa:	e003      	b.n	800a604 <lwip_socket+0xa0>
  }
  conn->socket = i;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	693a      	ldr	r2, [r7, #16]
 800a600:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800a602:	693b      	ldr	r3, [r7, #16]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3718      	adds	r7, #24
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	0800a69d 	.word	0x0800a69d
 800a610:	2000e508 	.word	0x2000e508

0800a614 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800a614:	b480      	push	{r7}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
 800a620:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800a622:	2300      	movs	r3, #0
 800a624:	617b      	str	r3, [r7, #20]
 800a626:	e02c      	b.n	800a682 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	695a      	ldr	r2, [r3, #20]
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	00db      	lsls	r3, r3, #3
 800a630:	4413      	add	r3, r2
 800a632:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d11e      	bne.n	800a67c <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d009      	beq.n	800a658 <lwip_poll_should_wake+0x44>
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	d001      	beq.n	800a658 <lwip_poll_should_wake+0x44>
        return 1;
 800a654:	2301      	movs	r3, #1
 800a656:	e01a      	b.n	800a68e <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d009      	beq.n	800a672 <lwip_poll_should_wake+0x5e>
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a664:	b29b      	uxth	r3, r3
 800a666:	f003 0302 	and.w	r3, r3, #2
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <lwip_poll_should_wake+0x5e>
        return 1;
 800a66e:	2301      	movs	r3, #1
 800a670:	e00d      	b.n	800a68e <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800a678:	2301      	movs	r3, #1
 800a67a:	e008      	b.n	800a68e <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	3301      	adds	r3, #1
 800a680:	617b      	str	r3, [r7, #20]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	699a      	ldr	r2, [r3, #24]
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d8cd      	bhi.n	800a628 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	371c      	adds	r7, #28
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
	...

0800a69c <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b08a      	sub	sp, #40	; 0x28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	70fb      	strb	r3, [r7, #3]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f000 80a4 	beq.w	800a7fc <event_callback+0x160>
    s = conn->socket;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	da18      	bge.n	800a6f2 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800a6c0:	f00b fcc0 	bl	8016044 <sys_arch_protect>
 800a6c4:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	da0b      	bge.n	800a6e6 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800a6ce:	78fb      	ldrb	r3, [r7, #3]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d104      	bne.n	800a6de <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	1e5a      	subs	r2, r3, #1
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800a6de:	69f8      	ldr	r0, [r7, #28]
 800a6e0:	f00b fcbe 	bl	8016060 <sys_arch_unprotect>
        return;
 800a6e4:	e08d      	b.n	800a802 <event_callback+0x166>
      }
      s = conn->socket;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	699b      	ldr	r3, [r3, #24]
 800a6ea:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800a6ec:	69f8      	ldr	r0, [r7, #28]
 800a6ee:	f00b fcb7 	bl	8016060 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800a6f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6f4:	f7ff f83e 	bl	8009774 <get_socket>
 800a6f8:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d07f      	beq.n	800a800 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800a700:	2301      	movs	r3, #1
 800a702:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800a704:	f00b fc9e 	bl	8016044 <sys_arch_protect>
 800a708:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800a70a:	78fb      	ldrb	r3, [r7, #3]
 800a70c:	2b04      	cmp	r3, #4
 800a70e:	d83e      	bhi.n	800a78e <event_callback+0xf2>
 800a710:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <event_callback+0x7c>)
 800a712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a716:	bf00      	nop
 800a718:	0800a72d 	.word	0x0800a72d
 800a71c:	0800a74f 	.word	0x0800a74f
 800a720:	0800a767 	.word	0x0800a767
 800a724:	0800a77b 	.word	0x0800a77b
 800a728:	0800a787 	.word	0x0800a787
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a732:	b29b      	uxth	r3, r3
 800a734:	3301      	adds	r3, #1
 800a736:	b29b      	uxth	r3, r3
 800a738:	b21a      	sxth	r2, r3
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a744:	2b01      	cmp	r3, #1
 800a746:	dd2a      	ble.n	800a79e <event_callback+0x102>
        check_waiters = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	623b      	str	r3, [r7, #32]
      }
      break;
 800a74c:	e027      	b.n	800a79e <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a754:	b29b      	uxth	r3, r3
 800a756:	3b01      	subs	r3, #1
 800a758:	b29b      	uxth	r3, r3
 800a75a:	b21a      	sxth	r2, r3
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	623b      	str	r3, [r7, #32]
      break;
 800a764:	e01c      	b.n	800a7a0 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	895b      	ldrh	r3, [r3, #10]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d001      	beq.n	800a772 <event_callback+0xd6>
        check_waiters = 0;
 800a76e:	2300      	movs	r3, #0
 800a770:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	2201      	movs	r2, #1
 800a776:	815a      	strh	r2, [r3, #10]
      break;
 800a778:	e012      	b.n	800a7a0 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	2200      	movs	r2, #0
 800a77e:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	623b      	str	r3, [r7, #32]
      break;
 800a784:	e00c      	b.n	800a7a0 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	2201      	movs	r2, #1
 800a78a:	819a      	strh	r2, [r3, #12]
      break;
 800a78c:	e008      	b.n	800a7a0 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800a78e:	4b1e      	ldr	r3, [pc, #120]	; (800a808 <event_callback+0x16c>)
 800a790:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800a794:	491d      	ldr	r1, [pc, #116]	; (800a80c <event_callback+0x170>)
 800a796:	481e      	ldr	r0, [pc, #120]	; (800a810 <event_callback+0x174>)
 800a798:	f00b fd10 	bl	80161bc <iprintf>
      break;
 800a79c:	e000      	b.n	800a7a0 <event_callback+0x104>
      break;
 800a79e:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	7b9b      	ldrb	r3, [r3, #14]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d025      	beq.n	800a7f4 <event_callback+0x158>
 800a7a8:	6a3b      	ldr	r3, [r7, #32]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d022      	beq.n	800a7f4 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	bfcc      	ite	gt
 800a7b8:	2301      	movgt	r3, #1
 800a7ba:	2300      	movle	r3, #0
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	895b      	ldrh	r3, [r3, #10]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	bf14      	ite	ne
 800a7c8:	2301      	movne	r3, #1
 800a7ca:	2300      	moveq	r3, #0
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	899b      	ldrh	r3, [r3, #12]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	bf14      	ite	ne
 800a7d8:	2301      	movne	r3, #1
 800a7da:	2300      	moveq	r3, #0
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800a7e0:	69f8      	ldr	r0, [r7, #28]
 800a7e2:	f00b fc3d 	bl	8016060 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	6979      	ldr	r1, [r7, #20]
 800a7ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7ee:	f000 f811 	bl	800a814 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800a7f2:	e006      	b.n	800a802 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800a7f4:	69f8      	ldr	r0, [r7, #28]
 800a7f6:	f00b fc33 	bl	8016060 <sys_arch_unprotect>
 800a7fa:	e002      	b.n	800a802 <event_callback+0x166>
    return;
 800a7fc:	bf00      	nop
 800a7fe:	e000      	b.n	800a802 <event_callback+0x166>
      return;
 800a800:	bf00      	nop
  }
  done_socket(sock);
}
 800a802:	3728      	adds	r7, #40	; 0x28
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	080180c0 	.word	0x080180c0
 800a80c:	0801843c 	.word	0x0801843c
 800a810:	08018114 	.word	0x08018114

0800a814 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b088      	sub	sp, #32
 800a818:	af02      	add	r7, sp, #8
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800a822:	4b3d      	ldr	r3, [pc, #244]	; (800a918 <select_check_waiters+0x104>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	617b      	str	r3, [r7, #20]
 800a828:	e06f      	b.n	800a90a <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d168      	bne.n	800a904 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800a832:	2300      	movs	r3, #0
 800a834:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d009      	beq.n	800a852 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	68f9      	ldr	r1, [r7, #12]
 800a848:	6978      	ldr	r0, [r7, #20]
 800a84a:	f7ff fee3 	bl	800a614 <lwip_poll_should_wake>
 800a84e:	6138      	str	r0, [r7, #16]
 800a850:	e04d      	b.n	800a8ee <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d014      	beq.n	800a882 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d010      	beq.n	800a882 <select_check_waiters+0x6e>
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	0952      	lsrs	r2, r2, #5
 800a868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	f002 021f 	and.w	r2, r2, #31
 800a872:	2101      	movs	r1, #1
 800a874:	fa01 f202 	lsl.w	r2, r1, r2
 800a878:	4013      	ands	r3, r2
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d001      	beq.n	800a882 <select_check_waiters+0x6e>
            do_signal = 1;
 800a87e:	2301      	movs	r3, #1
 800a880:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d017      	beq.n	800a8b8 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d114      	bne.n	800a8b8 <select_check_waiters+0xa4>
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d010      	beq.n	800a8b8 <select_check_waiters+0xa4>
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	0952      	lsrs	r2, r2, #5
 800a89e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	f002 021f 	and.w	r2, r2, #31
 800a8a8:	2101      	movs	r1, #1
 800a8aa:	fa01 f202 	lsl.w	r2, r1, r2
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d001      	beq.n	800a8b8 <select_check_waiters+0xa4>
            do_signal = 1;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d017      	beq.n	800a8ee <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d114      	bne.n	800a8ee <select_check_waiters+0xda>
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d010      	beq.n	800a8ee <select_check_waiters+0xda>
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	0952      	lsrs	r2, r2, #5
 800a8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	f002 021f 	and.w	r2, r2, #31
 800a8de:	2101      	movs	r1, #1
 800a8e0:	fa01 f202 	lsl.w	r2, r1, r2
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d001      	beq.n	800a8ee <select_check_waiters+0xda>
            do_signal = 1;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d007      	beq.n	800a904 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	3320      	adds	r3, #32
 800a8fe:	4618      	mov	r0, r3
 800a900:	f00b fafc 	bl	8015efc <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	617b      	str	r3, [r7, #20]
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d18c      	bne.n	800a82a <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800a910:	bf00      	nop
 800a912:	3718      	adds	r7, #24
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	20004088 	.word	0x20004088

0800a91c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a926:	f00a fbd3 	bl	80150d0 <sys_timeouts_sleeptime>
 800a92a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a932:	d10b      	bne.n	800a94c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a934:	4813      	ldr	r0, [pc, #76]	; (800a984 <tcpip_timeouts_mbox_fetch+0x68>)
 800a936:	f00b fb52 	bl	8015fde <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a93a:	2200      	movs	r2, #0
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f00b fa0a 	bl	8015d58 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a944:	480f      	ldr	r0, [pc, #60]	; (800a984 <tcpip_timeouts_mbox_fetch+0x68>)
 800a946:	f00b fb3b 	bl	8015fc0 <sys_mutex_lock>
    return;
 800a94a:	e018      	b.n	800a97e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d102      	bne.n	800a958 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a952:	f00a fb87 	bl	8015064 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a956:	e7e6      	b.n	800a926 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a958:	480a      	ldr	r0, [pc, #40]	; (800a984 <tcpip_timeouts_mbox_fetch+0x68>)
 800a95a:	f00b fb40 	bl	8015fde <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	6839      	ldr	r1, [r7, #0]
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f00b f9f8 	bl	8015d58 <sys_arch_mbox_fetch>
 800a968:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a96a:	4806      	ldr	r0, [pc, #24]	; (800a984 <tcpip_timeouts_mbox_fetch+0x68>)
 800a96c:	f00b fb28 	bl	8015fc0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a976:	d102      	bne.n	800a97e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a978:	f00a fb74 	bl	8015064 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a97c:	e7d3      	b.n	800a926 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	20007414 	.word	0x20007414

0800a988 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a990:	4810      	ldr	r0, [pc, #64]	; (800a9d4 <tcpip_thread+0x4c>)
 800a992:	f00b fb15 	bl	8015fc0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a996:	4b10      	ldr	r3, [pc, #64]	; (800a9d8 <tcpip_thread+0x50>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d005      	beq.n	800a9aa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a99e:	4b0e      	ldr	r3, [pc, #56]	; (800a9d8 <tcpip_thread+0x50>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a0e      	ldr	r2, [pc, #56]	; (800a9dc <tcpip_thread+0x54>)
 800a9a4:	6812      	ldr	r2, [r2, #0]
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a9aa:	f107 030c 	add.w	r3, r7, #12
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	480b      	ldr	r0, [pc, #44]	; (800a9e0 <tcpip_thread+0x58>)
 800a9b2:	f7ff ffb3 	bl	800a91c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d106      	bne.n	800a9ca <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a9bc:	4b09      	ldr	r3, [pc, #36]	; (800a9e4 <tcpip_thread+0x5c>)
 800a9be:	2291      	movs	r2, #145	; 0x91
 800a9c0:	4909      	ldr	r1, [pc, #36]	; (800a9e8 <tcpip_thread+0x60>)
 800a9c2:	480a      	ldr	r0, [pc, #40]	; (800a9ec <tcpip_thread+0x64>)
 800a9c4:	f00b fbfa 	bl	80161bc <iprintf>
      continue;
 800a9c8:	e003      	b.n	800a9d2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f000 f80f 	bl	800a9f0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a9d2:	e7ea      	b.n	800a9aa <tcpip_thread+0x22>
 800a9d4:	20007414 	.word	0x20007414
 800a9d8:	2000408c 	.word	0x2000408c
 800a9dc:	20004090 	.word	0x20004090
 800a9e0:	20004094 	.word	0x20004094
 800a9e4:	08018490 	.word	0x08018490
 800a9e8:	080184c0 	.word	0x080184c0
 800a9ec:	080184e0 	.word	0x080184e0

0800a9f0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d018      	beq.n	800aa32 <tcpip_thread_handle_msg+0x42>
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d021      	beq.n	800aa48 <tcpip_thread_handle_msg+0x58>
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d126      	bne.n	800aa56 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	6850      	ldr	r0, [r2, #4]
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	6892      	ldr	r2, [r2, #8]
 800aa14:	4611      	mov	r1, r2
 800aa16:	4798      	blx	r3
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d004      	beq.n	800aa28 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	4618      	mov	r0, r3
 800aa24:	f003 fee4 	bl	800e7f0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aa28:	6879      	ldr	r1, [r7, #4]
 800aa2a:	2009      	movs	r0, #9
 800aa2c:	f003 f80c 	bl	800da48 <memp_free>
      break;
 800aa30:	e018      	b.n	800aa64 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	6892      	ldr	r2, [r2, #8]
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800aa3e:	6879      	ldr	r1, [r7, #4]
 800aa40:	2008      	movs	r0, #8
 800aa42:	f003 f801 	bl	800da48 <memp_free>
      break;
 800aa46:	e00d      	b.n	800aa64 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	6892      	ldr	r2, [r2, #8]
 800aa50:	4610      	mov	r0, r2
 800aa52:	4798      	blx	r3
      break;
 800aa54:	e006      	b.n	800aa64 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800aa56:	4b05      	ldr	r3, [pc, #20]	; (800aa6c <tcpip_thread_handle_msg+0x7c>)
 800aa58:	22cf      	movs	r2, #207	; 0xcf
 800aa5a:	4905      	ldr	r1, [pc, #20]	; (800aa70 <tcpip_thread_handle_msg+0x80>)
 800aa5c:	4805      	ldr	r0, [pc, #20]	; (800aa74 <tcpip_thread_handle_msg+0x84>)
 800aa5e:	f00b fbad 	bl	80161bc <iprintf>
      break;
 800aa62:	bf00      	nop
  }
}
 800aa64:	bf00      	nop
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	08018490 	.word	0x08018490
 800aa70:	080184c0 	.word	0x080184c0
 800aa74:	080184e0 	.word	0x080184e0

0800aa78 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800aa84:	481a      	ldr	r0, [pc, #104]	; (800aaf0 <tcpip_inpkt+0x78>)
 800aa86:	f00b f9c2 	bl	8015e0e <sys_mbox_valid>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d105      	bne.n	800aa9c <tcpip_inpkt+0x24>
 800aa90:	4b18      	ldr	r3, [pc, #96]	; (800aaf4 <tcpip_inpkt+0x7c>)
 800aa92:	22fc      	movs	r2, #252	; 0xfc
 800aa94:	4918      	ldr	r1, [pc, #96]	; (800aaf8 <tcpip_inpkt+0x80>)
 800aa96:	4819      	ldr	r0, [pc, #100]	; (800aafc <tcpip_inpkt+0x84>)
 800aa98:	f00b fb90 	bl	80161bc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800aa9c:	2009      	movs	r0, #9
 800aa9e:	f002 ff81 	bl	800d9a4 <memp_malloc>
 800aaa2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d102      	bne.n	800aab0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800aaaa:	f04f 33ff 	mov.w	r3, #4294967295
 800aaae:	e01a      	b.n	800aae6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2200      	movs	r2, #0
 800aab4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800aac8:	6979      	ldr	r1, [r7, #20]
 800aaca:	4809      	ldr	r0, [pc, #36]	; (800aaf0 <tcpip_inpkt+0x78>)
 800aacc:	f00b f92a 	bl	8015d24 <sys_mbox_trypost>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d006      	beq.n	800aae4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aad6:	6979      	ldr	r1, [r7, #20]
 800aad8:	2009      	movs	r0, #9
 800aada:	f002 ffb5 	bl	800da48 <memp_free>
    return ERR_MEM;
 800aade:	f04f 33ff 	mov.w	r3, #4294967295
 800aae2:	e000      	b.n	800aae6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800aae4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3718      	adds	r7, #24
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	20004094 	.word	0x20004094
 800aaf4:	08018490 	.word	0x08018490
 800aaf8:	08018508 	.word	0x08018508
 800aafc:	080184e0 	.word	0x080184e0

0800ab00 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab10:	f003 0318 	and.w	r3, r3, #24
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d006      	beq.n	800ab26 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ab18:	4a08      	ldr	r2, [pc, #32]	; (800ab3c <tcpip_input+0x3c>)
 800ab1a:	6839      	ldr	r1, [r7, #0]
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f7ff ffab 	bl	800aa78 <tcpip_inpkt>
 800ab22:	4603      	mov	r3, r0
 800ab24:	e005      	b.n	800ab32 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ab26:	4a06      	ldr	r2, [pc, #24]	; (800ab40 <tcpip_input+0x40>)
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7ff ffa4 	bl	800aa78 <tcpip_inpkt>
 800ab30:	4603      	mov	r3, r0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	08015b11 	.word	0x08015b11
 800ab40:	0800bff1 	.word	0x0800bff1

0800ab44 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ab4e:	4819      	ldr	r0, [pc, #100]	; (800abb4 <tcpip_try_callback+0x70>)
 800ab50:	f00b f95d 	bl	8015e0e <sys_mbox_valid>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d106      	bne.n	800ab68 <tcpip_try_callback+0x24>
 800ab5a:	4b17      	ldr	r3, [pc, #92]	; (800abb8 <tcpip_try_callback+0x74>)
 800ab5c:	f240 125d 	movw	r2, #349	; 0x15d
 800ab60:	4916      	ldr	r1, [pc, #88]	; (800abbc <tcpip_try_callback+0x78>)
 800ab62:	4817      	ldr	r0, [pc, #92]	; (800abc0 <tcpip_try_callback+0x7c>)
 800ab64:	f00b fb2a 	bl	80161bc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ab68:	2008      	movs	r0, #8
 800ab6a:	f002 ff1b 	bl	800d9a4 <memp_malloc>
 800ab6e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d102      	bne.n	800ab7c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ab76:	f04f 33ff 	mov.w	r3, #4294967295
 800ab7a:	e017      	b.n	800abac <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ab8e:	68f9      	ldr	r1, [r7, #12]
 800ab90:	4808      	ldr	r0, [pc, #32]	; (800abb4 <tcpip_try_callback+0x70>)
 800ab92:	f00b f8c7 	bl	8015d24 <sys_mbox_trypost>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d006      	beq.n	800abaa <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ab9c:	68f9      	ldr	r1, [r7, #12]
 800ab9e:	2008      	movs	r0, #8
 800aba0:	f002 ff52 	bl	800da48 <memp_free>
    return ERR_MEM;
 800aba4:	f04f 33ff 	mov.w	r3, #4294967295
 800aba8:	e000      	b.n	800abac <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	20004094 	.word	0x20004094
 800abb8:	08018490 	.word	0x08018490
 800abbc:	08018508 	.word	0x08018508
 800abc0:	080184e0 	.word	0x080184e0

0800abc4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800abd0:	4806      	ldr	r0, [pc, #24]	; (800abec <tcpip_send_msg_wait_sem+0x28>)
 800abd2:	f00b f9f5 	bl	8015fc0 <sys_mutex_lock>
  fn(apimsg);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	68b8      	ldr	r0, [r7, #8]
 800abda:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800abdc:	4803      	ldr	r0, [pc, #12]	; (800abec <tcpip_send_msg_wait_sem+0x28>)
 800abde:	f00b f9fe 	bl	8015fde <sys_mutex_unlock>
  return ERR_OK;
 800abe2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3710      	adds	r7, #16
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	20007414 	.word	0x20007414

0800abf0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af02      	add	r7, sp, #8
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800abfa:	f000 f871 	bl	800ace0 <lwip_init>

  tcpip_init_done = initfunc;
 800abfe:	4a17      	ldr	r2, [pc, #92]	; (800ac5c <tcpip_init+0x6c>)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ac04:	4a16      	ldr	r2, [pc, #88]	; (800ac60 <tcpip_init+0x70>)
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ac0a:	2106      	movs	r1, #6
 800ac0c:	4815      	ldr	r0, [pc, #84]	; (800ac64 <tcpip_init+0x74>)
 800ac0e:	f00b f855 	bl	8015cbc <sys_mbox_new>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d006      	beq.n	800ac26 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ac18:	4b13      	ldr	r3, [pc, #76]	; (800ac68 <tcpip_init+0x78>)
 800ac1a:	f240 2261 	movw	r2, #609	; 0x261
 800ac1e:	4913      	ldr	r1, [pc, #76]	; (800ac6c <tcpip_init+0x7c>)
 800ac20:	4813      	ldr	r0, [pc, #76]	; (800ac70 <tcpip_init+0x80>)
 800ac22:	f00b facb 	bl	80161bc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ac26:	4813      	ldr	r0, [pc, #76]	; (800ac74 <tcpip_init+0x84>)
 800ac28:	f00b f9ae 	bl	8015f88 <sys_mutex_new>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d006      	beq.n	800ac40 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ac32:	4b0d      	ldr	r3, [pc, #52]	; (800ac68 <tcpip_init+0x78>)
 800ac34:	f240 2265 	movw	r2, #613	; 0x265
 800ac38:	490f      	ldr	r1, [pc, #60]	; (800ac78 <tcpip_init+0x88>)
 800ac3a:	480d      	ldr	r0, [pc, #52]	; (800ac70 <tcpip_init+0x80>)
 800ac3c:	f00b fabe 	bl	80161bc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ac40:	2300      	movs	r3, #0
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac48:	2200      	movs	r2, #0
 800ac4a:	490c      	ldr	r1, [pc, #48]	; (800ac7c <tcpip_init+0x8c>)
 800ac4c:	480c      	ldr	r0, [pc, #48]	; (800ac80 <tcpip_init+0x90>)
 800ac4e:	f00b f9d3 	bl	8015ff8 <sys_thread_new>
}
 800ac52:	bf00      	nop
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	2000408c 	.word	0x2000408c
 800ac60:	20004090 	.word	0x20004090
 800ac64:	20004094 	.word	0x20004094
 800ac68:	08018490 	.word	0x08018490
 800ac6c:	08018518 	.word	0x08018518
 800ac70:	080184e0 	.word	0x080184e0
 800ac74:	20007414 	.word	0x20007414
 800ac78:	0801853c 	.word	0x0801853c
 800ac7c:	0800a989 	.word	0x0800a989
 800ac80:	08018560 	.word	0x08018560

0800ac84 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ac8e:	88fb      	ldrh	r3, [r7, #6]
 800ac90:	021b      	lsls	r3, r3, #8
 800ac92:	b21a      	sxth	r2, r3
 800ac94:	88fb      	ldrh	r3, [r7, #6]
 800ac96:	0a1b      	lsrs	r3, r3, #8
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	b21b      	sxth	r3, r3
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	b21b      	sxth	r3, r3
 800aca0:	b29b      	uxth	r3, r3
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800acae:	b480      	push	{r7}
 800acb0:	b083      	sub	sp, #12
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	061a      	lsls	r2, r3, #24
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	021b      	lsls	r3, r3, #8
 800acbe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800acc2:	431a      	orrs	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	0a1b      	lsrs	r3, r3, #8
 800acc8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800accc:	431a      	orrs	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	0e1b      	lsrs	r3, r3, #24
 800acd2:	4313      	orrs	r3, r2
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800acea:	f00b f93f 	bl	8015f6c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800acee:	f002 faaf 	bl	800d250 <mem_init>
  memp_init();
 800acf2:	f002 fe0b 	bl	800d90c <memp_init>
  pbuf_init();
  netif_init();
 800acf6:	f002 fed1 	bl	800da9c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800acfa:	f00a fa1d 	bl	8015138 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800acfe:	f004 f821 	bl	800ed44 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ad02:	f00a f969 	bl	8014fd8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ad06:	bf00      	nop
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
	...

0800ad10 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ad18:	4915      	ldr	r1, [pc, #84]	; (800ad70 <etharp_free_entry+0x60>)
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	005b      	lsls	r3, r3, #1
 800ad20:	4413      	add	r3, r2
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	440b      	add	r3, r1
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d013      	beq.n	800ad54 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ad2c:	4910      	ldr	r1, [pc, #64]	; (800ad70 <etharp_free_entry+0x60>)
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	4613      	mov	r3, r2
 800ad32:	005b      	lsls	r3, r3, #1
 800ad34:	4413      	add	r3, r2
 800ad36:	00db      	lsls	r3, r3, #3
 800ad38:	440b      	add	r3, r1
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f003 fd57 	bl	800e7f0 <pbuf_free>
    arp_table[i].q = NULL;
 800ad42:	490b      	ldr	r1, [pc, #44]	; (800ad70 <etharp_free_entry+0x60>)
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	4613      	mov	r3, r2
 800ad48:	005b      	lsls	r3, r3, #1
 800ad4a:	4413      	add	r3, r2
 800ad4c:	00db      	lsls	r3, r3, #3
 800ad4e:	440b      	add	r3, r1
 800ad50:	2200      	movs	r2, #0
 800ad52:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ad54:	4906      	ldr	r1, [pc, #24]	; (800ad70 <etharp_free_entry+0x60>)
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	4413      	add	r3, r2
 800ad5e:	00db      	lsls	r3, r3, #3
 800ad60:	440b      	add	r3, r1
 800ad62:	3314      	adds	r3, #20
 800ad64:	2200      	movs	r2, #0
 800ad66:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ad68:	bf00      	nop
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	20004098 	.word	0x20004098

0800ad74 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	607b      	str	r3, [r7, #4]
 800ad7e:	e096      	b.n	800aeae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ad80:	494f      	ldr	r1, [pc, #316]	; (800aec0 <etharp_tmr+0x14c>)
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	4613      	mov	r3, r2
 800ad86:	005b      	lsls	r3, r3, #1
 800ad88:	4413      	add	r3, r2
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	440b      	add	r3, r1
 800ad8e:	3314      	adds	r3, #20
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ad94:	78fb      	ldrb	r3, [r7, #3]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f000 8086 	beq.w	800aea8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ad9c:	4948      	ldr	r1, [pc, #288]	; (800aec0 <etharp_tmr+0x14c>)
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	4613      	mov	r3, r2
 800ada2:	005b      	lsls	r3, r3, #1
 800ada4:	4413      	add	r3, r2
 800ada6:	00db      	lsls	r3, r3, #3
 800ada8:	440b      	add	r3, r1
 800adaa:	3312      	adds	r3, #18
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	3301      	adds	r3, #1
 800adb0:	b298      	uxth	r0, r3
 800adb2:	4943      	ldr	r1, [pc, #268]	; (800aec0 <etharp_tmr+0x14c>)
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	4613      	mov	r3, r2
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	4413      	add	r3, r2
 800adbc:	00db      	lsls	r3, r3, #3
 800adbe:	440b      	add	r3, r1
 800adc0:	3312      	adds	r3, #18
 800adc2:	4602      	mov	r2, r0
 800adc4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800adc6:	493e      	ldr	r1, [pc, #248]	; (800aec0 <etharp_tmr+0x14c>)
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	4613      	mov	r3, r2
 800adcc:	005b      	lsls	r3, r3, #1
 800adce:	4413      	add	r3, r2
 800add0:	00db      	lsls	r3, r3, #3
 800add2:	440b      	add	r3, r1
 800add4:	3312      	adds	r3, #18
 800add6:	881b      	ldrh	r3, [r3, #0]
 800add8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800addc:	d215      	bcs.n	800ae0a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800adde:	4938      	ldr	r1, [pc, #224]	; (800aec0 <etharp_tmr+0x14c>)
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	4613      	mov	r3, r2
 800ade4:	005b      	lsls	r3, r3, #1
 800ade6:	4413      	add	r3, r2
 800ade8:	00db      	lsls	r3, r3, #3
 800adea:	440b      	add	r3, r1
 800adec:	3314      	adds	r3, #20
 800adee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d10e      	bne.n	800ae12 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800adf4:	4932      	ldr	r1, [pc, #200]	; (800aec0 <etharp_tmr+0x14c>)
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	4613      	mov	r3, r2
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	4413      	add	r3, r2
 800adfe:	00db      	lsls	r3, r3, #3
 800ae00:	440b      	add	r3, r1
 800ae02:	3312      	adds	r3, #18
 800ae04:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ae06:	2b04      	cmp	r3, #4
 800ae08:	d903      	bls.n	800ae12 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7ff ff80 	bl	800ad10 <etharp_free_entry>
 800ae10:	e04a      	b.n	800aea8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ae12:	492b      	ldr	r1, [pc, #172]	; (800aec0 <etharp_tmr+0x14c>)
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	4613      	mov	r3, r2
 800ae18:	005b      	lsls	r3, r3, #1
 800ae1a:	4413      	add	r3, r2
 800ae1c:	00db      	lsls	r3, r3, #3
 800ae1e:	440b      	add	r3, r1
 800ae20:	3314      	adds	r3, #20
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	2b03      	cmp	r3, #3
 800ae26:	d10a      	bne.n	800ae3e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ae28:	4925      	ldr	r1, [pc, #148]	; (800aec0 <etharp_tmr+0x14c>)
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	005b      	lsls	r3, r3, #1
 800ae30:	4413      	add	r3, r2
 800ae32:	00db      	lsls	r3, r3, #3
 800ae34:	440b      	add	r3, r1
 800ae36:	3314      	adds	r3, #20
 800ae38:	2204      	movs	r2, #4
 800ae3a:	701a      	strb	r2, [r3, #0]
 800ae3c:	e034      	b.n	800aea8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ae3e:	4920      	ldr	r1, [pc, #128]	; (800aec0 <etharp_tmr+0x14c>)
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	4613      	mov	r3, r2
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	4413      	add	r3, r2
 800ae48:	00db      	lsls	r3, r3, #3
 800ae4a:	440b      	add	r3, r1
 800ae4c:	3314      	adds	r3, #20
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	2b04      	cmp	r3, #4
 800ae52:	d10a      	bne.n	800ae6a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ae54:	491a      	ldr	r1, [pc, #104]	; (800aec0 <etharp_tmr+0x14c>)
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	005b      	lsls	r3, r3, #1
 800ae5c:	4413      	add	r3, r2
 800ae5e:	00db      	lsls	r3, r3, #3
 800ae60:	440b      	add	r3, r1
 800ae62:	3314      	adds	r3, #20
 800ae64:	2202      	movs	r2, #2
 800ae66:	701a      	strb	r2, [r3, #0]
 800ae68:	e01e      	b.n	800aea8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ae6a:	4915      	ldr	r1, [pc, #84]	; (800aec0 <etharp_tmr+0x14c>)
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	4613      	mov	r3, r2
 800ae70:	005b      	lsls	r3, r3, #1
 800ae72:	4413      	add	r3, r2
 800ae74:	00db      	lsls	r3, r3, #3
 800ae76:	440b      	add	r3, r1
 800ae78:	3314      	adds	r3, #20
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d113      	bne.n	800aea8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ae80:	490f      	ldr	r1, [pc, #60]	; (800aec0 <etharp_tmr+0x14c>)
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	4613      	mov	r3, r2
 800ae86:	005b      	lsls	r3, r3, #1
 800ae88:	4413      	add	r3, r2
 800ae8a:	00db      	lsls	r3, r3, #3
 800ae8c:	440b      	add	r3, r1
 800ae8e:	3308      	adds	r3, #8
 800ae90:	6818      	ldr	r0, [r3, #0]
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	4613      	mov	r3, r2
 800ae96:	005b      	lsls	r3, r3, #1
 800ae98:	4413      	add	r3, r2
 800ae9a:	00db      	lsls	r3, r3, #3
 800ae9c:	4a08      	ldr	r2, [pc, #32]	; (800aec0 <etharp_tmr+0x14c>)
 800ae9e:	4413      	add	r3, r2
 800aea0:	3304      	adds	r3, #4
 800aea2:	4619      	mov	r1, r3
 800aea4:	f000 fe6e 	bl	800bb84 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	607b      	str	r3, [r7, #4]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b09      	cmp	r3, #9
 800aeb2:	f77f af65 	ble.w	800ad80 <etharp_tmr+0xc>
      }
    }
  }
}
 800aeb6:	bf00      	nop
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	20004098 	.word	0x20004098

0800aec4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b08a      	sub	sp, #40	; 0x28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	460b      	mov	r3, r1
 800aece:	607a      	str	r2, [r7, #4]
 800aed0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800aed2:	230a      	movs	r3, #10
 800aed4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800aed6:	230a      	movs	r3, #10
 800aed8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800aeda:	230a      	movs	r3, #10
 800aedc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800aee2:	230a      	movs	r3, #10
 800aee4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800aee6:	2300      	movs	r3, #0
 800aee8:	83bb      	strh	r3, [r7, #28]
 800aeea:	2300      	movs	r3, #0
 800aeec:	837b      	strh	r3, [r7, #26]
 800aeee:	2300      	movs	r3, #0
 800aef0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800aef2:	2300      	movs	r3, #0
 800aef4:	843b      	strh	r3, [r7, #32]
 800aef6:	e0ae      	b.n	800b056 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800aef8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aefc:	49a6      	ldr	r1, [pc, #664]	; (800b198 <etharp_find_entry+0x2d4>)
 800aefe:	4613      	mov	r3, r2
 800af00:	005b      	lsls	r3, r3, #1
 800af02:	4413      	add	r3, r2
 800af04:	00db      	lsls	r3, r3, #3
 800af06:	440b      	add	r3, r1
 800af08:	3314      	adds	r3, #20
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800af0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800af12:	2b0a      	cmp	r3, #10
 800af14:	d105      	bne.n	800af22 <etharp_find_entry+0x5e>
 800af16:	7dfb      	ldrb	r3, [r7, #23]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d102      	bne.n	800af22 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800af1c:	8c3b      	ldrh	r3, [r7, #32]
 800af1e:	847b      	strh	r3, [r7, #34]	; 0x22
 800af20:	e095      	b.n	800b04e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800af22:	7dfb      	ldrb	r3, [r7, #23]
 800af24:	2b00      	cmp	r3, #0
 800af26:	f000 8092 	beq.w	800b04e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800af2a:	7dfb      	ldrb	r3, [r7, #23]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d009      	beq.n	800af44 <etharp_find_entry+0x80>
 800af30:	7dfb      	ldrb	r3, [r7, #23]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d806      	bhi.n	800af44 <etharp_find_entry+0x80>
 800af36:	4b99      	ldr	r3, [pc, #612]	; (800b19c <etharp_find_entry+0x2d8>)
 800af38:	f44f 7292 	mov.w	r2, #292	; 0x124
 800af3c:	4998      	ldr	r1, [pc, #608]	; (800b1a0 <etharp_find_entry+0x2dc>)
 800af3e:	4899      	ldr	r0, [pc, #612]	; (800b1a4 <etharp_find_entry+0x2e0>)
 800af40:	f00b f93c 	bl	80161bc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d020      	beq.n	800af8c <etharp_find_entry+0xc8>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6819      	ldr	r1, [r3, #0]
 800af4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af52:	4891      	ldr	r0, [pc, #580]	; (800b198 <etharp_find_entry+0x2d4>)
 800af54:	4613      	mov	r3, r2
 800af56:	005b      	lsls	r3, r3, #1
 800af58:	4413      	add	r3, r2
 800af5a:	00db      	lsls	r3, r3, #3
 800af5c:	4403      	add	r3, r0
 800af5e:	3304      	adds	r3, #4
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4299      	cmp	r1, r3
 800af64:	d112      	bne.n	800af8c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00c      	beq.n	800af86 <etharp_find_entry+0xc2>
 800af6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af70:	4989      	ldr	r1, [pc, #548]	; (800b198 <etharp_find_entry+0x2d4>)
 800af72:	4613      	mov	r3, r2
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	4413      	add	r3, r2
 800af78:	00db      	lsls	r3, r3, #3
 800af7a:	440b      	add	r3, r1
 800af7c:	3308      	adds	r3, #8
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	429a      	cmp	r2, r3
 800af84:	d102      	bne.n	800af8c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800af86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800af8a:	e100      	b.n	800b18e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800af8c:	7dfb      	ldrb	r3, [r7, #23]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d140      	bne.n	800b014 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800af92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af96:	4980      	ldr	r1, [pc, #512]	; (800b198 <etharp_find_entry+0x2d4>)
 800af98:	4613      	mov	r3, r2
 800af9a:	005b      	lsls	r3, r3, #1
 800af9c:	4413      	add	r3, r2
 800af9e:	00db      	lsls	r3, r3, #3
 800afa0:	440b      	add	r3, r1
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d01a      	beq.n	800afde <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800afa8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800afac:	497a      	ldr	r1, [pc, #488]	; (800b198 <etharp_find_entry+0x2d4>)
 800afae:	4613      	mov	r3, r2
 800afb0:	005b      	lsls	r3, r3, #1
 800afb2:	4413      	add	r3, r2
 800afb4:	00db      	lsls	r3, r3, #3
 800afb6:	440b      	add	r3, r1
 800afb8:	3312      	adds	r3, #18
 800afba:	881b      	ldrh	r3, [r3, #0]
 800afbc:	8bba      	ldrh	r2, [r7, #28]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d845      	bhi.n	800b04e <etharp_find_entry+0x18a>
            old_queue = i;
 800afc2:	8c3b      	ldrh	r3, [r7, #32]
 800afc4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800afc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800afca:	4973      	ldr	r1, [pc, #460]	; (800b198 <etharp_find_entry+0x2d4>)
 800afcc:	4613      	mov	r3, r2
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	4413      	add	r3, r2
 800afd2:	00db      	lsls	r3, r3, #3
 800afd4:	440b      	add	r3, r1
 800afd6:	3312      	adds	r3, #18
 800afd8:	881b      	ldrh	r3, [r3, #0]
 800afda:	83bb      	strh	r3, [r7, #28]
 800afdc:	e037      	b.n	800b04e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800afde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800afe2:	496d      	ldr	r1, [pc, #436]	; (800b198 <etharp_find_entry+0x2d4>)
 800afe4:	4613      	mov	r3, r2
 800afe6:	005b      	lsls	r3, r3, #1
 800afe8:	4413      	add	r3, r2
 800afea:	00db      	lsls	r3, r3, #3
 800afec:	440b      	add	r3, r1
 800afee:	3312      	adds	r3, #18
 800aff0:	881b      	ldrh	r3, [r3, #0]
 800aff2:	8b7a      	ldrh	r2, [r7, #26]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d82a      	bhi.n	800b04e <etharp_find_entry+0x18a>
            old_pending = i;
 800aff8:	8c3b      	ldrh	r3, [r7, #32]
 800affa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800affc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b000:	4965      	ldr	r1, [pc, #404]	; (800b198 <etharp_find_entry+0x2d4>)
 800b002:	4613      	mov	r3, r2
 800b004:	005b      	lsls	r3, r3, #1
 800b006:	4413      	add	r3, r2
 800b008:	00db      	lsls	r3, r3, #3
 800b00a:	440b      	add	r3, r1
 800b00c:	3312      	adds	r3, #18
 800b00e:	881b      	ldrh	r3, [r3, #0]
 800b010:	837b      	strh	r3, [r7, #26]
 800b012:	e01c      	b.n	800b04e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b014:	7dfb      	ldrb	r3, [r7, #23]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d919      	bls.n	800b04e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b01a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b01e:	495e      	ldr	r1, [pc, #376]	; (800b198 <etharp_find_entry+0x2d4>)
 800b020:	4613      	mov	r3, r2
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	4413      	add	r3, r2
 800b026:	00db      	lsls	r3, r3, #3
 800b028:	440b      	add	r3, r1
 800b02a:	3312      	adds	r3, #18
 800b02c:	881b      	ldrh	r3, [r3, #0]
 800b02e:	8b3a      	ldrh	r2, [r7, #24]
 800b030:	429a      	cmp	r2, r3
 800b032:	d80c      	bhi.n	800b04e <etharp_find_entry+0x18a>
            old_stable = i;
 800b034:	8c3b      	ldrh	r3, [r7, #32]
 800b036:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800b038:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b03c:	4956      	ldr	r1, [pc, #344]	; (800b198 <etharp_find_entry+0x2d4>)
 800b03e:	4613      	mov	r3, r2
 800b040:	005b      	lsls	r3, r3, #1
 800b042:	4413      	add	r3, r2
 800b044:	00db      	lsls	r3, r3, #3
 800b046:	440b      	add	r3, r1
 800b048:	3312      	adds	r3, #18
 800b04a:	881b      	ldrh	r3, [r3, #0]
 800b04c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b04e:	8c3b      	ldrh	r3, [r7, #32]
 800b050:	3301      	adds	r3, #1
 800b052:	b29b      	uxth	r3, r3
 800b054:	843b      	strh	r3, [r7, #32]
 800b056:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b05a:	2b09      	cmp	r3, #9
 800b05c:	f77f af4c 	ble.w	800aef8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b060:	7afb      	ldrb	r3, [r7, #11]
 800b062:	f003 0302 	and.w	r3, r3, #2
 800b066:	2b00      	cmp	r3, #0
 800b068:	d108      	bne.n	800b07c <etharp_find_entry+0x1b8>
 800b06a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b06e:	2b0a      	cmp	r3, #10
 800b070:	d107      	bne.n	800b082 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b072:	7afb      	ldrb	r3, [r7, #11]
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d102      	bne.n	800b082 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800b07c:	f04f 33ff 	mov.w	r3, #4294967295
 800b080:	e085      	b.n	800b18e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b082:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b086:	2b09      	cmp	r3, #9
 800b088:	dc02      	bgt.n	800b090 <etharp_find_entry+0x1cc>
    i = empty;
 800b08a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b08c:	843b      	strh	r3, [r7, #32]
 800b08e:	e039      	b.n	800b104 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b090:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b094:	2b09      	cmp	r3, #9
 800b096:	dc14      	bgt.n	800b0c2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800b098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b09a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b09c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b0a0:	493d      	ldr	r1, [pc, #244]	; (800b198 <etharp_find_entry+0x2d4>)
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	005b      	lsls	r3, r3, #1
 800b0a6:	4413      	add	r3, r2
 800b0a8:	00db      	lsls	r3, r3, #3
 800b0aa:	440b      	add	r3, r1
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d018      	beq.n	800b0e4 <etharp_find_entry+0x220>
 800b0b2:	4b3a      	ldr	r3, [pc, #232]	; (800b19c <etharp_find_entry+0x2d8>)
 800b0b4:	f240 126d 	movw	r2, #365	; 0x16d
 800b0b8:	493b      	ldr	r1, [pc, #236]	; (800b1a8 <etharp_find_entry+0x2e4>)
 800b0ba:	483a      	ldr	r0, [pc, #232]	; (800b1a4 <etharp_find_entry+0x2e0>)
 800b0bc:	f00b f87e 	bl	80161bc <iprintf>
 800b0c0:	e010      	b.n	800b0e4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b0c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b0c6:	2b09      	cmp	r3, #9
 800b0c8:	dc02      	bgt.n	800b0d0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800b0ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b0cc:	843b      	strh	r3, [r7, #32]
 800b0ce:	e009      	b.n	800b0e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b0d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b0d4:	2b09      	cmp	r3, #9
 800b0d6:	dc02      	bgt.n	800b0de <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b0d8:	8bfb      	ldrh	r3, [r7, #30]
 800b0da:	843b      	strh	r3, [r7, #32]
 800b0dc:	e002      	b.n	800b0e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800b0de:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e2:	e054      	b.n	800b18e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b0e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b0e8:	2b09      	cmp	r3, #9
 800b0ea:	dd06      	ble.n	800b0fa <etharp_find_entry+0x236>
 800b0ec:	4b2b      	ldr	r3, [pc, #172]	; (800b19c <etharp_find_entry+0x2d8>)
 800b0ee:	f240 127f 	movw	r2, #383	; 0x17f
 800b0f2:	492e      	ldr	r1, [pc, #184]	; (800b1ac <etharp_find_entry+0x2e8>)
 800b0f4:	482b      	ldr	r0, [pc, #172]	; (800b1a4 <etharp_find_entry+0x2e0>)
 800b0f6:	f00b f861 	bl	80161bc <iprintf>
    etharp_free_entry(i);
 800b0fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff fe06 	bl	800ad10 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b104:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b108:	2b09      	cmp	r3, #9
 800b10a:	dd06      	ble.n	800b11a <etharp_find_entry+0x256>
 800b10c:	4b23      	ldr	r3, [pc, #140]	; (800b19c <etharp_find_entry+0x2d8>)
 800b10e:	f240 1283 	movw	r2, #387	; 0x183
 800b112:	4926      	ldr	r1, [pc, #152]	; (800b1ac <etharp_find_entry+0x2e8>)
 800b114:	4823      	ldr	r0, [pc, #140]	; (800b1a4 <etharp_find_entry+0x2e0>)
 800b116:	f00b f851 	bl	80161bc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b11a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b11e:	491e      	ldr	r1, [pc, #120]	; (800b198 <etharp_find_entry+0x2d4>)
 800b120:	4613      	mov	r3, r2
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	4413      	add	r3, r2
 800b126:	00db      	lsls	r3, r3, #3
 800b128:	440b      	add	r3, r1
 800b12a:	3314      	adds	r3, #20
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d006      	beq.n	800b140 <etharp_find_entry+0x27c>
 800b132:	4b1a      	ldr	r3, [pc, #104]	; (800b19c <etharp_find_entry+0x2d8>)
 800b134:	f240 1285 	movw	r2, #389	; 0x185
 800b138:	491d      	ldr	r1, [pc, #116]	; (800b1b0 <etharp_find_entry+0x2ec>)
 800b13a:	481a      	ldr	r0, [pc, #104]	; (800b1a4 <etharp_find_entry+0x2e0>)
 800b13c:	f00b f83e 	bl	80161bc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00b      	beq.n	800b15e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b146:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6819      	ldr	r1, [r3, #0]
 800b14e:	4812      	ldr	r0, [pc, #72]	; (800b198 <etharp_find_entry+0x2d4>)
 800b150:	4613      	mov	r3, r2
 800b152:	005b      	lsls	r3, r3, #1
 800b154:	4413      	add	r3, r2
 800b156:	00db      	lsls	r3, r3, #3
 800b158:	4403      	add	r3, r0
 800b15a:	3304      	adds	r3, #4
 800b15c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b15e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b162:	490d      	ldr	r1, [pc, #52]	; (800b198 <etharp_find_entry+0x2d4>)
 800b164:	4613      	mov	r3, r2
 800b166:	005b      	lsls	r3, r3, #1
 800b168:	4413      	add	r3, r2
 800b16a:	00db      	lsls	r3, r3, #3
 800b16c:	440b      	add	r3, r1
 800b16e:	3312      	adds	r3, #18
 800b170:	2200      	movs	r2, #0
 800b172:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800b174:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b178:	4907      	ldr	r1, [pc, #28]	; (800b198 <etharp_find_entry+0x2d4>)
 800b17a:	4613      	mov	r3, r2
 800b17c:	005b      	lsls	r3, r3, #1
 800b17e:	4413      	add	r3, r2
 800b180:	00db      	lsls	r3, r3, #3
 800b182:	440b      	add	r3, r1
 800b184:	3308      	adds	r3, #8
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800b18a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3728      	adds	r7, #40	; 0x28
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	20004098 	.word	0x20004098
 800b19c:	08018570 	.word	0x08018570
 800b1a0:	080185a8 	.word	0x080185a8
 800b1a4:	080185e8 	.word	0x080185e8
 800b1a8:	08018610 	.word	0x08018610
 800b1ac:	08018628 	.word	0x08018628
 800b1b0:	0801863c 	.word	0x0801863c

0800b1b4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b088      	sub	sp, #32
 800b1b8:	af02      	add	r7, sp, #8
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	607a      	str	r2, [r7, #4]
 800b1c0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b1c8:	2b06      	cmp	r3, #6
 800b1ca:	d006      	beq.n	800b1da <etharp_update_arp_entry+0x26>
 800b1cc:	4b48      	ldr	r3, [pc, #288]	; (800b2f0 <etharp_update_arp_entry+0x13c>)
 800b1ce:	f240 12a9 	movw	r2, #425	; 0x1a9
 800b1d2:	4948      	ldr	r1, [pc, #288]	; (800b2f4 <etharp_update_arp_entry+0x140>)
 800b1d4:	4848      	ldr	r0, [pc, #288]	; (800b2f8 <etharp_update_arp_entry+0x144>)
 800b1d6:	f00a fff1 	bl	80161bc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d012      	beq.n	800b206 <etharp_update_arp_entry+0x52>
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00e      	beq.n	800b206 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68f9      	ldr	r1, [r7, #12]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f001 f8f6 	bl	800c3e0 <ip4_addr_isbroadcast_u32>
 800b1f4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d105      	bne.n	800b206 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b202:	2be0      	cmp	r3, #224	; 0xe0
 800b204:	d102      	bne.n	800b20c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b206:	f06f 030f 	mvn.w	r3, #15
 800b20a:	e06c      	b.n	800b2e6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b20c:	78fb      	ldrb	r3, [r7, #3]
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	4619      	mov	r1, r3
 800b212:	68b8      	ldr	r0, [r7, #8]
 800b214:	f7ff fe56 	bl	800aec4 <etharp_find_entry>
 800b218:	4603      	mov	r3, r0
 800b21a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b21c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b220:	2b00      	cmp	r3, #0
 800b222:	da02      	bge.n	800b22a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b224:	8afb      	ldrh	r3, [r7, #22]
 800b226:	b25b      	sxtb	r3, r3
 800b228:	e05d      	b.n	800b2e6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b22a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b22e:	4933      	ldr	r1, [pc, #204]	; (800b2fc <etharp_update_arp_entry+0x148>)
 800b230:	4613      	mov	r3, r2
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	4413      	add	r3, r2
 800b236:	00db      	lsls	r3, r3, #3
 800b238:	440b      	add	r3, r1
 800b23a:	3314      	adds	r3, #20
 800b23c:	2202      	movs	r2, #2
 800b23e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b240:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b244:	492d      	ldr	r1, [pc, #180]	; (800b2fc <etharp_update_arp_entry+0x148>)
 800b246:	4613      	mov	r3, r2
 800b248:	005b      	lsls	r3, r3, #1
 800b24a:	4413      	add	r3, r2
 800b24c:	00db      	lsls	r3, r3, #3
 800b24e:	440b      	add	r3, r1
 800b250:	3308      	adds	r3, #8
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b256:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b25a:	4613      	mov	r3, r2
 800b25c:	005b      	lsls	r3, r3, #1
 800b25e:	4413      	add	r3, r2
 800b260:	00db      	lsls	r3, r3, #3
 800b262:	3308      	adds	r3, #8
 800b264:	4a25      	ldr	r2, [pc, #148]	; (800b2fc <etharp_update_arp_entry+0x148>)
 800b266:	4413      	add	r3, r2
 800b268:	3304      	adds	r3, #4
 800b26a:	2206      	movs	r2, #6
 800b26c:	6879      	ldr	r1, [r7, #4]
 800b26e:	4618      	mov	r0, r3
 800b270:	f00a ff63 	bl	801613a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b274:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b278:	4920      	ldr	r1, [pc, #128]	; (800b2fc <etharp_update_arp_entry+0x148>)
 800b27a:	4613      	mov	r3, r2
 800b27c:	005b      	lsls	r3, r3, #1
 800b27e:	4413      	add	r3, r2
 800b280:	00db      	lsls	r3, r3, #3
 800b282:	440b      	add	r3, r1
 800b284:	3312      	adds	r3, #18
 800b286:	2200      	movs	r2, #0
 800b288:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b28a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b28e:	491b      	ldr	r1, [pc, #108]	; (800b2fc <etharp_update_arp_entry+0x148>)
 800b290:	4613      	mov	r3, r2
 800b292:	005b      	lsls	r3, r3, #1
 800b294:	4413      	add	r3, r2
 800b296:	00db      	lsls	r3, r3, #3
 800b298:	440b      	add	r3, r1
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d021      	beq.n	800b2e4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b2a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b2a4:	4915      	ldr	r1, [pc, #84]	; (800b2fc <etharp_update_arp_entry+0x148>)
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	005b      	lsls	r3, r3, #1
 800b2aa:	4413      	add	r3, r2
 800b2ac:	00db      	lsls	r3, r3, #3
 800b2ae:	440b      	add	r3, r1
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b2b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b2b8:	4910      	ldr	r1, [pc, #64]	; (800b2fc <etharp_update_arp_entry+0x148>)
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	005b      	lsls	r3, r3, #1
 800b2be:	4413      	add	r3, r2
 800b2c0:	00db      	lsls	r3, r3, #3
 800b2c2:	440b      	add	r3, r1
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b2ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6939      	ldr	r1, [r7, #16]
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f00a fca7 	bl	8015c2c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b2de:	6938      	ldr	r0, [r7, #16]
 800b2e0:	f003 fa86 	bl	800e7f0 <pbuf_free>
  }
  return ERR_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	08018570 	.word	0x08018570
 800b2f4:	08018668 	.word	0x08018668
 800b2f8:	080185e8 	.word	0x080185e8
 800b2fc:	20004098 	.word	0x20004098

0800b300 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b308:	2300      	movs	r3, #0
 800b30a:	60fb      	str	r3, [r7, #12]
 800b30c:	e01e      	b.n	800b34c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800b30e:	4913      	ldr	r1, [pc, #76]	; (800b35c <etharp_cleanup_netif+0x5c>)
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	4613      	mov	r3, r2
 800b314:	005b      	lsls	r3, r3, #1
 800b316:	4413      	add	r3, r2
 800b318:	00db      	lsls	r3, r3, #3
 800b31a:	440b      	add	r3, r1
 800b31c:	3314      	adds	r3, #20
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b322:	7afb      	ldrb	r3, [r7, #11]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00e      	beq.n	800b346 <etharp_cleanup_netif+0x46>
 800b328:	490c      	ldr	r1, [pc, #48]	; (800b35c <etharp_cleanup_netif+0x5c>)
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	4613      	mov	r3, r2
 800b32e:	005b      	lsls	r3, r3, #1
 800b330:	4413      	add	r3, r2
 800b332:	00db      	lsls	r3, r3, #3
 800b334:	440b      	add	r3, r1
 800b336:	3308      	adds	r3, #8
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d102      	bne.n	800b346 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f7ff fce5 	bl	800ad10 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3301      	adds	r3, #1
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2b09      	cmp	r3, #9
 800b350:	dddd      	ble.n	800b30e <etharp_cleanup_netif+0xe>
    }
  }
}
 800b352:	bf00      	nop
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	20004098 	.word	0x20004098

0800b360 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b360:	b5b0      	push	{r4, r5, r7, lr}
 800b362:	b08a      	sub	sp, #40	; 0x28
 800b364:	af04      	add	r7, sp, #16
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d107      	bne.n	800b380 <etharp_input+0x20>
 800b370:	4b3d      	ldr	r3, [pc, #244]	; (800b468 <etharp_input+0x108>)
 800b372:	f240 228a 	movw	r2, #650	; 0x28a
 800b376:	493d      	ldr	r1, [pc, #244]	; (800b46c <etharp_input+0x10c>)
 800b378:	483d      	ldr	r0, [pc, #244]	; (800b470 <etharp_input+0x110>)
 800b37a:	f00a ff1f 	bl	80161bc <iprintf>
 800b37e:	e06f      	b.n	800b460 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	881b      	ldrh	r3, [r3, #0]
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b390:	d10c      	bne.n	800b3ac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b396:	2b06      	cmp	r3, #6
 800b398:	d108      	bne.n	800b3ac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b39e:	2b04      	cmp	r3, #4
 800b3a0:	d104      	bne.n	800b3ac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	885b      	ldrh	r3, [r3, #2]
 800b3a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b3a8:	2b08      	cmp	r3, #8
 800b3aa:	d003      	beq.n	800b3b4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f003 fa1f 	bl	800e7f0 <pbuf_free>
    return;
 800b3b2:	e055      	b.n	800b460 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	330e      	adds	r3, #14
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	3318      	adds	r3, #24
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	3304      	adds	r3, #4
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d102      	bne.n	800b3d4 <etharp_input+0x74>
    for_us = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	75fb      	strb	r3, [r7, #23]
 800b3d2:	e009      	b.n	800b3e8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	3304      	adds	r3, #4
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	bf0c      	ite	eq
 800b3e0:	2301      	moveq	r3, #1
 800b3e2:	2300      	movne	r3, #0
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	f103 0208 	add.w	r2, r3, #8
 800b3ee:	7dfb      	ldrb	r3, [r7, #23]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <etharp_input+0x98>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e000      	b.n	800b3fa <etharp_input+0x9a>
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	f107 010c 	add.w	r1, r7, #12
 800b3fe:	6838      	ldr	r0, [r7, #0]
 800b400:	f7ff fed8 	bl	800b1b4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	88db      	ldrh	r3, [r3, #6]
 800b408:	b29b      	uxth	r3, r3
 800b40a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b40e:	d003      	beq.n	800b418 <etharp_input+0xb8>
 800b410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b414:	d01e      	beq.n	800b454 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800b416:	e020      	b.n	800b45a <etharp_input+0xfa>
      if (for_us) {
 800b418:	7dfb      	ldrb	r3, [r7, #23]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d01c      	beq.n	800b458 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	3208      	adds	r2, #8
        etharp_raw(netif,
 800b438:	2102      	movs	r1, #2
 800b43a:	9103      	str	r1, [sp, #12]
 800b43c:	f107 010c 	add.w	r1, r7, #12
 800b440:	9102      	str	r1, [sp, #8]
 800b442:	9201      	str	r2, [sp, #4]
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	462b      	mov	r3, r5
 800b448:	4622      	mov	r2, r4
 800b44a:	4601      	mov	r1, r0
 800b44c:	6838      	ldr	r0, [r7, #0]
 800b44e:	f000 faeb 	bl	800ba28 <etharp_raw>
      break;
 800b452:	e001      	b.n	800b458 <etharp_input+0xf8>
      break;
 800b454:	bf00      	nop
 800b456:	e000      	b.n	800b45a <etharp_input+0xfa>
      break;
 800b458:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f003 f9c8 	bl	800e7f0 <pbuf_free>
}
 800b460:	3718      	adds	r7, #24
 800b462:	46bd      	mov	sp, r7
 800b464:	bdb0      	pop	{r4, r5, r7, pc}
 800b466:	bf00      	nop
 800b468:	08018570 	.word	0x08018570
 800b46c:	080186c0 	.word	0x080186c0
 800b470:	080185e8 	.word	0x080185e8

0800b474 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af02      	add	r7, sp, #8
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	4613      	mov	r3, r2
 800b480:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b482:	79fa      	ldrb	r2, [r7, #7]
 800b484:	4944      	ldr	r1, [pc, #272]	; (800b598 <etharp_output_to_arp_index+0x124>)
 800b486:	4613      	mov	r3, r2
 800b488:	005b      	lsls	r3, r3, #1
 800b48a:	4413      	add	r3, r2
 800b48c:	00db      	lsls	r3, r3, #3
 800b48e:	440b      	add	r3, r1
 800b490:	3314      	adds	r3, #20
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d806      	bhi.n	800b4a6 <etharp_output_to_arp_index+0x32>
 800b498:	4b40      	ldr	r3, [pc, #256]	; (800b59c <etharp_output_to_arp_index+0x128>)
 800b49a:	f240 22ef 	movw	r2, #751	; 0x2ef
 800b49e:	4940      	ldr	r1, [pc, #256]	; (800b5a0 <etharp_output_to_arp_index+0x12c>)
 800b4a0:	4840      	ldr	r0, [pc, #256]	; (800b5a4 <etharp_output_to_arp_index+0x130>)
 800b4a2:	f00a fe8b 	bl	80161bc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b4a6:	79fa      	ldrb	r2, [r7, #7]
 800b4a8:	493b      	ldr	r1, [pc, #236]	; (800b598 <etharp_output_to_arp_index+0x124>)
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	005b      	lsls	r3, r3, #1
 800b4ae:	4413      	add	r3, r2
 800b4b0:	00db      	lsls	r3, r3, #3
 800b4b2:	440b      	add	r3, r1
 800b4b4:	3314      	adds	r3, #20
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d153      	bne.n	800b564 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b4bc:	79fa      	ldrb	r2, [r7, #7]
 800b4be:	4936      	ldr	r1, [pc, #216]	; (800b598 <etharp_output_to_arp_index+0x124>)
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	005b      	lsls	r3, r3, #1
 800b4c4:	4413      	add	r3, r2
 800b4c6:	00db      	lsls	r3, r3, #3
 800b4c8:	440b      	add	r3, r1
 800b4ca:	3312      	adds	r3, #18
 800b4cc:	881b      	ldrh	r3, [r3, #0]
 800b4ce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b4d2:	d919      	bls.n	800b508 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b4d4:	79fa      	ldrb	r2, [r7, #7]
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	005b      	lsls	r3, r3, #1
 800b4da:	4413      	add	r3, r2
 800b4dc:	00db      	lsls	r3, r3, #3
 800b4de:	4a2e      	ldr	r2, [pc, #184]	; (800b598 <etharp_output_to_arp_index+0x124>)
 800b4e0:	4413      	add	r3, r2
 800b4e2:	3304      	adds	r3, #4
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f000 fb4c 	bl	800bb84 <etharp_request>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d138      	bne.n	800b564 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b4f2:	79fa      	ldrb	r2, [r7, #7]
 800b4f4:	4928      	ldr	r1, [pc, #160]	; (800b598 <etharp_output_to_arp_index+0x124>)
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	005b      	lsls	r3, r3, #1
 800b4fa:	4413      	add	r3, r2
 800b4fc:	00db      	lsls	r3, r3, #3
 800b4fe:	440b      	add	r3, r1
 800b500:	3314      	adds	r3, #20
 800b502:	2203      	movs	r2, #3
 800b504:	701a      	strb	r2, [r3, #0]
 800b506:	e02d      	b.n	800b564 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b508:	79fa      	ldrb	r2, [r7, #7]
 800b50a:	4923      	ldr	r1, [pc, #140]	; (800b598 <etharp_output_to_arp_index+0x124>)
 800b50c:	4613      	mov	r3, r2
 800b50e:	005b      	lsls	r3, r3, #1
 800b510:	4413      	add	r3, r2
 800b512:	00db      	lsls	r3, r3, #3
 800b514:	440b      	add	r3, r1
 800b516:	3312      	adds	r3, #18
 800b518:	881b      	ldrh	r3, [r3, #0]
 800b51a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b51e:	d321      	bcc.n	800b564 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b520:	79fa      	ldrb	r2, [r7, #7]
 800b522:	4613      	mov	r3, r2
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	4413      	add	r3, r2
 800b528:	00db      	lsls	r3, r3, #3
 800b52a:	4a1b      	ldr	r2, [pc, #108]	; (800b598 <etharp_output_to_arp_index+0x124>)
 800b52c:	4413      	add	r3, r2
 800b52e:	1d19      	adds	r1, r3, #4
 800b530:	79fa      	ldrb	r2, [r7, #7]
 800b532:	4613      	mov	r3, r2
 800b534:	005b      	lsls	r3, r3, #1
 800b536:	4413      	add	r3, r2
 800b538:	00db      	lsls	r3, r3, #3
 800b53a:	3308      	adds	r3, #8
 800b53c:	4a16      	ldr	r2, [pc, #88]	; (800b598 <etharp_output_to_arp_index+0x124>)
 800b53e:	4413      	add	r3, r2
 800b540:	3304      	adds	r3, #4
 800b542:	461a      	mov	r2, r3
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f000 fafb 	bl	800bb40 <etharp_request_dst>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d109      	bne.n	800b564 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b550:	79fa      	ldrb	r2, [r7, #7]
 800b552:	4911      	ldr	r1, [pc, #68]	; (800b598 <etharp_output_to_arp_index+0x124>)
 800b554:	4613      	mov	r3, r2
 800b556:	005b      	lsls	r3, r3, #1
 800b558:	4413      	add	r3, r2
 800b55a:	00db      	lsls	r3, r3, #3
 800b55c:	440b      	add	r3, r1
 800b55e:	3314      	adds	r3, #20
 800b560:	2203      	movs	r2, #3
 800b562:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800b56a:	79fa      	ldrb	r2, [r7, #7]
 800b56c:	4613      	mov	r3, r2
 800b56e:	005b      	lsls	r3, r3, #1
 800b570:	4413      	add	r3, r2
 800b572:	00db      	lsls	r3, r3, #3
 800b574:	3308      	adds	r3, #8
 800b576:	4a08      	ldr	r2, [pc, #32]	; (800b598 <etharp_output_to_arp_index+0x124>)
 800b578:	4413      	add	r3, r2
 800b57a:	1d1a      	adds	r2, r3, #4
 800b57c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	4613      	mov	r3, r2
 800b584:	460a      	mov	r2, r1
 800b586:	68b9      	ldr	r1, [r7, #8]
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f00a fb4f 	bl	8015c2c <ethernet_output>
 800b58e:	4603      	mov	r3, r0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	20004098 	.word	0x20004098
 800b59c:	08018570 	.word	0x08018570
 800b5a0:	080186e0 	.word	0x080186e0
 800b5a4:	080185e8 	.word	0x080185e8

0800b5a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08a      	sub	sp, #40	; 0x28
 800b5ac:	af02      	add	r7, sp, #8
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d106      	bne.n	800b5cc <etharp_output+0x24>
 800b5be:	4b73      	ldr	r3, [pc, #460]	; (800b78c <etharp_output+0x1e4>)
 800b5c0:	f240 321e 	movw	r2, #798	; 0x31e
 800b5c4:	4972      	ldr	r1, [pc, #456]	; (800b790 <etharp_output+0x1e8>)
 800b5c6:	4873      	ldr	r0, [pc, #460]	; (800b794 <etharp_output+0x1ec>)
 800b5c8:	f00a fdf8 	bl	80161bc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d106      	bne.n	800b5e0 <etharp_output+0x38>
 800b5d2:	4b6e      	ldr	r3, [pc, #440]	; (800b78c <etharp_output+0x1e4>)
 800b5d4:	f240 321f 	movw	r2, #799	; 0x31f
 800b5d8:	496f      	ldr	r1, [pc, #444]	; (800b798 <etharp_output+0x1f0>)
 800b5da:	486e      	ldr	r0, [pc, #440]	; (800b794 <etharp_output+0x1ec>)
 800b5dc:	f00a fdee 	bl	80161bc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d106      	bne.n	800b5f4 <etharp_output+0x4c>
 800b5e6:	4b69      	ldr	r3, [pc, #420]	; (800b78c <etharp_output+0x1e4>)
 800b5e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b5ec:	496b      	ldr	r1, [pc, #428]	; (800b79c <etharp_output+0x1f4>)
 800b5ee:	4869      	ldr	r0, [pc, #420]	; (800b794 <etharp_output+0x1ec>)
 800b5f0:	f00a fde4 	bl	80161bc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68f9      	ldr	r1, [r7, #12]
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 fef0 	bl	800c3e0 <ip4_addr_isbroadcast_u32>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d002      	beq.n	800b60c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b606:	4b66      	ldr	r3, [pc, #408]	; (800b7a0 <etharp_output+0x1f8>)
 800b608:	61fb      	str	r3, [r7, #28]
 800b60a:	e0af      	b.n	800b76c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b614:	2be0      	cmp	r3, #224	; 0xe0
 800b616:	d118      	bne.n	800b64a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b618:	2301      	movs	r3, #1
 800b61a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b61c:	2300      	movs	r3, #0
 800b61e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b620:	235e      	movs	r3, #94	; 0x5e
 800b622:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	3301      	adds	r3, #1
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	3302      	adds	r3, #2
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	3303      	adds	r3, #3
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b642:	f107 0310 	add.w	r3, r7, #16
 800b646:	61fb      	str	r3, [r7, #28]
 800b648:	e090      	b.n	800b76c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	3304      	adds	r3, #4
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	405a      	eors	r2, r3
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	3308      	adds	r3, #8
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4013      	ands	r3, r2
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d012      	beq.n	800b688 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b668:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d00b      	beq.n	800b688 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	330c      	adds	r3, #12
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d003      	beq.n	800b682 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	330c      	adds	r3, #12
 800b67e:	61bb      	str	r3, [r7, #24]
 800b680:	e002      	b.n	800b688 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b682:	f06f 0303 	mvn.w	r3, #3
 800b686:	e07d      	b.n	800b784 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b688:	4b46      	ldr	r3, [pc, #280]	; (800b7a4 <etharp_output+0x1fc>)
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	4619      	mov	r1, r3
 800b68e:	4a46      	ldr	r2, [pc, #280]	; (800b7a8 <etharp_output+0x200>)
 800b690:	460b      	mov	r3, r1
 800b692:	005b      	lsls	r3, r3, #1
 800b694:	440b      	add	r3, r1
 800b696:	00db      	lsls	r3, r3, #3
 800b698:	4413      	add	r3, r2
 800b69a:	3314      	adds	r3, #20
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d925      	bls.n	800b6ee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b6a2:	4b40      	ldr	r3, [pc, #256]	; (800b7a4 <etharp_output+0x1fc>)
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	4a3f      	ldr	r2, [pc, #252]	; (800b7a8 <etharp_output+0x200>)
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	005b      	lsls	r3, r3, #1
 800b6ae:	440b      	add	r3, r1
 800b6b0:	00db      	lsls	r3, r3, #3
 800b6b2:	4413      	add	r3, r2
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	681a      	ldr	r2, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d117      	bne.n	800b6ee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	4b38      	ldr	r3, [pc, #224]	; (800b7a4 <etharp_output+0x1fc>)
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	4937      	ldr	r1, [pc, #220]	; (800b7a8 <etharp_output+0x200>)
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	005b      	lsls	r3, r3, #1
 800b6ce:	4403      	add	r3, r0
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	440b      	add	r3, r1
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d108      	bne.n	800b6ee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b6dc:	4b31      	ldr	r3, [pc, #196]	; (800b7a4 <etharp_output+0x1fc>)
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	68b9      	ldr	r1, [r7, #8]
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f7ff fec5 	bl	800b474 <etharp_output_to_arp_index>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	e04a      	b.n	800b784 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	75fb      	strb	r3, [r7, #23]
 800b6f2:	e031      	b.n	800b758 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b6f4:	7dfa      	ldrb	r2, [r7, #23]
 800b6f6:	492c      	ldr	r1, [pc, #176]	; (800b7a8 <etharp_output+0x200>)
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	4413      	add	r3, r2
 800b6fe:	00db      	lsls	r3, r3, #3
 800b700:	440b      	add	r3, r1
 800b702:	3314      	adds	r3, #20
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	2b01      	cmp	r3, #1
 800b708:	d923      	bls.n	800b752 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800b70a:	7dfa      	ldrb	r2, [r7, #23]
 800b70c:	4926      	ldr	r1, [pc, #152]	; (800b7a8 <etharp_output+0x200>)
 800b70e:	4613      	mov	r3, r2
 800b710:	005b      	lsls	r3, r3, #1
 800b712:	4413      	add	r3, r2
 800b714:	00db      	lsls	r3, r3, #3
 800b716:	440b      	add	r3, r1
 800b718:	3308      	adds	r3, #8
 800b71a:	681a      	ldr	r2, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d117      	bne.n	800b752 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	6819      	ldr	r1, [r3, #0]
 800b726:	7dfa      	ldrb	r2, [r7, #23]
 800b728:	481f      	ldr	r0, [pc, #124]	; (800b7a8 <etharp_output+0x200>)
 800b72a:	4613      	mov	r3, r2
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	4413      	add	r3, r2
 800b730:	00db      	lsls	r3, r3, #3
 800b732:	4403      	add	r3, r0
 800b734:	3304      	adds	r3, #4
 800b736:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800b738:	4299      	cmp	r1, r3
 800b73a:	d10a      	bne.n	800b752 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800b73c:	4a19      	ldr	r2, [pc, #100]	; (800b7a4 <etharp_output+0x1fc>)
 800b73e:	7dfb      	ldrb	r3, [r7, #23]
 800b740:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b742:	7dfb      	ldrb	r3, [r7, #23]
 800b744:	461a      	mov	r2, r3
 800b746:	68b9      	ldr	r1, [r7, #8]
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f7ff fe93 	bl	800b474 <etharp_output_to_arp_index>
 800b74e:	4603      	mov	r3, r0
 800b750:	e018      	b.n	800b784 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b752:	7dfb      	ldrb	r3, [r7, #23]
 800b754:	3301      	adds	r3, #1
 800b756:	75fb      	strb	r3, [r7, #23]
 800b758:	7dfb      	ldrb	r3, [r7, #23]
 800b75a:	2b09      	cmp	r3, #9
 800b75c:	d9ca      	bls.n	800b6f4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	69b9      	ldr	r1, [r7, #24]
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f000 f822 	bl	800b7ac <etharp_query>
 800b768:	4603      	mov	r3, r0
 800b76a:	e00b      	b.n	800b784 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b772:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b776:	9300      	str	r3, [sp, #0]
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	68b9      	ldr	r1, [r7, #8]
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f00a fa55 	bl	8015c2c <ethernet_output>
 800b782:	4603      	mov	r3, r0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3720      	adds	r7, #32
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	08018570 	.word	0x08018570
 800b790:	080186c0 	.word	0x080186c0
 800b794:	080185e8 	.word	0x080185e8
 800b798:	08018710 	.word	0x08018710
 800b79c:	080186b0 	.word	0x080186b0
 800b7a0:	0801b08c 	.word	0x0801b08c
 800b7a4:	20004188 	.word	0x20004188
 800b7a8:	20004098 	.word	0x20004098

0800b7ac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b08c      	sub	sp, #48	; 0x30
 800b7b0:	af02      	add	r7, sp, #8
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	3326      	adds	r3, #38	; 0x26
 800b7bc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b7be:	23ff      	movs	r3, #255	; 0xff
 800b7c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68f9      	ldr	r1, [r7, #12]
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f000 fe06 	bl	800c3e0 <ip4_addr_isbroadcast_u32>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10c      	bne.n	800b7f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b7e2:	2be0      	cmp	r3, #224	; 0xe0
 800b7e4:	d006      	beq.n	800b7f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d003      	beq.n	800b7f4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d102      	bne.n	800b7fa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b7f4:	f06f 030f 	mvn.w	r3, #15
 800b7f8:	e102      	b.n	800ba00 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	2101      	movs	r1, #1
 800b7fe:	68b8      	ldr	r0, [r7, #8]
 800b800:	f7ff fb60 	bl	800aec4 <etharp_find_entry>
 800b804:	4603      	mov	r3, r0
 800b806:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800b808:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	da02      	bge.n	800b816 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800b810:	8a7b      	ldrh	r3, [r7, #18]
 800b812:	b25b      	sxtb	r3, r3
 800b814:	e0f4      	b.n	800ba00 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800b816:	8a7b      	ldrh	r3, [r7, #18]
 800b818:	2b7e      	cmp	r3, #126	; 0x7e
 800b81a:	d906      	bls.n	800b82a <etharp_query+0x7e>
 800b81c:	4b7a      	ldr	r3, [pc, #488]	; (800ba08 <etharp_query+0x25c>)
 800b81e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800b822:	497a      	ldr	r1, [pc, #488]	; (800ba0c <etharp_query+0x260>)
 800b824:	487a      	ldr	r0, [pc, #488]	; (800ba10 <etharp_query+0x264>)
 800b826:	f00a fcc9 	bl	80161bc <iprintf>
  i = (netif_addr_idx_t)i_err;
 800b82a:	8a7b      	ldrh	r3, [r7, #18]
 800b82c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b82e:	7c7a      	ldrb	r2, [r7, #17]
 800b830:	4978      	ldr	r1, [pc, #480]	; (800ba14 <etharp_query+0x268>)
 800b832:	4613      	mov	r3, r2
 800b834:	005b      	lsls	r3, r3, #1
 800b836:	4413      	add	r3, r2
 800b838:	00db      	lsls	r3, r3, #3
 800b83a:	440b      	add	r3, r1
 800b83c:	3314      	adds	r3, #20
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d115      	bne.n	800b870 <etharp_query+0xc4>
    is_new_entry = 1;
 800b844:	2301      	movs	r3, #1
 800b846:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b848:	7c7a      	ldrb	r2, [r7, #17]
 800b84a:	4972      	ldr	r1, [pc, #456]	; (800ba14 <etharp_query+0x268>)
 800b84c:	4613      	mov	r3, r2
 800b84e:	005b      	lsls	r3, r3, #1
 800b850:	4413      	add	r3, r2
 800b852:	00db      	lsls	r3, r3, #3
 800b854:	440b      	add	r3, r1
 800b856:	3314      	adds	r3, #20
 800b858:	2201      	movs	r2, #1
 800b85a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b85c:	7c7a      	ldrb	r2, [r7, #17]
 800b85e:	496d      	ldr	r1, [pc, #436]	; (800ba14 <etharp_query+0x268>)
 800b860:	4613      	mov	r3, r2
 800b862:	005b      	lsls	r3, r3, #1
 800b864:	4413      	add	r3, r2
 800b866:	00db      	lsls	r3, r3, #3
 800b868:	440b      	add	r3, r1
 800b86a:	3308      	adds	r3, #8
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b870:	7c7a      	ldrb	r2, [r7, #17]
 800b872:	4968      	ldr	r1, [pc, #416]	; (800ba14 <etharp_query+0x268>)
 800b874:	4613      	mov	r3, r2
 800b876:	005b      	lsls	r3, r3, #1
 800b878:	4413      	add	r3, r2
 800b87a:	00db      	lsls	r3, r3, #3
 800b87c:	440b      	add	r3, r1
 800b87e:	3314      	adds	r3, #20
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d011      	beq.n	800b8aa <etharp_query+0xfe>
 800b886:	7c7a      	ldrb	r2, [r7, #17]
 800b888:	4962      	ldr	r1, [pc, #392]	; (800ba14 <etharp_query+0x268>)
 800b88a:	4613      	mov	r3, r2
 800b88c:	005b      	lsls	r3, r3, #1
 800b88e:	4413      	add	r3, r2
 800b890:	00db      	lsls	r3, r3, #3
 800b892:	440b      	add	r3, r1
 800b894:	3314      	adds	r3, #20
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d806      	bhi.n	800b8aa <etharp_query+0xfe>
 800b89c:	4b5a      	ldr	r3, [pc, #360]	; (800ba08 <etharp_query+0x25c>)
 800b89e:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b8a2:	495d      	ldr	r1, [pc, #372]	; (800ba18 <etharp_query+0x26c>)
 800b8a4:	485a      	ldr	r0, [pc, #360]	; (800ba10 <etharp_query+0x264>)
 800b8a6:	f00a fc89 	bl	80161bc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b8aa:	6a3b      	ldr	r3, [r7, #32]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d102      	bne.n	800b8b6 <etharp_query+0x10a>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d10c      	bne.n	800b8d0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b8b6:	68b9      	ldr	r1, [r7, #8]
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	f000 f963 	bl	800bb84 <etharp_request>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d102      	bne.n	800b8d0 <etharp_query+0x124>
      return result;
 800b8ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b8ce:	e097      	b.n	800ba00 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d106      	bne.n	800b8e4 <etharp_query+0x138>
 800b8d6:	4b4c      	ldr	r3, [pc, #304]	; (800ba08 <etharp_query+0x25c>)
 800b8d8:	f240 32e1 	movw	r2, #993	; 0x3e1
 800b8dc:	494f      	ldr	r1, [pc, #316]	; (800ba1c <etharp_query+0x270>)
 800b8de:	484c      	ldr	r0, [pc, #304]	; (800ba10 <etharp_query+0x264>)
 800b8e0:	f00a fc6c 	bl	80161bc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b8e4:	7c7a      	ldrb	r2, [r7, #17]
 800b8e6:	494b      	ldr	r1, [pc, #300]	; (800ba14 <etharp_query+0x268>)
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	005b      	lsls	r3, r3, #1
 800b8ec:	4413      	add	r3, r2
 800b8ee:	00db      	lsls	r3, r3, #3
 800b8f0:	440b      	add	r3, r1
 800b8f2:	3314      	adds	r3, #20
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d918      	bls.n	800b92c <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800b8fa:	4a49      	ldr	r2, [pc, #292]	; (800ba20 <etharp_query+0x274>)
 800b8fc:	7c7b      	ldrb	r3, [r7, #17]
 800b8fe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b900:	7c7a      	ldrb	r2, [r7, #17]
 800b902:	4613      	mov	r3, r2
 800b904:	005b      	lsls	r3, r3, #1
 800b906:	4413      	add	r3, r2
 800b908:	00db      	lsls	r3, r3, #3
 800b90a:	3308      	adds	r3, #8
 800b90c:	4a41      	ldr	r2, [pc, #260]	; (800ba14 <etharp_query+0x268>)
 800b90e:	4413      	add	r3, r2
 800b910:	1d1a      	adds	r2, r3, #4
 800b912:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	4613      	mov	r3, r2
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	6879      	ldr	r1, [r7, #4]
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f00a f984 	bl	8015c2c <ethernet_output>
 800b924:	4603      	mov	r3, r0
 800b926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b92a:	e067      	b.n	800b9fc <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b92c:	7c7a      	ldrb	r2, [r7, #17]
 800b92e:	4939      	ldr	r1, [pc, #228]	; (800ba14 <etharp_query+0x268>)
 800b930:	4613      	mov	r3, r2
 800b932:	005b      	lsls	r3, r3, #1
 800b934:	4413      	add	r3, r2
 800b936:	00db      	lsls	r3, r3, #3
 800b938:	440b      	add	r3, r1
 800b93a:	3314      	adds	r3, #20
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d15c      	bne.n	800b9fc <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b942:	2300      	movs	r3, #0
 800b944:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b94a:	e01c      	b.n	800b986 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	895a      	ldrh	r2, [r3, #10]
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	891b      	ldrh	r3, [r3, #8]
 800b954:	429a      	cmp	r2, r3
 800b956:	d10a      	bne.n	800b96e <etharp_query+0x1c2>
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d006      	beq.n	800b96e <etharp_query+0x1c2>
 800b960:	4b29      	ldr	r3, [pc, #164]	; (800ba08 <etharp_query+0x25c>)
 800b962:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b966:	492f      	ldr	r1, [pc, #188]	; (800ba24 <etharp_query+0x278>)
 800b968:	4829      	ldr	r0, [pc, #164]	; (800ba10 <etharp_query+0x264>)
 800b96a:	f00a fc27 	bl	80161bc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	7b1b      	ldrb	r3, [r3, #12]
 800b972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b976:	2b00      	cmp	r3, #0
 800b978:	d002      	beq.n	800b980 <etharp_query+0x1d4>
        copy_needed = 1;
 800b97a:	2301      	movs	r3, #1
 800b97c:	61bb      	str	r3, [r7, #24]
        break;
 800b97e:	e005      	b.n	800b98c <etharp_query+0x1e0>
      }
      p = p->next;
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1df      	bne.n	800b94c <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d007      	beq.n	800b9a2 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b998:	200e      	movs	r0, #14
 800b99a:	f003 f9a1 	bl	800ece0 <pbuf_clone>
 800b99e:	61f8      	str	r0, [r7, #28]
 800b9a0:	e004      	b.n	800b9ac <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b9a6:	69f8      	ldr	r0, [r7, #28]
 800b9a8:	f002 ffc8 	bl	800e93c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d021      	beq.n	800b9f6 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b9b2:	7c7a      	ldrb	r2, [r7, #17]
 800b9b4:	4917      	ldr	r1, [pc, #92]	; (800ba14 <etharp_query+0x268>)
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	005b      	lsls	r3, r3, #1
 800b9ba:	4413      	add	r3, r2
 800b9bc:	00db      	lsls	r3, r3, #3
 800b9be:	440b      	add	r3, r1
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00a      	beq.n	800b9dc <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800b9c6:	7c7a      	ldrb	r2, [r7, #17]
 800b9c8:	4912      	ldr	r1, [pc, #72]	; (800ba14 <etharp_query+0x268>)
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	005b      	lsls	r3, r3, #1
 800b9ce:	4413      	add	r3, r2
 800b9d0:	00db      	lsls	r3, r3, #3
 800b9d2:	440b      	add	r3, r1
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f002 ff0a 	bl	800e7f0 <pbuf_free>
      }
      arp_table[i].q = p;
 800b9dc:	7c7a      	ldrb	r2, [r7, #17]
 800b9de:	490d      	ldr	r1, [pc, #52]	; (800ba14 <etharp_query+0x268>)
 800b9e0:	4613      	mov	r3, r2
 800b9e2:	005b      	lsls	r3, r3, #1
 800b9e4:	4413      	add	r3, r2
 800b9e6:	00db      	lsls	r3, r3, #3
 800b9e8:	440b      	add	r3, r1
 800b9ea:	69fa      	ldr	r2, [r7, #28]
 800b9ec:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9f4:	e002      	b.n	800b9fc <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b9f6:	23ff      	movs	r3, #255	; 0xff
 800b9f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800b9fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3728      	adds	r7, #40	; 0x28
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	08018570 	.word	0x08018570
 800ba0c:	0801871c 	.word	0x0801871c
 800ba10:	080185e8 	.word	0x080185e8
 800ba14:	20004098 	.word	0x20004098
 800ba18:	0801872c 	.word	0x0801872c
 800ba1c:	08018710 	.word	0x08018710
 800ba20:	20004188 	.word	0x20004188
 800ba24:	08018754 	.word	0x08018754

0800ba28 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b08a      	sub	sp, #40	; 0x28
 800ba2c:	af02      	add	r7, sp, #8
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]
 800ba34:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d106      	bne.n	800ba4e <etharp_raw+0x26>
 800ba40:	4b3a      	ldr	r3, [pc, #232]	; (800bb2c <etharp_raw+0x104>)
 800ba42:	f240 4257 	movw	r2, #1111	; 0x457
 800ba46:	493a      	ldr	r1, [pc, #232]	; (800bb30 <etharp_raw+0x108>)
 800ba48:	483a      	ldr	r0, [pc, #232]	; (800bb34 <etharp_raw+0x10c>)
 800ba4a:	f00a fbb7 	bl	80161bc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ba4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba52:	211c      	movs	r1, #28
 800ba54:	200e      	movs	r0, #14
 800ba56:	f002 fbb7 	bl	800e1c8 <pbuf_alloc>
 800ba5a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d102      	bne.n	800ba68 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ba62:	f04f 33ff 	mov.w	r3, #4294967295
 800ba66:	e05d      	b.n	800bb24 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	895b      	ldrh	r3, [r3, #10]
 800ba6c:	2b1b      	cmp	r3, #27
 800ba6e:	d806      	bhi.n	800ba7e <etharp_raw+0x56>
 800ba70:	4b2e      	ldr	r3, [pc, #184]	; (800bb2c <etharp_raw+0x104>)
 800ba72:	f240 4263 	movw	r2, #1123	; 0x463
 800ba76:	4930      	ldr	r1, [pc, #192]	; (800bb38 <etharp_raw+0x110>)
 800ba78:	482e      	ldr	r0, [pc, #184]	; (800bb34 <etharp_raw+0x10c>)
 800ba7a:	f00a fb9f 	bl	80161bc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ba84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7ff f8fc 	bl	800ac84 <lwip_htons>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	461a      	mov	r2, r3
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ba9a:	2b06      	cmp	r3, #6
 800ba9c:	d006      	beq.n	800baac <etharp_raw+0x84>
 800ba9e:	4b23      	ldr	r3, [pc, #140]	; (800bb2c <etharp_raw+0x104>)
 800baa0:	f240 426a 	movw	r2, #1130	; 0x46a
 800baa4:	4925      	ldr	r1, [pc, #148]	; (800bb3c <etharp_raw+0x114>)
 800baa6:	4823      	ldr	r0, [pc, #140]	; (800bb34 <etharp_raw+0x10c>)
 800baa8:	f00a fb88 	bl	80161bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	3308      	adds	r3, #8
 800bab0:	2206      	movs	r2, #6
 800bab2:	6839      	ldr	r1, [r7, #0]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f00a fb40 	bl	801613a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	3312      	adds	r3, #18
 800babe:	2206      	movs	r2, #6
 800bac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bac2:	4618      	mov	r0, r3
 800bac4:	f00a fb39 	bl	801613a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	330e      	adds	r3, #14
 800bacc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bace:	6812      	ldr	r2, [r2, #0]
 800bad0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	3318      	adds	r3, #24
 800bad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bad8:	6812      	ldr	r2, [r2, #0]
 800bada:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	2200      	movs	r2, #0
 800bae0:	701a      	strb	r2, [r3, #0]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f042 0201 	orr.w	r2, r2, #1
 800bae8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	2200      	movs	r2, #0
 800baee:	f042 0208 	orr.w	r2, r2, #8
 800baf2:	709a      	strb	r2, [r3, #2]
 800baf4:	2200      	movs	r2, #0
 800baf6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	2206      	movs	r2, #6
 800bafc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	2204      	movs	r2, #4
 800bb02:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800bb04:	f640 0306 	movw	r3, #2054	; 0x806
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	68ba      	ldr	r2, [r7, #8]
 800bb0e:	69b9      	ldr	r1, [r7, #24]
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f00a f88b 	bl	8015c2c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800bb16:	69b8      	ldr	r0, [r7, #24]
 800bb18:	f002 fe6a 	bl	800e7f0 <pbuf_free>
  p = NULL;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800bb20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3720      	adds	r7, #32
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	08018570 	.word	0x08018570
 800bb30:	080186c0 	.word	0x080186c0
 800bb34:	080185e8 	.word	0x080185e8
 800bb38:	08018770 	.word	0x08018770
 800bb3c:	080187a4 	.word	0x080187a4

0800bb40 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b088      	sub	sp, #32
 800bb44:	af04      	add	r7, sp, #16
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	9203      	str	r2, [sp, #12]
 800bb60:	68ba      	ldr	r2, [r7, #8]
 800bb62:	9202      	str	r2, [sp, #8]
 800bb64:	4a06      	ldr	r2, [pc, #24]	; (800bb80 <etharp_request_dst+0x40>)
 800bb66:	9201      	str	r2, [sp, #4]
 800bb68:	9300      	str	r3, [sp, #0]
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	68f8      	ldr	r0, [r7, #12]
 800bb70:	f7ff ff5a 	bl	800ba28 <etharp_raw>
 800bb74:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	0801b094 	.word	0x0801b094

0800bb84 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800bb8e:	4a05      	ldr	r2, [pc, #20]	; (800bba4 <etharp_request+0x20>)
 800bb90:	6839      	ldr	r1, [r7, #0]
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7ff ffd4 	bl	800bb40 <etharp_request_dst>
 800bb98:	4603      	mov	r3, r0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3708      	adds	r7, #8
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	0801b08c 	.word	0x0801b08c

0800bba8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08e      	sub	sp, #56	; 0x38
 800bbac:	af04      	add	r7, sp, #16
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800bbb2:	4b79      	ldr	r3, [pc, #484]	; (800bd98 <icmp_input+0x1f0>)
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	f003 030f 	and.w	r3, r3, #15
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800bbc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbca:	2b13      	cmp	r3, #19
 800bbcc:	f240 80cd 	bls.w	800bd6a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	895b      	ldrh	r3, [r3, #10]
 800bbd4:	2b03      	cmp	r3, #3
 800bbd6:	f240 80ca 	bls.w	800bd6e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800bbe4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f000 80b7 	beq.w	800bd5c <icmp_input+0x1b4>
 800bbee:	2b08      	cmp	r3, #8
 800bbf0:	f040 80b7 	bne.w	800bd62 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800bbf4:	4b69      	ldr	r3, [pc, #420]	; (800bd9c <icmp_input+0x1f4>)
 800bbf6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bbf8:	4b67      	ldr	r3, [pc, #412]	; (800bd98 <icmp_input+0x1f0>)
 800bbfa:	695b      	ldr	r3, [r3, #20]
 800bbfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc00:	2be0      	cmp	r3, #224	; 0xe0
 800bc02:	f000 80bb 	beq.w	800bd7c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800bc06:	4b64      	ldr	r3, [pc, #400]	; (800bd98 <icmp_input+0x1f0>)
 800bc08:	695a      	ldr	r2, [r3, #20]
 800bc0a:	4b63      	ldr	r3, [pc, #396]	; (800bd98 <icmp_input+0x1f0>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4619      	mov	r1, r3
 800bc10:	4610      	mov	r0, r2
 800bc12:	f000 fbe5 	bl	800c3e0 <ip4_addr_isbroadcast_u32>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f040 80b1 	bne.w	800bd80 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	891b      	ldrh	r3, [r3, #8]
 800bc22:	2b07      	cmp	r3, #7
 800bc24:	f240 80a5 	bls.w	800bd72 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800bc28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc2a:	330e      	adds	r3, #14
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f002 fd16 	bl	800e660 <pbuf_add_header>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d04b      	beq.n	800bcd2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	891a      	ldrh	r2, [r3, #8]
 800bc3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc40:	4413      	add	r3, r2
 800bc42:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	891b      	ldrh	r3, [r3, #8]
 800bc48:	8b7a      	ldrh	r2, [r7, #26]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	f0c0 809a 	bcc.w	800bd84 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800bc50:	8b7b      	ldrh	r3, [r7, #26]
 800bc52:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bc56:	4619      	mov	r1, r3
 800bc58:	200e      	movs	r0, #14
 800bc5a:	f002 fab5 	bl	800e1c8 <pbuf_alloc>
 800bc5e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f000 8090 	beq.w	800bd88 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	895b      	ldrh	r3, [r3, #10]
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc70:	3308      	adds	r3, #8
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d203      	bcs.n	800bc7e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800bc76:	6978      	ldr	r0, [r7, #20]
 800bc78:	f002 fdba 	bl	800e7f0 <pbuf_free>
          goto icmperr;
 800bc7c:	e085      	b.n	800bd8a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bc84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc86:	4618      	mov	r0, r3
 800bc88:	f00a fa57 	bl	801613a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800bc8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6978      	ldr	r0, [r7, #20]
 800bc92:	f002 fcf5 	bl	800e680 <pbuf_remove_header>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d009      	beq.n	800bcb0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800bc9c:	4b40      	ldr	r3, [pc, #256]	; (800bda0 <icmp_input+0x1f8>)
 800bc9e:	22b6      	movs	r2, #182	; 0xb6
 800bca0:	4940      	ldr	r1, [pc, #256]	; (800bda4 <icmp_input+0x1fc>)
 800bca2:	4841      	ldr	r0, [pc, #260]	; (800bda8 <icmp_input+0x200>)
 800bca4:	f00a fa8a 	bl	80161bc <iprintf>
          pbuf_free(r);
 800bca8:	6978      	ldr	r0, [r7, #20]
 800bcaa:	f002 fda1 	bl	800e7f0 <pbuf_free>
          goto icmperr;
 800bcae:	e06c      	b.n	800bd8a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800bcb0:	6879      	ldr	r1, [r7, #4]
 800bcb2:	6978      	ldr	r0, [r7, #20]
 800bcb4:	f002 fed0 	bl	800ea58 <pbuf_copy>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d003      	beq.n	800bcc6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800bcbe:	6978      	ldr	r0, [r7, #20]
 800bcc0:	f002 fd96 	bl	800e7f0 <pbuf_free>
          goto icmperr;
 800bcc4:	e061      	b.n	800bd8a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f002 fd92 	bl	800e7f0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	607b      	str	r3, [r7, #4]
 800bcd0:	e00f      	b.n	800bcf2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800bcd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcd4:	330e      	adds	r3, #14
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f002 fcd1 	bl	800e680 <pbuf_remove_header>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d006      	beq.n	800bcf2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800bce4:	4b2e      	ldr	r3, [pc, #184]	; (800bda0 <icmp_input+0x1f8>)
 800bce6:	22c7      	movs	r2, #199	; 0xc7
 800bce8:	4930      	ldr	r1, [pc, #192]	; (800bdac <icmp_input+0x204>)
 800bcea:	482f      	ldr	r0, [pc, #188]	; (800bda8 <icmp_input+0x200>)
 800bcec:	f00a fa66 	bl	80161bc <iprintf>
          goto icmperr;
 800bcf0:	e04b      	b.n	800bd8a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800bcf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f002 fcaf 	bl	800e660 <pbuf_add_header>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d12b      	bne.n	800bd60 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800bd0e:	69fb      	ldr	r3, [r7, #28]
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800bd16:	4b20      	ldr	r3, [pc, #128]	; (800bd98 <icmp_input+0x1f0>)
 800bd18:	691a      	ldr	r2, [r3, #16]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	2200      	movs	r2, #0
 800bd22:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	2200      	movs	r2, #0
 800bd28:	709a      	strb	r2, [r3, #2]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	22ff      	movs	r2, #255	; 0xff
 800bd32:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2200      	movs	r2, #0
 800bd38:	729a      	strb	r2, [r3, #10]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	9302      	str	r3, [sp, #8]
 800bd42:	2301      	movs	r3, #1
 800bd44:	9301      	str	r3, [sp, #4]
 800bd46:	2300      	movs	r3, #0
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	23ff      	movs	r3, #255	; 0xff
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	69f9      	ldr	r1, [r7, #28]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 fa6d 	bl	800c230 <ip4_output_if>
 800bd56:	4603      	mov	r3, r0
 800bd58:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800bd5a:	e001      	b.n	800bd60 <icmp_input+0x1b8>
      break;
 800bd5c:	bf00      	nop
 800bd5e:	e000      	b.n	800bd62 <icmp_input+0x1ba>
      break;
 800bd60:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f002 fd44 	bl	800e7f0 <pbuf_free>
  return;
 800bd68:	e013      	b.n	800bd92 <icmp_input+0x1ea>
    goto lenerr;
 800bd6a:	bf00      	nop
 800bd6c:	e002      	b.n	800bd74 <icmp_input+0x1cc>
    goto lenerr;
 800bd6e:	bf00      	nop
 800bd70:	e000      	b.n	800bd74 <icmp_input+0x1cc>
        goto lenerr;
 800bd72:	bf00      	nop
lenerr:
  pbuf_free(p);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f002 fd3b 	bl	800e7f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bd7a:	e00a      	b.n	800bd92 <icmp_input+0x1ea>
        goto icmperr;
 800bd7c:	bf00      	nop
 800bd7e:	e004      	b.n	800bd8a <icmp_input+0x1e2>
        goto icmperr;
 800bd80:	bf00      	nop
 800bd82:	e002      	b.n	800bd8a <icmp_input+0x1e2>
          goto icmperr;
 800bd84:	bf00      	nop
 800bd86:	e000      	b.n	800bd8a <icmp_input+0x1e2>
          goto icmperr;
 800bd88:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f002 fd30 	bl	800e7f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bd90:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800bd92:	3728      	adds	r7, #40	; 0x28
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	20007418 	.word	0x20007418
 800bd9c:	2000742c 	.word	0x2000742c
 800bda0:	080187e8 	.word	0x080187e8
 800bda4:	08018820 	.word	0x08018820
 800bda8:	08018858 	.word	0x08018858
 800bdac:	08018880 	.word	0x08018880

0800bdb0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800bdbc:	78fb      	ldrb	r3, [r7, #3]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	2103      	movs	r1, #3
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 f814 	bl	800bdf0 <icmp_send_response>
}
 800bdc8:	bf00      	nop
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	460b      	mov	r3, r1
 800bdda:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800bddc:	78fb      	ldrb	r3, [r7, #3]
 800bdde:	461a      	mov	r2, r3
 800bde0:	210b      	movs	r1, #11
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f804 	bl	800bdf0 <icmp_send_response>
}
 800bde8:	bf00      	nop
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08c      	sub	sp, #48	; 0x30
 800bdf4:	af04      	add	r7, sp, #16
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	70fb      	strb	r3, [r7, #3]
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800be00:	f44f 7220 	mov.w	r2, #640	; 0x280
 800be04:	2124      	movs	r1, #36	; 0x24
 800be06:	2022      	movs	r0, #34	; 0x22
 800be08:	f002 f9de 	bl	800e1c8 <pbuf_alloc>
 800be0c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d04c      	beq.n	800beae <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	895b      	ldrh	r3, [r3, #10]
 800be18:	2b23      	cmp	r3, #35	; 0x23
 800be1a:	d806      	bhi.n	800be2a <icmp_send_response+0x3a>
 800be1c:	4b26      	ldr	r3, [pc, #152]	; (800beb8 <icmp_send_response+0xc8>)
 800be1e:	f240 1269 	movw	r2, #361	; 0x169
 800be22:	4926      	ldr	r1, [pc, #152]	; (800bebc <icmp_send_response+0xcc>)
 800be24:	4826      	ldr	r0, [pc, #152]	; (800bec0 <icmp_send_response+0xd0>)
 800be26:	f00a f9c9 	bl	80161bc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	78fa      	ldrb	r2, [r7, #3]
 800be3a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	78ba      	ldrb	r2, [r7, #2]
 800be40:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	2200      	movs	r2, #0
 800be46:	711a      	strb	r2, [r3, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	2200      	movs	r2, #0
 800be50:	719a      	strb	r2, [r3, #6]
 800be52:	2200      	movs	r2, #0
 800be54:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	f103 0008 	add.w	r0, r3, #8
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	221c      	movs	r2, #28
 800be64:	4619      	mov	r1, r3
 800be66:	f00a f968 	bl	801613a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800be70:	f107 030c 	add.w	r3, r7, #12
 800be74:	4618      	mov	r0, r3
 800be76:	f000 f825 	bl	800bec4 <ip4_route>
 800be7a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d011      	beq.n	800bea6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2200      	movs	r2, #0
 800be86:	709a      	strb	r2, [r3, #2]
 800be88:	2200      	movs	r2, #0
 800be8a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800be8c:	f107 020c 	add.w	r2, r7, #12
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	9302      	str	r3, [sp, #8]
 800be94:	2301      	movs	r3, #1
 800be96:	9301      	str	r3, [sp, #4]
 800be98:	2300      	movs	r3, #0
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	23ff      	movs	r3, #255	; 0xff
 800be9e:	2100      	movs	r1, #0
 800bea0:	69f8      	ldr	r0, [r7, #28]
 800bea2:	f000 f9c5 	bl	800c230 <ip4_output_if>
  }
  pbuf_free(q);
 800bea6:	69f8      	ldr	r0, [r7, #28]
 800bea8:	f002 fca2 	bl	800e7f0 <pbuf_free>
 800beac:	e000      	b.n	800beb0 <icmp_send_response+0xc0>
    return;
 800beae:	bf00      	nop
}
 800beb0:	3720      	adds	r7, #32
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	080187e8 	.word	0x080187e8
 800bebc:	080188b4 	.word	0x080188b4
 800bec0:	08018858 	.word	0x08018858

0800bec4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800becc:	4b31      	ldr	r3, [pc, #196]	; (800bf94 <ip4_route+0xd0>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	60fb      	str	r3, [r7, #12]
 800bed2:	e033      	b.n	800bf3c <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800beda:	f003 0301 	and.w	r3, r3, #1
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d029      	beq.n	800bf36 <ip4_route+0x72>
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bee8:	f003 0304 	and.w	r3, r3, #4
 800beec:	2b00      	cmp	r3, #0
 800beee:	d022      	beq.n	800bf36 <ip4_route+0x72>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	3304      	adds	r3, #4
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d01d      	beq.n	800bf36 <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	3304      	adds	r3, #4
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	405a      	eors	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	3308      	adds	r3, #8
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4013      	ands	r3, r2
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d101      	bne.n	800bf16 <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	e038      	b.n	800bf88 <ip4_route+0xc4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf1c:	f003 0302 	and.w	r3, r3, #2
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d108      	bne.n	800bf36 <ip4_route+0x72>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	330c      	adds	r3, #12
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d101      	bne.n	800bf36 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	e028      	b.n	800bf88 <ip4_route+0xc4>
  NETIF_FOREACH(netif) {
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	60fb      	str	r3, [r7, #12]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d1c8      	bne.n	800bed4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bf42:	4b15      	ldr	r3, [pc, #84]	; (800bf98 <ip4_route+0xd4>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d01a      	beq.n	800bf80 <ip4_route+0xbc>
 800bf4a:	4b13      	ldr	r3, [pc, #76]	; (800bf98 <ip4_route+0xd4>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf52:	f003 0301 	and.w	r3, r3, #1
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d012      	beq.n	800bf80 <ip4_route+0xbc>
 800bf5a:	4b0f      	ldr	r3, [pc, #60]	; (800bf98 <ip4_route+0xd4>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf62:	f003 0304 	and.w	r3, r3, #4
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00a      	beq.n	800bf80 <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800bf6a:	4b0b      	ldr	r3, [pc, #44]	; (800bf98 <ip4_route+0xd4>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	3304      	adds	r3, #4
 800bf70:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d004      	beq.n	800bf80 <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	2b7f      	cmp	r3, #127	; 0x7f
 800bf7e:	d101      	bne.n	800bf84 <ip4_route+0xc0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800bf80:	2300      	movs	r3, #0
 800bf82:	e001      	b.n	800bf88 <ip4_route+0xc4>
  }

  return netif_default;
 800bf84:	4b04      	ldr	r3, [pc, #16]	; (800bf98 <ip4_route+0xd4>)
 800bf86:	681b      	ldr	r3, [r3, #0]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3714      	adds	r7, #20
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr
 800bf94:	2000e4dc 	.word	0x2000e4dc
 800bf98:	2000e4e0 	.word	0x2000e4e0

0800bf9c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bfaa:	f003 0301 	and.w	r3, r3, #1
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d016      	beq.n	800bfe0 <ip4_input_accept+0x44>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	3304      	adds	r3, #4
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d011      	beq.n	800bfe0 <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bfbc:	4b0b      	ldr	r3, [pc, #44]	; (800bfec <ip4_input_accept+0x50>)
 800bfbe:	695a      	ldr	r2, [r3, #20]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d008      	beq.n	800bfdc <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800bfca:	4b08      	ldr	r3, [pc, #32]	; (800bfec <ip4_input_accept+0x50>)
 800bfcc:	695b      	ldr	r3, [r3, #20]
 800bfce:	6879      	ldr	r1, [r7, #4]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f000 fa05 	bl	800c3e0 <ip4_addr_isbroadcast_u32>
 800bfd6:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d001      	beq.n	800bfe0 <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	e000      	b.n	800bfe2 <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	20007418 	.word	0x20007418

0800bff0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b086      	sub	sp, #24
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	091b      	lsrs	r3, r3, #4
 800c006:	b2db      	uxtb	r3, r3
 800c008:	2b04      	cmp	r3, #4
 800c00a:	d004      	beq.n	800c016 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f002 fbef 	bl	800e7f0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c012:	2300      	movs	r3, #0
 800c014:	e104      	b.n	800c220 <ip4_input+0x230>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	f003 030f 	and.w	r3, r3, #15
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	b2db      	uxtb	r3, r3
 800c024:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	885b      	ldrh	r3, [r3, #2]
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fe fe29 	bl	800ac84 <lwip_htons>
 800c032:	4603      	mov	r3, r0
 800c034:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	891b      	ldrh	r3, [r3, #8]
 800c03a:	89ba      	ldrh	r2, [r7, #12]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d204      	bcs.n	800c04a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800c040:	89bb      	ldrh	r3, [r7, #12]
 800c042:	4619      	mov	r1, r3
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f002 fa19 	bl	800e47c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	895b      	ldrh	r3, [r3, #10]
 800c04e:	89fa      	ldrh	r2, [r7, #14]
 800c050:	429a      	cmp	r2, r3
 800c052:	d807      	bhi.n	800c064 <ip4_input+0x74>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	891b      	ldrh	r3, [r3, #8]
 800c058:	89ba      	ldrh	r2, [r7, #12]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d802      	bhi.n	800c064 <ip4_input+0x74>
 800c05e:	89fb      	ldrh	r3, [r7, #14]
 800c060:	2b13      	cmp	r3, #19
 800c062:	d804      	bhi.n	800c06e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f002 fbc3 	bl	800e7f0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	e0d8      	b.n	800c220 <ip4_input+0x230>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	691b      	ldr	r3, [r3, #16]
 800c072:	4a6d      	ldr	r2, [pc, #436]	; (800c228 <ip4_input+0x238>)
 800c074:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	4a6b      	ldr	r2, [pc, #428]	; (800c228 <ip4_input+0x238>)
 800c07c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c07e:	4b6a      	ldr	r3, [pc, #424]	; (800c228 <ip4_input+0x238>)
 800c080:	695b      	ldr	r3, [r3, #20]
 800c082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c086:	2be0      	cmp	r3, #224	; 0xe0
 800c088:	d111      	bne.n	800c0ae <ip4_input+0xbe>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	2b00      	cmp	r3, #0
 800c096:	d007      	beq.n	800c0a8 <ip4_input+0xb8>
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	3304      	adds	r3, #4
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d002      	beq.n	800c0a8 <ip4_input+0xb8>
      netif = inp;
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	613b      	str	r3, [r7, #16]
 800c0a6:	e02a      	b.n	800c0fe <ip4_input+0x10e>
    } else {
      netif = NULL;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	613b      	str	r3, [r7, #16]
 800c0ac:	e027      	b.n	800c0fe <ip4_input+0x10e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800c0ae:	6838      	ldr	r0, [r7, #0]
 800c0b0:	f7ff ff74 	bl	800bf9c <ip4_input_accept>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d002      	beq.n	800c0c0 <ip4_input+0xd0>
      netif = inp;
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	613b      	str	r3, [r7, #16]
 800c0be:	e01e      	b.n	800c0fe <ip4_input+0x10e>
    } else {
      netif = NULL;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800c0c4:	4b58      	ldr	r3, [pc, #352]	; (800c228 <ip4_input+0x238>)
 800c0c6:	695b      	ldr	r3, [r3, #20]
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	2b7f      	cmp	r3, #127	; 0x7f
 800c0cc:	d017      	beq.n	800c0fe <ip4_input+0x10e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800c0ce:	4b57      	ldr	r3, [pc, #348]	; (800c22c <ip4_input+0x23c>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	613b      	str	r3, [r7, #16]
 800c0d4:	e00e      	b.n	800c0f4 <ip4_input+0x104>
          if (netif == inp) {
 800c0d6:	693a      	ldr	r2, [r7, #16]
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d006      	beq.n	800c0ec <ip4_input+0xfc>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800c0de:	6938      	ldr	r0, [r7, #16]
 800c0e0:	f7ff ff5c 	bl	800bf9c <ip4_input_accept>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d108      	bne.n	800c0fc <ip4_input+0x10c>
 800c0ea:	e000      	b.n	800c0ee <ip4_input+0xfe>
            continue;
 800c0ec:	bf00      	nop
        NETIF_FOREACH(netif) {
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	613b      	str	r3, [r7, #16]
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1ed      	bne.n	800c0d6 <ip4_input+0xe6>
 800c0fa:	e000      	b.n	800c0fe <ip4_input+0x10e>
            break;
 800c0fc:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c0fe:	4b4a      	ldr	r3, [pc, #296]	; (800c228 <ip4_input+0x238>)
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	4618      	mov	r0, r3
 800c106:	f000 f96b 	bl	800c3e0 <ip4_addr_isbroadcast_u32>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d105      	bne.n	800c11c <ip4_input+0x12c>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c110:	4b45      	ldr	r3, [pc, #276]	; (800c228 <ip4_input+0x238>)
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c118:	2be0      	cmp	r3, #224	; 0xe0
 800c11a:	d104      	bne.n	800c126 <ip4_input+0x136>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f002 fb67 	bl	800e7f0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	e07c      	b.n	800c220 <ip4_input+0x230>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d104      	bne.n	800c136 <ip4_input+0x146>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f002 fb5f 	bl	800e7f0 <pbuf_free>
    return ERR_OK;
 800c132:	2300      	movs	r3, #0
 800c134:	e074      	b.n	800c220 <ip4_input+0x230>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	88db      	ldrh	r3, [r3, #6]
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	461a      	mov	r2, r3
 800c13e:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c142:	4013      	ands	r3, r2
 800c144:	2b00      	cmp	r3, #0
 800c146:	d00b      	beq.n	800c160 <ip4_input+0x170>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 fc8f 	bl	800ca6c <ip4_reass>
 800c14e:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d101      	bne.n	800c15a <ip4_input+0x16a>
      return ERR_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	e062      	b.n	800c220 <ip4_input+0x230>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c160:	4a31      	ldr	r2, [pc, #196]	; (800c228 <ip4_input+0x238>)
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c166:	4a30      	ldr	r2, [pc, #192]	; (800c228 <ip4_input+0x238>)
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c16c:	4a2e      	ldr	r2, [pc, #184]	; (800c228 <ip4_input+0x238>)
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	f003 030f 	and.w	r3, r3, #15
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	b29a      	uxth	r2, r3
 800c182:	4b29      	ldr	r3, [pc, #164]	; (800c228 <ip4_input+0x238>)
 800c184:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c186:	89fb      	ldrh	r3, [r7, #14]
 800c188:	4619      	mov	r1, r3
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f002 fa78 	bl	800e680 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	7a5b      	ldrb	r3, [r3, #9]
 800c194:	2b06      	cmp	r3, #6
 800c196:	d009      	beq.n	800c1ac <ip4_input+0x1bc>
 800c198:	2b11      	cmp	r3, #17
 800c19a:	d002      	beq.n	800c1a2 <ip4_input+0x1b2>
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d00a      	beq.n	800c1b6 <ip4_input+0x1c6>
 800c1a0:	e00e      	b.n	800c1c0 <ip4_input+0x1d0>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800c1a2:	6839      	ldr	r1, [r7, #0]
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f009 f875 	bl	8015294 <udp_input>
        break;
 800c1aa:	e026      	b.n	800c1fa <ip4_input+0x20a>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800c1ac:	6839      	ldr	r1, [r7, #0]
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f004 fc28 	bl	8010a04 <tcp_input>
        break;
 800c1b4:	e021      	b.n	800c1fa <ip4_input+0x20a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800c1b6:	6839      	ldr	r1, [r7, #0]
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f7ff fcf5 	bl	800bba8 <icmp_input>
        break;
 800c1be:	e01c      	b.n	800c1fa <ip4_input+0x20a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c1c0:	4b19      	ldr	r3, [pc, #100]	; (800c228 <ip4_input+0x238>)
 800c1c2:	695b      	ldr	r3, [r3, #20]
 800c1c4:	6939      	ldr	r1, [r7, #16]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f000 f90a 	bl	800c3e0 <ip4_addr_isbroadcast_u32>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10f      	bne.n	800c1f2 <ip4_input+0x202>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c1d2:	4b15      	ldr	r3, [pc, #84]	; (800c228 <ip4_input+0x238>)
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c1da:	2be0      	cmp	r3, #224	; 0xe0
 800c1dc:	d009      	beq.n	800c1f2 <ip4_input+0x202>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800c1de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f002 fabe 	bl	800e766 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c1ea:	2102      	movs	r1, #2
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f7ff fddf 	bl	800bdb0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f002 fafc 	bl	800e7f0 <pbuf_free>
        break;
 800c1f8:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c1fa:	4b0b      	ldr	r3, [pc, #44]	; (800c228 <ip4_input+0x238>)
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c200:	4b09      	ldr	r3, [pc, #36]	; (800c228 <ip4_input+0x238>)
 800c202:	2200      	movs	r2, #0
 800c204:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c206:	4b08      	ldr	r3, [pc, #32]	; (800c228 <ip4_input+0x238>)
 800c208:	2200      	movs	r2, #0
 800c20a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c20c:	4b06      	ldr	r3, [pc, #24]	; (800c228 <ip4_input+0x238>)
 800c20e:	2200      	movs	r2, #0
 800c210:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c212:	4b05      	ldr	r3, [pc, #20]	; (800c228 <ip4_input+0x238>)
 800c214:	2200      	movs	r2, #0
 800c216:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c218:	4b03      	ldr	r3, [pc, #12]	; (800c228 <ip4_input+0x238>)
 800c21a:	2200      	movs	r2, #0
 800c21c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3718      	adds	r7, #24
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	20007418 	.word	0x20007418
 800c22c:	2000e4dc 	.word	0x2000e4dc

0800c230 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b08a      	sub	sp, #40	; 0x28
 800c234:	af04      	add	r7, sp, #16
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
 800c23c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d009      	beq.n	800c25c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d003      	beq.n	800c256 <ip4_output_if+0x26>
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d102      	bne.n	800c25c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c258:	3304      	adds	r3, #4
 800c25a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c25c:	78fa      	ldrb	r2, [r7, #3]
 800c25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c260:	9302      	str	r3, [sp, #8]
 800c262:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c266:	9301      	str	r3, [sp, #4]
 800c268:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	4613      	mov	r3, r2
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	6979      	ldr	r1, [r7, #20]
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f000 f805 	bl	800c284 <ip4_output_if_src>
 800c27a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3718      	adds	r7, #24
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b088      	sub	sp, #32
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	7b9b      	ldrb	r3, [r3, #14]
 800c296:	2b01      	cmp	r3, #1
 800c298:	d006      	beq.n	800c2a8 <ip4_output_if_src+0x24>
 800c29a:	4b4b      	ldr	r3, [pc, #300]	; (800c3c8 <ip4_output_if_src+0x144>)
 800c29c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800c2a0:	494a      	ldr	r1, [pc, #296]	; (800c3cc <ip4_output_if_src+0x148>)
 800c2a2:	484b      	ldr	r0, [pc, #300]	; (800c3d0 <ip4_output_if_src+0x14c>)
 800c2a4:	f009 ff8a 	bl	80161bc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d060      	beq.n	800c370 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c2ae:	2314      	movs	r3, #20
 800c2b0:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800c2b2:	2114      	movs	r1, #20
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f002 f9d3 	bl	800e660 <pbuf_add_header>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d002      	beq.n	800c2c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c2c0:	f06f 0301 	mvn.w	r3, #1
 800c2c4:	e07c      	b.n	800c3c0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	895b      	ldrh	r3, [r3, #10]
 800c2d0:	2b13      	cmp	r3, #19
 800c2d2:	d806      	bhi.n	800c2e2 <ip4_output_if_src+0x5e>
 800c2d4:	4b3c      	ldr	r3, [pc, #240]	; (800c3c8 <ip4_output_if_src+0x144>)
 800c2d6:	f240 3289 	movw	r2, #905	; 0x389
 800c2da:	493e      	ldr	r1, [pc, #248]	; (800c3d4 <ip4_output_if_src+0x150>)
 800c2dc:	483c      	ldr	r0, [pc, #240]	; (800c3d0 <ip4_output_if_src+0x14c>)
 800c2de:	f009 ff6d 	bl	80161bc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	78fa      	ldrb	r2, [r7, #3]
 800c2e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c2ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	69bb      	ldr	r3, [r7, #24]
 800c2f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c2f8:	8bfb      	ldrh	r3, [r7, #30]
 800c2fa:	089b      	lsrs	r3, r3, #2
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c304:	b2da      	uxtb	r2, r3
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c310:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	891b      	ldrh	r3, [r3, #8]
 800c316:	4618      	mov	r0, r3
 800c318:	f7fe fcb4 	bl	800ac84 <lwip_htons>
 800c31c:	4603      	mov	r3, r0
 800c31e:	461a      	mov	r2, r3
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	2200      	movs	r2, #0
 800c328:	719a      	strb	r2, [r3, #6]
 800c32a:	2200      	movs	r2, #0
 800c32c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c32e:	4b2a      	ldr	r3, [pc, #168]	; (800c3d8 <ip4_output_if_src+0x154>)
 800c330:	881b      	ldrh	r3, [r3, #0]
 800c332:	4618      	mov	r0, r3
 800c334:	f7fe fca6 	bl	800ac84 <lwip_htons>
 800c338:	4603      	mov	r3, r0
 800c33a:	461a      	mov	r2, r3
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c340:	4b25      	ldr	r3, [pc, #148]	; (800c3d8 <ip4_output_if_src+0x154>)
 800c342:	881b      	ldrh	r3, [r3, #0]
 800c344:	3301      	adds	r3, #1
 800c346:	b29a      	uxth	r2, r3
 800c348:	4b23      	ldr	r3, [pc, #140]	; (800c3d8 <ip4_output_if_src+0x154>)
 800c34a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d104      	bne.n	800c35c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c352:	4b22      	ldr	r3, [pc, #136]	; (800c3dc <ip4_output_if_src+0x158>)
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	60da      	str	r2, [r3, #12]
 800c35a:	e003      	b.n	800c364 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	2200      	movs	r2, #0
 800c368:	729a      	strb	r2, [r3, #10]
 800c36a:	2200      	movs	r2, #0
 800c36c:	72da      	strb	r2, [r3, #11]
 800c36e:	e00f      	b.n	800c390 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	895b      	ldrh	r3, [r3, #10]
 800c374:	2b13      	cmp	r3, #19
 800c376:	d802      	bhi.n	800c37e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c378:	f06f 0301 	mvn.w	r3, #1
 800c37c:	e020      	b.n	800c3c0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c38a:	f107 0314 	add.w	r3, r7, #20
 800c38e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c392:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00c      	beq.n	800c3b2 <ip4_output_if_src+0x12e>
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	891a      	ldrh	r2, [r3, #8]
 800c39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d906      	bls.n	800c3b2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f000 fd47 	bl	800ce3c <ip4_frag>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	e006      	b.n	800c3c0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b4:	695b      	ldr	r3, [r3, #20]
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	68f9      	ldr	r1, [r7, #12]
 800c3ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3bc:	4798      	blx	r3
 800c3be:	4603      	mov	r3, r0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3720      	adds	r7, #32
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	080188e0 	.word	0x080188e0
 800c3cc:	08018914 	.word	0x08018914
 800c3d0:	08018920 	.word	0x08018920
 800c3d4:	08018948 	.word	0x08018948
 800c3d8:	2000418a 	.word	0x2000418a
 800c3dc:	0801af78 	.word	0x0801af78

0800c3e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3f4:	d002      	beq.n	800c3fc <ip4_addr_isbroadcast_u32+0x1c>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d101      	bne.n	800c400 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e02a      	b.n	800c456 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c406:	f003 0302 	and.w	r3, r3, #2
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d101      	bne.n	800c412 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c40e:	2300      	movs	r3, #0
 800c410:	e021      	b.n	800c456 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	3304      	adds	r3, #4
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d101      	bne.n	800c422 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c41e:	2300      	movs	r3, #0
 800c420:	e019      	b.n	800c456 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	3304      	adds	r3, #4
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	405a      	eors	r2, r3
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	3308      	adds	r3, #8
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4013      	ands	r3, r2
 800c434:	2b00      	cmp	r3, #0
 800c436:	d10d      	bne.n	800c454 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	3308      	adds	r3, #8
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	43da      	mvns	r2, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	3308      	adds	r3, #8
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d101      	bne.n	800c454 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c450:	2301      	movs	r3, #1
 800c452:	e000      	b.n	800c456 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c454:	2300      	movs	r3, #0
  }
}
 800c456:	4618      	mov	r0, r3
 800c458:	3714      	adds	r7, #20
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr
	...

0800c464 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c46a:	2300      	movs	r3, #0
 800c46c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c46e:	4b12      	ldr	r3, [pc, #72]	; (800c4b8 <ip_reass_tmr+0x54>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c474:	e018      	b.n	800c4a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	7fdb      	ldrb	r3, [r3, #31]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00b      	beq.n	800c496 <ip_reass_tmr+0x32>
      r->timer--;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	7fdb      	ldrb	r3, [r3, #31]
 800c482:	3b01      	subs	r3, #1
 800c484:	b2da      	uxtb	r2, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	60fb      	str	r3, [r7, #12]
 800c494:	e008      	b.n	800c4a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c4a0:	68b9      	ldr	r1, [r7, #8]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 f80a 	bl	800c4bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d1e3      	bne.n	800c476 <ip_reass_tmr+0x12>
    }
  }
}
 800c4ae:	bf00      	nop
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	2000418c 	.word	0x2000418c

0800c4bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b088      	sub	sp, #32
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d105      	bne.n	800c4de <ip_reass_free_complete_datagram+0x22>
 800c4d2:	4b45      	ldr	r3, [pc, #276]	; (800c5e8 <ip_reass_free_complete_datagram+0x12c>)
 800c4d4:	22ab      	movs	r2, #171	; 0xab
 800c4d6:	4945      	ldr	r1, [pc, #276]	; (800c5ec <ip_reass_free_complete_datagram+0x130>)
 800c4d8:	4845      	ldr	r0, [pc, #276]	; (800c5f0 <ip_reass_free_complete_datagram+0x134>)
 800c4da:	f009 fe6f 	bl	80161bc <iprintf>
  if (prev != NULL) {
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00a      	beq.n	800c4fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d005      	beq.n	800c4fa <ip_reass_free_complete_datagram+0x3e>
 800c4ee:	4b3e      	ldr	r3, [pc, #248]	; (800c5e8 <ip_reass_free_complete_datagram+0x12c>)
 800c4f0:	22ad      	movs	r2, #173	; 0xad
 800c4f2:	4940      	ldr	r1, [pc, #256]	; (800c5f4 <ip_reass_free_complete_datagram+0x138>)
 800c4f4:	483e      	ldr	r0, [pc, #248]	; (800c5f0 <ip_reass_free_complete_datagram+0x134>)
 800c4f6:	f009 fe61 	bl	80161bc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	889b      	ldrh	r3, [r3, #4]
 800c506:	b29b      	uxth	r3, r3
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d12a      	bne.n	800c562 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	6858      	ldr	r0, [r3, #4]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3308      	adds	r3, #8
 800c522:	2214      	movs	r2, #20
 800c524:	4619      	mov	r1, r3
 800c526:	f009 fe08 	bl	801613a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c52a:	2101      	movs	r1, #1
 800c52c:	69b8      	ldr	r0, [r7, #24]
 800c52e:	f7ff fc4f 	bl	800bdd0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c532:	69b8      	ldr	r0, [r7, #24]
 800c534:	f002 f9ea 	bl	800e90c <pbuf_clen>
 800c538:	4603      	mov	r3, r0
 800c53a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c53c:	8bfa      	ldrh	r2, [r7, #30]
 800c53e:	8a7b      	ldrh	r3, [r7, #18]
 800c540:	4413      	add	r3, r2
 800c542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c546:	db05      	blt.n	800c554 <ip_reass_free_complete_datagram+0x98>
 800c548:	4b27      	ldr	r3, [pc, #156]	; (800c5e8 <ip_reass_free_complete_datagram+0x12c>)
 800c54a:	22bc      	movs	r2, #188	; 0xbc
 800c54c:	492a      	ldr	r1, [pc, #168]	; (800c5f8 <ip_reass_free_complete_datagram+0x13c>)
 800c54e:	4828      	ldr	r0, [pc, #160]	; (800c5f0 <ip_reass_free_complete_datagram+0x134>)
 800c550:	f009 fe34 	bl	80161bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c554:	8bfa      	ldrh	r2, [r7, #30]
 800c556:	8a7b      	ldrh	r3, [r7, #18]
 800c558:	4413      	add	r3, r2
 800c55a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c55c:	69b8      	ldr	r0, [r7, #24]
 800c55e:	f002 f947 	bl	800e7f0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c568:	e01f      	b.n	800c5aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f002 f9c6 	bl	800e90c <pbuf_clen>
 800c580:	4603      	mov	r3, r0
 800c582:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c584:	8bfa      	ldrh	r2, [r7, #30]
 800c586:	8a7b      	ldrh	r3, [r7, #18]
 800c588:	4413      	add	r3, r2
 800c58a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c58e:	db05      	blt.n	800c59c <ip_reass_free_complete_datagram+0xe0>
 800c590:	4b15      	ldr	r3, [pc, #84]	; (800c5e8 <ip_reass_free_complete_datagram+0x12c>)
 800c592:	22cc      	movs	r2, #204	; 0xcc
 800c594:	4918      	ldr	r1, [pc, #96]	; (800c5f8 <ip_reass_free_complete_datagram+0x13c>)
 800c596:	4816      	ldr	r0, [pc, #88]	; (800c5f0 <ip_reass_free_complete_datagram+0x134>)
 800c598:	f009 fe10 	bl	80161bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c59c:	8bfa      	ldrh	r2, [r7, #30]
 800c59e:	8a7b      	ldrh	r3, [r7, #18]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f002 f923 	bl	800e7f0 <pbuf_free>
  while (p != NULL) {
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1dc      	bne.n	800c56a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c5b0:	6839      	ldr	r1, [r7, #0]
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 f8c2 	bl	800c73c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c5b8:	4b10      	ldr	r3, [pc, #64]	; (800c5fc <ip_reass_free_complete_datagram+0x140>)
 800c5ba:	881b      	ldrh	r3, [r3, #0]
 800c5bc:	8bfa      	ldrh	r2, [r7, #30]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d905      	bls.n	800c5ce <ip_reass_free_complete_datagram+0x112>
 800c5c2:	4b09      	ldr	r3, [pc, #36]	; (800c5e8 <ip_reass_free_complete_datagram+0x12c>)
 800c5c4:	22d2      	movs	r2, #210	; 0xd2
 800c5c6:	490e      	ldr	r1, [pc, #56]	; (800c600 <ip_reass_free_complete_datagram+0x144>)
 800c5c8:	4809      	ldr	r0, [pc, #36]	; (800c5f0 <ip_reass_free_complete_datagram+0x134>)
 800c5ca:	f009 fdf7 	bl	80161bc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c5ce:	4b0b      	ldr	r3, [pc, #44]	; (800c5fc <ip_reass_free_complete_datagram+0x140>)
 800c5d0:	881a      	ldrh	r2, [r3, #0]
 800c5d2:	8bfb      	ldrh	r3, [r7, #30]
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	b29a      	uxth	r2, r3
 800c5d8:	4b08      	ldr	r3, [pc, #32]	; (800c5fc <ip_reass_free_complete_datagram+0x140>)
 800c5da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c5dc:	8bfb      	ldrh	r3, [r7, #30]
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3720      	adds	r7, #32
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	08018978 	.word	0x08018978
 800c5ec:	080189b4 	.word	0x080189b4
 800c5f0:	080189c0 	.word	0x080189c0
 800c5f4:	080189e8 	.word	0x080189e8
 800c5f8:	080189fc 	.word	0x080189fc
 800c5fc:	20004190 	.word	0x20004190
 800c600:	08018a1c 	.word	0x08018a1c

0800c604 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b08a      	sub	sp, #40	; 0x28
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c60e:	2300      	movs	r3, #0
 800c610:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c612:	2300      	movs	r3, #0
 800c614:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c616:	2300      	movs	r3, #0
 800c618:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c61a:	2300      	movs	r3, #0
 800c61c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c61e:	2300      	movs	r3, #0
 800c620:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c622:	4b28      	ldr	r3, [pc, #160]	; (800c6c4 <ip_reass_remove_oldest_datagram+0xc0>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c628:	e030      	b.n	800c68c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62c:	695a      	ldr	r2, [r3, #20]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	429a      	cmp	r2, r3
 800c634:	d10c      	bne.n	800c650 <ip_reass_remove_oldest_datagram+0x4c>
 800c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c638:	699a      	ldr	r2, [r3, #24]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d106      	bne.n	800c650 <ip_reass_remove_oldest_datagram+0x4c>
 800c642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c644:	899a      	ldrh	r2, [r3, #12]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	889b      	ldrh	r3, [r3, #4]
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d014      	beq.n	800c67a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	3301      	adds	r3, #1
 800c654:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c656:	6a3b      	ldr	r3, [r7, #32]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d104      	bne.n	800c666 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	61bb      	str	r3, [r7, #24]
 800c664:	e009      	b.n	800c67a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c668:	7fda      	ldrb	r2, [r3, #31]
 800c66a:	6a3b      	ldr	r3, [r7, #32]
 800c66c:	7fdb      	ldrb	r3, [r3, #31]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d803      	bhi.n	800c67a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c674:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d001      	beq.n	800c686 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c684:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1cb      	bne.n	800c62a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c692:	6a3b      	ldr	r3, [r7, #32]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d008      	beq.n	800c6aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c698:	69b9      	ldr	r1, [r7, #24]
 800c69a:	6a38      	ldr	r0, [r7, #32]
 800c69c:	f7ff ff0e 	bl	800c4bc <ip_reass_free_complete_datagram>
 800c6a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c6aa:	697a      	ldr	r2, [r7, #20]
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	da02      	bge.n	800c6b8 <ip_reass_remove_oldest_datagram+0xb4>
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	dcac      	bgt.n	800c612 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c6b8:	697b      	ldr	r3, [r7, #20]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3728      	adds	r7, #40	; 0x28
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	2000418c 	.word	0x2000418c

0800c6c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c6d2:	2004      	movs	r0, #4
 800c6d4:	f001 f966 	bl	800d9a4 <memp_malloc>
 800c6d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d110      	bne.n	800c702 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c6e0:	6839      	ldr	r1, [r7, #0]
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7ff ff8e 	bl	800c604 <ip_reass_remove_oldest_datagram>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	db03      	blt.n	800c6f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c6f0:	2004      	movs	r0, #4
 800c6f2:	f001 f957 	bl	800d9a4 <memp_malloc>
 800c6f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d101      	bne.n	800c702 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800c6fe:	2300      	movs	r3, #0
 800c700:	e016      	b.n	800c730 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c702:	2220      	movs	r2, #32
 800c704:	2100      	movs	r1, #0
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f009 fd22 	bl	8016150 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	220f      	movs	r2, #15
 800c710:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c712:	4b09      	ldr	r3, [pc, #36]	; (800c738 <ip_reass_enqueue_new_datagram+0x70>)
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c71a:	4a07      	ldr	r2, [pc, #28]	; (800c738 <ip_reass_enqueue_new_datagram+0x70>)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	3308      	adds	r3, #8
 800c724:	2214      	movs	r2, #20
 800c726:	6879      	ldr	r1, [r7, #4]
 800c728:	4618      	mov	r0, r3
 800c72a:	f009 fd06 	bl	801613a <memcpy>
  return ipr;
 800c72e:	68fb      	ldr	r3, [r7, #12]
}
 800c730:	4618      	mov	r0, r3
 800c732:	3710      	adds	r7, #16
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	2000418c 	.word	0x2000418c

0800c73c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c746:	4b10      	ldr	r3, [pc, #64]	; (800c788 <ip_reass_dequeue_datagram+0x4c>)
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d104      	bne.n	800c75a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a0c      	ldr	r2, [pc, #48]	; (800c788 <ip_reass_dequeue_datagram+0x4c>)
 800c756:	6013      	str	r3, [r2, #0]
 800c758:	e00d      	b.n	800c776 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d106      	bne.n	800c76e <ip_reass_dequeue_datagram+0x32>
 800c760:	4b0a      	ldr	r3, [pc, #40]	; (800c78c <ip_reass_dequeue_datagram+0x50>)
 800c762:	f240 1245 	movw	r2, #325	; 0x145
 800c766:	490a      	ldr	r1, [pc, #40]	; (800c790 <ip_reass_dequeue_datagram+0x54>)
 800c768:	480a      	ldr	r0, [pc, #40]	; (800c794 <ip_reass_dequeue_datagram+0x58>)
 800c76a:	f009 fd27 	bl	80161bc <iprintf>
    prev->next = ipr->next;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c776:	6879      	ldr	r1, [r7, #4]
 800c778:	2004      	movs	r0, #4
 800c77a:	f001 f965 	bl	800da48 <memp_free>
}
 800c77e:	bf00      	nop
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	2000418c 	.word	0x2000418c
 800c78c:	08018978 	.word	0x08018978
 800c790:	08018a40 	.word	0x08018a40
 800c794:	080189c0 	.word	0x080189c0

0800c798 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b08c      	sub	sp, #48	; 0x30
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	885b      	ldrh	r3, [r3, #2]
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fe fa63 	bl	800ac84 <lwip_htons>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	f003 030f 	and.w	r3, r3, #15
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800c7d0:	7e7b      	ldrb	r3, [r7, #25]
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	8b7a      	ldrh	r2, [r7, #26]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d202      	bcs.n	800c7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c7da:	f04f 33ff 	mov.w	r3, #4294967295
 800c7de:	e135      	b.n	800ca4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800c7e0:	7e7b      	ldrb	r3, [r7, #25]
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	8b7a      	ldrh	r2, [r7, #26]
 800c7e6:	1ad3      	subs	r3, r2, r3
 800c7e8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	88db      	ldrh	r3, [r3, #6]
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fe fa47 	bl	800ac84 <lwip_htons>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7fc:	b29b      	uxth	r3, r3
 800c7fe:	00db      	lsls	r3, r3, #3
 800c800:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	2200      	movs	r2, #0
 800c80c:	701a      	strb	r2, [r3, #0]
 800c80e:	2200      	movs	r2, #0
 800c810:	705a      	strb	r2, [r3, #1]
 800c812:	2200      	movs	r2, #0
 800c814:	709a      	strb	r2, [r3, #2]
 800c816:	2200      	movs	r2, #0
 800c818:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81c:	8afa      	ldrh	r2, [r7, #22]
 800c81e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800c820:	8afa      	ldrh	r2, [r7, #22]
 800c822:	8b7b      	ldrh	r3, [r7, #26]
 800c824:	4413      	add	r3, r2
 800c826:	b29a      	uxth	r2, r3
 800c828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	88db      	ldrh	r3, [r3, #6]
 800c830:	b29b      	uxth	r3, r3
 800c832:	8afa      	ldrh	r2, [r7, #22]
 800c834:	429a      	cmp	r2, r3
 800c836:	d902      	bls.n	800c83e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c838:	f04f 33ff 	mov.w	r3, #4294967295
 800c83c:	e106      	b.n	800ca4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	627b      	str	r3, [r7, #36]	; 0x24
 800c844:	e068      	b.n	800c918 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800c846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800c84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84e:	889b      	ldrh	r3, [r3, #4]
 800c850:	b29a      	uxth	r2, r3
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	889b      	ldrh	r3, [r3, #4]
 800c856:	b29b      	uxth	r3, r3
 800c858:	429a      	cmp	r2, r3
 800c85a:	d235      	bcs.n	800c8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c860:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c864:	2b00      	cmp	r3, #0
 800c866:	d020      	beq.n	800c8aa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86a:	889b      	ldrh	r3, [r3, #4]
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c870:	88db      	ldrh	r3, [r3, #6]
 800c872:	b29b      	uxth	r3, r3
 800c874:	429a      	cmp	r2, r3
 800c876:	d307      	bcc.n	800c888 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800c878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87a:	88db      	ldrh	r3, [r3, #6]
 800c87c:	b29a      	uxth	r2, r3
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	889b      	ldrh	r3, [r3, #4]
 800c882:	b29b      	uxth	r3, r3
 800c884:	429a      	cmp	r2, r3
 800c886:	d902      	bls.n	800c88e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c888:	f04f 33ff 	mov.w	r3, #4294967295
 800c88c:	e0de      	b.n	800ca4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c890:	68ba      	ldr	r2, [r7, #8]
 800c892:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	88db      	ldrh	r3, [r3, #6]
 800c898:	b29a      	uxth	r2, r3
 800c89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89c:	889b      	ldrh	r3, [r3, #4]
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d03d      	beq.n	800c920 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c8a8:	e03a      	b.n	800c920 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800c8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ac:	88db      	ldrh	r3, [r3, #6]
 800c8ae:	b29a      	uxth	r2, r3
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	889b      	ldrh	r3, [r3, #4]
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d902      	bls.n	800c8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c8ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c8be:	e0c5      	b.n	800ca4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	605a      	str	r2, [r3, #4]
      break;
 800c8c6:	e02b      	b.n	800c920 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800c8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ca:	889b      	ldrh	r3, [r3, #4]
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	889b      	ldrh	r3, [r3, #4]
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d102      	bne.n	800c8de <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8dc:	e0b6      	b.n	800ca4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e0:	889b      	ldrh	r3, [r3, #4]
 800c8e2:	b29a      	uxth	r2, r3
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	88db      	ldrh	r3, [r3, #6]
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d202      	bcs.n	800c8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c8f2:	e0ab      	b.n	800ca4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d009      	beq.n	800c90e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800c8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fc:	88db      	ldrh	r3, [r3, #6]
 800c8fe:	b29a      	uxth	r2, r3
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	889b      	ldrh	r3, [r3, #4]
 800c904:	b29b      	uxth	r3, r3
 800c906:	429a      	cmp	r2, r3
 800c908:	d001      	beq.n	800c90e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c90a:	2300      	movs	r3, #0
 800c90c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800c918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d193      	bne.n	800c846 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800c91e:	e000      	b.n	800c922 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800c920:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c924:	2b00      	cmp	r3, #0
 800c926:	d12d      	bne.n	800c984 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800c928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d01c      	beq.n	800c968 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c930:	88db      	ldrh	r3, [r3, #6]
 800c932:	b29a      	uxth	r2, r3
 800c934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c936:	889b      	ldrh	r3, [r3, #4]
 800c938:	b29b      	uxth	r3, r3
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d906      	bls.n	800c94c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800c93e:	4b45      	ldr	r3, [pc, #276]	; (800ca54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c940:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800c944:	4944      	ldr	r1, [pc, #272]	; (800ca58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c946:	4845      	ldr	r0, [pc, #276]	; (800ca5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c948:	f009 fc38 	bl	80161bc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c954:	88db      	ldrh	r3, [r3, #6]
 800c956:	b29a      	uxth	r2, r3
 800c958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95a:	889b      	ldrh	r3, [r3, #4]
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	429a      	cmp	r2, r3
 800c960:	d010      	beq.n	800c984 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c962:	2300      	movs	r3, #0
 800c964:	623b      	str	r3, [r7, #32]
 800c966:	e00d      	b.n	800c984 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d006      	beq.n	800c97e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c970:	4b38      	ldr	r3, [pc, #224]	; (800ca54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c972:	f240 12bf 	movw	r2, #447	; 0x1bf
 800c976:	493a      	ldr	r1, [pc, #232]	; (800ca60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c978:	4838      	ldr	r0, [pc, #224]	; (800ca5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c97a:	f009 fc1f 	bl	80161bc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d105      	bne.n	800c996 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	7f9b      	ldrb	r3, [r3, #30]
 800c98e:	f003 0301 	and.w	r3, r3, #1
 800c992:	2b00      	cmp	r3, #0
 800c994:	d059      	beq.n	800ca4a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800c996:	6a3b      	ldr	r3, [r7, #32]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d04f      	beq.n	800ca3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d006      	beq.n	800c9b2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	889b      	ldrh	r3, [r3, #4]
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d002      	beq.n	800c9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	623b      	str	r3, [r7, #32]
 800c9b6:	e041      	b.n	800ca3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800c9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c9c2:	e012      	b.n	800c9ea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800c9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9cc:	88db      	ldrh	r3, [r3, #6]
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d2:	889b      	ldrh	r3, [r3, #4]
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d002      	beq.n	800c9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	623b      	str	r3, [r7, #32]
            break;
 800c9de:	e007      	b.n	800c9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800c9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800c9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1e9      	bne.n	800c9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c9f0:	6a3b      	ldr	r3, [r7, #32]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d022      	beq.n	800ca3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d106      	bne.n	800ca0c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800c9fe:	4b15      	ldr	r3, [pc, #84]	; (800ca54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ca00:	f240 12df 	movw	r2, #479	; 0x1df
 800ca04:	4917      	ldr	r1, [pc, #92]	; (800ca64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ca06:	4815      	ldr	r0, [pc, #84]	; (800ca5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ca08:	f009 fbd8 	bl	80161bc <iprintf>
          LWIP_ASSERT("sanity check",
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	685a      	ldr	r2, [r3, #4]
 800ca12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d106      	bne.n	800ca26 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ca18:	4b0e      	ldr	r3, [pc, #56]	; (800ca54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ca1a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ca1e:	4911      	ldr	r1, [pc, #68]	; (800ca64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ca20:	480e      	ldr	r0, [pc, #56]	; (800ca5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ca22:	f009 fbcb 	bl	80161bc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ca26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d006      	beq.n	800ca3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800ca2e:	4b09      	ldr	r3, [pc, #36]	; (800ca54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ca30:	f240 12e3 	movw	r2, #483	; 0x1e3
 800ca34:	490c      	ldr	r1, [pc, #48]	; (800ca68 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ca36:	4809      	ldr	r0, [pc, #36]	; (800ca5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ca38:	f009 fbc0 	bl	80161bc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ca3c:	6a3b      	ldr	r3, [r7, #32]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	bf14      	ite	ne
 800ca42:	2301      	movne	r3, #1
 800ca44:	2300      	moveq	r3, #0
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	e000      	b.n	800ca4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3730      	adds	r7, #48	; 0x30
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	08018978 	.word	0x08018978
 800ca58:	08018a5c 	.word	0x08018a5c
 800ca5c:	080189c0 	.word	0x080189c0
 800ca60:	08018a7c 	.word	0x08018a7c
 800ca64:	08018ab4 	.word	0x08018ab4
 800ca68:	08018ac4 	.word	0x08018ac4

0800ca6c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b08e      	sub	sp, #56	; 0x38
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ca7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	f003 030f 	and.w	r3, r3, #15
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	2b14      	cmp	r3, #20
 800ca8a:	f040 8165 	bne.w	800cd58 <ip4_reass+0x2ec>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ca8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca90:	88db      	ldrh	r3, [r3, #6]
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7fe f8f5 	bl	800ac84 <lwip_htons>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	00db      	lsls	r3, r3, #3
 800caa4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800caa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa8:	885b      	ldrh	r3, [r3, #2]
 800caaa:	b29b      	uxth	r3, r3
 800caac:	4618      	mov	r0, r3
 800caae:	f7fe f8e9 	bl	800ac84 <lwip_htons>
 800cab2:	4603      	mov	r3, r0
 800cab4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800cab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	f003 030f 	and.w	r3, r3, #15
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800cac6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800caca:	b29b      	uxth	r3, r3
 800cacc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cace:	429a      	cmp	r2, r3
 800cad0:	f0c0 8144 	bcc.w	800cd5c <ip4_reass+0x2f0>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800cad4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cad8:	b29b      	uxth	r3, r3
 800cada:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cadc:	1ad3      	subs	r3, r2, r3
 800cade:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f001 ff13 	bl	800e90c <pbuf_clen>
 800cae6:	4603      	mov	r3, r0
 800cae8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800caea:	4ba1      	ldr	r3, [pc, #644]	; (800cd70 <ip4_reass+0x304>)
 800caec:	881b      	ldrh	r3, [r3, #0]
 800caee:	461a      	mov	r2, r3
 800caf0:	8c3b      	ldrh	r3, [r7, #32]
 800caf2:	4413      	add	r3, r2
 800caf4:	2b0a      	cmp	r3, #10
 800caf6:	dd10      	ble.n	800cb1a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800caf8:	8c3b      	ldrh	r3, [r7, #32]
 800cafa:	4619      	mov	r1, r3
 800cafc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cafe:	f7ff fd81 	bl	800c604 <ip_reass_remove_oldest_datagram>
 800cb02:	4603      	mov	r3, r0
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	f000 812a 	beq.w	800cd5e <ip4_reass+0x2f2>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800cb0a:	4b99      	ldr	r3, [pc, #612]	; (800cd70 <ip4_reass+0x304>)
 800cb0c:	881b      	ldrh	r3, [r3, #0]
 800cb0e:	461a      	mov	r2, r3
 800cb10:	8c3b      	ldrh	r3, [r7, #32]
 800cb12:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cb14:	2b0a      	cmp	r3, #10
 800cb16:	f300 8122 	bgt.w	800cd5e <ip4_reass+0x2f2>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cb1a:	4b96      	ldr	r3, [pc, #600]	; (800cd74 <ip4_reass+0x308>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	633b      	str	r3, [r7, #48]	; 0x30
 800cb20:	e015      	b.n	800cb4e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800cb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb24:	695a      	ldr	r2, [r3, #20]
 800cb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d10c      	bne.n	800cb48 <ip4_reass+0xdc>
 800cb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb30:	699a      	ldr	r2, [r3, #24]
 800cb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb34:	691b      	ldr	r3, [r3, #16]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d106      	bne.n	800cb48 <ip4_reass+0xdc>
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3c:	899a      	ldrh	r2, [r3, #12]
 800cb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb40:	889b      	ldrh	r3, [r3, #4]
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d006      	beq.n	800cb56 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	633b      	str	r3, [r7, #48]	; 0x30
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d1e6      	bne.n	800cb22 <ip4_reass+0xb6>
 800cb54:	e000      	b.n	800cb58 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800cb56:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800cb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d109      	bne.n	800cb72 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800cb5e:	8c3b      	ldrh	r3, [r7, #32]
 800cb60:	4619      	mov	r1, r3
 800cb62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb64:	f7ff fdb0 	bl	800c6c8 <ip_reass_enqueue_new_datagram>
 800cb68:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d11c      	bne.n	800cbaa <ip4_reass+0x13e>
      goto nullreturn;
 800cb70:	e0f5      	b.n	800cd5e <ip4_reass+0x2f2>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb74:	88db      	ldrh	r3, [r3, #6]
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fe f883 	bl	800ac84 <lwip_htons>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d110      	bne.n	800cbaa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800cb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8a:	89db      	ldrh	r3, [r3, #14]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fe f879 	bl	800ac84 <lwip_htons>
 800cb92:	4603      	mov	r3, r0
 800cb94:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d006      	beq.n	800cbaa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800cb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9e:	3308      	adds	r3, #8
 800cba0:	2214      	movs	r2, #20
 800cba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cba4:	4618      	mov	r0, r3
 800cba6:	f009 fac8 	bl	801613a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800cbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbac:	88db      	ldrh	r3, [r3, #6]
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	f003 0320 	and.w	r3, r3, #32
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	bf0c      	ite	eq
 800cbb8:	2301      	moveq	r3, #1
 800cbba:	2300      	movne	r3, #0
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d00e      	beq.n	800cbe4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800cbc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cbc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbca:	4413      	add	r3, r2
 800cbcc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800cbce:	8b7a      	ldrh	r2, [r7, #26]
 800cbd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	f0c0 80a1 	bcc.w	800cd1a <ip4_reass+0x2ae>
 800cbd8:	8b7b      	ldrh	r3, [r7, #26]
 800cbda:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	f200 809b 	bhi.w	800cd1a <ip4_reass+0x2ae>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800cbe4:	69fa      	ldr	r2, [r7, #28]
 800cbe6:	6879      	ldr	r1, [r7, #4]
 800cbe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbea:	f7ff fdd5 	bl	800c798 <ip_reass_chain_frag_into_datagram_and_validate>
 800cbee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf6:	f000 808f 	beq.w	800cd18 <ip4_reass+0x2ac>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800cbfa:	4b5d      	ldr	r3, [pc, #372]	; (800cd70 <ip4_reass+0x304>)
 800cbfc:	881a      	ldrh	r2, [r3, #0]
 800cbfe:	8c3b      	ldrh	r3, [r7, #32]
 800cc00:	4413      	add	r3, r2
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	4b5a      	ldr	r3, [pc, #360]	; (800cd70 <ip4_reass+0x304>)
 800cc06:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00d      	beq.n	800cc2a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800cc0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cc10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc12:	4413      	add	r3, r2
 800cc14:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800cc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc18:	8a7a      	ldrh	r2, [r7, #18]
 800cc1a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1e:	7f9b      	ldrb	r3, [r3, #30]
 800cc20:	f043 0301 	orr.w	r3, r3, #1
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc28:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d171      	bne.n	800cd14 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800cc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc32:	8b9b      	ldrh	r3, [r3, #28]
 800cc34:	3314      	adds	r3, #20
 800cc36:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800cc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800cc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800cc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc4c:	3308      	adds	r3, #8
 800cc4e:	2214      	movs	r2, #20
 800cc50:	4619      	mov	r1, r3
 800cc52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc54:	f009 fa71 	bl	801613a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800cc58:	8a3b      	ldrh	r3, [r7, #16]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7fe f812 	bl	800ac84 <lwip_htons>
 800cc60:	4603      	mov	r3, r0
 800cc62:	461a      	mov	r2, r3
 800cc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc66:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800cc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	719a      	strb	r2, [r3, #6]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800cc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc74:	2200      	movs	r2, #0
 800cc76:	729a      	strb	r2, [r3, #10]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800cc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800cc82:	e00d      	b.n	800cca0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800cc84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800cc8a:	2114      	movs	r1, #20
 800cc8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cc8e:	f001 fcf7 	bl	800e680 <pbuf_remove_header>
      pbuf_cat(p, r);
 800cc92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f001 fe79 	bl	800e98c <pbuf_cat>
      r = iprh->next_pbuf;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800cca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d1ee      	bne.n	800cc84 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800cca6:	4b33      	ldr	r3, [pc, #204]	; (800cd74 <ip4_reass+0x308>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d102      	bne.n	800ccb6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccb4:	e010      	b.n	800ccd8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ccb6:	4b2f      	ldr	r3, [pc, #188]	; (800cd74 <ip4_reass+0x308>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccbc:	e007      	b.n	800ccce <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ccbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d006      	beq.n	800ccd6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ccc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d1f4      	bne.n	800ccbe <ip4_reass+0x252>
 800ccd4:	e000      	b.n	800ccd8 <ip4_reass+0x26c>
          break;
 800ccd6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ccd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ccda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccdc:	f7ff fd2e 	bl	800c73c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f001 fe13 	bl	800e90c <pbuf_clen>
 800cce6:	4603      	mov	r3, r0
 800cce8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ccea:	4b21      	ldr	r3, [pc, #132]	; (800cd70 <ip4_reass+0x304>)
 800ccec:	881b      	ldrh	r3, [r3, #0]
 800ccee:	8c3a      	ldrh	r2, [r7, #32]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d906      	bls.n	800cd02 <ip4_reass+0x296>
 800ccf4:	4b20      	ldr	r3, [pc, #128]	; (800cd78 <ip4_reass+0x30c>)
 800ccf6:	f240 229b 	movw	r2, #667	; 0x29b
 800ccfa:	4920      	ldr	r1, [pc, #128]	; (800cd7c <ip4_reass+0x310>)
 800ccfc:	4820      	ldr	r0, [pc, #128]	; (800cd80 <ip4_reass+0x314>)
 800ccfe:	f009 fa5d 	bl	80161bc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800cd02:	4b1b      	ldr	r3, [pc, #108]	; (800cd70 <ip4_reass+0x304>)
 800cd04:	881a      	ldrh	r2, [r3, #0]
 800cd06:	8c3b      	ldrh	r3, [r7, #32]
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	4b18      	ldr	r3, [pc, #96]	; (800cd70 <ip4_reass+0x304>)
 800cd0e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	e028      	b.n	800cd66 <ip4_reass+0x2fa>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800cd14:	2300      	movs	r3, #0
 800cd16:	e026      	b.n	800cd66 <ip4_reass+0x2fa>
    goto nullreturn_ipr;
 800cd18:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d106      	bne.n	800cd2e <ip4_reass+0x2c2>
 800cd20:	4b15      	ldr	r3, [pc, #84]	; (800cd78 <ip4_reass+0x30c>)
 800cd22:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800cd26:	4917      	ldr	r1, [pc, #92]	; (800cd84 <ip4_reass+0x318>)
 800cd28:	4815      	ldr	r0, [pc, #84]	; (800cd80 <ip4_reass+0x314>)
 800cd2a:	f009 fa47 	bl	80161bc <iprintf>
  if (ipr->p == NULL) {
 800cd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d113      	bne.n	800cd5e <ip4_reass+0x2f2>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800cd36:	4b0f      	ldr	r3, [pc, #60]	; (800cd74 <ip4_reass+0x308>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d006      	beq.n	800cd4e <ip4_reass+0x2e2>
 800cd40:	4b0d      	ldr	r3, [pc, #52]	; (800cd78 <ip4_reass+0x30c>)
 800cd42:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cd46:	4910      	ldr	r1, [pc, #64]	; (800cd88 <ip4_reass+0x31c>)
 800cd48:	480d      	ldr	r0, [pc, #52]	; (800cd80 <ip4_reass+0x314>)
 800cd4a:	f009 fa37 	bl	80161bc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800cd4e:	2100      	movs	r1, #0
 800cd50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd52:	f7ff fcf3 	bl	800c73c <ip_reass_dequeue_datagram>
 800cd56:	e002      	b.n	800cd5e <ip4_reass+0x2f2>
    goto nullreturn;
 800cd58:	bf00      	nop
 800cd5a:	e000      	b.n	800cd5e <ip4_reass+0x2f2>
    goto nullreturn;
 800cd5c:	bf00      	nop
  }

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f001 fd46 	bl	800e7f0 <pbuf_free>
  return NULL;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3738      	adds	r7, #56	; 0x38
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	20004190 	.word	0x20004190
 800cd74:	2000418c 	.word	0x2000418c
 800cd78:	08018978 	.word	0x08018978
 800cd7c:	08018ae8 	.word	0x08018ae8
 800cd80:	080189c0 	.word	0x080189c0
 800cd84:	08018b04 	.word	0x08018b04
 800cd88:	08018b10 	.word	0x08018b10

0800cd8c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800cd90:	2005      	movs	r0, #5
 800cd92:	f000 fe07 	bl	800d9a4 <memp_malloc>
 800cd96:	4603      	mov	r3, r0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d106      	bne.n	800cdb8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800cdaa:	4b07      	ldr	r3, [pc, #28]	; (800cdc8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800cdac:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800cdb0:	4906      	ldr	r1, [pc, #24]	; (800cdcc <ip_frag_free_pbuf_custom_ref+0x30>)
 800cdb2:	4807      	ldr	r0, [pc, #28]	; (800cdd0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800cdb4:	f009 fa02 	bl	80161bc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800cdb8:	6879      	ldr	r1, [r7, #4]
 800cdba:	2005      	movs	r0, #5
 800cdbc:	f000 fe44 	bl	800da48 <memp_free>
}
 800cdc0:	bf00      	nop
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	08018978 	.word	0x08018978
 800cdcc:	08018b30 	.word	0x08018b30
 800cdd0:	080189c0 	.word	0x080189c0

0800cdd4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d106      	bne.n	800cdf4 <ipfrag_free_pbuf_custom+0x20>
 800cde6:	4b11      	ldr	r3, [pc, #68]	; (800ce2c <ipfrag_free_pbuf_custom+0x58>)
 800cde8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800cdec:	4910      	ldr	r1, [pc, #64]	; (800ce30 <ipfrag_free_pbuf_custom+0x5c>)
 800cdee:	4811      	ldr	r0, [pc, #68]	; (800ce34 <ipfrag_free_pbuf_custom+0x60>)
 800cdf0:	f009 f9e4 	bl	80161bc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d006      	beq.n	800ce0a <ipfrag_free_pbuf_custom+0x36>
 800cdfc:	4b0b      	ldr	r3, [pc, #44]	; (800ce2c <ipfrag_free_pbuf_custom+0x58>)
 800cdfe:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ce02:	490d      	ldr	r1, [pc, #52]	; (800ce38 <ipfrag_free_pbuf_custom+0x64>)
 800ce04:	480b      	ldr	r0, [pc, #44]	; (800ce34 <ipfrag_free_pbuf_custom+0x60>)
 800ce06:	f009 f9d9 	bl	80161bc <iprintf>
  if (pcr->original != NULL) {
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	695b      	ldr	r3, [r3, #20]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d004      	beq.n	800ce1c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	695b      	ldr	r3, [r3, #20]
 800ce16:	4618      	mov	r0, r3
 800ce18:	f001 fcea 	bl	800e7f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f7ff ffbd 	bl	800cd9c <ip_frag_free_pbuf_custom_ref>
}
 800ce22:	bf00      	nop
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	08018978 	.word	0x08018978
 800ce30:	08018b3c 	.word	0x08018b3c
 800ce34:	080189c0 	.word	0x080189c0
 800ce38:	08018b48 	.word	0x08018b48

0800ce3c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b094      	sub	sp, #80	; 0x50
 800ce40:	af02      	add	r7, sp, #8
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ce52:	3b14      	subs	r3, #20
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	da00      	bge.n	800ce5a <ip4_frag+0x1e>
 800ce58:	3307      	adds	r3, #7
 800ce5a:	10db      	asrs	r3, r3, #3
 800ce5c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ce5e:	2314      	movs	r3, #20
 800ce60:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ce68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce6a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ce6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	f003 030f 	and.w	r3, r3, #15
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	2b14      	cmp	r3, #20
 800ce7c:	d002      	beq.n	800ce84 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ce7e:	f06f 0305 	mvn.w	r3, #5
 800ce82:	e10f      	b.n	800d0a4 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	895b      	ldrh	r3, [r3, #10]
 800ce88:	2b13      	cmp	r3, #19
 800ce8a:	d809      	bhi.n	800cea0 <ip4_frag+0x64>
 800ce8c:	4b87      	ldr	r3, [pc, #540]	; (800d0ac <ip4_frag+0x270>)
 800ce8e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ce92:	4987      	ldr	r1, [pc, #540]	; (800d0b0 <ip4_frag+0x274>)
 800ce94:	4887      	ldr	r0, [pc, #540]	; (800d0b4 <ip4_frag+0x278>)
 800ce96:	f009 f991 	bl	80161bc <iprintf>
 800ce9a:	f06f 0305 	mvn.w	r3, #5
 800ce9e:	e101      	b.n	800d0a4 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800cea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea2:	88db      	ldrh	r3, [r3, #6]
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fd feec 	bl	800ac84 <lwip_htons>
 800ceac:	4603      	mov	r3, r0
 800ceae:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ceb0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ceb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ceb6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ceba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cec0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	891b      	ldrh	r3, [r3, #8]
 800cec6:	3b14      	subs	r3, #20
 800cec8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800cecc:	e0e0      	b.n	800d090 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800cece:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ced0:	00db      	lsls	r3, r3, #3
 800ced2:	b29a      	uxth	r2, r3
 800ced4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ced8:	4293      	cmp	r3, r2
 800ceda:	bf28      	it	cs
 800cedc:	4613      	movcs	r3, r2
 800cede:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800cee0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cee4:	2114      	movs	r1, #20
 800cee6:	200e      	movs	r0, #14
 800cee8:	f001 f96e 	bl	800e1c8 <pbuf_alloc>
 800ceec:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ceee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	f000 80d4 	beq.w	800d09e <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800cef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef8:	895b      	ldrh	r3, [r3, #10]
 800cefa:	2b13      	cmp	r3, #19
 800cefc:	d806      	bhi.n	800cf0c <ip4_frag+0xd0>
 800cefe:	4b6b      	ldr	r3, [pc, #428]	; (800d0ac <ip4_frag+0x270>)
 800cf00:	f240 3225 	movw	r2, #805	; 0x325
 800cf04:	496c      	ldr	r1, [pc, #432]	; (800d0b8 <ip4_frag+0x27c>)
 800cf06:	486b      	ldr	r0, [pc, #428]	; (800d0b4 <ip4_frag+0x278>)
 800cf08:	f009 f958 	bl	80161bc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	2214      	movs	r2, #20
 800cf12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf14:	4618      	mov	r0, r3
 800cf16:	f009 f910 	bl	801613a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800cf20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cf22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800cf26:	e064      	b.n	800cff2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	895a      	ldrh	r2, [r3, #10]
 800cf2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	847b      	strh	r3, [r7, #34]	; 0x22
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	895b      	ldrh	r3, [r3, #10]
 800cf36:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d906      	bls.n	800cf4a <ip4_frag+0x10e>
 800cf3c:	4b5b      	ldr	r3, [pc, #364]	; (800d0ac <ip4_frag+0x270>)
 800cf3e:	f240 322d 	movw	r2, #813	; 0x32d
 800cf42:	495e      	ldr	r1, [pc, #376]	; (800d0bc <ip4_frag+0x280>)
 800cf44:	485b      	ldr	r0, [pc, #364]	; (800d0b4 <ip4_frag+0x278>)
 800cf46:	f009 f939 	bl	80161bc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800cf4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cf4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cf50:	4293      	cmp	r3, r2
 800cf52:	bf28      	it	cs
 800cf54:	4613      	movcs	r3, r2
 800cf56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800cf5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d105      	bne.n	800cf6e <ip4_frag+0x132>
        poff = 0;
 800cf62:	2300      	movs	r3, #0
 800cf64:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	60fb      	str	r3, [r7, #12]
        continue;
 800cf6c:	e041      	b.n	800cff2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800cf6e:	f7ff ff0d 	bl	800cd8c <ip_frag_alloc_pbuf_custom_ref>
 800cf72:	61f8      	str	r0, [r7, #28]
      if (pcr == NULL) {
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d103      	bne.n	800cf82 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800cf7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf7c:	f001 fc38 	bl	800e7f0 <pbuf_free>
        goto memerr;
 800cf80:	e08e      	b.n	800d0a0 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cf82:	69f8      	ldr	r0, [r7, #28]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cf88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cf8a:	4413      	add	r3, r2
 800cf8c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800cf90:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800cf94:	9201      	str	r2, [sp, #4]
 800cf96:	9300      	str	r3, [sp, #0]
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2241      	movs	r2, #65	; 0x41
 800cf9c:	2000      	movs	r0, #0
 800cf9e:	f001 fa39 	bl	800e414 <pbuf_alloced_custom>
 800cfa2:	61b8      	str	r0, [r7, #24]
      if (newpbuf == NULL) {
 800cfa4:	69bb      	ldr	r3, [r7, #24]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d106      	bne.n	800cfb8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800cfaa:	69f8      	ldr	r0, [r7, #28]
 800cfac:	f7ff fef6 	bl	800cd9c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800cfb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfb2:	f001 fc1d 	bl	800e7f0 <pbuf_free>
        goto memerr;
 800cfb6:	e073      	b.n	800d0a0 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f001 fcbf 	bl	800e93c <pbuf_ref>
      pcr->original = p;
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	68fa      	ldr	r2, [r7, #12]
 800cfc2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	4a3e      	ldr	r2, [pc, #248]	; (800d0c0 <ip4_frag+0x284>)
 800cfc8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800cfca:	69b9      	ldr	r1, [r7, #24]
 800cfcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfce:	f001 fcdd 	bl	800e98c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800cfd2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800cfd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cfda:	1ad3      	subs	r3, r2, r3
 800cfdc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800cfe0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d004      	beq.n	800cff2 <ip4_frag+0x1b6>
        poff = 0;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800cff2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d196      	bne.n	800cf28 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800cffa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cffc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d000:	4413      	add	r3, r2
 800d002:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d004:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d00c:	3b14      	subs	r3, #20
 800d00e:	429a      	cmp	r2, r3
 800d010:	bfd4      	ite	le
 800d012:	2301      	movle	r3, #1
 800d014:	2300      	movgt	r3, #0
 800d016:	b2db      	uxtb	r3, r3
 800d018:	617b      	str	r3, [r7, #20]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d01a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d01e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d022:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d002      	beq.n	800d030 <ip4_frag+0x1f4>
 800d02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d003      	beq.n	800d038 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800d030:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d032:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d036:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d038:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fd fe22 	bl	800ac84 <lwip_htons>
 800d040:	4603      	mov	r3, r0
 800d042:	461a      	mov	r2, r3
 800d044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d046:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d048:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d04a:	3314      	adds	r3, #20
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	4618      	mov	r0, r3
 800d050:	f7fd fe18 	bl	800ac84 <lwip_htons>
 800d054:	4603      	mov	r3, r0
 800d056:	461a      	mov	r2, r3
 800d058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05e:	2200      	movs	r2, #0
 800d060:	729a      	strb	r2, [r3, #10]
 800d062:	2200      	movs	r2, #0
 800d064:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	695b      	ldr	r3, [r3, #20]
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d06e:	68b8      	ldr	r0, [r7, #8]
 800d070:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d074:	f001 fbbc 	bl	800e7f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800d078:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d07c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d07e:	1ad3      	subs	r3, r2, r3
 800d080:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800d084:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d088:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d08a:	4413      	add	r3, r2
 800d08c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800d090:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d094:	2b00      	cmp	r3, #0
 800d096:	f47f af1a 	bne.w	800cece <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d09a:	2300      	movs	r3, #0
 800d09c:	e002      	b.n	800d0a4 <ip4_frag+0x268>
      goto memerr;
 800d09e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d0a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3748      	adds	r7, #72	; 0x48
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	08018978 	.word	0x08018978
 800d0b0:	08018b54 	.word	0x08018b54
 800d0b4:	080189c0 	.word	0x080189c0
 800d0b8:	08018b70 	.word	0x08018b70
 800d0bc:	08018b90 	.word	0x08018b90
 800d0c0:	0800cdd5 	.word	0x0800cdd5

0800d0c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d0ce:	4b05      	ldr	r3, [pc, #20]	; (800d0e4 <ptr_to_mem+0x20>)
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	88fb      	ldrh	r3, [r7, #6]
 800d0d4:	4413      	add	r3, r2
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	370c      	adds	r7, #12
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	20004194 	.word	0x20004194

0800d0e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	4a05      	ldr	r2, [pc, #20]	; (800d108 <mem_to_ptr+0x20>)
 800d0f4:	6812      	ldr	r2, [r2, #0]
 800d0f6:	1a9b      	subs	r3, r3, r2
 800d0f8:	b29b      	uxth	r3, r3
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	370c      	adds	r7, #12
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	20004194 	.word	0x20004194

0800d10c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d10c:	b590      	push	{r4, r7, lr}
 800d10e:	b085      	sub	sp, #20
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d114:	4b45      	ldr	r3, [pc, #276]	; (800d22c <plug_holes+0x120>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d206      	bcs.n	800d12c <plug_holes+0x20>
 800d11e:	4b44      	ldr	r3, [pc, #272]	; (800d230 <plug_holes+0x124>)
 800d120:	f240 12df 	movw	r2, #479	; 0x1df
 800d124:	4943      	ldr	r1, [pc, #268]	; (800d234 <plug_holes+0x128>)
 800d126:	4844      	ldr	r0, [pc, #272]	; (800d238 <plug_holes+0x12c>)
 800d128:	f009 f848 	bl	80161bc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d12c:	4b43      	ldr	r3, [pc, #268]	; (800d23c <plug_holes+0x130>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	429a      	cmp	r2, r3
 800d134:	d306      	bcc.n	800d144 <plug_holes+0x38>
 800d136:	4b3e      	ldr	r3, [pc, #248]	; (800d230 <plug_holes+0x124>)
 800d138:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d13c:	4940      	ldr	r1, [pc, #256]	; (800d240 <plug_holes+0x134>)
 800d13e:	483e      	ldr	r0, [pc, #248]	; (800d238 <plug_holes+0x12c>)
 800d140:	f009 f83c 	bl	80161bc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	791b      	ldrb	r3, [r3, #4]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d006      	beq.n	800d15a <plug_holes+0x4e>
 800d14c:	4b38      	ldr	r3, [pc, #224]	; (800d230 <plug_holes+0x124>)
 800d14e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d152:	493c      	ldr	r1, [pc, #240]	; (800d244 <plug_holes+0x138>)
 800d154:	4838      	ldr	r0, [pc, #224]	; (800d238 <plug_holes+0x12c>)
 800d156:	f009 f831 	bl	80161bc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	881b      	ldrh	r3, [r3, #0]
 800d15e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d162:	d906      	bls.n	800d172 <plug_holes+0x66>
 800d164:	4b32      	ldr	r3, [pc, #200]	; (800d230 <plug_holes+0x124>)
 800d166:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d16a:	4937      	ldr	r1, [pc, #220]	; (800d248 <plug_holes+0x13c>)
 800d16c:	4832      	ldr	r0, [pc, #200]	; (800d238 <plug_holes+0x12c>)
 800d16e:	f009 f825 	bl	80161bc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	881b      	ldrh	r3, [r3, #0]
 800d176:	4618      	mov	r0, r3
 800d178:	f7ff ffa4 	bl	800d0c4 <ptr_to_mem>
 800d17c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	429a      	cmp	r2, r3
 800d184:	d024      	beq.n	800d1d0 <plug_holes+0xc4>
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	791b      	ldrb	r3, [r3, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d120      	bne.n	800d1d0 <plug_holes+0xc4>
 800d18e:	4b2b      	ldr	r3, [pc, #172]	; (800d23c <plug_holes+0x130>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	429a      	cmp	r2, r3
 800d196:	d01b      	beq.n	800d1d0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d198:	4b2c      	ldr	r3, [pc, #176]	; (800d24c <plug_holes+0x140>)
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d102      	bne.n	800d1a8 <plug_holes+0x9c>
      lfree = mem;
 800d1a2:	4a2a      	ldr	r2, [pc, #168]	; (800d24c <plug_holes+0x140>)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	881a      	ldrh	r2, [r3, #0]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	881b      	ldrh	r3, [r3, #0]
 800d1b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d1b8:	d00a      	beq.n	800d1d0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	881b      	ldrh	r3, [r3, #0]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7ff ff80 	bl	800d0c4 <ptr_to_mem>
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f7ff ff8e 	bl	800d0e8 <mem_to_ptr>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	885b      	ldrh	r3, [r3, #2]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7ff ff75 	bl	800d0c4 <ptr_to_mem>
 800d1da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d01f      	beq.n	800d224 <plug_holes+0x118>
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	791b      	ldrb	r3, [r3, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d11b      	bne.n	800d224 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d1ec:	4b17      	ldr	r3, [pc, #92]	; (800d24c <plug_holes+0x140>)
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d102      	bne.n	800d1fc <plug_holes+0xf0>
      lfree = pmem;
 800d1f6:	4a15      	ldr	r2, [pc, #84]	; (800d24c <plug_holes+0x140>)
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	881a      	ldrh	r2, [r3, #0]
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	881b      	ldrh	r3, [r3, #0]
 800d208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d20c:	d00a      	beq.n	800d224 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	881b      	ldrh	r3, [r3, #0]
 800d212:	4618      	mov	r0, r3
 800d214:	f7ff ff56 	bl	800d0c4 <ptr_to_mem>
 800d218:	4604      	mov	r4, r0
 800d21a:	68b8      	ldr	r0, [r7, #8]
 800d21c:	f7ff ff64 	bl	800d0e8 <mem_to_ptr>
 800d220:	4603      	mov	r3, r0
 800d222:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d224:	bf00      	nop
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd90      	pop	{r4, r7, pc}
 800d22c:	20004194 	.word	0x20004194
 800d230:	08018ba0 	.word	0x08018ba0
 800d234:	08018bd0 	.word	0x08018bd0
 800d238:	08018be8 	.word	0x08018be8
 800d23c:	20004198 	.word	0x20004198
 800d240:	08018c10 	.word	0x08018c10
 800d244:	08018c2c 	.word	0x08018c2c
 800d248:	08018c48 	.word	0x08018c48
 800d24c:	200041a0 	.word	0x200041a0

0800d250 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d256:	4b1f      	ldr	r3, [pc, #124]	; (800d2d4 <mem_init+0x84>)
 800d258:	3303      	adds	r3, #3
 800d25a:	f023 0303 	bic.w	r3, r3, #3
 800d25e:	461a      	mov	r2, r3
 800d260:	4b1d      	ldr	r3, [pc, #116]	; (800d2d8 <mem_init+0x88>)
 800d262:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d264:	4b1c      	ldr	r3, [pc, #112]	; (800d2d8 <mem_init+0x88>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d270:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2200      	movs	r2, #0
 800d27c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d27e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d282:	f7ff ff1f 	bl	800d0c4 <ptr_to_mem>
 800d286:	4602      	mov	r2, r0
 800d288:	4b14      	ldr	r3, [pc, #80]	; (800d2dc <mem_init+0x8c>)
 800d28a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800d28c:	4b13      	ldr	r3, [pc, #76]	; (800d2dc <mem_init+0x8c>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2201      	movs	r2, #1
 800d292:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d294:	4b11      	ldr	r3, [pc, #68]	; (800d2dc <mem_init+0x8c>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d29c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d29e:	4b0f      	ldr	r3, [pc, #60]	; (800d2dc <mem_init+0x8c>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d2a6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d2a8:	4b0b      	ldr	r3, [pc, #44]	; (800d2d8 <mem_init+0x88>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a0c      	ldr	r2, [pc, #48]	; (800d2e0 <mem_init+0x90>)
 800d2ae:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d2b0:	480c      	ldr	r0, [pc, #48]	; (800d2e4 <mem_init+0x94>)
 800d2b2:	f008 fe69 	bl	8015f88 <sys_mutex_new>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d006      	beq.n	800d2ca <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d2bc:	4b0a      	ldr	r3, [pc, #40]	; (800d2e8 <mem_init+0x98>)
 800d2be:	f240 221f 	movw	r2, #543	; 0x21f
 800d2c2:	490a      	ldr	r1, [pc, #40]	; (800d2ec <mem_init+0x9c>)
 800d2c4:	480a      	ldr	r0, [pc, #40]	; (800d2f0 <mem_init+0xa0>)
 800d2c6:	f008 ff79 	bl	80161bc <iprintf>
  }
}
 800d2ca:	bf00      	nop
 800d2cc:	3708      	adds	r7, #8
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	20007430 	.word	0x20007430
 800d2d8:	20004194 	.word	0x20004194
 800d2dc:	20004198 	.word	0x20004198
 800d2e0:	200041a0 	.word	0x200041a0
 800d2e4:	2000419c 	.word	0x2000419c
 800d2e8:	08018ba0 	.word	0x08018ba0
 800d2ec:	08018c74 	.word	0x08018c74
 800d2f0:	08018be8 	.word	0x08018be8

0800d2f4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b086      	sub	sp, #24
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f7ff fef3 	bl	800d0e8 <mem_to_ptr>
 800d302:	4603      	mov	r3, r0
 800d304:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	881b      	ldrh	r3, [r3, #0]
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7ff feda 	bl	800d0c4 <ptr_to_mem>
 800d310:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	885b      	ldrh	r3, [r3, #2]
 800d316:	4618      	mov	r0, r3
 800d318:	f7ff fed4 	bl	800d0c4 <ptr_to_mem>
 800d31c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	881b      	ldrh	r3, [r3, #0]
 800d322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d326:	d818      	bhi.n	800d35a <mem_link_valid+0x66>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	885b      	ldrh	r3, [r3, #2]
 800d32c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d330:	d813      	bhi.n	800d35a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d336:	8afa      	ldrh	r2, [r7, #22]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d004      	beq.n	800d346 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	881b      	ldrh	r3, [r3, #0]
 800d340:	8afa      	ldrh	r2, [r7, #22]
 800d342:	429a      	cmp	r2, r3
 800d344:	d109      	bne.n	800d35a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d346:	4b08      	ldr	r3, [pc, #32]	; (800d368 <mem_link_valid+0x74>)
 800d348:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d34a:	693a      	ldr	r2, [r7, #16]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d006      	beq.n	800d35e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	885b      	ldrh	r3, [r3, #2]
 800d354:	8afa      	ldrh	r2, [r7, #22]
 800d356:	429a      	cmp	r2, r3
 800d358:	d001      	beq.n	800d35e <mem_link_valid+0x6a>
    return 0;
 800d35a:	2300      	movs	r3, #0
 800d35c:	e000      	b.n	800d360 <mem_link_valid+0x6c>
  }
  return 1;
 800d35e:	2301      	movs	r3, #1
}
 800d360:	4618      	mov	r0, r3
 800d362:	3718      	adds	r7, #24
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	20004198 	.word	0x20004198

0800d36c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b088      	sub	sp, #32
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d070      	beq.n	800d45c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f003 0303 	and.w	r3, r3, #3
 800d380:	2b00      	cmp	r3, #0
 800d382:	d00d      	beq.n	800d3a0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d384:	4b37      	ldr	r3, [pc, #220]	; (800d464 <mem_free+0xf8>)
 800d386:	f240 2273 	movw	r2, #627	; 0x273
 800d38a:	4937      	ldr	r1, [pc, #220]	; (800d468 <mem_free+0xfc>)
 800d38c:	4837      	ldr	r0, [pc, #220]	; (800d46c <mem_free+0x100>)
 800d38e:	f008 ff15 	bl	80161bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d392:	f008 fe57 	bl	8016044 <sys_arch_protect>
 800d396:	61f8      	str	r0, [r7, #28]
 800d398:	69f8      	ldr	r0, [r7, #28]
 800d39a:	f008 fe61 	bl	8016060 <sys_arch_unprotect>
    return;
 800d39e:	e05e      	b.n	800d45e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	3b08      	subs	r3, #8
 800d3a4:	61bb      	str	r3, [r7, #24]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d3a6:	4b32      	ldr	r3, [pc, #200]	; (800d470 <mem_free+0x104>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	69ba      	ldr	r2, [r7, #24]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d306      	bcc.n	800d3be <mem_free+0x52>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f103 020c 	add.w	r2, r3, #12
 800d3b6:	4b2f      	ldr	r3, [pc, #188]	; (800d474 <mem_free+0x108>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d90d      	bls.n	800d3da <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d3be:	4b29      	ldr	r3, [pc, #164]	; (800d464 <mem_free+0xf8>)
 800d3c0:	f240 227f 	movw	r2, #639	; 0x27f
 800d3c4:	492c      	ldr	r1, [pc, #176]	; (800d478 <mem_free+0x10c>)
 800d3c6:	4829      	ldr	r0, [pc, #164]	; (800d46c <mem_free+0x100>)
 800d3c8:	f008 fef8 	bl	80161bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d3cc:	f008 fe3a 	bl	8016044 <sys_arch_protect>
 800d3d0:	60f8      	str	r0, [r7, #12]
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f008 fe44 	bl	8016060 <sys_arch_unprotect>
    return;
 800d3d8:	e041      	b.n	800d45e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d3da:	4828      	ldr	r0, [pc, #160]	; (800d47c <mem_free+0x110>)
 800d3dc:	f008 fdf0 	bl	8015fc0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d3e0:	69bb      	ldr	r3, [r7, #24]
 800d3e2:	791b      	ldrb	r3, [r3, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d110      	bne.n	800d40a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d3e8:	4b1e      	ldr	r3, [pc, #120]	; (800d464 <mem_free+0xf8>)
 800d3ea:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d3ee:	4924      	ldr	r1, [pc, #144]	; (800d480 <mem_free+0x114>)
 800d3f0:	481e      	ldr	r0, [pc, #120]	; (800d46c <mem_free+0x100>)
 800d3f2:	f008 fee3 	bl	80161bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d3f6:	4821      	ldr	r0, [pc, #132]	; (800d47c <mem_free+0x110>)
 800d3f8:	f008 fdf1 	bl	8015fde <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d3fc:	f008 fe22 	bl	8016044 <sys_arch_protect>
 800d400:	6178      	str	r0, [r7, #20]
 800d402:	6978      	ldr	r0, [r7, #20]
 800d404:	f008 fe2c 	bl	8016060 <sys_arch_unprotect>
    return;
 800d408:	e029      	b.n	800d45e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d40a:	69b8      	ldr	r0, [r7, #24]
 800d40c:	f7ff ff72 	bl	800d2f4 <mem_link_valid>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d110      	bne.n	800d438 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d416:	4b13      	ldr	r3, [pc, #76]	; (800d464 <mem_free+0xf8>)
 800d418:	f240 2295 	movw	r2, #661	; 0x295
 800d41c:	4919      	ldr	r1, [pc, #100]	; (800d484 <mem_free+0x118>)
 800d41e:	4813      	ldr	r0, [pc, #76]	; (800d46c <mem_free+0x100>)
 800d420:	f008 fecc 	bl	80161bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d424:	4815      	ldr	r0, [pc, #84]	; (800d47c <mem_free+0x110>)
 800d426:	f008 fdda 	bl	8015fde <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d42a:	f008 fe0b 	bl	8016044 <sys_arch_protect>
 800d42e:	6138      	str	r0, [r7, #16]
 800d430:	6938      	ldr	r0, [r7, #16]
 800d432:	f008 fe15 	bl	8016060 <sys_arch_unprotect>
    return;
 800d436:	e012      	b.n	800d45e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d438:	69bb      	ldr	r3, [r7, #24]
 800d43a:	2200      	movs	r2, #0
 800d43c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d43e:	4b12      	ldr	r3, [pc, #72]	; (800d488 <mem_free+0x11c>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	69ba      	ldr	r2, [r7, #24]
 800d444:	429a      	cmp	r2, r3
 800d446:	d202      	bcs.n	800d44e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d448:	4a0f      	ldr	r2, [pc, #60]	; (800d488 <mem_free+0x11c>)
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d44e:	69b8      	ldr	r0, [r7, #24]
 800d450:	f7ff fe5c 	bl	800d10c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d454:	4809      	ldr	r0, [pc, #36]	; (800d47c <mem_free+0x110>)
 800d456:	f008 fdc2 	bl	8015fde <sys_mutex_unlock>
 800d45a:	e000      	b.n	800d45e <mem_free+0xf2>
    return;
 800d45c:	bf00      	nop
}
 800d45e:	3720      	adds	r7, #32
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	08018ba0 	.word	0x08018ba0
 800d468:	08018c90 	.word	0x08018c90
 800d46c:	08018be8 	.word	0x08018be8
 800d470:	20004194 	.word	0x20004194
 800d474:	20004198 	.word	0x20004198
 800d478:	08018cb4 	.word	0x08018cb4
 800d47c:	2000419c 	.word	0x2000419c
 800d480:	08018cd0 	.word	0x08018cd0
 800d484:	08018cf8 	.word	0x08018cf8
 800d488:	200041a0 	.word	0x200041a0

0800d48c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b088      	sub	sp, #32
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	460b      	mov	r3, r1
 800d496:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d498:	887b      	ldrh	r3, [r7, #2]
 800d49a:	3303      	adds	r3, #3
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	f023 0303 	bic.w	r3, r3, #3
 800d4a2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d4a4:	8bfb      	ldrh	r3, [r7, #30]
 800d4a6:	2b0b      	cmp	r3, #11
 800d4a8:	d801      	bhi.n	800d4ae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d4aa:	230c      	movs	r3, #12
 800d4ac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d4ae:	8bfb      	ldrh	r3, [r7, #30]
 800d4b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4b4:	d803      	bhi.n	800d4be <mem_trim+0x32>
 800d4b6:	8bfa      	ldrh	r2, [r7, #30]
 800d4b8:	887b      	ldrh	r3, [r7, #2]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d201      	bcs.n	800d4c2 <mem_trim+0x36>
    return NULL;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	e0d8      	b.n	800d674 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d4c2:	4b6e      	ldr	r3, [pc, #440]	; (800d67c <mem_trim+0x1f0>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d304      	bcc.n	800d4d6 <mem_trim+0x4a>
 800d4cc:	4b6c      	ldr	r3, [pc, #432]	; (800d680 <mem_trim+0x1f4>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	687a      	ldr	r2, [r7, #4]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d306      	bcc.n	800d4e4 <mem_trim+0x58>
 800d4d6:	4b6b      	ldr	r3, [pc, #428]	; (800d684 <mem_trim+0x1f8>)
 800d4d8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d4dc:	496a      	ldr	r1, [pc, #424]	; (800d688 <mem_trim+0x1fc>)
 800d4de:	486b      	ldr	r0, [pc, #428]	; (800d68c <mem_trim+0x200>)
 800d4e0:	f008 fe6c 	bl	80161bc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d4e4:	4b65      	ldr	r3, [pc, #404]	; (800d67c <mem_trim+0x1f0>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d304      	bcc.n	800d4f8 <mem_trim+0x6c>
 800d4ee:	4b64      	ldr	r3, [pc, #400]	; (800d680 <mem_trim+0x1f4>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	687a      	ldr	r2, [r7, #4]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d307      	bcc.n	800d508 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d4f8:	f008 fda4 	bl	8016044 <sys_arch_protect>
 800d4fc:	60b8      	str	r0, [r7, #8]
 800d4fe:	68b8      	ldr	r0, [r7, #8]
 800d500:	f008 fdae 	bl	8016060 <sys_arch_unprotect>
    return rmem;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	e0b5      	b.n	800d674 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	3b08      	subs	r3, #8
 800d50c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d50e:	69b8      	ldr	r0, [r7, #24]
 800d510:	f7ff fdea 	bl	800d0e8 <mem_to_ptr>
 800d514:	4603      	mov	r3, r0
 800d516:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	881a      	ldrh	r2, [r3, #0]
 800d51c:	8afb      	ldrh	r3, [r7, #22]
 800d51e:	1ad3      	subs	r3, r2, r3
 800d520:	b29b      	uxth	r3, r3
 800d522:	3b08      	subs	r3, #8
 800d524:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d526:	8bfa      	ldrh	r2, [r7, #30]
 800d528:	8abb      	ldrh	r3, [r7, #20]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d906      	bls.n	800d53c <mem_trim+0xb0>
 800d52e:	4b55      	ldr	r3, [pc, #340]	; (800d684 <mem_trim+0x1f8>)
 800d530:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d534:	4956      	ldr	r1, [pc, #344]	; (800d690 <mem_trim+0x204>)
 800d536:	4855      	ldr	r0, [pc, #340]	; (800d68c <mem_trim+0x200>)
 800d538:	f008 fe40 	bl	80161bc <iprintf>
  if (newsize > size) {
 800d53c:	8bfa      	ldrh	r2, [r7, #30]
 800d53e:	8abb      	ldrh	r3, [r7, #20]
 800d540:	429a      	cmp	r2, r3
 800d542:	d901      	bls.n	800d548 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d544:	2300      	movs	r3, #0
 800d546:	e095      	b.n	800d674 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d548:	8bfa      	ldrh	r2, [r7, #30]
 800d54a:	8abb      	ldrh	r3, [r7, #20]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d101      	bne.n	800d554 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	e08f      	b.n	800d674 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d554:	484f      	ldr	r0, [pc, #316]	; (800d694 <mem_trim+0x208>)
 800d556:	f008 fd33 	bl	8015fc0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	881b      	ldrh	r3, [r3, #0]
 800d55e:	4618      	mov	r0, r3
 800d560:	f7ff fdb0 	bl	800d0c4 <ptr_to_mem>
 800d564:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	791b      	ldrb	r3, [r3, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d13f      	bne.n	800d5ee <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	881b      	ldrh	r3, [r3, #0]
 800d572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d576:	d106      	bne.n	800d586 <mem_trim+0xfa>
 800d578:	4b42      	ldr	r3, [pc, #264]	; (800d684 <mem_trim+0x1f8>)
 800d57a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d57e:	4946      	ldr	r1, [pc, #280]	; (800d698 <mem_trim+0x20c>)
 800d580:	4842      	ldr	r0, [pc, #264]	; (800d68c <mem_trim+0x200>)
 800d582:	f008 fe1b 	bl	80161bc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	881b      	ldrh	r3, [r3, #0]
 800d58a:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d58c:	8afa      	ldrh	r2, [r7, #22]
 800d58e:	8bfb      	ldrh	r3, [r7, #30]
 800d590:	4413      	add	r3, r2
 800d592:	b29b      	uxth	r3, r3
 800d594:	3308      	adds	r3, #8
 800d596:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 800d598:	4b40      	ldr	r3, [pc, #256]	; (800d69c <mem_trim+0x210>)
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d106      	bne.n	800d5b0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d5a2:	89bb      	ldrh	r3, [r7, #12]
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7ff fd8d 	bl	800d0c4 <ptr_to_mem>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	4b3b      	ldr	r3, [pc, #236]	; (800d69c <mem_trim+0x210>)
 800d5ae:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d5b0:	89bb      	ldrh	r3, [r7, #12]
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f7ff fd86 	bl	800d0c4 <ptr_to_mem>
 800d5b8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	89fa      	ldrh	r2, [r7, #14]
 800d5c4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	8afa      	ldrh	r2, [r7, #22]
 800d5ca:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	89ba      	ldrh	r2, [r7, #12]
 800d5d0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	881b      	ldrh	r3, [r3, #0]
 800d5d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5da:	d047      	beq.n	800d66c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	881b      	ldrh	r3, [r3, #0]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7ff fd6f 	bl	800d0c4 <ptr_to_mem>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	89bb      	ldrh	r3, [r7, #12]
 800d5ea:	8053      	strh	r3, [r2, #2]
 800d5ec:	e03e      	b.n	800d66c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d5ee:	8bfb      	ldrh	r3, [r7, #30]
 800d5f0:	f103 0214 	add.w	r2, r3, #20
 800d5f4:	8abb      	ldrh	r3, [r7, #20]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d838      	bhi.n	800d66c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d5fa:	8afa      	ldrh	r2, [r7, #22]
 800d5fc:	8bfb      	ldrh	r3, [r7, #30]
 800d5fe:	4413      	add	r3, r2
 800d600:	b29b      	uxth	r3, r3
 800d602:	3308      	adds	r3, #8
 800d604:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	881b      	ldrh	r3, [r3, #0]
 800d60a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d60e:	d106      	bne.n	800d61e <mem_trim+0x192>
 800d610:	4b1c      	ldr	r3, [pc, #112]	; (800d684 <mem_trim+0x1f8>)
 800d612:	f240 3216 	movw	r2, #790	; 0x316
 800d616:	4920      	ldr	r1, [pc, #128]	; (800d698 <mem_trim+0x20c>)
 800d618:	481c      	ldr	r0, [pc, #112]	; (800d68c <mem_trim+0x200>)
 800d61a:	f008 fdcf 	bl	80161bc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d61e:	89bb      	ldrh	r3, [r7, #12]
 800d620:	4618      	mov	r0, r3
 800d622:	f7ff fd4f 	bl	800d0c4 <ptr_to_mem>
 800d626:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d628:	4b1c      	ldr	r3, [pc, #112]	; (800d69c <mem_trim+0x210>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	693a      	ldr	r2, [r7, #16]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d202      	bcs.n	800d638 <mem_trim+0x1ac>
      lfree = mem2;
 800d632:	4a1a      	ldr	r2, [pc, #104]	; (800d69c <mem_trim+0x210>)
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	2200      	movs	r2, #0
 800d63c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	881a      	ldrh	r2, [r3, #0]
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	8afa      	ldrh	r2, [r7, #22]
 800d64a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d64c:	69bb      	ldr	r3, [r7, #24]
 800d64e:	89ba      	ldrh	r2, [r7, #12]
 800d650:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	881b      	ldrh	r3, [r3, #0]
 800d656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d65a:	d007      	beq.n	800d66c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	881b      	ldrh	r3, [r3, #0]
 800d660:	4618      	mov	r0, r3
 800d662:	f7ff fd2f 	bl	800d0c4 <ptr_to_mem>
 800d666:	4602      	mov	r2, r0
 800d668:	89bb      	ldrh	r3, [r7, #12]
 800d66a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d66c:	4809      	ldr	r0, [pc, #36]	; (800d694 <mem_trim+0x208>)
 800d66e:	f008 fcb6 	bl	8015fde <sys_mutex_unlock>
  return rmem;
 800d672:	687b      	ldr	r3, [r7, #4]
}
 800d674:	4618      	mov	r0, r3
 800d676:	3720      	adds	r7, #32
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	20004194 	.word	0x20004194
 800d680:	20004198 	.word	0x20004198
 800d684:	08018ba0 	.word	0x08018ba0
 800d688:	08018d2c 	.word	0x08018d2c
 800d68c:	08018be8 	.word	0x08018be8
 800d690:	08018d44 	.word	0x08018d44
 800d694:	2000419c 	.word	0x2000419c
 800d698:	08018d64 	.word	0x08018d64
 800d69c:	200041a0 	.word	0x200041a0

0800d6a0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b088      	sub	sp, #32
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d6aa:	88fb      	ldrh	r3, [r7, #6]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d101      	bne.n	800d6b4 <mem_malloc+0x14>
    return NULL;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	e0e2      	b.n	800d87a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d6b4:	88fb      	ldrh	r3, [r7, #6]
 800d6b6:	3303      	adds	r3, #3
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	f023 0303 	bic.w	r3, r3, #3
 800d6be:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d6c0:	8bbb      	ldrh	r3, [r7, #28]
 800d6c2:	2b0b      	cmp	r3, #11
 800d6c4:	d801      	bhi.n	800d6ca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d6c6:	230c      	movs	r3, #12
 800d6c8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d6ca:	8bbb      	ldrh	r3, [r7, #28]
 800d6cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d6d0:	d803      	bhi.n	800d6da <mem_malloc+0x3a>
 800d6d2:	8bba      	ldrh	r2, [r7, #28]
 800d6d4:	88fb      	ldrh	r3, [r7, #6]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d201      	bcs.n	800d6de <mem_malloc+0x3e>
    return NULL;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	e0cd      	b.n	800d87a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d6de:	4869      	ldr	r0, [pc, #420]	; (800d884 <mem_malloc+0x1e4>)
 800d6e0:	f008 fc6e 	bl	8015fc0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d6e4:	4b68      	ldr	r3, [pc, #416]	; (800d888 <mem_malloc+0x1e8>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7ff fcfd 	bl	800d0e8 <mem_to_ptr>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	83fb      	strh	r3, [r7, #30]
 800d6f2:	e0b7      	b.n	800d864 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d6f4:	8bfb      	ldrh	r3, [r7, #30]
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7ff fce4 	bl	800d0c4 <ptr_to_mem>
 800d6fc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	791b      	ldrb	r3, [r3, #4]
 800d702:	2b00      	cmp	r3, #0
 800d704:	f040 80a7 	bne.w	800d856 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	881b      	ldrh	r3, [r3, #0]
 800d70c:	461a      	mov	r2, r3
 800d70e:	8bfb      	ldrh	r3, [r7, #30]
 800d710:	1ad3      	subs	r3, r2, r3
 800d712:	f1a3 0208 	sub.w	r2, r3, #8
 800d716:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d718:	429a      	cmp	r2, r3
 800d71a:	f0c0 809c 	bcc.w	800d856 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	881b      	ldrh	r3, [r3, #0]
 800d722:	461a      	mov	r2, r3
 800d724:	8bfb      	ldrh	r3, [r7, #30]
 800d726:	1ad3      	subs	r3, r2, r3
 800d728:	f1a3 0208 	sub.w	r2, r3, #8
 800d72c:	8bbb      	ldrh	r3, [r7, #28]
 800d72e:	3314      	adds	r3, #20
 800d730:	429a      	cmp	r2, r3
 800d732:	d333      	bcc.n	800d79c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d734:	8bfa      	ldrh	r2, [r7, #30]
 800d736:	8bbb      	ldrh	r3, [r7, #28]
 800d738:	4413      	add	r3, r2
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	3308      	adds	r3, #8
 800d73e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d740:	8a7b      	ldrh	r3, [r7, #18]
 800d742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d746:	d106      	bne.n	800d756 <mem_malloc+0xb6>
 800d748:	4b50      	ldr	r3, [pc, #320]	; (800d88c <mem_malloc+0x1ec>)
 800d74a:	f240 3287 	movw	r2, #903	; 0x387
 800d74e:	4950      	ldr	r1, [pc, #320]	; (800d890 <mem_malloc+0x1f0>)
 800d750:	4850      	ldr	r0, [pc, #320]	; (800d894 <mem_malloc+0x1f4>)
 800d752:	f008 fd33 	bl	80161bc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d756:	8a7b      	ldrh	r3, [r7, #18]
 800d758:	4618      	mov	r0, r3
 800d75a:	f7ff fcb3 	bl	800d0c4 <ptr_to_mem>
 800d75e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2200      	movs	r2, #0
 800d764:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	881a      	ldrh	r2, [r3, #0]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	8bfa      	ldrh	r2, [r7, #30]
 800d772:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	8a7a      	ldrh	r2, [r7, #18]
 800d778:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	2201      	movs	r2, #1
 800d77e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	881b      	ldrh	r3, [r3, #0]
 800d784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d788:	d00b      	beq.n	800d7a2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	881b      	ldrh	r3, [r3, #0]
 800d78e:	4618      	mov	r0, r3
 800d790:	f7ff fc98 	bl	800d0c4 <ptr_to_mem>
 800d794:	4602      	mov	r2, r0
 800d796:	8a7b      	ldrh	r3, [r7, #18]
 800d798:	8053      	strh	r3, [r2, #2]
 800d79a:	e002      	b.n	800d7a2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d7a2:	4b39      	ldr	r3, [pc, #228]	; (800d888 <mem_malloc+0x1e8>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	697a      	ldr	r2, [r7, #20]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d127      	bne.n	800d7fc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d7ac:	4b36      	ldr	r3, [pc, #216]	; (800d888 <mem_malloc+0x1e8>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d7b2:	e005      	b.n	800d7c0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	881b      	ldrh	r3, [r3, #0]
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7ff fc83 	bl	800d0c4 <ptr_to_mem>
 800d7be:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d7c0:	69bb      	ldr	r3, [r7, #24]
 800d7c2:	791b      	ldrb	r3, [r3, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d004      	beq.n	800d7d2 <mem_malloc+0x132>
 800d7c8:	4b33      	ldr	r3, [pc, #204]	; (800d898 <mem_malloc+0x1f8>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	69ba      	ldr	r2, [r7, #24]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d1f0      	bne.n	800d7b4 <mem_malloc+0x114>
          }
          lfree = cur;
 800d7d2:	4a2d      	ldr	r2, [pc, #180]	; (800d888 <mem_malloc+0x1e8>)
 800d7d4:	69bb      	ldr	r3, [r7, #24]
 800d7d6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d7d8:	4b2b      	ldr	r3, [pc, #172]	; (800d888 <mem_malloc+0x1e8>)
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	4b2e      	ldr	r3, [pc, #184]	; (800d898 <mem_malloc+0x1f8>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d00b      	beq.n	800d7fc <mem_malloc+0x15c>
 800d7e4:	4b28      	ldr	r3, [pc, #160]	; (800d888 <mem_malloc+0x1e8>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	791b      	ldrb	r3, [r3, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d006      	beq.n	800d7fc <mem_malloc+0x15c>
 800d7ee:	4b27      	ldr	r3, [pc, #156]	; (800d88c <mem_malloc+0x1ec>)
 800d7f0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d7f4:	4929      	ldr	r1, [pc, #164]	; (800d89c <mem_malloc+0x1fc>)
 800d7f6:	4827      	ldr	r0, [pc, #156]	; (800d894 <mem_malloc+0x1f4>)
 800d7f8:	f008 fce0 	bl	80161bc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d7fc:	4821      	ldr	r0, [pc, #132]	; (800d884 <mem_malloc+0x1e4>)
 800d7fe:	f008 fbee 	bl	8015fde <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d802:	8bba      	ldrh	r2, [r7, #28]
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	4413      	add	r3, r2
 800d808:	3308      	adds	r3, #8
 800d80a:	4a23      	ldr	r2, [pc, #140]	; (800d898 <mem_malloc+0x1f8>)
 800d80c:	6812      	ldr	r2, [r2, #0]
 800d80e:	4293      	cmp	r3, r2
 800d810:	d906      	bls.n	800d820 <mem_malloc+0x180>
 800d812:	4b1e      	ldr	r3, [pc, #120]	; (800d88c <mem_malloc+0x1ec>)
 800d814:	f240 32ba 	movw	r2, #954	; 0x3ba
 800d818:	4921      	ldr	r1, [pc, #132]	; (800d8a0 <mem_malloc+0x200>)
 800d81a:	481e      	ldr	r0, [pc, #120]	; (800d894 <mem_malloc+0x1f4>)
 800d81c:	f008 fcce 	bl	80161bc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	f003 0303 	and.w	r3, r3, #3
 800d826:	2b00      	cmp	r3, #0
 800d828:	d006      	beq.n	800d838 <mem_malloc+0x198>
 800d82a:	4b18      	ldr	r3, [pc, #96]	; (800d88c <mem_malloc+0x1ec>)
 800d82c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800d830:	491c      	ldr	r1, [pc, #112]	; (800d8a4 <mem_malloc+0x204>)
 800d832:	4818      	ldr	r0, [pc, #96]	; (800d894 <mem_malloc+0x1f4>)
 800d834:	f008 fcc2 	bl	80161bc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	f003 0303 	and.w	r3, r3, #3
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d006      	beq.n	800d850 <mem_malloc+0x1b0>
 800d842:	4b12      	ldr	r3, [pc, #72]	; (800d88c <mem_malloc+0x1ec>)
 800d844:	f240 32be 	movw	r2, #958	; 0x3be
 800d848:	4917      	ldr	r1, [pc, #92]	; (800d8a8 <mem_malloc+0x208>)
 800d84a:	4812      	ldr	r0, [pc, #72]	; (800d894 <mem_malloc+0x1f4>)
 800d84c:	f008 fcb6 	bl	80161bc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	3308      	adds	r3, #8
 800d854:	e011      	b.n	800d87a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d856:	8bfb      	ldrh	r3, [r7, #30]
 800d858:	4618      	mov	r0, r3
 800d85a:	f7ff fc33 	bl	800d0c4 <ptr_to_mem>
 800d85e:	4603      	mov	r3, r0
 800d860:	881b      	ldrh	r3, [r3, #0]
 800d862:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d864:	8bfa      	ldrh	r2, [r7, #30]
 800d866:	8bbb      	ldrh	r3, [r7, #28]
 800d868:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 800d86c:	429a      	cmp	r2, r3
 800d86e:	f4ff af41 	bcc.w	800d6f4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d872:	4804      	ldr	r0, [pc, #16]	; (800d884 <mem_malloc+0x1e4>)
 800d874:	f008 fbb3 	bl	8015fde <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d878:	2300      	movs	r3, #0
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3720      	adds	r7, #32
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	2000419c 	.word	0x2000419c
 800d888:	200041a0 	.word	0x200041a0
 800d88c:	08018ba0 	.word	0x08018ba0
 800d890:	08018d64 	.word	0x08018d64
 800d894:	08018be8 	.word	0x08018be8
 800d898:	20004198 	.word	0x20004198
 800d89c:	08018d78 	.word	0x08018d78
 800d8a0:	08018d94 	.word	0x08018d94
 800d8a4:	08018dc4 	.word	0x08018dc4
 800d8a8:	08018df4 	.word	0x08018df4

0800d8ac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	3303      	adds	r3, #3
 800d8c2:	f023 0303 	bic.w	r3, r3, #3
 800d8c6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	60fb      	str	r3, [r7, #12]
 800d8cc:	e011      	b.n	800d8f2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	68ba      	ldr	r2, [r7, #8]
 800d8de:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	881b      	ldrh	r3, [r3, #0]
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	60fb      	str	r3, [r7, #12]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	885b      	ldrh	r3, [r3, #2]
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	dce7      	bgt.n	800d8ce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d8fe:	bf00      	nop
 800d900:	3714      	adds	r7, #20
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr
	...

0800d90c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d912:	2300      	movs	r3, #0
 800d914:	80fb      	strh	r3, [r7, #6]
 800d916:	e009      	b.n	800d92c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d918:	88fb      	ldrh	r3, [r7, #6]
 800d91a:	4a08      	ldr	r2, [pc, #32]	; (800d93c <memp_init+0x30>)
 800d91c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d920:	4618      	mov	r0, r3
 800d922:	f7ff ffc3 	bl	800d8ac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d926:	88fb      	ldrh	r3, [r7, #6]
 800d928:	3301      	adds	r3, #1
 800d92a:	80fb      	strh	r3, [r7, #6]
 800d92c:	88fb      	ldrh	r3, [r7, #6]
 800d92e:	2b0c      	cmp	r3, #12
 800d930:	d9f2      	bls.n	800d918 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d932:	bf00      	nop
 800d934:	3708      	adds	r7, #8
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	0801b018 	.word	0x0801b018

0800d940 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d948:	f008 fb7c 	bl	8016044 <sys_arch_protect>
 800d94c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d015      	beq.n	800d988 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	68ba      	ldr	r2, [r7, #8]
 800d962:	6812      	ldr	r2, [r2, #0]
 800d964:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	f003 0303 	and.w	r3, r3, #3
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d006      	beq.n	800d97e <do_memp_malloc_pool+0x3e>
 800d970:	4b09      	ldr	r3, [pc, #36]	; (800d998 <do_memp_malloc_pool+0x58>)
 800d972:	f240 1219 	movw	r2, #281	; 0x119
 800d976:	4909      	ldr	r1, [pc, #36]	; (800d99c <do_memp_malloc_pool+0x5c>)
 800d978:	4809      	ldr	r0, [pc, #36]	; (800d9a0 <do_memp_malloc_pool+0x60>)
 800d97a:	f008 fc1f 	bl	80161bc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f008 fb6e 	bl	8016060 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	e003      	b.n	800d990 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f008 fb69 	bl	8016060 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	3710      	adds	r7, #16
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	08018e18 	.word	0x08018e18
 800d99c:	08018e48 	.word	0x08018e48
 800d9a0:	08018e6c 	.word	0x08018e6c

0800d9a4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d9ae:	79fb      	ldrb	r3, [r7, #7]
 800d9b0:	2b0c      	cmp	r3, #12
 800d9b2:	d908      	bls.n	800d9c6 <memp_malloc+0x22>
 800d9b4:	4b0a      	ldr	r3, [pc, #40]	; (800d9e0 <memp_malloc+0x3c>)
 800d9b6:	f240 1257 	movw	r2, #343	; 0x157
 800d9ba:	490a      	ldr	r1, [pc, #40]	; (800d9e4 <memp_malloc+0x40>)
 800d9bc:	480a      	ldr	r0, [pc, #40]	; (800d9e8 <memp_malloc+0x44>)
 800d9be:	f008 fbfd 	bl	80161bc <iprintf>
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	e008      	b.n	800d9d8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d9c6:	79fb      	ldrb	r3, [r7, #7]
 800d9c8:	4a08      	ldr	r2, [pc, #32]	; (800d9ec <memp_malloc+0x48>)
 800d9ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7ff ffb6 	bl	800d940 <do_memp_malloc_pool>
 800d9d4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3710      	adds	r7, #16
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}
 800d9e0:	08018e18 	.word	0x08018e18
 800d9e4:	08018ea8 	.word	0x08018ea8
 800d9e8:	08018e6c 	.word	0x08018e6c
 800d9ec:	0801b018 	.word	0x0801b018

0800d9f0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	f003 0303 	and.w	r3, r3, #3
 800da00:	2b00      	cmp	r3, #0
 800da02:	d006      	beq.n	800da12 <do_memp_free_pool+0x22>
 800da04:	4b0d      	ldr	r3, [pc, #52]	; (800da3c <do_memp_free_pool+0x4c>)
 800da06:	f240 126d 	movw	r2, #365	; 0x16d
 800da0a:	490d      	ldr	r1, [pc, #52]	; (800da40 <do_memp_free_pool+0x50>)
 800da0c:	480d      	ldr	r0, [pc, #52]	; (800da44 <do_memp_free_pool+0x54>)
 800da0e:	f008 fbd5 	bl	80161bc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800da16:	f008 fb15 	bl	8016044 <sys_arch_protect>
 800da1a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	689b      	ldr	r3, [r3, #8]
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800da2e:	68b8      	ldr	r0, [r7, #8]
 800da30:	f008 fb16 	bl	8016060 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800da34:	bf00      	nop
 800da36:	3710      	adds	r7, #16
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	08018e18 	.word	0x08018e18
 800da40:	08018ec8 	.word	0x08018ec8
 800da44:	08018e6c 	.word	0x08018e6c

0800da48 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	4603      	mov	r3, r0
 800da50:	6039      	str	r1, [r7, #0]
 800da52:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800da54:	79fb      	ldrb	r3, [r7, #7]
 800da56:	2b0c      	cmp	r3, #12
 800da58:	d907      	bls.n	800da6a <memp_free+0x22>
 800da5a:	4b0c      	ldr	r3, [pc, #48]	; (800da8c <memp_free+0x44>)
 800da5c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800da60:	490b      	ldr	r1, [pc, #44]	; (800da90 <memp_free+0x48>)
 800da62:	480c      	ldr	r0, [pc, #48]	; (800da94 <memp_free+0x4c>)
 800da64:	f008 fbaa 	bl	80161bc <iprintf>
 800da68:	e00c      	b.n	800da84 <memp_free+0x3c>

  if (mem == NULL) {
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d008      	beq.n	800da82 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800da70:	79fb      	ldrb	r3, [r7, #7]
 800da72:	4a09      	ldr	r2, [pc, #36]	; (800da98 <memp_free+0x50>)
 800da74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da78:	6839      	ldr	r1, [r7, #0]
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7ff ffb8 	bl	800d9f0 <do_memp_free_pool>
 800da80:	e000      	b.n	800da84 <memp_free+0x3c>
    return;
 800da82:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800da84:	3708      	adds	r7, #8
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	08018e18 	.word	0x08018e18
 800da90:	08018ee8 	.word	0x08018ee8
 800da94:	08018e6c 	.word	0x08018e6c
 800da98:	0801b018 	.word	0x0801b018

0800da9c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800da9c:	b480      	push	{r7}
 800da9e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800daa0:	bf00      	nop
 800daa2:	46bd      	mov	sp, r7
 800daa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa8:	4770      	bx	lr
	...

0800daac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
 800dab8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d108      	bne.n	800dad2 <netif_add+0x26>
 800dac0:	4b57      	ldr	r3, [pc, #348]	; (800dc20 <netif_add+0x174>)
 800dac2:	f240 1227 	movw	r2, #295	; 0x127
 800dac6:	4957      	ldr	r1, [pc, #348]	; (800dc24 <netif_add+0x178>)
 800dac8:	4857      	ldr	r0, [pc, #348]	; (800dc28 <netif_add+0x17c>)
 800daca:	f008 fb77 	bl	80161bc <iprintf>
 800dace:	2300      	movs	r3, #0
 800dad0:	e0a2      	b.n	800dc18 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800dad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d108      	bne.n	800daea <netif_add+0x3e>
 800dad8:	4b51      	ldr	r3, [pc, #324]	; (800dc20 <netif_add+0x174>)
 800dada:	f44f 7294 	mov.w	r2, #296	; 0x128
 800dade:	4953      	ldr	r1, [pc, #332]	; (800dc2c <netif_add+0x180>)
 800dae0:	4851      	ldr	r0, [pc, #324]	; (800dc28 <netif_add+0x17c>)
 800dae2:	f008 fb6b 	bl	80161bc <iprintf>
 800dae6:	2300      	movs	r3, #0
 800dae8:	e096      	b.n	800dc18 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d101      	bne.n	800daf4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800daf0:	4b4f      	ldr	r3, [pc, #316]	; (800dc30 <netif_add+0x184>)
 800daf2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d101      	bne.n	800dafe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800dafa:	4b4d      	ldr	r3, [pc, #308]	; (800dc30 <netif_add+0x184>)
 800dafc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d101      	bne.n	800db08 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800db04:	4b4a      	ldr	r3, [pc, #296]	; (800dc30 <netif_add+0x184>)
 800db06:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2200      	movs	r2, #0
 800db0c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2200      	movs	r2, #0
 800db12:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2200      	movs	r2, #0
 800db18:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	4a45      	ldr	r2, [pc, #276]	; (800dc34 <netif_add+0x188>)
 800db1e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2200      	movs	r2, #0
 800db24:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2200      	movs	r2, #0
 800db2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2200      	movs	r2, #0
 800db32:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	6a3a      	ldr	r2, [r7, #32]
 800db38:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800db3a:	4b3f      	ldr	r3, [pc, #252]	; (800dc38 <netif_add+0x18c>)
 800db3c:	781a      	ldrb	r2, [r3, #0]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db48:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	68b9      	ldr	r1, [r7, #8]
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f000 f913 	bl	800dd7c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800db56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	4798      	blx	r3
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d001      	beq.n	800db66 <netif_add+0xba>
    return NULL;
 800db62:	2300      	movs	r3, #0
 800db64:	e058      	b.n	800dc18 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db6c:	2bff      	cmp	r3, #255	; 0xff
 800db6e:	d103      	bne.n	800db78 <netif_add+0xcc>
        netif->num = 0;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2200      	movs	r2, #0
 800db74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800db78:	2300      	movs	r3, #0
 800db7a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800db7c:	4b2f      	ldr	r3, [pc, #188]	; (800dc3c <netif_add+0x190>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	617b      	str	r3, [r7, #20]
 800db82:	e02b      	b.n	800dbdc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800db84:	697a      	ldr	r2, [r7, #20]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d106      	bne.n	800db9a <netif_add+0xee>
 800db8c:	4b24      	ldr	r3, [pc, #144]	; (800dc20 <netif_add+0x174>)
 800db8e:	f240 128b 	movw	r2, #395	; 0x18b
 800db92:	492b      	ldr	r1, [pc, #172]	; (800dc40 <netif_add+0x194>)
 800db94:	4824      	ldr	r0, [pc, #144]	; (800dc28 <netif_add+0x17c>)
 800db96:	f008 fb11 	bl	80161bc <iprintf>
        num_netifs++;
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	3301      	adds	r3, #1
 800db9e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	2bff      	cmp	r3, #255	; 0xff
 800dba4:	dd06      	ble.n	800dbb4 <netif_add+0x108>
 800dba6:	4b1e      	ldr	r3, [pc, #120]	; (800dc20 <netif_add+0x174>)
 800dba8:	f240 128d 	movw	r2, #397	; 0x18d
 800dbac:	4925      	ldr	r1, [pc, #148]	; (800dc44 <netif_add+0x198>)
 800dbae:	481e      	ldr	r0, [pc, #120]	; (800dc28 <netif_add+0x17c>)
 800dbb0:	f008 fb04 	bl	80161bc <iprintf>
        if (netif2->num == netif->num) {
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d108      	bne.n	800dbd6 <netif_add+0x12a>
          netif->num++;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbca:	3301      	adds	r3, #1
 800dbcc:	b2da      	uxtb	r2, r3
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800dbd4:	e005      	b.n	800dbe2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	617b      	str	r3, [r7, #20]
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d1d0      	bne.n	800db84 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1be      	bne.n	800db66 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbee:	2bfe      	cmp	r3, #254	; 0xfe
 800dbf0:	d103      	bne.n	800dbfa <netif_add+0x14e>
    netif_num = 0;
 800dbf2:	4b11      	ldr	r3, [pc, #68]	; (800dc38 <netif_add+0x18c>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	701a      	strb	r2, [r3, #0]
 800dbf8:	e006      	b.n	800dc08 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc00:	3301      	adds	r3, #1
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	4b0c      	ldr	r3, [pc, #48]	; (800dc38 <netif_add+0x18c>)
 800dc06:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800dc08:	4b0c      	ldr	r3, [pc, #48]	; (800dc3c <netif_add+0x190>)
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800dc10:	4a0a      	ldr	r2, [pc, #40]	; (800dc3c <netif_add+0x190>)
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800dc16:	68fb      	ldr	r3, [r7, #12]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3718      	adds	r7, #24
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	08018f04 	.word	0x08018f04
 800dc24:	08018f98 	.word	0x08018f98
 800dc28:	08018f54 	.word	0x08018f54
 800dc2c:	08018fb4 	.word	0x08018fb4
 800dc30:	0801af78 	.word	0x0801af78
 800dc34:	0800e057 	.word	0x0800e057
 800dc38:	200041d8 	.word	0x200041d8
 800dc3c:	2000e4dc 	.word	0x2000e4dc
 800dc40:	08018fd8 	.word	0x08018fd8
 800dc44:	08018fec 	.word	0x08018fec

0800dc48 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800dc52:	6839      	ldr	r1, [r7, #0]
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f002 fe83 	bl	8010960 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800dc5a:	6839      	ldr	r1, [r7, #0]
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f007 ff27 	bl	8015ab0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800dc62:	bf00      	nop
 800dc64:	3708      	adds	r7, #8
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
	...

0800dc6c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b086      	sub	sp, #24
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d106      	bne.n	800dc8c <netif_do_set_ipaddr+0x20>
 800dc7e:	4b1d      	ldr	r3, [pc, #116]	; (800dcf4 <netif_do_set_ipaddr+0x88>)
 800dc80:	f240 12cb 	movw	r2, #459	; 0x1cb
 800dc84:	491c      	ldr	r1, [pc, #112]	; (800dcf8 <netif_do_set_ipaddr+0x8c>)
 800dc86:	481d      	ldr	r0, [pc, #116]	; (800dcfc <netif_do_set_ipaddr+0x90>)
 800dc88:	f008 fa98 	bl	80161bc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d106      	bne.n	800dca0 <netif_do_set_ipaddr+0x34>
 800dc92:	4b18      	ldr	r3, [pc, #96]	; (800dcf4 <netif_do_set_ipaddr+0x88>)
 800dc94:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800dc98:	4917      	ldr	r1, [pc, #92]	; (800dcf8 <netif_do_set_ipaddr+0x8c>)
 800dc9a:	4818      	ldr	r0, [pc, #96]	; (800dcfc <netif_do_set_ipaddr+0x90>)
 800dc9c:	f008 fa8e 	bl	80161bc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	681a      	ldr	r2, [r3, #0]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	3304      	adds	r3, #4
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d01c      	beq.n	800dce8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800dcbe:	f107 0314 	add.w	r3, r7, #20
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f7ff ffbf 	bl	800dc48 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d002      	beq.n	800dcd6 <netif_do_set_ipaddr+0x6a>
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	e000      	b.n	800dcd8 <netif_do_set_ipaddr+0x6c>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	68fa      	ldr	r2, [r7, #12]
 800dcda:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dcdc:	2101      	movs	r1, #1
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	f000 f8d2 	bl	800de88 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dce4:	2301      	movs	r3, #1
 800dce6:	e000      	b.n	800dcea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800dce8:	2300      	movs	r3, #0
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3718      	adds	r7, #24
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	08018f04 	.word	0x08018f04
 800dcf8:	0801901c 	.word	0x0801901c
 800dcfc:	08018f54 	.word	0x08018f54

0800dd00 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	681a      	ldr	r2, [r3, #0]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	3308      	adds	r3, #8
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d00a      	beq.n	800dd30 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d002      	beq.n	800dd26 <netif_do_set_netmask+0x26>
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	e000      	b.n	800dd28 <netif_do_set_netmask+0x28>
 800dd26:	2300      	movs	r3, #0
 800dd28:	68fa      	ldr	r2, [r7, #12]
 800dd2a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e000      	b.n	800dd32 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800dd30:	2300      	movs	r3, #0
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3714      	adds	r7, #20
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr

0800dd3e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800dd3e:	b480      	push	{r7}
 800dd40:	b085      	sub	sp, #20
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	60f8      	str	r0, [r7, #12]
 800dd46:	60b9      	str	r1, [r7, #8]
 800dd48:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	330c      	adds	r3, #12
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d00a      	beq.n	800dd6e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d002      	beq.n	800dd64 <netif_do_set_gw+0x26>
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	e000      	b.n	800dd66 <netif_do_set_gw+0x28>
 800dd64:	2300      	movs	r3, #0
 800dd66:	68fa      	ldr	r2, [r7, #12]
 800dd68:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e000      	b.n	800dd70 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dd6e:	2300      	movs	r3, #0
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3714      	adds	r7, #20
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr

0800dd7c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b088      	sub	sp, #32
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	60b9      	str	r1, [r7, #8]
 800dd86:	607a      	str	r2, [r7, #4]
 800dd88:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d101      	bne.n	800dd9c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dd98:	4b1c      	ldr	r3, [pc, #112]	; (800de0c <netif_set_addr+0x90>)
 800dd9a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d101      	bne.n	800dda6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dda2:	4b1a      	ldr	r3, [pc, #104]	; (800de0c <netif_set_addr+0x90>)
 800dda4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d101      	bne.n	800ddb0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ddac:	4b17      	ldr	r3, [pc, #92]	; (800de0c <netif_set_addr+0x90>)
 800ddae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d003      	beq.n	800ddbe <netif_set_addr+0x42>
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d101      	bne.n	800ddc2 <netif_set_addr+0x46>
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	e000      	b.n	800ddc4 <netif_set_addr+0x48>
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d006      	beq.n	800ddda <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ddcc:	f107 0310 	add.w	r3, r7, #16
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	68b9      	ldr	r1, [r7, #8]
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f7ff ff49 	bl	800dc6c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ddda:	69fa      	ldr	r2, [r7, #28]
 800dddc:	6879      	ldr	r1, [r7, #4]
 800ddde:	68f8      	ldr	r0, [r7, #12]
 800dde0:	f7ff ff8e 	bl	800dd00 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dde4:	69ba      	ldr	r2, [r7, #24]
 800dde6:	6839      	ldr	r1, [r7, #0]
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f7ff ffa8 	bl	800dd3e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d106      	bne.n	800de02 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ddf4:	f107 0310 	add.w	r3, r7, #16
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	68b9      	ldr	r1, [r7, #8]
 800ddfc:	68f8      	ldr	r0, [r7, #12]
 800ddfe:	f7ff ff35 	bl	800dc6c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800de02:	bf00      	nop
 800de04:	3720      	adds	r7, #32
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	0801af78 	.word	0x0801af78

0800de10 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800de18:	4a04      	ldr	r2, [pc, #16]	; (800de2c <netif_set_default+0x1c>)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800de1e:	bf00      	nop
 800de20:	370c      	adds	r7, #12
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr
 800de2a:	bf00      	nop
 800de2c:	2000e4e0 	.word	0x2000e4e0

0800de30 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d107      	bne.n	800de4e <netif_set_up+0x1e>
 800de3e:	4b0f      	ldr	r3, [pc, #60]	; (800de7c <netif_set_up+0x4c>)
 800de40:	f44f 7254 	mov.w	r2, #848	; 0x350
 800de44:	490e      	ldr	r1, [pc, #56]	; (800de80 <netif_set_up+0x50>)
 800de46:	480f      	ldr	r0, [pc, #60]	; (800de84 <netif_set_up+0x54>)
 800de48:	f008 f9b8 	bl	80161bc <iprintf>
 800de4c:	e013      	b.n	800de76 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de54:	f003 0301 	and.w	r3, r3, #1
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d10c      	bne.n	800de76 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de62:	f043 0301 	orr.w	r3, r3, #1
 800de66:	b2da      	uxtb	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800de6e:	2103      	movs	r1, #3
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f000 f809 	bl	800de88 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800de76:	3708      	adds	r7, #8
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	08018f04 	.word	0x08018f04
 800de80:	0801908c 	.word	0x0801908c
 800de84:	08018f54 	.word	0x08018f54

0800de88 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	460b      	mov	r3, r1
 800de92:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d106      	bne.n	800dea8 <netif_issue_reports+0x20>
 800de9a:	4b18      	ldr	r3, [pc, #96]	; (800defc <netif_issue_reports+0x74>)
 800de9c:	f240 326d 	movw	r2, #877	; 0x36d
 800dea0:	4917      	ldr	r1, [pc, #92]	; (800df00 <netif_issue_reports+0x78>)
 800dea2:	4818      	ldr	r0, [pc, #96]	; (800df04 <netif_issue_reports+0x7c>)
 800dea4:	f008 f98a 	bl	80161bc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800deae:	f003 0304 	and.w	r3, r3, #4
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d01e      	beq.n	800def4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800debc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d017      	beq.n	800def4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dec4:	78fb      	ldrb	r3, [r7, #3]
 800dec6:	f003 0301 	and.w	r3, r3, #1
 800deca:	2b00      	cmp	r3, #0
 800decc:	d013      	beq.n	800def6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	3304      	adds	r3, #4
 800ded2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d00e      	beq.n	800def6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dede:	f003 0308 	and.w	r3, r3, #8
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d007      	beq.n	800def6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	3304      	adds	r3, #4
 800deea:	4619      	mov	r1, r3
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7fd fe49 	bl	800bb84 <etharp_request>
 800def2:	e000      	b.n	800def6 <netif_issue_reports+0x6e>
    return;
 800def4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800def6:	3708      	adds	r7, #8
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	08018f04 	.word	0x08018f04
 800df00:	080190a8 	.word	0x080190a8
 800df04:	08018f54 	.word	0x08018f54

0800df08 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d107      	bne.n	800df26 <netif_set_down+0x1e>
 800df16:	4b12      	ldr	r3, [pc, #72]	; (800df60 <netif_set_down+0x58>)
 800df18:	f240 329b 	movw	r2, #923	; 0x39b
 800df1c:	4911      	ldr	r1, [pc, #68]	; (800df64 <netif_set_down+0x5c>)
 800df1e:	4812      	ldr	r0, [pc, #72]	; (800df68 <netif_set_down+0x60>)
 800df20:	f008 f94c 	bl	80161bc <iprintf>
 800df24:	e019      	b.n	800df5a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df2c:	f003 0301 	and.w	r3, r3, #1
 800df30:	2b00      	cmp	r3, #0
 800df32:	d012      	beq.n	800df5a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df3a:	f023 0301 	bic.w	r3, r3, #1
 800df3e:	b2da      	uxtb	r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df4c:	f003 0308 	and.w	r3, r3, #8
 800df50:	2b00      	cmp	r3, #0
 800df52:	d002      	beq.n	800df5a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f7fd f9d3 	bl	800b300 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800df5a:	3708      	adds	r7, #8
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	08018f04 	.word	0x08018f04
 800df64:	080190cc 	.word	0x080190cc
 800df68:	08018f54 	.word	0x08018f54

0800df6c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d107      	bne.n	800df8a <netif_set_link_up+0x1e>
 800df7a:	4b13      	ldr	r3, [pc, #76]	; (800dfc8 <netif_set_link_up+0x5c>)
 800df7c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800df80:	4912      	ldr	r1, [pc, #72]	; (800dfcc <netif_set_link_up+0x60>)
 800df82:	4813      	ldr	r0, [pc, #76]	; (800dfd0 <netif_set_link_up+0x64>)
 800df84:	f008 f91a 	bl	80161bc <iprintf>
 800df88:	e01b      	b.n	800dfc2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df90:	f003 0304 	and.w	r3, r3, #4
 800df94:	2b00      	cmp	r3, #0
 800df96:	d114      	bne.n	800dfc2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df9e:	f043 0304 	orr.w	r3, r3, #4
 800dfa2:	b2da      	uxtb	r2, r3
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dfaa:	2103      	movs	r1, #3
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7ff ff6b 	bl	800de88 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	69db      	ldr	r3, [r3, #28]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d003      	beq.n	800dfc2 <netif_set_link_up+0x56>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	69db      	ldr	r3, [r3, #28]
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	08018f04 	.word	0x08018f04
 800dfcc:	080190ec 	.word	0x080190ec
 800dfd0:	08018f54 	.word	0x08018f54

0800dfd4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d107      	bne.n	800dff2 <netif_set_link_down+0x1e>
 800dfe2:	4b11      	ldr	r3, [pc, #68]	; (800e028 <netif_set_link_down+0x54>)
 800dfe4:	f240 4206 	movw	r2, #1030	; 0x406
 800dfe8:	4910      	ldr	r1, [pc, #64]	; (800e02c <netif_set_link_down+0x58>)
 800dfea:	4811      	ldr	r0, [pc, #68]	; (800e030 <netif_set_link_down+0x5c>)
 800dfec:	f008 f8e6 	bl	80161bc <iprintf>
 800dff0:	e017      	b.n	800e022 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dff8:	f003 0304 	and.w	r3, r3, #4
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d010      	beq.n	800e022 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e006:	f023 0304 	bic.w	r3, r3, #4
 800e00a:	b2da      	uxtb	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	69db      	ldr	r3, [r3, #28]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d003      	beq.n	800e022 <netif_set_link_down+0x4e>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	69db      	ldr	r3, [r3, #28]
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	08018f04 	.word	0x08018f04
 800e02c:	08019110 	.word	0x08019110
 800e030:	08018f54 	.word	0x08018f54

0800e034 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e034:	b480      	push	{r7}
 800e036:	b083      	sub	sp, #12
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d002      	beq.n	800e04a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	683a      	ldr	r2, [r7, #0]
 800e048:	61da      	str	r2, [r3, #28]
  }
}
 800e04a:	bf00      	nop
 800e04c:	370c      	adds	r7, #12
 800e04e:	46bd      	mov	sp, r7
 800e050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e054:	4770      	bx	lr

0800e056 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e056:	b480      	push	{r7}
 800e058:	b085      	sub	sp, #20
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	60f8      	str	r0, [r7, #12]
 800e05e:	60b9      	str	r1, [r7, #8]
 800e060:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e062:	f06f 030b 	mvn.w	r3, #11
}
 800e066:	4618      	mov	r0, r3
 800e068:	3714      	adds	r7, #20
 800e06a:	46bd      	mov	sp, r7
 800e06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e070:	4770      	bx	lr
	...

0800e074 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e074:	b480      	push	{r7}
 800e076:	b085      	sub	sp, #20
 800e078:	af00      	add	r7, sp, #0
 800e07a:	4603      	mov	r3, r0
 800e07c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e07e:	79fb      	ldrb	r3, [r7, #7]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d013      	beq.n	800e0ac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e084:	4b0d      	ldr	r3, [pc, #52]	; (800e0bc <netif_get_by_index+0x48>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	60fb      	str	r3, [r7, #12]
 800e08a:	e00c      	b.n	800e0a6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e092:	3301      	adds	r3, #1
 800e094:	b2db      	uxtb	r3, r3
 800e096:	79fa      	ldrb	r2, [r7, #7]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d101      	bne.n	800e0a0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	e006      	b.n	800e0ae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	60fb      	str	r3, [r7, #12]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d1ef      	bne.n	800e08c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3714      	adds	r7, #20
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr
 800e0ba:	bf00      	nop
 800e0bc:	2000e4dc 	.word	0x2000e4dc

0800e0c0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e0c6:	f007 ffbd 	bl	8016044 <sys_arch_protect>
 800e0ca:	6038      	str	r0, [r7, #0]
 800e0cc:	4b0d      	ldr	r3, [pc, #52]	; (800e104 <pbuf_free_ooseq+0x44>)
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	701a      	strb	r2, [r3, #0]
 800e0d2:	6838      	ldr	r0, [r7, #0]
 800e0d4:	f007 ffc4 	bl	8016060 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e0d8:	4b0b      	ldr	r3, [pc, #44]	; (800e108 <pbuf_free_ooseq+0x48>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	607b      	str	r3, [r7, #4]
 800e0de:	e00a      	b.n	800e0f6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d003      	beq.n	800e0f0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f002 fc77 	bl	80109dc <tcp_free_ooseq>
      return;
 800e0ee:	e005      	b.n	800e0fc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	607b      	str	r3, [r7, #4]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d1f1      	bne.n	800e0e0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e0fc:	3708      	adds	r7, #8
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
 800e102:	bf00      	nop
 800e104:	2000e4e4 	.word	0x2000e4e4
 800e108:	2000e4ec 	.word	0x2000e4ec

0800e10c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b082      	sub	sp, #8
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e114:	f7ff ffd4 	bl	800e0c0 <pbuf_free_ooseq>
}
 800e118:	bf00      	nop
 800e11a:	3708      	adds	r7, #8
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e126:	f007 ff8d 	bl	8016044 <sys_arch_protect>
 800e12a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e12c:	4b0f      	ldr	r3, [pc, #60]	; (800e16c <pbuf_pool_is_empty+0x4c>)
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e132:	4b0e      	ldr	r3, [pc, #56]	; (800e16c <pbuf_pool_is_empty+0x4c>)
 800e134:	2201      	movs	r2, #1
 800e136:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f007 ff91 	bl	8016060 <sys_arch_unprotect>

  if (!queued) {
 800e13e:	78fb      	ldrb	r3, [r7, #3]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d10f      	bne.n	800e164 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e144:	2100      	movs	r1, #0
 800e146:	480a      	ldr	r0, [pc, #40]	; (800e170 <pbuf_pool_is_empty+0x50>)
 800e148:	f7fc fcfc 	bl	800ab44 <tcpip_try_callback>
 800e14c:	4603      	mov	r3, r0
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d008      	beq.n	800e164 <pbuf_pool_is_empty+0x44>
 800e152:	f007 ff77 	bl	8016044 <sys_arch_protect>
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	4b04      	ldr	r3, [pc, #16]	; (800e16c <pbuf_pool_is_empty+0x4c>)
 800e15a:	2200      	movs	r2, #0
 800e15c:	701a      	strb	r2, [r3, #0]
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f007 ff7e 	bl	8016060 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e164:	bf00      	nop
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	2000e4e4 	.word	0x2000e4e4
 800e170:	0800e10d 	.word	0x0800e10d

0800e174 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e174:	b480      	push	{r7}
 800e176:	b085      	sub	sp, #20
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	4611      	mov	r1, r2
 800e180:	461a      	mov	r2, r3
 800e182:	460b      	mov	r3, r1
 800e184:	80fb      	strh	r3, [r7, #6]
 800e186:	4613      	mov	r3, r2
 800e188:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2200      	movs	r2, #0
 800e18e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	68ba      	ldr	r2, [r7, #8]
 800e194:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	88fa      	ldrh	r2, [r7, #6]
 800e19a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	88ba      	ldrh	r2, [r7, #4]
 800e1a0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e1a2:	8b3b      	ldrh	r3, [r7, #24]
 800e1a4:	b2da      	uxtb	r2, r3
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	7f3a      	ldrb	r2, [r7, #28]
 800e1ae:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	73da      	strb	r2, [r3, #15]
}
 800e1bc:	bf00      	nop
 800e1be:	3714      	adds	r7, #20
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr

0800e1c8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b08c      	sub	sp, #48	; 0x30
 800e1cc:	af02      	add	r7, sp, #8
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	71fb      	strb	r3, [r7, #7]
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	80bb      	strh	r3, [r7, #4]
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e1da:	79fb      	ldrb	r3, [r7, #7]
 800e1dc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e1de:	887b      	ldrh	r3, [r7, #2]
 800e1e0:	2b41      	cmp	r3, #65	; 0x41
 800e1e2:	d00b      	beq.n	800e1fc <pbuf_alloc+0x34>
 800e1e4:	2b41      	cmp	r3, #65	; 0x41
 800e1e6:	dc02      	bgt.n	800e1ee <pbuf_alloc+0x26>
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d007      	beq.n	800e1fc <pbuf_alloc+0x34>
 800e1ec:	e0c2      	b.n	800e374 <pbuf_alloc+0x1ac>
 800e1ee:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e1f2:	d00b      	beq.n	800e20c <pbuf_alloc+0x44>
 800e1f4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e1f8:	d070      	beq.n	800e2dc <pbuf_alloc+0x114>
 800e1fa:	e0bb      	b.n	800e374 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e1fc:	887a      	ldrh	r2, [r7, #2]
 800e1fe:	88bb      	ldrh	r3, [r7, #4]
 800e200:	4619      	mov	r1, r3
 800e202:	2000      	movs	r0, #0
 800e204:	f000 f8d2 	bl	800e3ac <pbuf_alloc_reference>
 800e208:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e20a:	e0bd      	b.n	800e388 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e20c:	2300      	movs	r3, #0
 800e20e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e210:	2300      	movs	r3, #0
 800e212:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e214:	88bb      	ldrh	r3, [r7, #4]
 800e216:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e218:	200c      	movs	r0, #12
 800e21a:	f7ff fbc3 	bl	800d9a4 <memp_malloc>
 800e21e:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d109      	bne.n	800e23a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800e226:	f7ff ff7b 	bl	800e120 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d002      	beq.n	800e236 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800e230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e232:	f000 fadd 	bl	800e7f0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e236:	2300      	movs	r3, #0
 800e238:	e0a7      	b.n	800e38a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e23a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e23c:	3303      	adds	r3, #3
 800e23e:	b29b      	uxth	r3, r3
 800e240:	f023 0303 	bic.w	r3, r3, #3
 800e244:	b29b      	uxth	r3, r3
 800e246:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e24a:	b29a      	uxth	r2, r3
 800e24c:	8b7b      	ldrh	r3, [r7, #26]
 800e24e:	4293      	cmp	r3, r2
 800e250:	bf28      	it	cs
 800e252:	4613      	movcs	r3, r2
 800e254:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e256:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e258:	3310      	adds	r3, #16
 800e25a:	697a      	ldr	r2, [r7, #20]
 800e25c:	4413      	add	r3, r2
 800e25e:	3303      	adds	r3, #3
 800e260:	f023 0303 	bic.w	r3, r3, #3
 800e264:	4618      	mov	r0, r3
 800e266:	8a79      	ldrh	r1, [r7, #18]
 800e268:	8b7a      	ldrh	r2, [r7, #26]
 800e26a:	2300      	movs	r3, #0
 800e26c:	9301      	str	r3, [sp, #4]
 800e26e:	887b      	ldrh	r3, [r7, #2]
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	460b      	mov	r3, r1
 800e274:	4601      	mov	r1, r0
 800e276:	6978      	ldr	r0, [r7, #20]
 800e278:	f7ff ff7c 	bl	800e174 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	f003 0303 	and.w	r3, r3, #3
 800e284:	2b00      	cmp	r3, #0
 800e286:	d006      	beq.n	800e296 <pbuf_alloc+0xce>
 800e288:	4b42      	ldr	r3, [pc, #264]	; (800e394 <pbuf_alloc+0x1cc>)
 800e28a:	f240 1201 	movw	r2, #257	; 0x101
 800e28e:	4942      	ldr	r1, [pc, #264]	; (800e398 <pbuf_alloc+0x1d0>)
 800e290:	4842      	ldr	r0, [pc, #264]	; (800e39c <pbuf_alloc+0x1d4>)
 800e292:	f007 ff93 	bl	80161bc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e296:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e298:	3303      	adds	r3, #3
 800e29a:	f023 0303 	bic.w	r3, r3, #3
 800e29e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e2a2:	d106      	bne.n	800e2b2 <pbuf_alloc+0xea>
 800e2a4:	4b3b      	ldr	r3, [pc, #236]	; (800e394 <pbuf_alloc+0x1cc>)
 800e2a6:	f240 1203 	movw	r2, #259	; 0x103
 800e2aa:	493d      	ldr	r1, [pc, #244]	; (800e3a0 <pbuf_alloc+0x1d8>)
 800e2ac:	483b      	ldr	r0, [pc, #236]	; (800e39c <pbuf_alloc+0x1d4>)
 800e2ae:	f007 ff85 	bl	80161bc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d102      	bne.n	800e2be <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e2bc:	e002      	b.n	800e2c4 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	697a      	ldr	r2, [r7, #20]
 800e2c2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e2c8:	8b7a      	ldrh	r2, [r7, #26]
 800e2ca:	8a7b      	ldrh	r3, [r7, #18]
 800e2cc:	1ad3      	subs	r3, r2, r3
 800e2ce:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e2d4:	8b7b      	ldrh	r3, [r7, #26]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d19e      	bne.n	800e218 <pbuf_alloc+0x50>
      break;
 800e2da:	e055      	b.n	800e388 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e2dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2de:	3303      	adds	r3, #3
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	f023 0303 	bic.w	r3, r3, #3
 800e2e6:	b29a      	uxth	r2, r3
 800e2e8:	88bb      	ldrh	r3, [r7, #4]
 800e2ea:	3303      	adds	r3, #3
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	f023 0303 	bic.w	r3, r3, #3
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	4413      	add	r3, r2
 800e2f6:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e2f8:	8a3b      	ldrh	r3, [r7, #16]
 800e2fa:	3310      	adds	r3, #16
 800e2fc:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e2fe:	8a3a      	ldrh	r2, [r7, #16]
 800e300:	88bb      	ldrh	r3, [r7, #4]
 800e302:	3303      	adds	r3, #3
 800e304:	f023 0303 	bic.w	r3, r3, #3
 800e308:	429a      	cmp	r2, r3
 800e30a:	d306      	bcc.n	800e31a <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e30c:	89fa      	ldrh	r2, [r7, #14]
 800e30e:	88bb      	ldrh	r3, [r7, #4]
 800e310:	3303      	adds	r3, #3
 800e312:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e316:	429a      	cmp	r2, r3
 800e318:	d201      	bcs.n	800e31e <pbuf_alloc+0x156>
        return NULL;
 800e31a:	2300      	movs	r3, #0
 800e31c:	e035      	b.n	800e38a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e31e:	89fb      	ldrh	r3, [r7, #14]
 800e320:	4618      	mov	r0, r3
 800e322:	f7ff f9bd 	bl	800d6a0 <mem_malloc>
 800e326:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d101      	bne.n	800e332 <pbuf_alloc+0x16a>
        return NULL;
 800e32e:	2300      	movs	r3, #0
 800e330:	e02b      	b.n	800e38a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e332:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e334:	3310      	adds	r3, #16
 800e336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e338:	4413      	add	r3, r2
 800e33a:	3303      	adds	r3, #3
 800e33c:	f023 0303 	bic.w	r3, r3, #3
 800e340:	4618      	mov	r0, r3
 800e342:	88b9      	ldrh	r1, [r7, #4]
 800e344:	88ba      	ldrh	r2, [r7, #4]
 800e346:	2300      	movs	r3, #0
 800e348:	9301      	str	r3, [sp, #4]
 800e34a:	887b      	ldrh	r3, [r7, #2]
 800e34c:	9300      	str	r3, [sp, #0]
 800e34e:	460b      	mov	r3, r1
 800e350:	4601      	mov	r1, r0
 800e352:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e354:	f7ff ff0e 	bl	800e174 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	f003 0303 	and.w	r3, r3, #3
 800e360:	2b00      	cmp	r3, #0
 800e362:	d010      	beq.n	800e386 <pbuf_alloc+0x1be>
 800e364:	4b0b      	ldr	r3, [pc, #44]	; (800e394 <pbuf_alloc+0x1cc>)
 800e366:	f240 1223 	movw	r2, #291	; 0x123
 800e36a:	490e      	ldr	r1, [pc, #56]	; (800e3a4 <pbuf_alloc+0x1dc>)
 800e36c:	480b      	ldr	r0, [pc, #44]	; (800e39c <pbuf_alloc+0x1d4>)
 800e36e:	f007 ff25 	bl	80161bc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e372:	e008      	b.n	800e386 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e374:	4b07      	ldr	r3, [pc, #28]	; (800e394 <pbuf_alloc+0x1cc>)
 800e376:	f240 1227 	movw	r2, #295	; 0x127
 800e37a:	490b      	ldr	r1, [pc, #44]	; (800e3a8 <pbuf_alloc+0x1e0>)
 800e37c:	4807      	ldr	r0, [pc, #28]	; (800e39c <pbuf_alloc+0x1d4>)
 800e37e:	f007 ff1d 	bl	80161bc <iprintf>
      return NULL;
 800e382:	2300      	movs	r3, #0
 800e384:	e001      	b.n	800e38a <pbuf_alloc+0x1c2>
      break;
 800e386:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3728      	adds	r7, #40	; 0x28
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	08019134 	.word	0x08019134
 800e398:	08019164 	.word	0x08019164
 800e39c:	08019194 	.word	0x08019194
 800e3a0:	080191bc 	.word	0x080191bc
 800e3a4:	080191f0 	.word	0x080191f0
 800e3a8:	0801921c 	.word	0x0801921c

0800e3ac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b086      	sub	sp, #24
 800e3b0:	af02      	add	r7, sp, #8
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	807b      	strh	r3, [r7, #2]
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e3bc:	883b      	ldrh	r3, [r7, #0]
 800e3be:	2b41      	cmp	r3, #65	; 0x41
 800e3c0:	d009      	beq.n	800e3d6 <pbuf_alloc_reference+0x2a>
 800e3c2:	883b      	ldrh	r3, [r7, #0]
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d006      	beq.n	800e3d6 <pbuf_alloc_reference+0x2a>
 800e3c8:	4b0f      	ldr	r3, [pc, #60]	; (800e408 <pbuf_alloc_reference+0x5c>)
 800e3ca:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e3ce:	490f      	ldr	r1, [pc, #60]	; (800e40c <pbuf_alloc_reference+0x60>)
 800e3d0:	480f      	ldr	r0, [pc, #60]	; (800e410 <pbuf_alloc_reference+0x64>)
 800e3d2:	f007 fef3 	bl	80161bc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e3d6:	200b      	movs	r0, #11
 800e3d8:	f7ff fae4 	bl	800d9a4 <memp_malloc>
 800e3dc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d101      	bne.n	800e3e8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	e00b      	b.n	800e400 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e3e8:	8879      	ldrh	r1, [r7, #2]
 800e3ea:	887a      	ldrh	r2, [r7, #2]
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	9301      	str	r3, [sp, #4]
 800e3f0:	883b      	ldrh	r3, [r7, #0]
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	6879      	ldr	r1, [r7, #4]
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f7ff febb 	bl	800e174 <pbuf_init_alloced_pbuf>
  return p;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
}
 800e400:	4618      	mov	r0, r3
 800e402:	3710      	adds	r7, #16
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	08019134 	.word	0x08019134
 800e40c:	08019238 	.word	0x08019238
 800e410:	08019194 	.word	0x08019194

0800e414 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b088      	sub	sp, #32
 800e418:	af02      	add	r7, sp, #8
 800e41a:	607b      	str	r3, [r7, #4]
 800e41c:	4603      	mov	r3, r0
 800e41e:	73fb      	strb	r3, [r7, #15]
 800e420:	460b      	mov	r3, r1
 800e422:	81bb      	strh	r3, [r7, #12]
 800e424:	4613      	mov	r3, r2
 800e426:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e428:	7bfb      	ldrb	r3, [r7, #15]
 800e42a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e42c:	8a7b      	ldrh	r3, [r7, #18]
 800e42e:	3303      	adds	r3, #3
 800e430:	f023 0203 	bic.w	r2, r3, #3
 800e434:	89bb      	ldrh	r3, [r7, #12]
 800e436:	441a      	add	r2, r3
 800e438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d901      	bls.n	800e442 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e43e:	2300      	movs	r3, #0
 800e440:	e018      	b.n	800e474 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e442:	6a3b      	ldr	r3, [r7, #32]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d007      	beq.n	800e458 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e448:	8a7b      	ldrh	r3, [r7, #18]
 800e44a:	3303      	adds	r3, #3
 800e44c:	f023 0303 	bic.w	r3, r3, #3
 800e450:	6a3a      	ldr	r2, [r7, #32]
 800e452:	4413      	add	r3, r2
 800e454:	617b      	str	r3, [r7, #20]
 800e456:	e001      	b.n	800e45c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e458:	2300      	movs	r3, #0
 800e45a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	89b9      	ldrh	r1, [r7, #12]
 800e460:	89ba      	ldrh	r2, [r7, #12]
 800e462:	2302      	movs	r3, #2
 800e464:	9301      	str	r3, [sp, #4]
 800e466:	897b      	ldrh	r3, [r7, #10]
 800e468:	9300      	str	r3, [sp, #0]
 800e46a:	460b      	mov	r3, r1
 800e46c:	6979      	ldr	r1, [r7, #20]
 800e46e:	f7ff fe81 	bl	800e174 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e472:	687b      	ldr	r3, [r7, #4]
}
 800e474:	4618      	mov	r0, r3
 800e476:	3718      	adds	r7, #24
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	460b      	mov	r3, r1
 800e486:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d106      	bne.n	800e49c <pbuf_realloc+0x20>
 800e48e:	4b3a      	ldr	r3, [pc, #232]	; (800e578 <pbuf_realloc+0xfc>)
 800e490:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e494:	4939      	ldr	r1, [pc, #228]	; (800e57c <pbuf_realloc+0x100>)
 800e496:	483a      	ldr	r0, [pc, #232]	; (800e580 <pbuf_realloc+0x104>)
 800e498:	f007 fe90 	bl	80161bc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	891b      	ldrh	r3, [r3, #8]
 800e4a0:	887a      	ldrh	r2, [r7, #2]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d264      	bcs.n	800e570 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	891a      	ldrh	r2, [r3, #8]
 800e4aa:	887b      	ldrh	r3, [r7, #2]
 800e4ac:	1ad3      	subs	r3, r2, r3
 800e4ae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e4b0:	887b      	ldrh	r3, [r7, #2]
 800e4b2:	817b      	strh	r3, [r7, #10]
  q = p;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e4b8:	e018      	b.n	800e4ec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	895b      	ldrh	r3, [r3, #10]
 800e4be:	897a      	ldrh	r2, [r7, #10]
 800e4c0:	1ad3      	subs	r3, r2, r3
 800e4c2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	891a      	ldrh	r2, [r3, #8]
 800e4c8:	893b      	ldrh	r3, [r7, #8]
 800e4ca:	1ad3      	subs	r3, r2, r3
 800e4cc:	b29a      	uxth	r2, r3
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d106      	bne.n	800e4ec <pbuf_realloc+0x70>
 800e4de:	4b26      	ldr	r3, [pc, #152]	; (800e578 <pbuf_realloc+0xfc>)
 800e4e0:	f240 12af 	movw	r2, #431	; 0x1af
 800e4e4:	4927      	ldr	r1, [pc, #156]	; (800e584 <pbuf_realloc+0x108>)
 800e4e6:	4826      	ldr	r0, [pc, #152]	; (800e580 <pbuf_realloc+0x104>)
 800e4e8:	f007 fe68 	bl	80161bc <iprintf>
  while (rem_len > q->len) {
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	895b      	ldrh	r3, [r3, #10]
 800e4f0:	897a      	ldrh	r2, [r7, #10]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d8e1      	bhi.n	800e4ba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	7b1b      	ldrb	r3, [r3, #12]
 800e4fa:	f003 030f 	and.w	r3, r3, #15
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d122      	bne.n	800e548 <pbuf_realloc+0xcc>
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	895b      	ldrh	r3, [r3, #10]
 800e506:	897a      	ldrh	r2, [r7, #10]
 800e508:	429a      	cmp	r2, r3
 800e50a:	d01d      	beq.n	800e548 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	7b5b      	ldrb	r3, [r3, #13]
 800e510:	f003 0302 	and.w	r3, r3, #2
 800e514:	2b00      	cmp	r3, #0
 800e516:	d117      	bne.n	800e548 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	461a      	mov	r2, r3
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	1ad3      	subs	r3, r2, r3
 800e522:	b29a      	uxth	r2, r3
 800e524:	897b      	ldrh	r3, [r7, #10]
 800e526:	4413      	add	r3, r2
 800e528:	b29b      	uxth	r3, r3
 800e52a:	4619      	mov	r1, r3
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f7fe ffad 	bl	800d48c <mem_trim>
 800e532:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d106      	bne.n	800e548 <pbuf_realloc+0xcc>
 800e53a:	4b0f      	ldr	r3, [pc, #60]	; (800e578 <pbuf_realloc+0xfc>)
 800e53c:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e540:	4911      	ldr	r1, [pc, #68]	; (800e588 <pbuf_realloc+0x10c>)
 800e542:	480f      	ldr	r0, [pc, #60]	; (800e580 <pbuf_realloc+0x104>)
 800e544:	f007 fe3a 	bl	80161bc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	897a      	ldrh	r2, [r7, #10]
 800e54c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	895a      	ldrh	r2, [r3, #10]
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d004      	beq.n	800e568 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	4618      	mov	r0, r3
 800e564:	f000 f944 	bl	800e7f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2200      	movs	r2, #0
 800e56c:	601a      	str	r2, [r3, #0]
 800e56e:	e000      	b.n	800e572 <pbuf_realloc+0xf6>
    return;
 800e570:	bf00      	nop

}
 800e572:	3710      	adds	r7, #16
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	08019134 	.word	0x08019134
 800e57c:	0801924c 	.word	0x0801924c
 800e580:	08019194 	.word	0x08019194
 800e584:	08019264 	.word	0x08019264
 800e588:	0801927c 	.word	0x0801927c

0800e58c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b086      	sub	sp, #24
 800e590:	af00      	add	r7, sp, #0
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	4613      	mov	r3, r2
 800e598:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d106      	bne.n	800e5ae <pbuf_add_header_impl+0x22>
 800e5a0:	4b2c      	ldr	r3, [pc, #176]	; (800e654 <pbuf_add_header_impl+0xc8>)
 800e5a2:	f240 12df 	movw	r2, #479	; 0x1df
 800e5a6:	492c      	ldr	r1, [pc, #176]	; (800e658 <pbuf_add_header_impl+0xcc>)
 800e5a8:	482c      	ldr	r0, [pc, #176]	; (800e65c <pbuf_add_header_impl+0xd0>)
 800e5aa:	f007 fe07 	bl	80161bc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d003      	beq.n	800e5bc <pbuf_add_header_impl+0x30>
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5ba:	d301      	bcc.n	800e5c0 <pbuf_add_header_impl+0x34>
    return 1;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	e044      	b.n	800e64a <pbuf_add_header_impl+0xbe>
  }
  if (header_size_increment == 0) {
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d101      	bne.n	800e5ca <pbuf_add_header_impl+0x3e>
    return 0;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	e03f      	b.n	800e64a <pbuf_add_header_impl+0xbe>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	891a      	ldrh	r2, [r3, #8]
 800e5d2:	8a7b      	ldrh	r3, [r7, #18]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	8a7a      	ldrh	r2, [r7, #18]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d901      	bls.n	800e5e2 <pbuf_add_header_impl+0x56>
    return 1;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	e033      	b.n	800e64a <pbuf_add_header_impl+0xbe>
  }

  type_internal = p->type_internal;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	7b1b      	ldrb	r3, [r3, #12]
 800e5e6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e5e8:	8a3b      	ldrh	r3, [r7, #16]
 800e5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d00d      	beq.n	800e60e <pbuf_add_header_impl+0x82>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	685a      	ldr	r2, [r3, #4]
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	425b      	negs	r3, r3
 800e5fa:	4413      	add	r3, r2
 800e5fc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	f103 0210 	add.w	r2, r3, #16
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	429a      	cmp	r2, r3
 800e608:	d90d      	bls.n	800e626 <pbuf_add_header_impl+0x9a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e60a:	2301      	movs	r3, #1
 800e60c:	e01d      	b.n	800e64a <pbuf_add_header_impl+0xbe>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e60e:	79fb      	ldrb	r3, [r7, #7]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d006      	beq.n	800e622 <pbuf_add_header_impl+0x96>
      payload = (u8_t *)p->payload - header_size_increment;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	685a      	ldr	r2, [r3, #4]
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	425b      	negs	r3, r3
 800e61c:	4413      	add	r3, r2
 800e61e:	617b      	str	r3, [r7, #20]
 800e620:	e001      	b.n	800e626 <pbuf_add_header_impl+0x9a>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e622:	2301      	movs	r3, #1
 800e624:	e011      	b.n	800e64a <pbuf_add_header_impl+0xbe>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	697a      	ldr	r2, [r7, #20]
 800e62a:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	895a      	ldrh	r2, [r3, #10]
 800e630:	8a7b      	ldrh	r3, [r7, #18]
 800e632:	4413      	add	r3, r2
 800e634:	b29a      	uxth	r2, r3
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	891a      	ldrh	r2, [r3, #8]
 800e63e:	8a7b      	ldrh	r3, [r7, #18]
 800e640:	4413      	add	r3, r2
 800e642:	b29a      	uxth	r2, r3
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	811a      	strh	r2, [r3, #8]


  return 0;
 800e648:	2300      	movs	r3, #0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3718      	adds	r7, #24
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	08019134 	.word	0x08019134
 800e658:	08019298 	.word	0x08019298
 800e65c:	08019194 	.word	0x08019194

0800e660 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e66a:	2200      	movs	r2, #0
 800e66c:	6839      	ldr	r1, [r7, #0]
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f7ff ff8c 	bl	800e58c <pbuf_add_header_impl>
 800e674:	4603      	mov	r3, r0
}
 800e676:	4618      	mov	r0, r3
 800e678:	3708      	adds	r7, #8
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
	...

0800e680 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d106      	bne.n	800e69e <pbuf_remove_header+0x1e>
 800e690:	4b20      	ldr	r3, [pc, #128]	; (800e714 <pbuf_remove_header+0x94>)
 800e692:	f240 224b 	movw	r2, #587	; 0x24b
 800e696:	4920      	ldr	r1, [pc, #128]	; (800e718 <pbuf_remove_header+0x98>)
 800e698:	4820      	ldr	r0, [pc, #128]	; (800e71c <pbuf_remove_header+0x9c>)
 800e69a:	f007 fd8f 	bl	80161bc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d003      	beq.n	800e6ac <pbuf_remove_header+0x2c>
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6aa:	d301      	bcc.n	800e6b0 <pbuf_remove_header+0x30>
    return 1;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	e02c      	b.n	800e70a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d101      	bne.n	800e6ba <pbuf_remove_header+0x3a>
    return 0;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	e027      	b.n	800e70a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	895b      	ldrh	r3, [r3, #10]
 800e6c2:	89fa      	ldrh	r2, [r7, #14]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d908      	bls.n	800e6da <pbuf_remove_header+0x5a>
 800e6c8:	4b12      	ldr	r3, [pc, #72]	; (800e714 <pbuf_remove_header+0x94>)
 800e6ca:	f240 2255 	movw	r2, #597	; 0x255
 800e6ce:	4914      	ldr	r1, [pc, #80]	; (800e720 <pbuf_remove_header+0xa0>)
 800e6d0:	4812      	ldr	r0, [pc, #72]	; (800e71c <pbuf_remove_header+0x9c>)
 800e6d2:	f007 fd73 	bl	80161bc <iprintf>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	e017      	b.n	800e70a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	685a      	ldr	r2, [r3, #4]
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	441a      	add	r2, r3
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	895a      	ldrh	r2, [r3, #10]
 800e6f0:	89fb      	ldrh	r3, [r7, #14]
 800e6f2:	1ad3      	subs	r3, r2, r3
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	891a      	ldrh	r2, [r3, #8]
 800e6fe:	89fb      	ldrh	r3, [r7, #14]
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	b29a      	uxth	r2, r3
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e708:	2300      	movs	r3, #0
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3710      	adds	r7, #16
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	08019134 	.word	0x08019134
 800e718:	08019298 	.word	0x08019298
 800e71c:	08019194 	.word	0x08019194
 800e720:	080192a4 	.word	0x080192a4

0800e724 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	460b      	mov	r3, r1
 800e72e:	807b      	strh	r3, [r7, #2]
 800e730:	4613      	mov	r3, r2
 800e732:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e734:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	da08      	bge.n	800e74e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e73c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e740:	425b      	negs	r3, r3
 800e742:	4619      	mov	r1, r3
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f7ff ff9b 	bl	800e680 <pbuf_remove_header>
 800e74a:	4603      	mov	r3, r0
 800e74c:	e007      	b.n	800e75e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e74e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e752:	787a      	ldrb	r2, [r7, #1]
 800e754:	4619      	mov	r1, r3
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f7ff ff18 	bl	800e58c <pbuf_add_header_impl>
 800e75c:	4603      	mov	r3, r0
  }
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3708      	adds	r7, #8
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e766:	b580      	push	{r7, lr}
 800e768:	b082      	sub	sp, #8
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
 800e76e:	460b      	mov	r3, r1
 800e770:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e772:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e776:	2201      	movs	r2, #1
 800e778:	4619      	mov	r1, r3
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f7ff ffd2 	bl	800e724 <pbuf_header_impl>
 800e780:	4603      	mov	r3, r0
}
 800e782:	4618      	mov	r0, r3
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800e78a:	b580      	push	{r7, lr}
 800e78c:	b086      	sub	sp, #24
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
 800e792:	460b      	mov	r3, r1
 800e794:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800e79a:	887b      	ldrh	r3, [r7, #2]
 800e79c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800e79e:	e01c      	b.n	800e7da <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	895b      	ldrh	r3, [r3, #10]
 800e7a4:	8a7a      	ldrh	r2, [r7, #18]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d310      	bcc.n	800e7cc <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	895b      	ldrh	r3, [r3, #10]
 800e7b2:	8a7a      	ldrh	r2, [r7, #18]
 800e7b4:	1ad3      	subs	r3, r2, r3
 800e7b6:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800e7c4:	68f8      	ldr	r0, [r7, #12]
 800e7c6:	f000 f813 	bl	800e7f0 <pbuf_free>
 800e7ca:	e006      	b.n	800e7da <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800e7cc:	8a7b      	ldrh	r3, [r7, #18]
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	6978      	ldr	r0, [r7, #20]
 800e7d2:	f7ff ff55 	bl	800e680 <pbuf_remove_header>
      free_left = 0;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800e7da:	8a7b      	ldrh	r3, [r7, #18]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d002      	beq.n	800e7e6 <pbuf_free_header+0x5c>
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1dc      	bne.n	800e7a0 <pbuf_free_header+0x16>
    }
  }
  return p;
 800e7e6:	697b      	ldr	r3, [r7, #20]
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3718      	adds	r7, #24
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b088      	sub	sp, #32
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d10b      	bne.n	800e816 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d106      	bne.n	800e812 <pbuf_free+0x22>
 800e804:	4b3b      	ldr	r3, [pc, #236]	; (800e8f4 <pbuf_free+0x104>)
 800e806:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e80a:	493b      	ldr	r1, [pc, #236]	; (800e8f8 <pbuf_free+0x108>)
 800e80c:	483b      	ldr	r0, [pc, #236]	; (800e8fc <pbuf_free+0x10c>)
 800e80e:	f007 fcd5 	bl	80161bc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e812:	2300      	movs	r3, #0
 800e814:	e069      	b.n	800e8ea <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e816:	2300      	movs	r3, #0
 800e818:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e81a:	e062      	b.n	800e8e2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e81c:	f007 fc12 	bl	8016044 <sys_arch_protect>
 800e820:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	7b9b      	ldrb	r3, [r3, #14]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d106      	bne.n	800e838 <pbuf_free+0x48>
 800e82a:	4b32      	ldr	r3, [pc, #200]	; (800e8f4 <pbuf_free+0x104>)
 800e82c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e830:	4933      	ldr	r1, [pc, #204]	; (800e900 <pbuf_free+0x110>)
 800e832:	4832      	ldr	r0, [pc, #200]	; (800e8fc <pbuf_free+0x10c>)
 800e834:	f007 fcc2 	bl	80161bc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	7b9b      	ldrb	r3, [r3, #14]
 800e83c:	3b01      	subs	r3, #1
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	739a      	strb	r2, [r3, #14]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	7b9b      	ldrb	r3, [r3, #14]
 800e848:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e84a:	69b8      	ldr	r0, [r7, #24]
 800e84c:	f007 fc08 	bl	8016060 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e850:	7dfb      	ldrb	r3, [r7, #23]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d143      	bne.n	800e8de <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	7b1b      	ldrb	r3, [r3, #12]
 800e860:	f003 030f 	and.w	r3, r3, #15
 800e864:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	7b5b      	ldrb	r3, [r3, #13]
 800e86a:	f003 0302 	and.w	r3, r3, #2
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d011      	beq.n	800e896 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	691b      	ldr	r3, [r3, #16]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d106      	bne.n	800e88c <pbuf_free+0x9c>
 800e87e:	4b1d      	ldr	r3, [pc, #116]	; (800e8f4 <pbuf_free+0x104>)
 800e880:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e884:	491f      	ldr	r1, [pc, #124]	; (800e904 <pbuf_free+0x114>)
 800e886:	481d      	ldr	r0, [pc, #116]	; (800e8fc <pbuf_free+0x10c>)
 800e888:	f007 fc98 	bl	80161bc <iprintf>
        pc->custom_free_function(p);
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	691b      	ldr	r3, [r3, #16]
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	4798      	blx	r3
 800e894:	e01d      	b.n	800e8d2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e896:	7bfb      	ldrb	r3, [r7, #15]
 800e898:	2b02      	cmp	r3, #2
 800e89a:	d104      	bne.n	800e8a6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e89c:	6879      	ldr	r1, [r7, #4]
 800e89e:	200c      	movs	r0, #12
 800e8a0:	f7ff f8d2 	bl	800da48 <memp_free>
 800e8a4:	e015      	b.n	800e8d2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e8a6:	7bfb      	ldrb	r3, [r7, #15]
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d104      	bne.n	800e8b6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e8ac:	6879      	ldr	r1, [r7, #4]
 800e8ae:	200b      	movs	r0, #11
 800e8b0:	f7ff f8ca 	bl	800da48 <memp_free>
 800e8b4:	e00d      	b.n	800e8d2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e8b6:	7bfb      	ldrb	r3, [r7, #15]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d103      	bne.n	800e8c4 <pbuf_free+0xd4>
          mem_free(p);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f7fe fd55 	bl	800d36c <mem_free>
 800e8c2:	e006      	b.n	800e8d2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e8c4:	4b0b      	ldr	r3, [pc, #44]	; (800e8f4 <pbuf_free+0x104>)
 800e8c6:	f240 320f 	movw	r2, #783	; 0x30f
 800e8ca:	490f      	ldr	r1, [pc, #60]	; (800e908 <pbuf_free+0x118>)
 800e8cc:	480b      	ldr	r0, [pc, #44]	; (800e8fc <pbuf_free+0x10c>)
 800e8ce:	f007 fc75 	bl	80161bc <iprintf>
        }
      }
      count++;
 800e8d2:	7ffb      	ldrb	r3, [r7, #31]
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	607b      	str	r3, [r7, #4]
 800e8dc:	e001      	b.n	800e8e2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d199      	bne.n	800e81c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e8e8:	7ffb      	ldrb	r3, [r7, #31]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3720      	adds	r7, #32
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}
 800e8f2:	bf00      	nop
 800e8f4:	08019134 	.word	0x08019134
 800e8f8:	08019298 	.word	0x08019298
 800e8fc:	08019194 	.word	0x08019194
 800e900:	080192c4 	.word	0x080192c4
 800e904:	080192dc 	.word	0x080192dc
 800e908:	08019300 	.word	0x08019300

0800e90c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b085      	sub	sp, #20
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e914:	2300      	movs	r3, #0
 800e916:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e918:	e005      	b.n	800e926 <pbuf_clen+0x1a>
    ++len;
 800e91a:	89fb      	ldrh	r3, [r7, #14]
 800e91c:	3301      	adds	r3, #1
 800e91e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d1f6      	bne.n	800e91a <pbuf_clen+0xe>
  }
  return len;
 800e92c:	89fb      	ldrh	r3, [r7, #14]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3714      	adds	r7, #20
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
	...

0800e93c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d016      	beq.n	800e978 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e94a:	f007 fb7b 	bl	8016044 <sys_arch_protect>
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	7b9b      	ldrb	r3, [r3, #14]
 800e954:	3301      	adds	r3, #1
 800e956:	b2da      	uxtb	r2, r3
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	739a      	strb	r2, [r3, #14]
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f007 fb7f 	bl	8016060 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	7b9b      	ldrb	r3, [r3, #14]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d106      	bne.n	800e978 <pbuf_ref+0x3c>
 800e96a:	4b05      	ldr	r3, [pc, #20]	; (800e980 <pbuf_ref+0x44>)
 800e96c:	f240 3242 	movw	r2, #834	; 0x342
 800e970:	4904      	ldr	r1, [pc, #16]	; (800e984 <pbuf_ref+0x48>)
 800e972:	4805      	ldr	r0, [pc, #20]	; (800e988 <pbuf_ref+0x4c>)
 800e974:	f007 fc22 	bl	80161bc <iprintf>
  }
}
 800e978:	bf00      	nop
 800e97a:	3710      	adds	r7, #16
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	08019134 	.word	0x08019134
 800e984:	08019314 	.word	0x08019314
 800e988:	08019194 	.word	0x08019194

0800e98c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d002      	beq.n	800e9a2 <pbuf_cat+0x16>
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d107      	bne.n	800e9b2 <pbuf_cat+0x26>
 800e9a2:	4b20      	ldr	r3, [pc, #128]	; (800ea24 <pbuf_cat+0x98>)
 800e9a4:	f240 325a 	movw	r2, #858	; 0x35a
 800e9a8:	491f      	ldr	r1, [pc, #124]	; (800ea28 <pbuf_cat+0x9c>)
 800e9aa:	4820      	ldr	r0, [pc, #128]	; (800ea2c <pbuf_cat+0xa0>)
 800e9ac:	f007 fc06 	bl	80161bc <iprintf>
 800e9b0:	e034      	b.n	800ea1c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	60fb      	str	r3, [r7, #12]
 800e9b6:	e00a      	b.n	800e9ce <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	891a      	ldrh	r2, [r3, #8]
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	891b      	ldrh	r3, [r3, #8]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	b29a      	uxth	r2, r3
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	60fb      	str	r3, [r7, #12]
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d1f0      	bne.n	800e9b8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	891a      	ldrh	r2, [r3, #8]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	895b      	ldrh	r3, [r3, #10]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d006      	beq.n	800e9f0 <pbuf_cat+0x64>
 800e9e2:	4b10      	ldr	r3, [pc, #64]	; (800ea24 <pbuf_cat+0x98>)
 800e9e4:	f240 3262 	movw	r2, #866	; 0x362
 800e9e8:	4911      	ldr	r1, [pc, #68]	; (800ea30 <pbuf_cat+0xa4>)
 800e9ea:	4810      	ldr	r0, [pc, #64]	; (800ea2c <pbuf_cat+0xa0>)
 800e9ec:	f007 fbe6 	bl	80161bc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d006      	beq.n	800ea06 <pbuf_cat+0x7a>
 800e9f8:	4b0a      	ldr	r3, [pc, #40]	; (800ea24 <pbuf_cat+0x98>)
 800e9fa:	f240 3263 	movw	r2, #867	; 0x363
 800e9fe:	490d      	ldr	r1, [pc, #52]	; (800ea34 <pbuf_cat+0xa8>)
 800ea00:	480a      	ldr	r0, [pc, #40]	; (800ea2c <pbuf_cat+0xa0>)
 800ea02:	f007 fbdb 	bl	80161bc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	891a      	ldrh	r2, [r3, #8]
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	891b      	ldrh	r3, [r3, #8]
 800ea0e:	4413      	add	r3, r2
 800ea10:	b29a      	uxth	r2, r3
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	683a      	ldr	r2, [r7, #0]
 800ea1a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ea1c:	3710      	adds	r7, #16
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	08019134 	.word	0x08019134
 800ea28:	08019328 	.word	0x08019328
 800ea2c:	08019194 	.word	0x08019194
 800ea30:	08019360 	.word	0x08019360
 800ea34:	08019390 	.word	0x08019390

0800ea38 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ea42:	6839      	ldr	r1, [r7, #0]
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f7ff ffa1 	bl	800e98c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ea4a:	6838      	ldr	r0, [r7, #0]
 800ea4c:	f7ff ff76 	bl	800e93c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ea50:	bf00      	nop
 800ea52:	3708      	adds	r7, #8
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b086      	sub	sp, #24
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ea62:	2300      	movs	r3, #0
 800ea64:	617b      	str	r3, [r7, #20]
 800ea66:	2300      	movs	r3, #0
 800ea68:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d008      	beq.n	800ea82 <pbuf_copy+0x2a>
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d005      	beq.n	800ea82 <pbuf_copy+0x2a>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	891a      	ldrh	r2, [r3, #8]
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	891b      	ldrh	r3, [r3, #8]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d209      	bcs.n	800ea96 <pbuf_copy+0x3e>
 800ea82:	4b57      	ldr	r3, [pc, #348]	; (800ebe0 <pbuf_copy+0x188>)
 800ea84:	f240 32ca 	movw	r2, #970	; 0x3ca
 800ea88:	4956      	ldr	r1, [pc, #344]	; (800ebe4 <pbuf_copy+0x18c>)
 800ea8a:	4857      	ldr	r0, [pc, #348]	; (800ebe8 <pbuf_copy+0x190>)
 800ea8c:	f007 fb96 	bl	80161bc <iprintf>
 800ea90:	f06f 030f 	mvn.w	r3, #15
 800ea94:	e09f      	b.n	800ebd6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	895b      	ldrh	r3, [r3, #10]
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	1ad2      	subs	r2, r2, r3
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	895b      	ldrh	r3, [r3, #10]
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	1acb      	subs	r3, r1, r3
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d306      	bcc.n	800eabc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	895b      	ldrh	r3, [r3, #10]
 800eab2:	461a      	mov	r2, r3
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	1ad3      	subs	r3, r2, r3
 800eab8:	60fb      	str	r3, [r7, #12]
 800eaba:	e005      	b.n	800eac8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	895b      	ldrh	r3, [r3, #10]
 800eac0:	461a      	mov	r2, r3
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	1ad3      	subs	r3, r2, r3
 800eac6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	685a      	ldr	r2, [r3, #4]
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	18d0      	adds	r0, r2, r3
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	685a      	ldr	r2, [r3, #4]
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	4413      	add	r3, r2
 800ead8:	68fa      	ldr	r2, [r7, #12]
 800eada:	4619      	mov	r1, r3
 800eadc:	f007 fb2d 	bl	801613a <memcpy>
    offset_to += len;
 800eae0:	697a      	ldr	r2, [r7, #20]
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	4413      	add	r3, r2
 800eae6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800eae8:	693a      	ldr	r2, [r7, #16]
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	4413      	add	r3, r2
 800eaee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	895b      	ldrh	r3, [r3, #10]
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d206      	bcs.n	800eb0a <pbuf_copy+0xb2>
 800eafc:	4b38      	ldr	r3, [pc, #224]	; (800ebe0 <pbuf_copy+0x188>)
 800eafe:	f240 32d9 	movw	r2, #985	; 0x3d9
 800eb02:	493a      	ldr	r1, [pc, #232]	; (800ebec <pbuf_copy+0x194>)
 800eb04:	4838      	ldr	r0, [pc, #224]	; (800ebe8 <pbuf_copy+0x190>)
 800eb06:	f007 fb59 	bl	80161bc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	895b      	ldrh	r3, [r3, #10]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d206      	bcs.n	800eb24 <pbuf_copy+0xcc>
 800eb16:	4b32      	ldr	r3, [pc, #200]	; (800ebe0 <pbuf_copy+0x188>)
 800eb18:	f240 32da 	movw	r2, #986	; 0x3da
 800eb1c:	4934      	ldr	r1, [pc, #208]	; (800ebf0 <pbuf_copy+0x198>)
 800eb1e:	4832      	ldr	r0, [pc, #200]	; (800ebe8 <pbuf_copy+0x190>)
 800eb20:	f007 fb4c 	bl	80161bc <iprintf>
    if (offset_from >= p_from->len) {
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	895b      	ldrh	r3, [r3, #10]
 800eb28:	461a      	mov	r2, r3
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d804      	bhi.n	800eb3a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800eb30:	2300      	movs	r3, #0
 800eb32:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	895b      	ldrh	r3, [r3, #10]
 800eb3e:	461a      	mov	r2, r3
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d114      	bne.n	800eb70 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800eb46:	2300      	movs	r3, #0
 800eb48:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d10c      	bne.n	800eb70 <pbuf_copy+0x118>
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d009      	beq.n	800eb70 <pbuf_copy+0x118>
 800eb5c:	4b20      	ldr	r3, [pc, #128]	; (800ebe0 <pbuf_copy+0x188>)
 800eb5e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800eb62:	4924      	ldr	r1, [pc, #144]	; (800ebf4 <pbuf_copy+0x19c>)
 800eb64:	4820      	ldr	r0, [pc, #128]	; (800ebe8 <pbuf_copy+0x190>)
 800eb66:	f007 fb29 	bl	80161bc <iprintf>
 800eb6a:	f06f 030f 	mvn.w	r3, #15
 800eb6e:	e032      	b.n	800ebd6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d013      	beq.n	800eb9e <pbuf_copy+0x146>
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	895a      	ldrh	r2, [r3, #10]
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	891b      	ldrh	r3, [r3, #8]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d10d      	bne.n	800eb9e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d009      	beq.n	800eb9e <pbuf_copy+0x146>
 800eb8a:	4b15      	ldr	r3, [pc, #84]	; (800ebe0 <pbuf_copy+0x188>)
 800eb8c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800eb90:	4919      	ldr	r1, [pc, #100]	; (800ebf8 <pbuf_copy+0x1a0>)
 800eb92:	4815      	ldr	r0, [pc, #84]	; (800ebe8 <pbuf_copy+0x190>)
 800eb94:	f007 fb12 	bl	80161bc <iprintf>
 800eb98:	f06f 0305 	mvn.w	r3, #5
 800eb9c:	e01b      	b.n	800ebd6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d013      	beq.n	800ebcc <pbuf_copy+0x174>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	895a      	ldrh	r2, [r3, #10]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	891b      	ldrh	r3, [r3, #8]
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d10d      	bne.n	800ebcc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d009      	beq.n	800ebcc <pbuf_copy+0x174>
 800ebb8:	4b09      	ldr	r3, [pc, #36]	; (800ebe0 <pbuf_copy+0x188>)
 800ebba:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800ebbe:	490e      	ldr	r1, [pc, #56]	; (800ebf8 <pbuf_copy+0x1a0>)
 800ebc0:	4809      	ldr	r0, [pc, #36]	; (800ebe8 <pbuf_copy+0x190>)
 800ebc2:	f007 fafb 	bl	80161bc <iprintf>
 800ebc6:	f06f 0305 	mvn.w	r3, #5
 800ebca:	e004      	b.n	800ebd6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f47f af61 	bne.w	800ea96 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ebd4:	2300      	movs	r3, #0
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3718      	adds	r7, #24
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
 800ebde:	bf00      	nop
 800ebe0:	08019134 	.word	0x08019134
 800ebe4:	080193dc 	.word	0x080193dc
 800ebe8:	08019194 	.word	0x08019194
 800ebec:	0801940c 	.word	0x0801940c
 800ebf0:	08019424 	.word	0x08019424
 800ebf4:	08019440 	.word	0x08019440
 800ebf8:	08019450 	.word	0x08019450

0800ebfc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b088      	sub	sp, #32
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	4611      	mov	r1, r2
 800ec08:	461a      	mov	r2, r3
 800ec0a:	460b      	mov	r3, r1
 800ec0c:	80fb      	strh	r3, [r7, #6]
 800ec0e:	4613      	mov	r3, r2
 800ec10:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ec12:	2300      	movs	r3, #0
 800ec14:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ec16:	2300      	movs	r3, #0
 800ec18:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d108      	bne.n	800ec32 <pbuf_copy_partial+0x36>
 800ec20:	4b2b      	ldr	r3, [pc, #172]	; (800ecd0 <pbuf_copy_partial+0xd4>)
 800ec22:	f240 420a 	movw	r2, #1034	; 0x40a
 800ec26:	492b      	ldr	r1, [pc, #172]	; (800ecd4 <pbuf_copy_partial+0xd8>)
 800ec28:	482b      	ldr	r0, [pc, #172]	; (800ecd8 <pbuf_copy_partial+0xdc>)
 800ec2a:	f007 fac7 	bl	80161bc <iprintf>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	e04a      	b.n	800ecc8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d108      	bne.n	800ec4a <pbuf_copy_partial+0x4e>
 800ec38:	4b25      	ldr	r3, [pc, #148]	; (800ecd0 <pbuf_copy_partial+0xd4>)
 800ec3a:	f240 420b 	movw	r2, #1035	; 0x40b
 800ec3e:	4927      	ldr	r1, [pc, #156]	; (800ecdc <pbuf_copy_partial+0xe0>)
 800ec40:	4825      	ldr	r0, [pc, #148]	; (800ecd8 <pbuf_copy_partial+0xdc>)
 800ec42:	f007 fabb 	bl	80161bc <iprintf>
 800ec46:	2300      	movs	r3, #0
 800ec48:	e03e      	b.n	800ecc8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	61fb      	str	r3, [r7, #28]
 800ec4e:	e034      	b.n	800ecba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ec50:	88bb      	ldrh	r3, [r7, #4]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d00a      	beq.n	800ec6c <pbuf_copy_partial+0x70>
 800ec56:	69fb      	ldr	r3, [r7, #28]
 800ec58:	895b      	ldrh	r3, [r3, #10]
 800ec5a:	88ba      	ldrh	r2, [r7, #4]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d305      	bcc.n	800ec6c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ec60:	69fb      	ldr	r3, [r7, #28]
 800ec62:	895b      	ldrh	r3, [r3, #10]
 800ec64:	88ba      	ldrh	r2, [r7, #4]
 800ec66:	1ad3      	subs	r3, r2, r3
 800ec68:	80bb      	strh	r3, [r7, #4]
 800ec6a:	e023      	b.n	800ecb4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	895a      	ldrh	r2, [r3, #10]
 800ec70:	88bb      	ldrh	r3, [r7, #4]
 800ec72:	1ad3      	subs	r3, r2, r3
 800ec74:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ec76:	8b3a      	ldrh	r2, [r7, #24]
 800ec78:	88fb      	ldrh	r3, [r7, #6]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d901      	bls.n	800ec82 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ec7e:	88fb      	ldrh	r3, [r7, #6]
 800ec80:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ec82:	8b7b      	ldrh	r3, [r7, #26]
 800ec84:	68ba      	ldr	r2, [r7, #8]
 800ec86:	18d0      	adds	r0, r2, r3
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	685a      	ldr	r2, [r3, #4]
 800ec8c:	88bb      	ldrh	r3, [r7, #4]
 800ec8e:	4413      	add	r3, r2
 800ec90:	8b3a      	ldrh	r2, [r7, #24]
 800ec92:	4619      	mov	r1, r3
 800ec94:	f007 fa51 	bl	801613a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ec98:	8afa      	ldrh	r2, [r7, #22]
 800ec9a:	8b3b      	ldrh	r3, [r7, #24]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800eca0:	8b7a      	ldrh	r2, [r7, #26]
 800eca2:	8b3b      	ldrh	r3, [r7, #24]
 800eca4:	4413      	add	r3, r2
 800eca6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800eca8:	88fa      	ldrh	r2, [r7, #6]
 800ecaa:	8b3b      	ldrh	r3, [r7, #24]
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	61fb      	str	r3, [r7, #28]
 800ecba:	88fb      	ldrh	r3, [r7, #6]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d002      	beq.n	800ecc6 <pbuf_copy_partial+0xca>
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1c4      	bne.n	800ec50 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ecc6:	8afb      	ldrh	r3, [r7, #22]
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3720      	adds	r7, #32
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	08019134 	.word	0x08019134
 800ecd4:	0801947c 	.word	0x0801947c
 800ecd8:	08019194 	.word	0x08019194
 800ecdc:	0801949c 	.word	0x0801949c

0800ece0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b084      	sub	sp, #16
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	4603      	mov	r3, r0
 800ece8:	603a      	str	r2, [r7, #0]
 800ecea:	71fb      	strb	r3, [r7, #7]
 800ecec:	460b      	mov	r3, r1
 800ecee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	8919      	ldrh	r1, [r3, #8]
 800ecf4:	88ba      	ldrh	r2, [r7, #4]
 800ecf6:	79fb      	ldrb	r3, [r7, #7]
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7ff fa65 	bl	800e1c8 <pbuf_alloc>
 800ecfe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d101      	bne.n	800ed0a <pbuf_clone+0x2a>
    return NULL;
 800ed06:	2300      	movs	r3, #0
 800ed08:	e011      	b.n	800ed2e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ed0a:	6839      	ldr	r1, [r7, #0]
 800ed0c:	68f8      	ldr	r0, [r7, #12]
 800ed0e:	f7ff fea3 	bl	800ea58 <pbuf_copy>
 800ed12:	4603      	mov	r3, r0
 800ed14:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ed16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d006      	beq.n	800ed2c <pbuf_clone+0x4c>
 800ed1e:	4b06      	ldr	r3, [pc, #24]	; (800ed38 <pbuf_clone+0x58>)
 800ed20:	f240 5224 	movw	r2, #1316	; 0x524
 800ed24:	4905      	ldr	r1, [pc, #20]	; (800ed3c <pbuf_clone+0x5c>)
 800ed26:	4806      	ldr	r0, [pc, #24]	; (800ed40 <pbuf_clone+0x60>)
 800ed28:	f007 fa48 	bl	80161bc <iprintf>
  return q;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3710      	adds	r7, #16
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	08019134 	.word	0x08019134
 800ed3c:	080195a8 	.word	0x080195a8
 800ed40:	08019194 	.word	0x08019194

0800ed44 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ed48:	f007 fa50 	bl	80161ec <rand>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ed5a:	b29a      	uxth	r2, r3
 800ed5c:	4b01      	ldr	r3, [pc, #4]	; (800ed64 <tcp_init+0x20>)
 800ed5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ed60:	bf00      	nop
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	20000010 	.word	0x20000010

0800ed68 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	7d1b      	ldrb	r3, [r3, #20]
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	d105      	bne.n	800ed84 <tcp_free+0x1c>
 800ed78:	4b06      	ldr	r3, [pc, #24]	; (800ed94 <tcp_free+0x2c>)
 800ed7a:	22d4      	movs	r2, #212	; 0xd4
 800ed7c:	4906      	ldr	r1, [pc, #24]	; (800ed98 <tcp_free+0x30>)
 800ed7e:	4807      	ldr	r0, [pc, #28]	; (800ed9c <tcp_free+0x34>)
 800ed80:	f007 fa1c 	bl	80161bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ed84:	6879      	ldr	r1, [r7, #4]
 800ed86:	2001      	movs	r0, #1
 800ed88:	f7fe fe5e 	bl	800da48 <memp_free>
}
 800ed8c:	bf00      	nop
 800ed8e:	3708      	adds	r7, #8
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	08019634 	.word	0x08019634
 800ed98:	08019664 	.word	0x08019664
 800ed9c:	08019678 	.word	0x08019678

0800eda0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	7d1b      	ldrb	r3, [r3, #20]
 800edac:	2b01      	cmp	r3, #1
 800edae:	d105      	bne.n	800edbc <tcp_free_listen+0x1c>
 800edb0:	4b06      	ldr	r3, [pc, #24]	; (800edcc <tcp_free_listen+0x2c>)
 800edb2:	22df      	movs	r2, #223	; 0xdf
 800edb4:	4906      	ldr	r1, [pc, #24]	; (800edd0 <tcp_free_listen+0x30>)
 800edb6:	4807      	ldr	r0, [pc, #28]	; (800edd4 <tcp_free_listen+0x34>)
 800edb8:	f007 fa00 	bl	80161bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800edbc:	6879      	ldr	r1, [r7, #4]
 800edbe:	2002      	movs	r0, #2
 800edc0:	f7fe fe42 	bl	800da48 <memp_free>
}
 800edc4:	bf00      	nop
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	08019634 	.word	0x08019634
 800edd0:	080196a0 	.word	0x080196a0
 800edd4:	08019678 	.word	0x08019678

0800edd8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800eddc:	f001 f89c 	bl	800ff18 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ede0:	4b07      	ldr	r3, [pc, #28]	; (800ee00 <tcp_tmr+0x28>)
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	3301      	adds	r3, #1
 800ede6:	b2da      	uxtb	r2, r3
 800ede8:	4b05      	ldr	r3, [pc, #20]	; (800ee00 <tcp_tmr+0x28>)
 800edea:	701a      	strb	r2, [r3, #0]
 800edec:	4b04      	ldr	r3, [pc, #16]	; (800ee00 <tcp_tmr+0x28>)
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	f003 0301 	and.w	r3, r3, #1
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d001      	beq.n	800edfc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800edf8:	f000 fd50 	bl	800f89c <tcp_slowtmr>
  }
}
 800edfc:	bf00      	nop
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	200041d9 	.word	0x200041d9

0800ee04 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d105      	bne.n	800ee20 <tcp_remove_listener+0x1c>
 800ee14:	4b0d      	ldr	r3, [pc, #52]	; (800ee4c <tcp_remove_listener+0x48>)
 800ee16:	22ff      	movs	r2, #255	; 0xff
 800ee18:	490d      	ldr	r1, [pc, #52]	; (800ee50 <tcp_remove_listener+0x4c>)
 800ee1a:	480e      	ldr	r0, [pc, #56]	; (800ee54 <tcp_remove_listener+0x50>)
 800ee1c:	f007 f9ce 	bl	80161bc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	60fb      	str	r3, [r7, #12]
 800ee24:	e00a      	b.n	800ee3c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d102      	bne.n	800ee36 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2200      	movs	r2, #0
 800ee34:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	60fb      	str	r3, [r7, #12]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d1f1      	bne.n	800ee26 <tcp_remove_listener+0x22>
    }
  }
}
 800ee42:	bf00      	nop
 800ee44:	3710      	adds	r7, #16
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	08019634 	.word	0x08019634
 800ee50:	080196bc 	.word	0x080196bc
 800ee54:	08019678 	.word	0x08019678

0800ee58 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d106      	bne.n	800ee74 <tcp_listen_closed+0x1c>
 800ee66:	4b14      	ldr	r3, [pc, #80]	; (800eeb8 <tcp_listen_closed+0x60>)
 800ee68:	f240 1211 	movw	r2, #273	; 0x111
 800ee6c:	4913      	ldr	r1, [pc, #76]	; (800eebc <tcp_listen_closed+0x64>)
 800ee6e:	4814      	ldr	r0, [pc, #80]	; (800eec0 <tcp_listen_closed+0x68>)
 800ee70:	f007 f9a4 	bl	80161bc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	7d1b      	ldrb	r3, [r3, #20]
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d006      	beq.n	800ee8a <tcp_listen_closed+0x32>
 800ee7c:	4b0e      	ldr	r3, [pc, #56]	; (800eeb8 <tcp_listen_closed+0x60>)
 800ee7e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ee82:	4910      	ldr	r1, [pc, #64]	; (800eec4 <tcp_listen_closed+0x6c>)
 800ee84:	480e      	ldr	r0, [pc, #56]	; (800eec0 <tcp_listen_closed+0x68>)
 800ee86:	f007 f999 	bl	80161bc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	60fb      	str	r3, [r7, #12]
 800ee8e:	e00b      	b.n	800eea8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ee90:	4a0d      	ldr	r2, [pc, #52]	; (800eec8 <tcp_listen_closed+0x70>)
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	6879      	ldr	r1, [r7, #4]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7ff ffb1 	bl	800ee04 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	3301      	adds	r3, #1
 800eea6:	60fb      	str	r3, [r7, #12]
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2b03      	cmp	r3, #3
 800eeac:	d9f0      	bls.n	800ee90 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800eeae:	bf00      	nop
 800eeb0:	3710      	adds	r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
 800eeb6:	bf00      	nop
 800eeb8:	08019634 	.word	0x08019634
 800eebc:	080196e4 	.word	0x080196e4
 800eec0:	08019678 	.word	0x08019678
 800eec4:	080196f0 	.word	0x080196f0
 800eec8:	0801b064 	.word	0x0801b064

0800eecc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800eecc:	b5b0      	push	{r4, r5, r7, lr}
 800eece:	b088      	sub	sp, #32
 800eed0:	af04      	add	r7, sp, #16
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	460b      	mov	r3, r1
 800eed6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d106      	bne.n	800eeec <tcp_close_shutdown+0x20>
 800eede:	4b61      	ldr	r3, [pc, #388]	; (800f064 <tcp_close_shutdown+0x198>)
 800eee0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800eee4:	4960      	ldr	r1, [pc, #384]	; (800f068 <tcp_close_shutdown+0x19c>)
 800eee6:	4861      	ldr	r0, [pc, #388]	; (800f06c <tcp_close_shutdown+0x1a0>)
 800eee8:	f007 f968 	bl	80161bc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800eeec:	78fb      	ldrb	r3, [r7, #3]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d066      	beq.n	800efc0 <tcp_close_shutdown+0xf4>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	7d1b      	ldrb	r3, [r3, #20]
 800eef6:	2b04      	cmp	r3, #4
 800eef8:	d003      	beq.n	800ef02 <tcp_close_shutdown+0x36>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	7d1b      	ldrb	r3, [r3, #20]
 800eefe:	2b07      	cmp	r3, #7
 800ef00:	d15e      	bne.n	800efc0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d104      	bne.n	800ef14 <tcp_close_shutdown+0x48>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef0e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ef12:	d055      	beq.n	800efc0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	8b5b      	ldrh	r3, [r3, #26]
 800ef18:	f003 0310 	and.w	r3, r3, #16
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d106      	bne.n	800ef2e <tcp_close_shutdown+0x62>
 800ef20:	4b50      	ldr	r3, [pc, #320]	; (800f064 <tcp_close_shutdown+0x198>)
 800ef22:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ef26:	4952      	ldr	r1, [pc, #328]	; (800f070 <tcp_close_shutdown+0x1a4>)
 800ef28:	4850      	ldr	r0, [pc, #320]	; (800f06c <tcp_close_shutdown+0x1a0>)
 800ef2a:	f007 f947 	bl	80161bc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ef36:	687d      	ldr	r5, [r7, #4]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	3304      	adds	r3, #4
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	8ad2      	ldrh	r2, [r2, #22]
 800ef40:	6879      	ldr	r1, [r7, #4]
 800ef42:	8b09      	ldrh	r1, [r1, #24]
 800ef44:	9102      	str	r1, [sp, #8]
 800ef46:	9201      	str	r2, [sp, #4]
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	462b      	mov	r3, r5
 800ef4c:	4622      	mov	r2, r4
 800ef4e:	4601      	mov	r1, r0
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f005 fdc9 	bl	8014ae8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f001 fb8c 	bl	8010674 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ef5c:	4b45      	ldr	r3, [pc, #276]	; (800f074 <tcp_close_shutdown+0x1a8>)
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d105      	bne.n	800ef72 <tcp_close_shutdown+0xa6>
 800ef66:	4b43      	ldr	r3, [pc, #268]	; (800f074 <tcp_close_shutdown+0x1a8>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	68db      	ldr	r3, [r3, #12]
 800ef6c:	4a41      	ldr	r2, [pc, #260]	; (800f074 <tcp_close_shutdown+0x1a8>)
 800ef6e:	6013      	str	r3, [r2, #0]
 800ef70:	e013      	b.n	800ef9a <tcp_close_shutdown+0xce>
 800ef72:	4b40      	ldr	r3, [pc, #256]	; (800f074 <tcp_close_shutdown+0x1a8>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	60fb      	str	r3, [r7, #12]
 800ef78:	e00c      	b.n	800ef94 <tcp_close_shutdown+0xc8>
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	68da      	ldr	r2, [r3, #12]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d104      	bne.n	800ef8e <tcp_close_shutdown+0xc2>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	68da      	ldr	r2, [r3, #12]
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	60da      	str	r2, [r3, #12]
 800ef8c:	e005      	b.n	800ef9a <tcp_close_shutdown+0xce>
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	68db      	ldr	r3, [r3, #12]
 800ef92:	60fb      	str	r3, [r7, #12]
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d1ef      	bne.n	800ef7a <tcp_close_shutdown+0xae>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	60da      	str	r2, [r3, #12]
 800efa0:	4b35      	ldr	r3, [pc, #212]	; (800f078 <tcp_close_shutdown+0x1ac>)
 800efa2:	2201      	movs	r2, #1
 800efa4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800efa6:	4b35      	ldr	r3, [pc, #212]	; (800f07c <tcp_close_shutdown+0x1b0>)
 800efa8:	681a      	ldr	r2, [r3, #0]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	429a      	cmp	r2, r3
 800efae:	d102      	bne.n	800efb6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800efb0:	f004 f81e 	bl	8012ff0 <tcp_trigger_input_pcb_close>
 800efb4:	e002      	b.n	800efbc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f7ff fed6 	bl	800ed68 <tcp_free>
      }
      return ERR_OK;
 800efbc:	2300      	movs	r3, #0
 800efbe:	e04d      	b.n	800f05c <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	7d1b      	ldrb	r3, [r3, #20]
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d02d      	beq.n	800f024 <tcp_close_shutdown+0x158>
 800efc8:	2b02      	cmp	r3, #2
 800efca:	d036      	beq.n	800f03a <tcp_close_shutdown+0x16e>
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d13f      	bne.n	800f050 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	8adb      	ldrh	r3, [r3, #22]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d021      	beq.n	800f01c <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800efd8:	4b29      	ldr	r3, [pc, #164]	; (800f080 <tcp_close_shutdown+0x1b4>)
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d105      	bne.n	800efee <tcp_close_shutdown+0x122>
 800efe2:	4b27      	ldr	r3, [pc, #156]	; (800f080 <tcp_close_shutdown+0x1b4>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	4a25      	ldr	r2, [pc, #148]	; (800f080 <tcp_close_shutdown+0x1b4>)
 800efea:	6013      	str	r3, [r2, #0]
 800efec:	e013      	b.n	800f016 <tcp_close_shutdown+0x14a>
 800efee:	4b24      	ldr	r3, [pc, #144]	; (800f080 <tcp_close_shutdown+0x1b4>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	60bb      	str	r3, [r7, #8]
 800eff4:	e00c      	b.n	800f010 <tcp_close_shutdown+0x144>
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	68da      	ldr	r2, [r3, #12]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	429a      	cmp	r2, r3
 800effe:	d104      	bne.n	800f00a <tcp_close_shutdown+0x13e>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	68da      	ldr	r2, [r3, #12]
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	60da      	str	r2, [r3, #12]
 800f008:	e005      	b.n	800f016 <tcp_close_shutdown+0x14a>
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	60bb      	str	r3, [r7, #8]
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d1ef      	bne.n	800eff6 <tcp_close_shutdown+0x12a>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2200      	movs	r2, #0
 800f01a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f7ff fea3 	bl	800ed68 <tcp_free>
      break;
 800f022:	e01a      	b.n	800f05a <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f7ff ff17 	bl	800ee58 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f02a:	6879      	ldr	r1, [r7, #4]
 800f02c:	4815      	ldr	r0, [pc, #84]	; (800f084 <tcp_close_shutdown+0x1b8>)
 800f02e:	f001 fb71 	bl	8010714 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f7ff feb4 	bl	800eda0 <tcp_free_listen>
      break;
 800f038:	e00f      	b.n	800f05a <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f03a:	6879      	ldr	r1, [r7, #4]
 800f03c:	480d      	ldr	r0, [pc, #52]	; (800f074 <tcp_close_shutdown+0x1a8>)
 800f03e:	f001 fb69 	bl	8010714 <tcp_pcb_remove>
 800f042:	4b0d      	ldr	r3, [pc, #52]	; (800f078 <tcp_close_shutdown+0x1ac>)
 800f044:	2201      	movs	r2, #1
 800f046:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f7ff fe8d 	bl	800ed68 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f04e:	e004      	b.n	800f05a <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f000 f819 	bl	800f088 <tcp_close_shutdown_fin>
 800f056:	4603      	mov	r3, r0
 800f058:	e000      	b.n	800f05c <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800f05a:	2300      	movs	r3, #0
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3710      	adds	r7, #16
 800f060:	46bd      	mov	sp, r7
 800f062:	bdb0      	pop	{r4, r5, r7, pc}
 800f064:	08019634 	.word	0x08019634
 800f068:	08019708 	.word	0x08019708
 800f06c:	08019678 	.word	0x08019678
 800f070:	08019728 	.word	0x08019728
 800f074:	2000e4ec 	.word	0x2000e4ec
 800f078:	2000e4e8 	.word	0x2000e4e8
 800f07c:	2000e500 	.word	0x2000e500
 800f080:	2000e4f8 	.word	0x2000e4f8
 800f084:	2000e4f4 	.word	0x2000e4f4

0800f088 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d106      	bne.n	800f0a4 <tcp_close_shutdown_fin+0x1c>
 800f096:	4b2c      	ldr	r3, [pc, #176]	; (800f148 <tcp_close_shutdown_fin+0xc0>)
 800f098:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f09c:	492b      	ldr	r1, [pc, #172]	; (800f14c <tcp_close_shutdown_fin+0xc4>)
 800f09e:	482c      	ldr	r0, [pc, #176]	; (800f150 <tcp_close_shutdown_fin+0xc8>)
 800f0a0:	f007 f88c 	bl	80161bc <iprintf>

  switch (pcb->state) {
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	7d1b      	ldrb	r3, [r3, #20]
 800f0a8:	2b04      	cmp	r3, #4
 800f0aa:	d010      	beq.n	800f0ce <tcp_close_shutdown_fin+0x46>
 800f0ac:	2b07      	cmp	r3, #7
 800f0ae:	d01b      	beq.n	800f0e8 <tcp_close_shutdown_fin+0x60>
 800f0b0:	2b03      	cmp	r3, #3
 800f0b2:	d126      	bne.n	800f102 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f004 fe0b 	bl	8013cd0 <tcp_send_fin>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f0be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d11f      	bne.n	800f106 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2205      	movs	r2, #5
 800f0ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f0cc:	e01b      	b.n	800f106 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f004 fdfe 	bl	8013cd0 <tcp_send_fin>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f0d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d114      	bne.n	800f10a <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2205      	movs	r2, #5
 800f0e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f0e6:	e010      	b.n	800f10a <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f004 fdf1 	bl	8013cd0 <tcp_send_fin>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f0f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d109      	bne.n	800f10e <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2209      	movs	r2, #9
 800f0fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f100:	e005      	b.n	800f10e <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f102:	2300      	movs	r3, #0
 800f104:	e01c      	b.n	800f140 <tcp_close_shutdown_fin+0xb8>
      break;
 800f106:	bf00      	nop
 800f108:	e002      	b.n	800f110 <tcp_close_shutdown_fin+0x88>
      break;
 800f10a:	bf00      	nop
 800f10c:	e000      	b.n	800f110 <tcp_close_shutdown_fin+0x88>
      break;
 800f10e:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d103      	bne.n	800f120 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f004 ff19 	bl	8013f50 <tcp_output>
 800f11e:	e00d      	b.n	800f13c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800f120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f128:	d108      	bne.n	800f13c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	8b5b      	ldrh	r3, [r3, #26]
 800f12e:	f043 0308 	orr.w	r3, r3, #8
 800f132:	b29a      	uxth	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f138:	2300      	movs	r3, #0
 800f13a:	e001      	b.n	800f140 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800f13c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f140:	4618      	mov	r0, r3
 800f142:	3710      	adds	r7, #16
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}
 800f148:	08019634 	.word	0x08019634
 800f14c:	080196e4 	.word	0x080196e4
 800f150:	08019678 	.word	0x08019678

0800f154 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d109      	bne.n	800f176 <tcp_close+0x22>
 800f162:	4b0f      	ldr	r3, [pc, #60]	; (800f1a0 <tcp_close+0x4c>)
 800f164:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f168:	490e      	ldr	r1, [pc, #56]	; (800f1a4 <tcp_close+0x50>)
 800f16a:	480f      	ldr	r0, [pc, #60]	; (800f1a8 <tcp_close+0x54>)
 800f16c:	f007 f826 	bl	80161bc <iprintf>
 800f170:	f06f 030f 	mvn.w	r3, #15
 800f174:	e00f      	b.n	800f196 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	7d1b      	ldrb	r3, [r3, #20]
 800f17a:	2b01      	cmp	r3, #1
 800f17c:	d006      	beq.n	800f18c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	8b5b      	ldrh	r3, [r3, #26]
 800f182:	f043 0310 	orr.w	r3, r3, #16
 800f186:	b29a      	uxth	r2, r3
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f18c:	2101      	movs	r1, #1
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f7ff fe9c 	bl	800eecc <tcp_close_shutdown>
 800f194:	4603      	mov	r3, r0
}
 800f196:	4618      	mov	r0, r3
 800f198:	3708      	adds	r7, #8
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	08019634 	.word	0x08019634
 800f1a4:	08019744 	.word	0x08019744
 800f1a8:	08019678 	.word	0x08019678

0800f1ac <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d109      	bne.n	800f1d2 <tcp_shutdown+0x26>
 800f1be:	4b25      	ldr	r3, [pc, #148]	; (800f254 <tcp_shutdown+0xa8>)
 800f1c0:	f240 2207 	movw	r2, #519	; 0x207
 800f1c4:	4924      	ldr	r1, [pc, #144]	; (800f258 <tcp_shutdown+0xac>)
 800f1c6:	4825      	ldr	r0, [pc, #148]	; (800f25c <tcp_shutdown+0xb0>)
 800f1c8:	f006 fff8 	bl	80161bc <iprintf>
 800f1cc:	f06f 030f 	mvn.w	r3, #15
 800f1d0:	e03c      	b.n	800f24c <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	7d1b      	ldrb	r3, [r3, #20]
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	d102      	bne.n	800f1e0 <tcp_shutdown+0x34>
    return ERR_CONN;
 800f1da:	f06f 030a 	mvn.w	r3, #10
 800f1de:	e035      	b.n	800f24c <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d01b      	beq.n	800f21e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	8b5b      	ldrh	r3, [r3, #26]
 800f1ea:	f043 0310 	orr.w	r3, r3, #16
 800f1ee:	b29a      	uxth	r2, r3
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d005      	beq.n	800f206 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f1fa:	2101      	movs	r1, #1
 800f1fc:	68f8      	ldr	r0, [r7, #12]
 800f1fe:	f7ff fe65 	bl	800eecc <tcp_close_shutdown>
 800f202:	4603      	mov	r3, r0
 800f204:	e022      	b.n	800f24c <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d007      	beq.n	800f21e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f212:	4618      	mov	r0, r3
 800f214:	f7ff faec 	bl	800e7f0 <pbuf_free>
      pcb->refused_data = NULL;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2200      	movs	r2, #0
 800f21c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d012      	beq.n	800f24a <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	7d1b      	ldrb	r3, [r3, #20]
 800f228:	2b03      	cmp	r3, #3
 800f22a:	db0b      	blt.n	800f244 <tcp_shutdown+0x98>
 800f22c:	2b04      	cmp	r3, #4
 800f22e:	dd01      	ble.n	800f234 <tcp_shutdown+0x88>
 800f230:	2b07      	cmp	r3, #7
 800f232:	d107      	bne.n	800f244 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	b2db      	uxtb	r3, r3
 800f238:	4619      	mov	r1, r3
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f7ff fe46 	bl	800eecc <tcp_close_shutdown>
 800f240:	4603      	mov	r3, r0
 800f242:	e003      	b.n	800f24c <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f244:	f06f 030a 	mvn.w	r3, #10
 800f248:	e000      	b.n	800f24c <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800f24a:	2300      	movs	r3, #0
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3710      	adds	r7, #16
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	08019634 	.word	0x08019634
 800f258:	0801975c 	.word	0x0801975c
 800f25c:	08019678 	.word	0x08019678

0800f260 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b08e      	sub	sp, #56	; 0x38
 800f264:	af04      	add	r7, sp, #16
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d107      	bne.n	800f280 <tcp_abandon+0x20>
 800f270:	4b52      	ldr	r3, [pc, #328]	; (800f3bc <tcp_abandon+0x15c>)
 800f272:	f240 223d 	movw	r2, #573	; 0x23d
 800f276:	4952      	ldr	r1, [pc, #328]	; (800f3c0 <tcp_abandon+0x160>)
 800f278:	4852      	ldr	r0, [pc, #328]	; (800f3c4 <tcp_abandon+0x164>)
 800f27a:	f006 ff9f 	bl	80161bc <iprintf>
 800f27e:	e099      	b.n	800f3b4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	7d1b      	ldrb	r3, [r3, #20]
 800f284:	2b01      	cmp	r3, #1
 800f286:	d106      	bne.n	800f296 <tcp_abandon+0x36>
 800f288:	4b4c      	ldr	r3, [pc, #304]	; (800f3bc <tcp_abandon+0x15c>)
 800f28a:	f240 2241 	movw	r2, #577	; 0x241
 800f28e:	494e      	ldr	r1, [pc, #312]	; (800f3c8 <tcp_abandon+0x168>)
 800f290:	484c      	ldr	r0, [pc, #304]	; (800f3c4 <tcp_abandon+0x164>)
 800f292:	f006 ff93 	bl	80161bc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	7d1b      	ldrb	r3, [r3, #20]
 800f29a:	2b0a      	cmp	r3, #10
 800f29c:	d107      	bne.n	800f2ae <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f29e:	6879      	ldr	r1, [r7, #4]
 800f2a0:	484a      	ldr	r0, [pc, #296]	; (800f3cc <tcp_abandon+0x16c>)
 800f2a2:	f001 fa37 	bl	8010714 <tcp_pcb_remove>
    tcp_free(pcb);
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f7ff fd5e 	bl	800ed68 <tcp_free>
 800f2ac:	e082      	b.n	800f3b4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2ba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2c8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	691b      	ldr	r3, [r3, #16]
 800f2ce:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	7d1b      	ldrb	r3, [r3, #20]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d126      	bne.n	800f326 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	8adb      	ldrh	r3, [r3, #22]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d02e      	beq.n	800f33e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f2e0:	4b3b      	ldr	r3, [pc, #236]	; (800f3d0 <tcp_abandon+0x170>)
 800f2e2:	681a      	ldr	r2, [r3, #0]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d105      	bne.n	800f2f6 <tcp_abandon+0x96>
 800f2ea:	4b39      	ldr	r3, [pc, #228]	; (800f3d0 <tcp_abandon+0x170>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	4a37      	ldr	r2, [pc, #220]	; (800f3d0 <tcp_abandon+0x170>)
 800f2f2:	6013      	str	r3, [r2, #0]
 800f2f4:	e013      	b.n	800f31e <tcp_abandon+0xbe>
 800f2f6:	4b36      	ldr	r3, [pc, #216]	; (800f3d0 <tcp_abandon+0x170>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	61fb      	str	r3, [r7, #28]
 800f2fc:	e00c      	b.n	800f318 <tcp_abandon+0xb8>
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	68da      	ldr	r2, [r3, #12]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	429a      	cmp	r2, r3
 800f306:	d104      	bne.n	800f312 <tcp_abandon+0xb2>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	68da      	ldr	r2, [r3, #12]
 800f30c:	69fb      	ldr	r3, [r7, #28]
 800f30e:	60da      	str	r2, [r3, #12]
 800f310:	e005      	b.n	800f31e <tcp_abandon+0xbe>
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	68db      	ldr	r3, [r3, #12]
 800f316:	61fb      	str	r3, [r7, #28]
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d1ef      	bne.n	800f2fe <tcp_abandon+0x9e>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2200      	movs	r2, #0
 800f322:	60da      	str	r2, [r3, #12]
 800f324:	e00b      	b.n	800f33e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	8adb      	ldrh	r3, [r3, #22]
 800f32e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f330:	6879      	ldr	r1, [r7, #4]
 800f332:	4828      	ldr	r0, [pc, #160]	; (800f3d4 <tcp_abandon+0x174>)
 800f334:	f001 f9ee 	bl	8010714 <tcp_pcb_remove>
 800f338:	4b27      	ldr	r3, [pc, #156]	; (800f3d8 <tcp_abandon+0x178>)
 800f33a:	2201      	movs	r2, #1
 800f33c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f342:	2b00      	cmp	r3, #0
 800f344:	d004      	beq.n	800f350 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f34a:	4618      	mov	r0, r3
 800f34c:	f000 fec4 	bl	80100d8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f354:	2b00      	cmp	r3, #0
 800f356:	d004      	beq.n	800f362 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f35c:	4618      	mov	r0, r3
 800f35e:	f000 febb 	bl	80100d8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f366:	2b00      	cmp	r3, #0
 800f368:	d004      	beq.n	800f374 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f36e:	4618      	mov	r0, r3
 800f370:	f000 feb2 	bl	80100d8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f376:	2b00      	cmp	r3, #0
 800f378:	d00e      	beq.n	800f398 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f37a:	6879      	ldr	r1, [r7, #4]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	3304      	adds	r3, #4
 800f380:	687a      	ldr	r2, [r7, #4]
 800f382:	8b12      	ldrh	r2, [r2, #24]
 800f384:	9202      	str	r2, [sp, #8]
 800f386:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f388:	9201      	str	r2, [sp, #4]
 800f38a:	9300      	str	r3, [sp, #0]
 800f38c:	460b      	mov	r3, r1
 800f38e:	697a      	ldr	r2, [r7, #20]
 800f390:	69b9      	ldr	r1, [r7, #24]
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f005 fba8 	bl	8014ae8 <tcp_rst>
    }
    last_state = pcb->state;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	7d1b      	ldrb	r3, [r3, #20]
 800f39c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7ff fce2 	bl	800ed68 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d004      	beq.n	800f3b4 <tcp_abandon+0x154>
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	f06f 010c 	mvn.w	r1, #12
 800f3b0:	68f8      	ldr	r0, [r7, #12]
 800f3b2:	4798      	blx	r3
  }
}
 800f3b4:	3728      	adds	r7, #40	; 0x28
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}
 800f3ba:	bf00      	nop
 800f3bc:	08019634 	.word	0x08019634
 800f3c0:	08019778 	.word	0x08019778
 800f3c4:	08019678 	.word	0x08019678
 800f3c8:	08019794 	.word	0x08019794
 800f3cc:	2000e4fc 	.word	0x2000e4fc
 800f3d0:	2000e4f8 	.word	0x2000e4f8
 800f3d4:	2000e4ec 	.word	0x2000e4ec
 800f3d8:	2000e4e8 	.word	0x2000e4e8

0800f3dc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f3e4:	2101      	movs	r1, #1
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f7ff ff3a 	bl	800f260 <tcp_abandon>
}
 800f3ec:	bf00      	nop
 800f3ee:	3708      	adds	r7, #8
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b088      	sub	sp, #32
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	60f8      	str	r0, [r7, #12]
 800f3fc:	60b9      	str	r1, [r7, #8]
 800f3fe:	4613      	mov	r3, r2
 800f400:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f402:	2304      	movs	r3, #4
 800f404:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d101      	bne.n	800f410 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f40c:	4b3e      	ldr	r3, [pc, #248]	; (800f508 <tcp_bind+0x114>)
 800f40e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d109      	bne.n	800f42a <tcp_bind+0x36>
 800f416:	4b3d      	ldr	r3, [pc, #244]	; (800f50c <tcp_bind+0x118>)
 800f418:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f41c:	493c      	ldr	r1, [pc, #240]	; (800f510 <tcp_bind+0x11c>)
 800f41e:	483d      	ldr	r0, [pc, #244]	; (800f514 <tcp_bind+0x120>)
 800f420:	f006 fecc 	bl	80161bc <iprintf>
 800f424:	f06f 030f 	mvn.w	r3, #15
 800f428:	e06a      	b.n	800f500 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	7d1b      	ldrb	r3, [r3, #20]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d009      	beq.n	800f446 <tcp_bind+0x52>
 800f432:	4b36      	ldr	r3, [pc, #216]	; (800f50c <tcp_bind+0x118>)
 800f434:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f438:	4937      	ldr	r1, [pc, #220]	; (800f518 <tcp_bind+0x124>)
 800f43a:	4836      	ldr	r0, [pc, #216]	; (800f514 <tcp_bind+0x120>)
 800f43c:	f006 febe 	bl	80161bc <iprintf>
 800f440:	f06f 0305 	mvn.w	r3, #5
 800f444:	e05c      	b.n	800f500 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f446:	88fb      	ldrh	r3, [r7, #6]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d109      	bne.n	800f460 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f44c:	f000 f9e0 	bl	800f810 <tcp_new_port>
 800f450:	4603      	mov	r3, r0
 800f452:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f454:	88fb      	ldrh	r3, [r7, #6]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d135      	bne.n	800f4c6 <tcp_bind+0xd2>
      return ERR_BUF;
 800f45a:	f06f 0301 	mvn.w	r3, #1
 800f45e:	e04f      	b.n	800f500 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f460:	2300      	movs	r3, #0
 800f462:	61fb      	str	r3, [r7, #28]
 800f464:	e02b      	b.n	800f4be <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f466:	4a2d      	ldr	r2, [pc, #180]	; (800f51c <tcp_bind+0x128>)
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	61bb      	str	r3, [r7, #24]
 800f472:	e01e      	b.n	800f4b2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f474:	69bb      	ldr	r3, [r7, #24]
 800f476:	8adb      	ldrh	r3, [r3, #22]
 800f478:	88fa      	ldrh	r2, [r7, #6]
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d116      	bne.n	800f4ac <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f47e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f480:	2b00      	cmp	r3, #0
 800f482:	d010      	beq.n	800f4a6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f484:	69bb      	ldr	r3, [r7, #24]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d00c      	beq.n	800f4a6 <tcp_bind+0xb2>
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d009      	beq.n	800f4a6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d005      	beq.n	800f4a6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	681a      	ldr	r2, [r3, #0]
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d102      	bne.n	800f4ac <tcp_bind+0xb8>
              return ERR_USE;
 800f4a6:	f06f 0307 	mvn.w	r3, #7
 800f4aa:	e029      	b.n	800f500 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f4ac:	69bb      	ldr	r3, [r7, #24]
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	61bb      	str	r3, [r7, #24]
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d1dd      	bne.n	800f474 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	3301      	adds	r3, #1
 800f4bc:	61fb      	str	r3, [r7, #28]
 800f4be:	69fa      	ldr	r2, [r7, #28]
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	dbcf      	blt.n	800f466 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d00c      	beq.n	800f4e6 <tcp_bind+0xf2>
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d008      	beq.n	800f4e6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d002      	beq.n	800f4e0 <tcp_bind+0xec>
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	e000      	b.n	800f4e2 <tcp_bind+0xee>
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	68fa      	ldr	r2, [r7, #12]
 800f4e4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	88fa      	ldrh	r2, [r7, #6]
 800f4ea:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f4ec:	4b0c      	ldr	r3, [pc, #48]	; (800f520 <tcp_bind+0x12c>)
 800f4ee:	681a      	ldr	r2, [r3, #0]
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	60da      	str	r2, [r3, #12]
 800f4f4:	4a0a      	ldr	r2, [pc, #40]	; (800f520 <tcp_bind+0x12c>)
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	6013      	str	r3, [r2, #0]
 800f4fa:	f005 fcb9 	bl	8014e70 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f4fe:	2300      	movs	r3, #0
}
 800f500:	4618      	mov	r0, r3
 800f502:	3720      	adds	r7, #32
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}
 800f508:	0801af78 	.word	0x0801af78
 800f50c:	08019634 	.word	0x08019634
 800f510:	080197c8 	.word	0x080197c8
 800f514:	08019678 	.word	0x08019678
 800f518:	080197e0 	.word	0x080197e0
 800f51c:	0801b064 	.word	0x0801b064
 800f520:	2000e4f8 	.word	0x2000e4f8

0800f524 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	60b9      	str	r1, [r7, #8]
 800f52e:	4613      	mov	r3, r2
 800f530:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d106      	bne.n	800f546 <tcp_accept_null+0x22>
 800f538:	4b07      	ldr	r3, [pc, #28]	; (800f558 <tcp_accept_null+0x34>)
 800f53a:	f240 320f 	movw	r2, #783	; 0x30f
 800f53e:	4907      	ldr	r1, [pc, #28]	; (800f55c <tcp_accept_null+0x38>)
 800f540:	4807      	ldr	r0, [pc, #28]	; (800f560 <tcp_accept_null+0x3c>)
 800f542:	f006 fe3b 	bl	80161bc <iprintf>

  tcp_abort(pcb);
 800f546:	68b8      	ldr	r0, [r7, #8]
 800f548:	f7ff ff48 	bl	800f3dc <tcp_abort>

  return ERR_ABRT;
 800f54c:	f06f 030c 	mvn.w	r3, #12
}
 800f550:	4618      	mov	r0, r3
 800f552:	3710      	adds	r7, #16
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}
 800f558:	08019634 	.word	0x08019634
 800f55c:	08019808 	.word	0x08019808
 800f560:	08019678 	.word	0x08019678

0800f564 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b088      	sub	sp, #32
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	460b      	mov	r3, r1
 800f56e:	607a      	str	r2, [r7, #4]
 800f570:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f572:	2300      	movs	r3, #0
 800f574:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d109      	bne.n	800f590 <tcp_listen_with_backlog_and_err+0x2c>
 800f57c:	4b47      	ldr	r3, [pc, #284]	; (800f69c <tcp_listen_with_backlog_and_err+0x138>)
 800f57e:	f240 3259 	movw	r2, #857	; 0x359
 800f582:	4947      	ldr	r1, [pc, #284]	; (800f6a0 <tcp_listen_with_backlog_and_err+0x13c>)
 800f584:	4847      	ldr	r0, [pc, #284]	; (800f6a4 <tcp_listen_with_backlog_and_err+0x140>)
 800f586:	f006 fe19 	bl	80161bc <iprintf>
 800f58a:	23f0      	movs	r3, #240	; 0xf0
 800f58c:	76fb      	strb	r3, [r7, #27]
 800f58e:	e079      	b.n	800f684 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	7d1b      	ldrb	r3, [r3, #20]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d009      	beq.n	800f5ac <tcp_listen_with_backlog_and_err+0x48>
 800f598:	4b40      	ldr	r3, [pc, #256]	; (800f69c <tcp_listen_with_backlog_and_err+0x138>)
 800f59a:	f240 325a 	movw	r2, #858	; 0x35a
 800f59e:	4942      	ldr	r1, [pc, #264]	; (800f6a8 <tcp_listen_with_backlog_and_err+0x144>)
 800f5a0:	4840      	ldr	r0, [pc, #256]	; (800f6a4 <tcp_listen_with_backlog_and_err+0x140>)
 800f5a2:	f006 fe0b 	bl	80161bc <iprintf>
 800f5a6:	23f1      	movs	r3, #241	; 0xf1
 800f5a8:	76fb      	strb	r3, [r7, #27]
 800f5aa:	e06b      	b.n	800f684 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	7d1b      	ldrb	r3, [r3, #20]
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d104      	bne.n	800f5be <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f5b8:	23f7      	movs	r3, #247	; 0xf7
 800f5ba:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f5bc:	e062      	b.n	800f684 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f5be:	2002      	movs	r0, #2
 800f5c0:	f7fe f9f0 	bl	800d9a4 <memp_malloc>
 800f5c4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d102      	bne.n	800f5d2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800f5cc:	23ff      	movs	r3, #255	; 0xff
 800f5ce:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f5d0:	e058      	b.n	800f684 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	691a      	ldr	r2, [r3, #16]
 800f5d6:	69fb      	ldr	r3, [r7, #28]
 800f5d8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	8ada      	ldrh	r2, [r3, #22]
 800f5de:	69fb      	ldr	r3, [r7, #28]
 800f5e0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	7d5a      	ldrb	r2, [r3, #21]
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	7a5a      	ldrb	r2, [r3, #9]
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	7ada      	ldrb	r2, [r3, #11]
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	7a9a      	ldrb	r2, [r3, #10]
 800f60a:	69fb      	ldr	r3, [r7, #28]
 800f60c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681a      	ldr	r2, [r3, #0]
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	8adb      	ldrh	r3, [r3, #22]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d021      	beq.n	800f662 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f61e:	4b23      	ldr	r3, [pc, #140]	; (800f6ac <tcp_listen_with_backlog_and_err+0x148>)
 800f620:	681a      	ldr	r2, [r3, #0]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	429a      	cmp	r2, r3
 800f626:	d105      	bne.n	800f634 <tcp_listen_with_backlog_and_err+0xd0>
 800f628:	4b20      	ldr	r3, [pc, #128]	; (800f6ac <tcp_listen_with_backlog_and_err+0x148>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	4a1f      	ldr	r2, [pc, #124]	; (800f6ac <tcp_listen_with_backlog_and_err+0x148>)
 800f630:	6013      	str	r3, [r2, #0]
 800f632:	e013      	b.n	800f65c <tcp_listen_with_backlog_and_err+0xf8>
 800f634:	4b1d      	ldr	r3, [pc, #116]	; (800f6ac <tcp_listen_with_backlog_and_err+0x148>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	617b      	str	r3, [r7, #20]
 800f63a:	e00c      	b.n	800f656 <tcp_listen_with_backlog_and_err+0xf2>
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	68da      	ldr	r2, [r3, #12]
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	429a      	cmp	r2, r3
 800f644:	d104      	bne.n	800f650 <tcp_listen_with_backlog_and_err+0xec>
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	68da      	ldr	r2, [r3, #12]
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	60da      	str	r2, [r3, #12]
 800f64e:	e005      	b.n	800f65c <tcp_listen_with_backlog_and_err+0xf8>
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	617b      	str	r3, [r7, #20]
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1ef      	bne.n	800f63c <tcp_listen_with_backlog_and_err+0xd8>
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2200      	movs	r2, #0
 800f660:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f662:	68f8      	ldr	r0, [r7, #12]
 800f664:	f7ff fb80 	bl	800ed68 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	4a11      	ldr	r2, [pc, #68]	; (800f6b0 <tcp_listen_with_backlog_and_err+0x14c>)
 800f66c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f66e:	4b11      	ldr	r3, [pc, #68]	; (800f6b4 <tcp_listen_with_backlog_and_err+0x150>)
 800f670:	681a      	ldr	r2, [r3, #0]
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	60da      	str	r2, [r3, #12]
 800f676:	4a0f      	ldr	r2, [pc, #60]	; (800f6b4 <tcp_listen_with_backlog_and_err+0x150>)
 800f678:	69fb      	ldr	r3, [r7, #28]
 800f67a:	6013      	str	r3, [r2, #0]
 800f67c:	f005 fbf8 	bl	8014e70 <tcp_timer_needed>
  res = ERR_OK;
 800f680:	2300      	movs	r3, #0
 800f682:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d002      	beq.n	800f690 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	7efa      	ldrb	r2, [r7, #27]
 800f68e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f690:	69fb      	ldr	r3, [r7, #28]
}
 800f692:	4618      	mov	r0, r3
 800f694:	3720      	adds	r7, #32
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	08019634 	.word	0x08019634
 800f6a0:	08019828 	.word	0x08019828
 800f6a4:	08019678 	.word	0x08019678
 800f6a8:	08019858 	.word	0x08019858
 800f6ac:	2000e4f8 	.word	0x2000e4f8
 800f6b0:	0800f525 	.word	0x0800f525
 800f6b4:	2000e4f4 	.word	0x2000e4f4

0800f6b8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d106      	bne.n	800f6d4 <tcp_update_rcv_ann_wnd+0x1c>
 800f6c6:	4b26      	ldr	r3, [pc, #152]	; (800f760 <tcp_update_rcv_ann_wnd+0xa8>)
 800f6c8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f6cc:	4925      	ldr	r1, [pc, #148]	; (800f764 <tcp_update_rcv_ann_wnd+0xac>)
 800f6ce:	4826      	ldr	r0, [pc, #152]	; (800f768 <tcp_update_rcv_ann_wnd+0xb0>)
 800f6d0:	f006 fd74 	bl	80161bc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d8:	687a      	ldr	r2, [r7, #4]
 800f6da:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f6dc:	4413      	add	r3, r2
 800f6de:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6e4:	687a      	ldr	r2, [r7, #4]
 800f6e6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f6e8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f6ec:	d802      	bhi.n	800f6f4 <tcp_update_rcv_ann_wnd+0x3c>
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f6f2:	e001      	b.n	800f6f8 <tcp_update_rcv_ann_wnd+0x40>
 800f6f4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f6f8:	4413      	add	r3, r2
 800f6fa:	68fa      	ldr	r2, [r7, #12]
 800f6fc:	1ad3      	subs	r3, r2, r3
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	db08      	blt.n	800f714 <tcp_update_rcv_ann_wnd+0x5c>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f70e:	68fa      	ldr	r2, [r7, #12]
 800f710:	1ad3      	subs	r3, r2, r3
 800f712:	e020      	b.n	800f756 <tcp_update_rcv_ann_wnd+0x9e>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f71c:	1ad3      	subs	r3, r2, r3
 800f71e:	2b00      	cmp	r3, #0
 800f720:	dd03      	ble.n	800f72a <tcp_update_rcv_ann_wnd+0x72>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f728:	e014      	b.n	800f754 <tcp_update_rcv_ann_wnd+0x9c>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f732:	1ad3      	subs	r3, r2, r3
 800f734:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f73c:	d306      	bcc.n	800f74c <tcp_update_rcv_ann_wnd+0x94>
 800f73e:	4b08      	ldr	r3, [pc, #32]	; (800f760 <tcp_update_rcv_ann_wnd+0xa8>)
 800f740:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f744:	4909      	ldr	r1, [pc, #36]	; (800f76c <tcp_update_rcv_ann_wnd+0xb4>)
 800f746:	4808      	ldr	r0, [pc, #32]	; (800f768 <tcp_update_rcv_ann_wnd+0xb0>)
 800f748:	f006 fd38 	bl	80161bc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	b29a      	uxth	r2, r3
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f754:	2300      	movs	r3, #0
  }
}
 800f756:	4618      	mov	r0, r3
 800f758:	3710      	adds	r7, #16
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	08019634 	.word	0x08019634
 800f764:	08019890 	.word	0x08019890
 800f768:	08019678 	.word	0x08019678
 800f76c:	080198b4 	.word	0x080198b4

0800f770 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	460b      	mov	r3, r1
 800f77a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d107      	bne.n	800f792 <tcp_recved+0x22>
 800f782:	4b1f      	ldr	r3, [pc, #124]	; (800f800 <tcp_recved+0x90>)
 800f784:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f788:	491e      	ldr	r1, [pc, #120]	; (800f804 <tcp_recved+0x94>)
 800f78a:	481f      	ldr	r0, [pc, #124]	; (800f808 <tcp_recved+0x98>)
 800f78c:	f006 fd16 	bl	80161bc <iprintf>
 800f790:	e032      	b.n	800f7f8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	7d1b      	ldrb	r3, [r3, #20]
 800f796:	2b01      	cmp	r3, #1
 800f798:	d106      	bne.n	800f7a8 <tcp_recved+0x38>
 800f79a:	4b19      	ldr	r3, [pc, #100]	; (800f800 <tcp_recved+0x90>)
 800f79c:	f240 32d3 	movw	r2, #979	; 0x3d3
 800f7a0:	491a      	ldr	r1, [pc, #104]	; (800f80c <tcp_recved+0x9c>)
 800f7a2:	4819      	ldr	r0, [pc, #100]	; (800f808 <tcp_recved+0x98>)
 800f7a4:	f006 fd0a 	bl	80161bc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f7ac:	887b      	ldrh	r3, [r7, #2]
 800f7ae:	4413      	add	r3, r2
 800f7b0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f7b2:	89fb      	ldrh	r3, [r7, #14]
 800f7b4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f7b8:	d804      	bhi.n	800f7c4 <tcp_recved+0x54>
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7be:	89fa      	ldrh	r2, [r7, #14]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d204      	bcs.n	800f7ce <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f7ca:	851a      	strh	r2, [r3, #40]	; 0x28
 800f7cc:	e002      	b.n	800f7d4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	89fa      	ldrh	r2, [r7, #14]
 800f7d2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7ff ff6f 	bl	800f6b8 <tcp_update_rcv_ann_wnd>
 800f7da:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f7e2:	d309      	bcc.n	800f7f8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	8b5b      	ldrh	r3, [r3, #26]
 800f7e8:	f043 0302 	orr.w	r3, r3, #2
 800f7ec:	b29a      	uxth	r2, r3
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f004 fbac 	bl	8013f50 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f7f8:	3710      	adds	r7, #16
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	08019634 	.word	0x08019634
 800f804:	080198d0 	.word	0x080198d0
 800f808:	08019678 	.word	0x08019678
 800f80c:	080198e8 	.word	0x080198e8

0800f810 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f810:	b480      	push	{r7}
 800f812:	b083      	sub	sp, #12
 800f814:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f816:	2300      	movs	r3, #0
 800f818:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f81a:	4b1e      	ldr	r3, [pc, #120]	; (800f894 <tcp_new_port+0x84>)
 800f81c:	881b      	ldrh	r3, [r3, #0]
 800f81e:	3301      	adds	r3, #1
 800f820:	b29a      	uxth	r2, r3
 800f822:	4b1c      	ldr	r3, [pc, #112]	; (800f894 <tcp_new_port+0x84>)
 800f824:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f826:	4b1b      	ldr	r3, [pc, #108]	; (800f894 <tcp_new_port+0x84>)
 800f828:	881b      	ldrh	r3, [r3, #0]
 800f82a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f82e:	4293      	cmp	r3, r2
 800f830:	d103      	bne.n	800f83a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f832:	4b18      	ldr	r3, [pc, #96]	; (800f894 <tcp_new_port+0x84>)
 800f834:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f838:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f83a:	2300      	movs	r3, #0
 800f83c:	71fb      	strb	r3, [r7, #7]
 800f83e:	e01e      	b.n	800f87e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f840:	79fb      	ldrb	r3, [r7, #7]
 800f842:	4a15      	ldr	r2, [pc, #84]	; (800f898 <tcp_new_port+0x88>)
 800f844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	603b      	str	r3, [r7, #0]
 800f84c:	e011      	b.n	800f872 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	8ada      	ldrh	r2, [r3, #22]
 800f852:	4b10      	ldr	r3, [pc, #64]	; (800f894 <tcp_new_port+0x84>)
 800f854:	881b      	ldrh	r3, [r3, #0]
 800f856:	429a      	cmp	r2, r3
 800f858:	d108      	bne.n	800f86c <tcp_new_port+0x5c>
        n++;
 800f85a:	88bb      	ldrh	r3, [r7, #4]
 800f85c:	3301      	adds	r3, #1
 800f85e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f860:	88bb      	ldrh	r3, [r7, #4]
 800f862:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f866:	d3d8      	bcc.n	800f81a <tcp_new_port+0xa>
          return 0;
 800f868:	2300      	movs	r3, #0
 800f86a:	e00d      	b.n	800f888 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	68db      	ldr	r3, [r3, #12]
 800f870:	603b      	str	r3, [r7, #0]
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d1ea      	bne.n	800f84e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f878:	79fb      	ldrb	r3, [r7, #7]
 800f87a:	3301      	adds	r3, #1
 800f87c:	71fb      	strb	r3, [r7, #7]
 800f87e:	79fb      	ldrb	r3, [r7, #7]
 800f880:	2b03      	cmp	r3, #3
 800f882:	d9dd      	bls.n	800f840 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f884:	4b03      	ldr	r3, [pc, #12]	; (800f894 <tcp_new_port+0x84>)
 800f886:	881b      	ldrh	r3, [r3, #0]
}
 800f888:	4618      	mov	r0, r3
 800f88a:	370c      	adds	r7, #12
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr
 800f894:	20000010 	.word	0x20000010
 800f898:	0801b064 	.word	0x0801b064

0800f89c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f89c:	b5b0      	push	{r4, r5, r7, lr}
 800f89e:	b090      	sub	sp, #64	; 0x40
 800f8a0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f8a8:	4b94      	ldr	r3, [pc, #592]	; (800fafc <tcp_slowtmr+0x260>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	4a93      	ldr	r2, [pc, #588]	; (800fafc <tcp_slowtmr+0x260>)
 800f8b0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f8b2:	4b93      	ldr	r3, [pc, #588]	; (800fb00 <tcp_slowtmr+0x264>)
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	3301      	adds	r3, #1
 800f8b8:	b2da      	uxtb	r2, r3
 800f8ba:	4b91      	ldr	r3, [pc, #580]	; (800fb00 <tcp_slowtmr+0x264>)
 800f8bc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f8c2:	4b90      	ldr	r3, [pc, #576]	; (800fb04 <tcp_slowtmr+0x268>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f8c8:	e29d      	b.n	800fe06 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8cc:	7d1b      	ldrb	r3, [r3, #20]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d106      	bne.n	800f8e0 <tcp_slowtmr+0x44>
 800f8d2:	4b8d      	ldr	r3, [pc, #564]	; (800fb08 <tcp_slowtmr+0x26c>)
 800f8d4:	f240 42be 	movw	r2, #1214	; 0x4be
 800f8d8:	498c      	ldr	r1, [pc, #560]	; (800fb0c <tcp_slowtmr+0x270>)
 800f8da:	488d      	ldr	r0, [pc, #564]	; (800fb10 <tcp_slowtmr+0x274>)
 800f8dc:	f006 fc6e 	bl	80161bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e2:	7d1b      	ldrb	r3, [r3, #20]
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d106      	bne.n	800f8f6 <tcp_slowtmr+0x5a>
 800f8e8:	4b87      	ldr	r3, [pc, #540]	; (800fb08 <tcp_slowtmr+0x26c>)
 800f8ea:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f8ee:	4989      	ldr	r1, [pc, #548]	; (800fb14 <tcp_slowtmr+0x278>)
 800f8f0:	4887      	ldr	r0, [pc, #540]	; (800fb10 <tcp_slowtmr+0x274>)
 800f8f2:	f006 fc63 	bl	80161bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f8:	7d1b      	ldrb	r3, [r3, #20]
 800f8fa:	2b0a      	cmp	r3, #10
 800f8fc:	d106      	bne.n	800f90c <tcp_slowtmr+0x70>
 800f8fe:	4b82      	ldr	r3, [pc, #520]	; (800fb08 <tcp_slowtmr+0x26c>)
 800f900:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f904:	4984      	ldr	r1, [pc, #528]	; (800fb18 <tcp_slowtmr+0x27c>)
 800f906:	4882      	ldr	r0, [pc, #520]	; (800fb10 <tcp_slowtmr+0x274>)
 800f908:	f006 fc58 	bl	80161bc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90e:	7f9a      	ldrb	r2, [r3, #30]
 800f910:	4b7b      	ldr	r3, [pc, #492]	; (800fb00 <tcp_slowtmr+0x264>)
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	429a      	cmp	r2, r3
 800f916:	d105      	bne.n	800f924 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91e:	68db      	ldr	r3, [r3, #12]
 800f920:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f922:	e270      	b.n	800fe06 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f924:	4b76      	ldr	r3, [pc, #472]	; (800fb00 <tcp_slowtmr+0x264>)
 800f926:	781a      	ldrb	r2, [r3, #0]
 800f928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f92c:	2300      	movs	r3, #0
 800f92e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f932:	2300      	movs	r3, #0
 800f934:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93a:	7d1b      	ldrb	r3, [r3, #20]
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	d10a      	bne.n	800f956 <tcp_slowtmr+0xba>
 800f940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f942:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f946:	2b05      	cmp	r3, #5
 800f948:	d905      	bls.n	800f956 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f94a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f94e:	3301      	adds	r3, #1
 800f950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f954:	e11e      	b.n	800fb94 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f958:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f95c:	2b0b      	cmp	r3, #11
 800f95e:	d905      	bls.n	800f96c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f964:	3301      	adds	r3, #1
 800f966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f96a:	e113      	b.n	800fb94 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f972:	2b00      	cmp	r3, #0
 800f974:	d075      	beq.n	800fa62 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d006      	beq.n	800f98c <tcp_slowtmr+0xf0>
 800f97e:	4b62      	ldr	r3, [pc, #392]	; (800fb08 <tcp_slowtmr+0x26c>)
 800f980:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f984:	4965      	ldr	r1, [pc, #404]	; (800fb1c <tcp_slowtmr+0x280>)
 800f986:	4862      	ldr	r0, [pc, #392]	; (800fb10 <tcp_slowtmr+0x274>)
 800f988:	f006 fc18 	bl	80161bc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f990:	2b00      	cmp	r3, #0
 800f992:	d106      	bne.n	800f9a2 <tcp_slowtmr+0x106>
 800f994:	4b5c      	ldr	r3, [pc, #368]	; (800fb08 <tcp_slowtmr+0x26c>)
 800f996:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f99a:	4961      	ldr	r1, [pc, #388]	; (800fb20 <tcp_slowtmr+0x284>)
 800f99c:	485c      	ldr	r0, [pc, #368]	; (800fb10 <tcp_slowtmr+0x274>)
 800f99e:	f006 fc0d 	bl	80161bc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f9a8:	2b0b      	cmp	r3, #11
 800f9aa:	d905      	bls.n	800f9b8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9b0:	3301      	adds	r3, #1
 800f9b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f9b6:	e0ed      	b.n	800fb94 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f9be:	3b01      	subs	r3, #1
 800f9c0:	4a58      	ldr	r2, [pc, #352]	; (800fb24 <tcp_slowtmr+0x288>)
 800f9c2:	5cd3      	ldrb	r3, [r2, r3]
 800f9c4:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 800f9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f9cc:	7ffa      	ldrb	r2, [r7, #31]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d907      	bls.n	800f9e2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f9d8:	3301      	adds	r3, #1
 800f9da:	b2da      	uxtb	r2, r3
 800f9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f9e8:	7ffa      	ldrb	r2, [r7, #31]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	f200 80d2 	bhi.w	800fb94 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d108      	bne.n	800fa10 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f9fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa00:	f005 f968 	bl	8014cd4 <tcp_zero_window_probe>
 800fa04:	4603      	mov	r3, r0
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d014      	beq.n	800fa34 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	623b      	str	r3, [r7, #32]
 800fa0e:	e011      	b.n	800fa34 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa16:	4619      	mov	r1, r3
 800fa18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa1a:	f004 f80f 	bl	8013a3c <tcp_split_unsent_seg>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d107      	bne.n	800fa34 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fa24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa26:	f004 fa93 	bl	8013f50 <tcp_output>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d101      	bne.n	800fa34 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fa30:	2300      	movs	r3, #0
 800fa32:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fa34:	6a3b      	ldr	r3, [r7, #32]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	f000 80ac 	beq.w	800fb94 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fa3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3e:	2200      	movs	r2, #0
 800fa40:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa46:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa4a:	2b06      	cmp	r3, #6
 800fa4c:	f200 80a2 	bhi.w	800fb94 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa56:	3301      	adds	r3, #1
 800fa58:	b2da      	uxtb	r2, r3
 800fa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fa60:	e098      	b.n	800fb94 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	db0f      	blt.n	800fa8c <tcp_slowtmr+0x1f0>
 800fa6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa6e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa72:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d008      	beq.n	800fa8c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa7c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	3301      	adds	r3, #1
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	b21a      	sxth	r2, r3
 800fa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa94:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	db7b      	blt.n	800fb94 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fa9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa9e:	f004 fd51 	bl	8014544 <tcp_rexmit_rto_prepare>
 800faa2:	4603      	mov	r3, r0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d007      	beq.n	800fab8 <tcp_slowtmr+0x21c>
 800faa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faac:	2b00      	cmp	r3, #0
 800faae:	d171      	bne.n	800fb94 <tcp_slowtmr+0x2f8>
 800fab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d06d      	beq.n	800fb94 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faba:	7d1b      	ldrb	r3, [r3, #20]
 800fabc:	2b02      	cmp	r3, #2
 800fabe:	d03a      	beq.n	800fb36 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fac6:	2b0c      	cmp	r3, #12
 800fac8:	bf28      	it	cs
 800faca:	230c      	movcs	r3, #12
 800facc:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800face:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fad4:	10db      	asrs	r3, r3, #3
 800fad6:	b21b      	sxth	r3, r3
 800fad8:	461a      	mov	r2, r3
 800fada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fadc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fae0:	4413      	add	r3, r2
 800fae2:	7fba      	ldrb	r2, [r7, #30]
 800fae4:	4910      	ldr	r1, [pc, #64]	; (800fb28 <tcp_slowtmr+0x28c>)
 800fae6:	5c8a      	ldrb	r2, [r1, r2]
 800fae8:	4093      	lsls	r3, r2
 800faea:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800faec:	69bb      	ldr	r3, [r7, #24]
 800faee:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800faf2:	4293      	cmp	r3, r2
 800faf4:	dc1a      	bgt.n	800fb2c <tcp_slowtmr+0x290>
 800faf6:	69bb      	ldr	r3, [r7, #24]
 800faf8:	b21a      	sxth	r2, r3
 800fafa:	e019      	b.n	800fb30 <tcp_slowtmr+0x294>
 800fafc:	2000e4f0 	.word	0x2000e4f0
 800fb00:	200041da 	.word	0x200041da
 800fb04:	2000e4ec 	.word	0x2000e4ec
 800fb08:	08019634 	.word	0x08019634
 800fb0c:	08019978 	.word	0x08019978
 800fb10:	08019678 	.word	0x08019678
 800fb14:	080199a4 	.word	0x080199a4
 800fb18:	080199d0 	.word	0x080199d0
 800fb1c:	08019a00 	.word	0x08019a00
 800fb20:	08019a34 	.word	0x08019a34
 800fb24:	0801b05c 	.word	0x0801b05c
 800fb28:	0801b04c 	.word	0x0801b04c
 800fb2c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb38:	2200      	movs	r2, #0
 800fb3a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	bf28      	it	cs
 800fb4c:	4613      	movcs	r3, r2
 800fb4e:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 800fb50:	8afb      	ldrh	r3, [r7, #22]
 800fb52:	085b      	lsrs	r3, r3, #1
 800fb54:	b29a      	uxth	r2, r3
 800fb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb66:	005b      	lsls	r3, r3, #1
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d206      	bcs.n	800fb7c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb72:	005b      	lsls	r3, r3, #1
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb88:	2200      	movs	r2, #0
 800fb8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fb8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb90:	f004 fd48 	bl	8014624 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb96:	7d1b      	ldrb	r3, [r3, #20]
 800fb98:	2b06      	cmp	r3, #6
 800fb9a:	d111      	bne.n	800fbc0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9e:	8b5b      	ldrh	r3, [r3, #26]
 800fba0:	f003 0310 	and.w	r3, r3, #16
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d00b      	beq.n	800fbc0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fba8:	4b9c      	ldr	r3, [pc, #624]	; (800fe1c <tcp_slowtmr+0x580>)
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbae:	6a1b      	ldr	r3, [r3, #32]
 800fbb0:	1ad3      	subs	r3, r2, r3
 800fbb2:	2b28      	cmp	r3, #40	; 0x28
 800fbb4:	d904      	bls.n	800fbc0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fbb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbba:	3301      	adds	r3, #1
 800fbbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc2:	7a5b      	ldrb	r3, [r3, #9]
 800fbc4:	f003 0308 	and.w	r3, r3, #8
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d04a      	beq.n	800fc62 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800fbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbce:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fbd0:	2b04      	cmp	r3, #4
 800fbd2:	d003      	beq.n	800fbdc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fbd8:	2b07      	cmp	r3, #7
 800fbda:	d142      	bne.n	800fc62 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fbdc:	4b8f      	ldr	r3, [pc, #572]	; (800fe1c <tcp_slowtmr+0x580>)
 800fbde:	681a      	ldr	r2, [r3, #0]
 800fbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe2:	6a1b      	ldr	r3, [r3, #32]
 800fbe4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fbec:	4b8c      	ldr	r3, [pc, #560]	; (800fe20 <tcp_slowtmr+0x584>)
 800fbee:	440b      	add	r3, r1
 800fbf0:	498c      	ldr	r1, [pc, #560]	; (800fe24 <tcp_slowtmr+0x588>)
 800fbf2:	fba1 1303 	umull	r1, r3, r1, r3
 800fbf6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d90a      	bls.n	800fc12 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fbfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc00:	3301      	adds	r3, #1
 800fc02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fc06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fc10:	e027      	b.n	800fc62 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc12:	4b82      	ldr	r3, [pc, #520]	; (800fe1c <tcp_slowtmr+0x580>)
 800fc14:	681a      	ldr	r2, [r3, #0]
 800fc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc18:	6a1b      	ldr	r3, [r3, #32]
 800fc1a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc24:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fc28:	4618      	mov	r0, r3
 800fc2a:	4b7f      	ldr	r3, [pc, #508]	; (800fe28 <tcp_slowtmr+0x58c>)
 800fc2c:	fb03 f300 	mul.w	r3, r3, r0
 800fc30:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fc32:	497c      	ldr	r1, [pc, #496]	; (800fe24 <tcp_slowtmr+0x588>)
 800fc34:	fba1 1303 	umull	r1, r3, r1, r3
 800fc38:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d911      	bls.n	800fc62 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800fc3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc40:	f005 f808 	bl	8014c54 <tcp_keepalive>
 800fc44:	4603      	mov	r3, r0
 800fc46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fc4a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d107      	bne.n	800fc62 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800fc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc54:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fc58:	3301      	adds	r3, #1
 800fc5a:	b2da      	uxtb	r2, r3
 800fc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d011      	beq.n	800fc8e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fc6a:	4b6c      	ldr	r3, [pc, #432]	; (800fe1c <tcp_slowtmr+0x580>)
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc70:	6a1b      	ldr	r3, [r3, #32]
 800fc72:	1ad2      	subs	r2, r2, r3
 800fc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc76:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	005b      	lsls	r3, r3, #1
 800fc80:	440b      	add	r3, r1
 800fc82:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d302      	bcc.n	800fc8e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fc88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc8a:	f000 fea7 	bl	80109dc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc90:	7d1b      	ldrb	r3, [r3, #20]
 800fc92:	2b03      	cmp	r3, #3
 800fc94:	d10b      	bne.n	800fcae <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc96:	4b61      	ldr	r3, [pc, #388]	; (800fe1c <tcp_slowtmr+0x580>)
 800fc98:	681a      	ldr	r2, [r3, #0]
 800fc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc9c:	6a1b      	ldr	r3, [r3, #32]
 800fc9e:	1ad3      	subs	r3, r2, r3
 800fca0:	2b28      	cmp	r3, #40	; 0x28
 800fca2:	d904      	bls.n	800fcae <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fca8:	3301      	adds	r3, #1
 800fcaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb0:	7d1b      	ldrb	r3, [r3, #20]
 800fcb2:	2b09      	cmp	r3, #9
 800fcb4:	d10b      	bne.n	800fcce <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fcb6:	4b59      	ldr	r3, [pc, #356]	; (800fe1c <tcp_slowtmr+0x580>)
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcbc:	6a1b      	ldr	r3, [r3, #32]
 800fcbe:	1ad3      	subs	r3, r2, r3
 800fcc0:	2bf0      	cmp	r3, #240	; 0xf0
 800fcc2:	d904      	bls.n	800fcce <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fcc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcc8:	3301      	adds	r3, #1
 800fcca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fcce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d060      	beq.n	800fd98 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcdc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fcde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fce0:	f000 fcc8 	bl	8010674 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d010      	beq.n	800fd0c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fcea:	4b50      	ldr	r3, [pc, #320]	; (800fe2c <tcp_slowtmr+0x590>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d106      	bne.n	800fd02 <tcp_slowtmr+0x466>
 800fcf4:	4b4e      	ldr	r3, [pc, #312]	; (800fe30 <tcp_slowtmr+0x594>)
 800fcf6:	f240 526d 	movw	r2, #1389	; 0x56d
 800fcfa:	494e      	ldr	r1, [pc, #312]	; (800fe34 <tcp_slowtmr+0x598>)
 800fcfc:	484e      	ldr	r0, [pc, #312]	; (800fe38 <tcp_slowtmr+0x59c>)
 800fcfe:	f006 fa5d 	bl	80161bc <iprintf>
        prev->next = pcb->next;
 800fd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd04:	68da      	ldr	r2, [r3, #12]
 800fd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd08:	60da      	str	r2, [r3, #12]
 800fd0a:	e00f      	b.n	800fd2c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fd0c:	4b47      	ldr	r3, [pc, #284]	; (800fe2c <tcp_slowtmr+0x590>)
 800fd0e:	681a      	ldr	r2, [r3, #0]
 800fd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d006      	beq.n	800fd24 <tcp_slowtmr+0x488>
 800fd16:	4b46      	ldr	r3, [pc, #280]	; (800fe30 <tcp_slowtmr+0x594>)
 800fd18:	f240 5271 	movw	r2, #1393	; 0x571
 800fd1c:	4947      	ldr	r1, [pc, #284]	; (800fe3c <tcp_slowtmr+0x5a0>)
 800fd1e:	4846      	ldr	r0, [pc, #280]	; (800fe38 <tcp_slowtmr+0x59c>)
 800fd20:	f006 fa4c 	bl	80161bc <iprintf>
        tcp_active_pcbs = pcb->next;
 800fd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd26:	68db      	ldr	r3, [r3, #12]
 800fd28:	4a40      	ldr	r2, [pc, #256]	; (800fe2c <tcp_slowtmr+0x590>)
 800fd2a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fd2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d013      	beq.n	800fd5c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd36:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd3a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fd3c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd40:	3304      	adds	r3, #4
 800fd42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd44:	8ad2      	ldrh	r2, [r2, #22]
 800fd46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd48:	8b09      	ldrh	r1, [r1, #24]
 800fd4a:	9102      	str	r1, [sp, #8]
 800fd4c:	9201      	str	r2, [sp, #4]
 800fd4e:	9300      	str	r3, [sp, #0]
 800fd50:	462b      	mov	r3, r5
 800fd52:	4622      	mov	r2, r4
 800fd54:	4601      	mov	r1, r0
 800fd56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd58:	f004 fec6 	bl	8014ae8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5e:	691b      	ldr	r3, [r3, #16]
 800fd60:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 800fd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd64:	7d1b      	ldrb	r3, [r3, #20]
 800fd66:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 800fd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6a:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800fd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6e:	68db      	ldr	r3, [r3, #12]
 800fd70:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fd72:	6878      	ldr	r0, [r7, #4]
 800fd74:	f7fe fff8 	bl	800ed68 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fd78:	4b31      	ldr	r3, [pc, #196]	; (800fe40 <tcp_slowtmr+0x5a4>)
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d004      	beq.n	800fd8e <tcp_slowtmr+0x4f2>
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	f06f 010c 	mvn.w	r1, #12
 800fd8a:	68f8      	ldr	r0, [r7, #12]
 800fd8c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fd8e:	4b2c      	ldr	r3, [pc, #176]	; (800fe40 <tcp_slowtmr+0x5a4>)
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d037      	beq.n	800fe06 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800fd96:	e592      	b.n	800f8be <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9e:	68db      	ldr	r3, [r3, #12]
 800fda0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda4:	7f1b      	ldrb	r3, [r3, #28]
 800fda6:	3301      	adds	r3, #1
 800fda8:	b2da      	uxtb	r2, r3
 800fdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdac:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb0:	7f1a      	ldrb	r2, [r3, #28]
 800fdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb4:	7f5b      	ldrb	r3, [r3, #29]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d325      	bcc.n	800fe06 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800fdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fdc0:	4b1f      	ldr	r3, [pc, #124]	; (800fe40 <tcp_slowtmr+0x5a4>)
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d00b      	beq.n	800fde8 <tcp_slowtmr+0x54c>
 800fdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdd8:	6912      	ldr	r2, [r2, #16]
 800fdda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fddc:	4610      	mov	r0, r2
 800fdde:	4798      	blx	r3
 800fde0:	4603      	mov	r3, r0
 800fde2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fde6:	e002      	b.n	800fdee <tcp_slowtmr+0x552>
 800fde8:	2300      	movs	r3, #0
 800fdea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fdee:	4b14      	ldr	r3, [pc, #80]	; (800fe40 <tcp_slowtmr+0x5a4>)
 800fdf0:	781b      	ldrb	r3, [r3, #0]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d000      	beq.n	800fdf8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800fdf6:	e562      	b.n	800f8be <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fdf8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d102      	bne.n	800fe06 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800fe00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe02:	f004 f8a5 	bl	8013f50 <tcp_output>
  while (pcb != NULL) {
 800fe06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	f47f ad5e 	bne.w	800f8ca <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fe12:	4b0c      	ldr	r3, [pc, #48]	; (800fe44 <tcp_slowtmr+0x5a8>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fe18:	e069      	b.n	800feee <tcp_slowtmr+0x652>
 800fe1a:	bf00      	nop
 800fe1c:	2000e4f0 	.word	0x2000e4f0
 800fe20:	000a4cb8 	.word	0x000a4cb8
 800fe24:	10624dd3 	.word	0x10624dd3
 800fe28:	000124f8 	.word	0x000124f8
 800fe2c:	2000e4ec 	.word	0x2000e4ec
 800fe30:	08019634 	.word	0x08019634
 800fe34:	08019a6c 	.word	0x08019a6c
 800fe38:	08019678 	.word	0x08019678
 800fe3c:	08019a98 	.word	0x08019a98
 800fe40:	2000e4e8 	.word	0x2000e4e8
 800fe44:	2000e4fc 	.word	0x2000e4fc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fe48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4a:	7d1b      	ldrb	r3, [r3, #20]
 800fe4c:	2b0a      	cmp	r3, #10
 800fe4e:	d006      	beq.n	800fe5e <tcp_slowtmr+0x5c2>
 800fe50:	4b2a      	ldr	r3, [pc, #168]	; (800fefc <tcp_slowtmr+0x660>)
 800fe52:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fe56:	492a      	ldr	r1, [pc, #168]	; (800ff00 <tcp_slowtmr+0x664>)
 800fe58:	482a      	ldr	r0, [pc, #168]	; (800ff04 <tcp_slowtmr+0x668>)
 800fe5a:	f006 f9af 	bl	80161bc <iprintf>
    pcb_remove = 0;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fe64:	4b28      	ldr	r3, [pc, #160]	; (800ff08 <tcp_slowtmr+0x66c>)
 800fe66:	681a      	ldr	r2, [r3, #0]
 800fe68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6a:	6a1b      	ldr	r3, [r3, #32]
 800fe6c:	1ad3      	subs	r3, r2, r3
 800fe6e:	2bf0      	cmp	r3, #240	; 0xf0
 800fe70:	d904      	bls.n	800fe7c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fe72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe76:	3301      	adds	r3, #1
 800fe78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fe7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d02f      	beq.n	800fee4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fe84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe86:	f000 fbf5 	bl	8010674 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fe8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d010      	beq.n	800feb2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fe90:	4b1e      	ldr	r3, [pc, #120]	; (800ff0c <tcp_slowtmr+0x670>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d106      	bne.n	800fea8 <tcp_slowtmr+0x60c>
 800fe9a:	4b18      	ldr	r3, [pc, #96]	; (800fefc <tcp_slowtmr+0x660>)
 800fe9c:	f240 52af 	movw	r2, #1455	; 0x5af
 800fea0:	491b      	ldr	r1, [pc, #108]	; (800ff10 <tcp_slowtmr+0x674>)
 800fea2:	4818      	ldr	r0, [pc, #96]	; (800ff04 <tcp_slowtmr+0x668>)
 800fea4:	f006 f98a 	bl	80161bc <iprintf>
        prev->next = pcb->next;
 800fea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feaa:	68da      	ldr	r2, [r3, #12]
 800feac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feae:	60da      	str	r2, [r3, #12]
 800feb0:	e00f      	b.n	800fed2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800feb2:	4b16      	ldr	r3, [pc, #88]	; (800ff0c <tcp_slowtmr+0x670>)
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb8:	429a      	cmp	r2, r3
 800feba:	d006      	beq.n	800feca <tcp_slowtmr+0x62e>
 800febc:	4b0f      	ldr	r3, [pc, #60]	; (800fefc <tcp_slowtmr+0x660>)
 800febe:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fec2:	4914      	ldr	r1, [pc, #80]	; (800ff14 <tcp_slowtmr+0x678>)
 800fec4:	480f      	ldr	r0, [pc, #60]	; (800ff04 <tcp_slowtmr+0x668>)
 800fec6:	f006 f979 	bl	80161bc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800feca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fecc:	68db      	ldr	r3, [r3, #12]
 800fece:	4a0f      	ldr	r2, [pc, #60]	; (800ff0c <tcp_slowtmr+0x670>)
 800fed0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed4:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed8:	68db      	ldr	r3, [r3, #12]
 800feda:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fedc:	6838      	ldr	r0, [r7, #0]
 800fede:	f7fe ff43 	bl	800ed68 <tcp_free>
 800fee2:	e004      	b.n	800feee <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800fee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feea:	68db      	ldr	r3, [r3, #12]
 800feec:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800feee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d1a9      	bne.n	800fe48 <tcp_slowtmr+0x5ac>
    }
  }
}
 800fef4:	bf00      	nop
 800fef6:	3730      	adds	r7, #48	; 0x30
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bdb0      	pop	{r4, r5, r7, pc}
 800fefc:	08019634 	.word	0x08019634
 800ff00:	08019ac4 	.word	0x08019ac4
 800ff04:	08019678 	.word	0x08019678
 800ff08:	2000e4f0 	.word	0x2000e4f0
 800ff0c:	2000e4fc 	.word	0x2000e4fc
 800ff10:	08019af4 	.word	0x08019af4
 800ff14:	08019b1c 	.word	0x08019b1c

0800ff18 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ff1e:	4b2d      	ldr	r3, [pc, #180]	; (800ffd4 <tcp_fasttmr+0xbc>)
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	3301      	adds	r3, #1
 800ff24:	b2da      	uxtb	r2, r3
 800ff26:	4b2b      	ldr	r3, [pc, #172]	; (800ffd4 <tcp_fasttmr+0xbc>)
 800ff28:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ff2a:	4b2b      	ldr	r3, [pc, #172]	; (800ffd8 <tcp_fasttmr+0xc0>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ff30:	e048      	b.n	800ffc4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	7f9a      	ldrb	r2, [r3, #30]
 800ff36:	4b27      	ldr	r3, [pc, #156]	; (800ffd4 <tcp_fasttmr+0xbc>)
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d03f      	beq.n	800ffbe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ff3e:	4b25      	ldr	r3, [pc, #148]	; (800ffd4 <tcp_fasttmr+0xbc>)
 800ff40:	781a      	ldrb	r2, [r3, #0]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	8b5b      	ldrh	r3, [r3, #26]
 800ff4a:	f003 0301 	and.w	r3, r3, #1
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d010      	beq.n	800ff74 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	8b5b      	ldrh	r3, [r3, #26]
 800ff56:	f043 0302 	orr.w	r3, r3, #2
 800ff5a:	b29a      	uxth	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f003 fff5 	bl	8013f50 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	8b5b      	ldrh	r3, [r3, #26]
 800ff6a:	f023 0303 	bic.w	r3, r3, #3
 800ff6e:	b29a      	uxth	r2, r3
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	8b5b      	ldrh	r3, [r3, #26]
 800ff78:	f003 0308 	and.w	r3, r3, #8
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d009      	beq.n	800ff94 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	8b5b      	ldrh	r3, [r3, #26]
 800ff84:	f023 0308 	bic.w	r3, r3, #8
 800ff88:	b29a      	uxth	r2, r3
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f7ff f87a 	bl	800f088 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d00a      	beq.n	800ffb8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ffa2:	4b0e      	ldr	r3, [pc, #56]	; (800ffdc <tcp_fasttmr+0xc4>)
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f000 f819 	bl	800ffe0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ffae:	4b0b      	ldr	r3, [pc, #44]	; (800ffdc <tcp_fasttmr+0xc4>)
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d000      	beq.n	800ffb8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ffb6:	e7b8      	b.n	800ff2a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	607b      	str	r3, [r7, #4]
 800ffbc:	e002      	b.n	800ffc4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	68db      	ldr	r3, [r3, #12]
 800ffc2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d1b3      	bne.n	800ff32 <tcp_fasttmr+0x1a>
    }
  }
}
 800ffca:	bf00      	nop
 800ffcc:	3708      	adds	r7, #8
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	200041da 	.word	0x200041da
 800ffd8:	2000e4ec 	.word	0x2000e4ec
 800ffdc:	2000e4e8 	.word	0x2000e4e8

0800ffe0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ffe0:	b590      	push	{r4, r7, lr}
 800ffe2:	b085      	sub	sp, #20
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d109      	bne.n	8010002 <tcp_process_refused_data+0x22>
 800ffee:	4b37      	ldr	r3, [pc, #220]	; (80100cc <tcp_process_refused_data+0xec>)
 800fff0:	f240 6209 	movw	r2, #1545	; 0x609
 800fff4:	4936      	ldr	r1, [pc, #216]	; (80100d0 <tcp_process_refused_data+0xf0>)
 800fff6:	4837      	ldr	r0, [pc, #220]	; (80100d4 <tcp_process_refused_data+0xf4>)
 800fff8:	f006 f8e0 	bl	80161bc <iprintf>
 800fffc:	f06f 030f 	mvn.w	r3, #15
 8010000:	e060      	b.n	80100c4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010006:	7b5b      	ldrb	r3, [r3, #13]
 8010008:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801000e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2200      	movs	r2, #0
 8010014:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801001c:	2b00      	cmp	r3, #0
 801001e:	d00b      	beq.n	8010038 <tcp_process_refused_data+0x58>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	6918      	ldr	r0, [r3, #16]
 801002a:	2300      	movs	r3, #0
 801002c:	68ba      	ldr	r2, [r7, #8]
 801002e:	6879      	ldr	r1, [r7, #4]
 8010030:	47a0      	blx	r4
 8010032:	4603      	mov	r3, r0
 8010034:	73fb      	strb	r3, [r7, #15]
 8010036:	e007      	b.n	8010048 <tcp_process_refused_data+0x68>
 8010038:	2300      	movs	r3, #0
 801003a:	68ba      	ldr	r2, [r7, #8]
 801003c:	6879      	ldr	r1, [r7, #4]
 801003e:	2000      	movs	r0, #0
 8010040:	f000 f8a2 	bl	8010188 <tcp_recv_null>
 8010044:	4603      	mov	r3, r0
 8010046:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d12a      	bne.n	80100a6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010050:	7bbb      	ldrb	r3, [r7, #14]
 8010052:	f003 0320 	and.w	r3, r3, #32
 8010056:	2b00      	cmp	r3, #0
 8010058:	d033      	beq.n	80100c2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801005e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010062:	d005      	beq.n	8010070 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010068:	3301      	adds	r3, #1
 801006a:	b29a      	uxth	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010076:	2b00      	cmp	r3, #0
 8010078:	d00b      	beq.n	8010092 <tcp_process_refused_data+0xb2>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6918      	ldr	r0, [r3, #16]
 8010084:	2300      	movs	r3, #0
 8010086:	2200      	movs	r2, #0
 8010088:	6879      	ldr	r1, [r7, #4]
 801008a:	47a0      	blx	r4
 801008c:	4603      	mov	r3, r0
 801008e:	73fb      	strb	r3, [r7, #15]
 8010090:	e001      	b.n	8010096 <tcp_process_refused_data+0xb6>
 8010092:	2300      	movs	r3, #0
 8010094:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801009a:	f113 0f0d 	cmn.w	r3, #13
 801009e:	d110      	bne.n	80100c2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80100a0:	f06f 030c 	mvn.w	r3, #12
 80100a4:	e00e      	b.n	80100c4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80100a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100aa:	f113 0f0d 	cmn.w	r3, #13
 80100ae:	d102      	bne.n	80100b6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80100b0:	f06f 030c 	mvn.w	r3, #12
 80100b4:	e006      	b.n	80100c4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	68ba      	ldr	r2, [r7, #8]
 80100ba:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80100bc:	f06f 0304 	mvn.w	r3, #4
 80100c0:	e000      	b.n	80100c4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80100c2:	2300      	movs	r3, #0
}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3714      	adds	r7, #20
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd90      	pop	{r4, r7, pc}
 80100cc:	08019634 	.word	0x08019634
 80100d0:	08019b44 	.word	0x08019b44
 80100d4:	08019678 	.word	0x08019678

080100d8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80100e0:	e007      	b.n	80100f2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f000 f809 	bl	8010100 <tcp_seg_free>
    seg = next;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d1f4      	bne.n	80100e2 <tcp_segs_free+0xa>
  }
}
 80100f8:	bf00      	nop
 80100fa:	3710      	adds	r7, #16
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d00c      	beq.n	8010128 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d004      	beq.n	8010120 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	685b      	ldr	r3, [r3, #4]
 801011a:	4618      	mov	r0, r3
 801011c:	f7fe fb68 	bl	800e7f0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010120:	6879      	ldr	r1, [r7, #4]
 8010122:	2003      	movs	r0, #3
 8010124:	f7fd fc90 	bl	800da48 <memp_free>
  }
}
 8010128:	bf00      	nop
 801012a:	3708      	adds	r7, #8
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}

08010130 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d106      	bne.n	801014c <tcp_seg_copy+0x1c>
 801013e:	4b0f      	ldr	r3, [pc, #60]	; (801017c <tcp_seg_copy+0x4c>)
 8010140:	f240 6282 	movw	r2, #1666	; 0x682
 8010144:	490e      	ldr	r1, [pc, #56]	; (8010180 <tcp_seg_copy+0x50>)
 8010146:	480f      	ldr	r0, [pc, #60]	; (8010184 <tcp_seg_copy+0x54>)
 8010148:	f006 f838 	bl	80161bc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801014c:	2003      	movs	r0, #3
 801014e:	f7fd fc29 	bl	800d9a4 <memp_malloc>
 8010152:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d101      	bne.n	801015e <tcp_seg_copy+0x2e>
    return NULL;
 801015a:	2300      	movs	r3, #0
 801015c:	e00a      	b.n	8010174 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801015e:	2210      	movs	r2, #16
 8010160:	6879      	ldr	r1, [r7, #4]
 8010162:	68f8      	ldr	r0, [r7, #12]
 8010164:	f005 ffe9 	bl	801613a <memcpy>
  pbuf_ref(cseg->p);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	4618      	mov	r0, r3
 801016e:	f7fe fbe5 	bl	800e93c <pbuf_ref>
  return cseg;
 8010172:	68fb      	ldr	r3, [r7, #12]
}
 8010174:	4618      	mov	r0, r3
 8010176:	3710      	adds	r7, #16
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	08019634 	.word	0x08019634
 8010180:	08019b88 	.word	0x08019b88
 8010184:	08019678 	.word	0x08019678

08010188 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
 801018e:	60f8      	str	r0, [r7, #12]
 8010190:	60b9      	str	r1, [r7, #8]
 8010192:	607a      	str	r2, [r7, #4]
 8010194:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d109      	bne.n	80101b0 <tcp_recv_null+0x28>
 801019c:	4b12      	ldr	r3, [pc, #72]	; (80101e8 <tcp_recv_null+0x60>)
 801019e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80101a2:	4912      	ldr	r1, [pc, #72]	; (80101ec <tcp_recv_null+0x64>)
 80101a4:	4812      	ldr	r0, [pc, #72]	; (80101f0 <tcp_recv_null+0x68>)
 80101a6:	f006 f809 	bl	80161bc <iprintf>
 80101aa:	f06f 030f 	mvn.w	r3, #15
 80101ae:	e016      	b.n	80101de <tcp_recv_null+0x56>

  if (p != NULL) {
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d009      	beq.n	80101ca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	891b      	ldrh	r3, [r3, #8]
 80101ba:	4619      	mov	r1, r3
 80101bc:	68b8      	ldr	r0, [r7, #8]
 80101be:	f7ff fad7 	bl	800f770 <tcp_recved>
    pbuf_free(p);
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7fe fb14 	bl	800e7f0 <pbuf_free>
 80101c8:	e008      	b.n	80101dc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80101ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d104      	bne.n	80101dc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80101d2:	68b8      	ldr	r0, [r7, #8]
 80101d4:	f7fe ffbe 	bl	800f154 <tcp_close>
 80101d8:	4603      	mov	r3, r0
 80101da:	e000      	b.n	80101de <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80101dc:	2300      	movs	r3, #0
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3710      	adds	r7, #16
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}
 80101e6:	bf00      	nop
 80101e8:	08019634 	.word	0x08019634
 80101ec:	08019ba4 	.word	0x08019ba4
 80101f0:	08019678 	.word	0x08019678

080101f4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b086      	sub	sp, #24
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	4603      	mov	r3, r0
 80101fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80101fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010202:	2b00      	cmp	r3, #0
 8010204:	db01      	blt.n	801020a <tcp_kill_prio+0x16>
 8010206:	79fb      	ldrb	r3, [r7, #7]
 8010208:	e000      	b.n	801020c <tcp_kill_prio+0x18>
 801020a:	237f      	movs	r3, #127	; 0x7f
 801020c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801020e:	7afb      	ldrb	r3, [r7, #11]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d034      	beq.n	801027e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010214:	7afb      	ldrb	r3, [r7, #11]
 8010216:	3b01      	subs	r3, #1
 8010218:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801021a:	2300      	movs	r3, #0
 801021c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801021e:	2300      	movs	r3, #0
 8010220:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010222:	4b19      	ldr	r3, [pc, #100]	; (8010288 <tcp_kill_prio+0x94>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	617b      	str	r3, [r7, #20]
 8010228:	e01f      	b.n	801026a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	7d5b      	ldrb	r3, [r3, #21]
 801022e:	7afa      	ldrb	r2, [r7, #11]
 8010230:	429a      	cmp	r2, r3
 8010232:	d80c      	bhi.n	801024e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010238:	7afa      	ldrb	r2, [r7, #11]
 801023a:	429a      	cmp	r2, r3
 801023c:	d112      	bne.n	8010264 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801023e:	4b13      	ldr	r3, [pc, #76]	; (801028c <tcp_kill_prio+0x98>)
 8010240:	681a      	ldr	r2, [r3, #0]
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	6a1b      	ldr	r3, [r3, #32]
 8010246:	1ad2      	subs	r2, r2, r3
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	429a      	cmp	r2, r3
 801024c:	d30a      	bcc.n	8010264 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801024e:	4b0f      	ldr	r3, [pc, #60]	; (801028c <tcp_kill_prio+0x98>)
 8010250:	681a      	ldr	r2, [r3, #0]
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	6a1b      	ldr	r3, [r3, #32]
 8010256:	1ad3      	subs	r3, r2, r3
 8010258:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	7d5b      	ldrb	r3, [r3, #21]
 8010262:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	617b      	str	r3, [r7, #20]
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d1dc      	bne.n	801022a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d004      	beq.n	8010280 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010276:	6938      	ldr	r0, [r7, #16]
 8010278:	f7ff f8b0 	bl	800f3dc <tcp_abort>
 801027c:	e000      	b.n	8010280 <tcp_kill_prio+0x8c>
    return;
 801027e:	bf00      	nop
  }
}
 8010280:	3718      	adds	r7, #24
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	2000e4ec 	.word	0x2000e4ec
 801028c:	2000e4f0 	.word	0x2000e4f0

08010290 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b086      	sub	sp, #24
 8010294:	af00      	add	r7, sp, #0
 8010296:	4603      	mov	r3, r0
 8010298:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801029a:	79fb      	ldrb	r3, [r7, #7]
 801029c:	2b08      	cmp	r3, #8
 801029e:	d009      	beq.n	80102b4 <tcp_kill_state+0x24>
 80102a0:	79fb      	ldrb	r3, [r7, #7]
 80102a2:	2b09      	cmp	r3, #9
 80102a4:	d006      	beq.n	80102b4 <tcp_kill_state+0x24>
 80102a6:	4b1a      	ldr	r3, [pc, #104]	; (8010310 <tcp_kill_state+0x80>)
 80102a8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80102ac:	4919      	ldr	r1, [pc, #100]	; (8010314 <tcp_kill_state+0x84>)
 80102ae:	481a      	ldr	r0, [pc, #104]	; (8010318 <tcp_kill_state+0x88>)
 80102b0:	f005 ff84 	bl	80161bc <iprintf>

  inactivity = 0;
 80102b4:	2300      	movs	r3, #0
 80102b6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80102b8:	2300      	movs	r3, #0
 80102ba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102bc:	4b17      	ldr	r3, [pc, #92]	; (801031c <tcp_kill_state+0x8c>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	617b      	str	r3, [r7, #20]
 80102c2:	e017      	b.n	80102f4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	7d1b      	ldrb	r3, [r3, #20]
 80102c8:	79fa      	ldrb	r2, [r7, #7]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d10f      	bne.n	80102ee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80102ce:	4b14      	ldr	r3, [pc, #80]	; (8010320 <tcp_kill_state+0x90>)
 80102d0:	681a      	ldr	r2, [r3, #0]
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	6a1b      	ldr	r3, [r3, #32]
 80102d6:	1ad2      	subs	r2, r2, r3
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d307      	bcc.n	80102ee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80102de:	4b10      	ldr	r3, [pc, #64]	; (8010320 <tcp_kill_state+0x90>)
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	6a1b      	ldr	r3, [r3, #32]
 80102e6:	1ad3      	subs	r3, r2, r3
 80102e8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	68db      	ldr	r3, [r3, #12]
 80102f2:	617b      	str	r3, [r7, #20]
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d1e4      	bne.n	80102c4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d003      	beq.n	8010308 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010300:	2100      	movs	r1, #0
 8010302:	6938      	ldr	r0, [r7, #16]
 8010304:	f7fe ffac 	bl	800f260 <tcp_abandon>
  }
}
 8010308:	bf00      	nop
 801030a:	3718      	adds	r7, #24
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}
 8010310:	08019634 	.word	0x08019634
 8010314:	08019bc0 	.word	0x08019bc0
 8010318:	08019678 	.word	0x08019678
 801031c:	2000e4ec 	.word	0x2000e4ec
 8010320:	2000e4f0 	.word	0x2000e4f0

08010324 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b084      	sub	sp, #16
 8010328:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801032a:	2300      	movs	r3, #0
 801032c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801032e:	2300      	movs	r3, #0
 8010330:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010332:	4b12      	ldr	r3, [pc, #72]	; (801037c <tcp_kill_timewait+0x58>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	60fb      	str	r3, [r7, #12]
 8010338:	e012      	b.n	8010360 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801033a:	4b11      	ldr	r3, [pc, #68]	; (8010380 <tcp_kill_timewait+0x5c>)
 801033c:	681a      	ldr	r2, [r3, #0]
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	6a1b      	ldr	r3, [r3, #32]
 8010342:	1ad2      	subs	r2, r2, r3
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	429a      	cmp	r2, r3
 8010348:	d307      	bcc.n	801035a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801034a:	4b0d      	ldr	r3, [pc, #52]	; (8010380 <tcp_kill_timewait+0x5c>)
 801034c:	681a      	ldr	r2, [r3, #0]
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	6a1b      	ldr	r3, [r3, #32]
 8010352:	1ad3      	subs	r3, r2, r3
 8010354:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	68db      	ldr	r3, [r3, #12]
 801035e:	60fb      	str	r3, [r7, #12]
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d1e9      	bne.n	801033a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d002      	beq.n	8010372 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801036c:	68b8      	ldr	r0, [r7, #8]
 801036e:	f7ff f835 	bl	800f3dc <tcp_abort>
  }
}
 8010372:	bf00      	nop
 8010374:	3710      	adds	r7, #16
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	2000e4fc 	.word	0x2000e4fc
 8010380:	2000e4f0 	.word	0x2000e4f0

08010384 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b082      	sub	sp, #8
 8010388:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801038a:	4b10      	ldr	r3, [pc, #64]	; (80103cc <tcp_handle_closepend+0x48>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010390:	e014      	b.n	80103bc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	68db      	ldr	r3, [r3, #12]
 8010396:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	8b5b      	ldrh	r3, [r3, #26]
 801039c:	f003 0308 	and.w	r3, r3, #8
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d009      	beq.n	80103b8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	8b5b      	ldrh	r3, [r3, #26]
 80103a8:	f023 0308 	bic.w	r3, r3, #8
 80103ac:	b29a      	uxth	r2, r3
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f7fe fe68 	bl	800f088 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d1e7      	bne.n	8010392 <tcp_handle_closepend+0xe>
  }
}
 80103c2:	bf00      	nop
 80103c4:	3708      	adds	r7, #8
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	bf00      	nop
 80103cc:	2000e4ec 	.word	0x2000e4ec

080103d0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b084      	sub	sp, #16
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	4603      	mov	r3, r0
 80103d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103da:	2001      	movs	r0, #1
 80103dc:	f7fd fae2 	bl	800d9a4 <memp_malloc>
 80103e0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d126      	bne.n	8010436 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80103e8:	f7ff ffcc 	bl	8010384 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80103ec:	f7ff ff9a 	bl	8010324 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103f0:	2001      	movs	r0, #1
 80103f2:	f7fd fad7 	bl	800d9a4 <memp_malloc>
 80103f6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d11b      	bne.n	8010436 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80103fe:	2009      	movs	r0, #9
 8010400:	f7ff ff46 	bl	8010290 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010404:	2001      	movs	r0, #1
 8010406:	f7fd facd 	bl	800d9a4 <memp_malloc>
 801040a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d111      	bne.n	8010436 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010412:	2008      	movs	r0, #8
 8010414:	f7ff ff3c 	bl	8010290 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010418:	2001      	movs	r0, #1
 801041a:	f7fd fac3 	bl	800d9a4 <memp_malloc>
 801041e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d107      	bne.n	8010436 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010426:	79fb      	ldrb	r3, [r7, #7]
 8010428:	4618      	mov	r0, r3
 801042a:	f7ff fee3 	bl	80101f4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801042e:	2001      	movs	r0, #1
 8010430:	f7fd fab8 	bl	800d9a4 <memp_malloc>
 8010434:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d03f      	beq.n	80104bc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801043c:	229c      	movs	r2, #156	; 0x9c
 801043e:	2100      	movs	r1, #0
 8010440:	68f8      	ldr	r0, [r7, #12]
 8010442:	f005 fe85 	bl	8016150 <memset>
    pcb->prio = prio;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	79fa      	ldrb	r2, [r7, #7]
 801044a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010452:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801045c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	22ff      	movs	r2, #255	; 0xff
 801046a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010472:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	2206      	movs	r2, #6
 8010478:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	2206      	movs	r2, #6
 8010480:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010488:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2201      	movs	r2, #1
 801048e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010492:	4b0d      	ldr	r3, [pc, #52]	; (80104c8 <tcp_alloc+0xf8>)
 8010494:	681a      	ldr	r2, [r3, #0]
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801049a:	4b0c      	ldr	r3, [pc, #48]	; (80104cc <tcp_alloc+0xfc>)
 801049c:	781a      	ldrb	r2, [r3, #0]
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80104a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	4a08      	ldr	r2, [pc, #32]	; (80104d0 <tcp_alloc+0x100>)
 80104b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	4a07      	ldr	r2, [pc, #28]	; (80104d4 <tcp_alloc+0x104>)
 80104b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80104bc:	68fb      	ldr	r3, [r7, #12]
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3710      	adds	r7, #16
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	2000e4f0 	.word	0x2000e4f0
 80104cc:	200041da 	.word	0x200041da
 80104d0:	08010189 	.word	0x08010189
 80104d4:	006ddd00 	.word	0x006ddd00

080104d8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
 80104de:	4603      	mov	r3, r0
 80104e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80104e2:	2040      	movs	r0, #64	; 0x40
 80104e4:	f7ff ff74 	bl	80103d0 <tcp_alloc>
 80104e8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80104ea:	68fb      	ldr	r3, [r7, #12]
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3710      	adds	r7, #16
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80104f4:	b480      	push	{r7}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d002      	beq.n	801050a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	683a      	ldr	r2, [r7, #0]
 8010508:	611a      	str	r2, [r3, #16]
  }
}
 801050a:	bf00      	nop
 801050c:	370c      	adds	r7, #12
 801050e:	46bd      	mov	sp, r7
 8010510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010514:	4770      	bx	lr
	...

08010518 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d00e      	beq.n	8010546 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	7d1b      	ldrb	r3, [r3, #20]
 801052c:	2b01      	cmp	r3, #1
 801052e:	d106      	bne.n	801053e <tcp_recv+0x26>
 8010530:	4b07      	ldr	r3, [pc, #28]	; (8010550 <tcp_recv+0x38>)
 8010532:	f240 72df 	movw	r2, #2015	; 0x7df
 8010536:	4907      	ldr	r1, [pc, #28]	; (8010554 <tcp_recv+0x3c>)
 8010538:	4807      	ldr	r0, [pc, #28]	; (8010558 <tcp_recv+0x40>)
 801053a:	f005 fe3f 	bl	80161bc <iprintf>
    pcb->recv = recv;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	683a      	ldr	r2, [r7, #0]
 8010542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010546:	bf00      	nop
 8010548:	3708      	adds	r7, #8
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}
 801054e:	bf00      	nop
 8010550:	08019634 	.word	0x08019634
 8010554:	08019bd0 	.word	0x08019bd0
 8010558:	08019678 	.word	0x08019678

0801055c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b082      	sub	sp, #8
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d00e      	beq.n	801058a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	7d1b      	ldrb	r3, [r3, #20]
 8010570:	2b01      	cmp	r3, #1
 8010572:	d106      	bne.n	8010582 <tcp_sent+0x26>
 8010574:	4b07      	ldr	r3, [pc, #28]	; (8010594 <tcp_sent+0x38>)
 8010576:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801057a:	4907      	ldr	r1, [pc, #28]	; (8010598 <tcp_sent+0x3c>)
 801057c:	4807      	ldr	r0, [pc, #28]	; (801059c <tcp_sent+0x40>)
 801057e:	f005 fe1d 	bl	80161bc <iprintf>
    pcb->sent = sent;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	683a      	ldr	r2, [r7, #0]
 8010586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801058a:	bf00      	nop
 801058c:	3708      	adds	r7, #8
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	08019634 	.word	0x08019634
 8010598:	08019bf8 	.word	0x08019bf8
 801059c:	08019678 	.word	0x08019678

080105a0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b082      	sub	sp, #8
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d00e      	beq.n	80105ce <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	7d1b      	ldrb	r3, [r3, #20]
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	d106      	bne.n	80105c6 <tcp_err+0x26>
 80105b8:	4b07      	ldr	r3, [pc, #28]	; (80105d8 <tcp_err+0x38>)
 80105ba:	f640 020d 	movw	r2, #2061	; 0x80d
 80105be:	4907      	ldr	r1, [pc, #28]	; (80105dc <tcp_err+0x3c>)
 80105c0:	4807      	ldr	r0, [pc, #28]	; (80105e0 <tcp_err+0x40>)
 80105c2:	f005 fdfb 	bl	80161bc <iprintf>
    pcb->errf = err;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	683a      	ldr	r2, [r7, #0]
 80105ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80105ce:	bf00      	nop
 80105d0:	3708      	adds	r7, #8
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	08019634 	.word	0x08019634
 80105dc:	08019c20 	.word	0x08019c20
 80105e0:	08019678 	.word	0x08019678

080105e4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b085      	sub	sp, #20
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d008      	beq.n	8010606 <tcp_accept+0x22>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	7d1b      	ldrb	r3, [r3, #20]
 80105f8:	2b01      	cmp	r3, #1
 80105fa:	d104      	bne.n	8010606 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	683a      	ldr	r2, [r7, #0]
 8010604:	619a      	str	r2, [r3, #24]
  }
}
 8010606:	bf00      	nop
 8010608:	3714      	adds	r7, #20
 801060a:	46bd      	mov	sp, r7
 801060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010610:	4770      	bx	lr
	...

08010614 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b084      	sub	sp, #16
 8010618:	af00      	add	r7, sp, #0
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	60b9      	str	r1, [r7, #8]
 801061e:	4613      	mov	r3, r2
 8010620:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d107      	bne.n	8010638 <tcp_poll+0x24>
 8010628:	4b0e      	ldr	r3, [pc, #56]	; (8010664 <tcp_poll+0x50>)
 801062a:	f640 023d 	movw	r2, #2109	; 0x83d
 801062e:	490e      	ldr	r1, [pc, #56]	; (8010668 <tcp_poll+0x54>)
 8010630:	480e      	ldr	r0, [pc, #56]	; (801066c <tcp_poll+0x58>)
 8010632:	f005 fdc3 	bl	80161bc <iprintf>
 8010636:	e011      	b.n	801065c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	7d1b      	ldrb	r3, [r3, #20]
 801063c:	2b01      	cmp	r3, #1
 801063e:	d106      	bne.n	801064e <tcp_poll+0x3a>
 8010640:	4b08      	ldr	r3, [pc, #32]	; (8010664 <tcp_poll+0x50>)
 8010642:	f640 023e 	movw	r2, #2110	; 0x83e
 8010646:	490a      	ldr	r1, [pc, #40]	; (8010670 <tcp_poll+0x5c>)
 8010648:	4808      	ldr	r0, [pc, #32]	; (801066c <tcp_poll+0x58>)
 801064a:	f005 fdb7 	bl	80161bc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	68ba      	ldr	r2, [r7, #8]
 8010652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	79fa      	ldrb	r2, [r7, #7]
 801065a:	775a      	strb	r2, [r3, #29]
}
 801065c:	3710      	adds	r7, #16
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}
 8010662:	bf00      	nop
 8010664:	08019634 	.word	0x08019634
 8010668:	08019c48 	.word	0x08019c48
 801066c:	08019678 	.word	0x08019678
 8010670:	08019c60 	.word	0x08019c60

08010674 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b082      	sub	sp, #8
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d107      	bne.n	8010692 <tcp_pcb_purge+0x1e>
 8010682:	4b21      	ldr	r3, [pc, #132]	; (8010708 <tcp_pcb_purge+0x94>)
 8010684:	f640 0251 	movw	r2, #2129	; 0x851
 8010688:	4920      	ldr	r1, [pc, #128]	; (801070c <tcp_pcb_purge+0x98>)
 801068a:	4821      	ldr	r0, [pc, #132]	; (8010710 <tcp_pcb_purge+0x9c>)
 801068c:	f005 fd96 	bl	80161bc <iprintf>
 8010690:	e037      	b.n	8010702 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	7d1b      	ldrb	r3, [r3, #20]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d033      	beq.n	8010702 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801069e:	2b0a      	cmp	r3, #10
 80106a0:	d02f      	beq.n	8010702 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d02b      	beq.n	8010702 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d007      	beq.n	80106c2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fe f89a 	bl	800e7f0 <pbuf_free>
      pcb->refused_data = NULL;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2200      	movs	r2, #0
 80106c0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d002      	beq.n	80106d0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f000 f986 	bl	80109dc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106d6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106dc:	4618      	mov	r0, r3
 80106de:	f7ff fcfb 	bl	80100d8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7ff fcf6 	bl	80100d8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2200      	movs	r2, #0
 80106f0:	66da      	str	r2, [r3, #108]	; 0x6c
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2200      	movs	r2, #0
 80106fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010702:	3708      	adds	r7, #8
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	08019634 	.word	0x08019634
 801070c:	08019c80 	.word	0x08019c80
 8010710:	08019678 	.word	0x08019678

08010714 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d106      	bne.n	8010732 <tcp_pcb_remove+0x1e>
 8010724:	4b3e      	ldr	r3, [pc, #248]	; (8010820 <tcp_pcb_remove+0x10c>)
 8010726:	f640 0283 	movw	r2, #2179	; 0x883
 801072a:	493e      	ldr	r1, [pc, #248]	; (8010824 <tcp_pcb_remove+0x110>)
 801072c:	483e      	ldr	r0, [pc, #248]	; (8010828 <tcp_pcb_remove+0x114>)
 801072e:	f005 fd45 	bl	80161bc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d106      	bne.n	8010746 <tcp_pcb_remove+0x32>
 8010738:	4b39      	ldr	r3, [pc, #228]	; (8010820 <tcp_pcb_remove+0x10c>)
 801073a:	f640 0284 	movw	r2, #2180	; 0x884
 801073e:	493b      	ldr	r1, [pc, #236]	; (801082c <tcp_pcb_remove+0x118>)
 8010740:	4839      	ldr	r0, [pc, #228]	; (8010828 <tcp_pcb_remove+0x114>)
 8010742:	f005 fd3b 	bl	80161bc <iprintf>

  TCP_RMV(pcblist, pcb);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	429a      	cmp	r2, r3
 801074e:	d105      	bne.n	801075c <tcp_pcb_remove+0x48>
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	68da      	ldr	r2, [r3, #12]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	601a      	str	r2, [r3, #0]
 801075a:	e013      	b.n	8010784 <tcp_pcb_remove+0x70>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	60fb      	str	r3, [r7, #12]
 8010762:	e00c      	b.n	801077e <tcp_pcb_remove+0x6a>
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	68da      	ldr	r2, [r3, #12]
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	429a      	cmp	r2, r3
 801076c:	d104      	bne.n	8010778 <tcp_pcb_remove+0x64>
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	68da      	ldr	r2, [r3, #12]
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	60da      	str	r2, [r3, #12]
 8010776:	e005      	b.n	8010784 <tcp_pcb_remove+0x70>
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	68db      	ldr	r3, [r3, #12]
 801077c:	60fb      	str	r3, [r7, #12]
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d1ef      	bne.n	8010764 <tcp_pcb_remove+0x50>
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	2200      	movs	r2, #0
 8010788:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801078a:	6838      	ldr	r0, [r7, #0]
 801078c:	f7ff ff72 	bl	8010674 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	7d1b      	ldrb	r3, [r3, #20]
 8010794:	2b0a      	cmp	r3, #10
 8010796:	d013      	beq.n	80107c0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801079c:	2b01      	cmp	r3, #1
 801079e:	d00f      	beq.n	80107c0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	8b5b      	ldrh	r3, [r3, #26]
 80107a4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d009      	beq.n	80107c0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	8b5b      	ldrh	r3, [r3, #26]
 80107b0:	f043 0302 	orr.w	r3, r3, #2
 80107b4:	b29a      	uxth	r2, r3
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80107ba:	6838      	ldr	r0, [r7, #0]
 80107bc:	f003 fbc8 	bl	8013f50 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	7d1b      	ldrb	r3, [r3, #20]
 80107c4:	2b01      	cmp	r3, #1
 80107c6:	d020      	beq.n	801080a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d006      	beq.n	80107de <tcp_pcb_remove+0xca>
 80107d0:	4b13      	ldr	r3, [pc, #76]	; (8010820 <tcp_pcb_remove+0x10c>)
 80107d2:	f640 0293 	movw	r2, #2195	; 0x893
 80107d6:	4916      	ldr	r1, [pc, #88]	; (8010830 <tcp_pcb_remove+0x11c>)
 80107d8:	4813      	ldr	r0, [pc, #76]	; (8010828 <tcp_pcb_remove+0x114>)
 80107da:	f005 fcef 	bl	80161bc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d006      	beq.n	80107f4 <tcp_pcb_remove+0xe0>
 80107e6:	4b0e      	ldr	r3, [pc, #56]	; (8010820 <tcp_pcb_remove+0x10c>)
 80107e8:	f640 0294 	movw	r2, #2196	; 0x894
 80107ec:	4911      	ldr	r1, [pc, #68]	; (8010834 <tcp_pcb_remove+0x120>)
 80107ee:	480e      	ldr	r0, [pc, #56]	; (8010828 <tcp_pcb_remove+0x114>)
 80107f0:	f005 fce4 	bl	80161bc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d006      	beq.n	801080a <tcp_pcb_remove+0xf6>
 80107fc:	4b08      	ldr	r3, [pc, #32]	; (8010820 <tcp_pcb_remove+0x10c>)
 80107fe:	f640 0296 	movw	r2, #2198	; 0x896
 8010802:	490d      	ldr	r1, [pc, #52]	; (8010838 <tcp_pcb_remove+0x124>)
 8010804:	4808      	ldr	r0, [pc, #32]	; (8010828 <tcp_pcb_remove+0x114>)
 8010806:	f005 fcd9 	bl	80161bc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	2200      	movs	r2, #0
 801080e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	2200      	movs	r2, #0
 8010814:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010816:	bf00      	nop
 8010818:	3710      	adds	r7, #16
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}
 801081e:	bf00      	nop
 8010820:	08019634 	.word	0x08019634
 8010824:	08019c9c 	.word	0x08019c9c
 8010828:	08019678 	.word	0x08019678
 801082c:	08019cb8 	.word	0x08019cb8
 8010830:	08019cd8 	.word	0x08019cd8
 8010834:	08019cf0 	.word	0x08019cf0
 8010838:	08019d0c 	.word	0x08019d0c

0801083c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b082      	sub	sp, #8
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d106      	bne.n	8010858 <tcp_next_iss+0x1c>
 801084a:	4b0a      	ldr	r3, [pc, #40]	; (8010874 <tcp_next_iss+0x38>)
 801084c:	f640 02af 	movw	r2, #2223	; 0x8af
 8010850:	4909      	ldr	r1, [pc, #36]	; (8010878 <tcp_next_iss+0x3c>)
 8010852:	480a      	ldr	r0, [pc, #40]	; (801087c <tcp_next_iss+0x40>)
 8010854:	f005 fcb2 	bl	80161bc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010858:	4b09      	ldr	r3, [pc, #36]	; (8010880 <tcp_next_iss+0x44>)
 801085a:	681a      	ldr	r2, [r3, #0]
 801085c:	4b09      	ldr	r3, [pc, #36]	; (8010884 <tcp_next_iss+0x48>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	4413      	add	r3, r2
 8010862:	4a07      	ldr	r2, [pc, #28]	; (8010880 <tcp_next_iss+0x44>)
 8010864:	6013      	str	r3, [r2, #0]
  return iss;
 8010866:	4b06      	ldr	r3, [pc, #24]	; (8010880 <tcp_next_iss+0x44>)
 8010868:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801086a:	4618      	mov	r0, r3
 801086c:	3708      	adds	r7, #8
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
 8010872:	bf00      	nop
 8010874:	08019634 	.word	0x08019634
 8010878:	08019d24 	.word	0x08019d24
 801087c:	08019678 	.word	0x08019678
 8010880:	20000014 	.word	0x20000014
 8010884:	2000e4f0 	.word	0x2000e4f0

08010888 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b086      	sub	sp, #24
 801088c:	af00      	add	r7, sp, #0
 801088e:	4603      	mov	r3, r0
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	607a      	str	r2, [r7, #4]
 8010894:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d106      	bne.n	80108aa <tcp_eff_send_mss_netif+0x22>
 801089c:	4b14      	ldr	r3, [pc, #80]	; (80108f0 <tcp_eff_send_mss_netif+0x68>)
 801089e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80108a2:	4914      	ldr	r1, [pc, #80]	; (80108f4 <tcp_eff_send_mss_netif+0x6c>)
 80108a4:	4814      	ldr	r0, [pc, #80]	; (80108f8 <tcp_eff_send_mss_netif+0x70>)
 80108a6:	f005 fc89 	bl	80161bc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d101      	bne.n	80108b4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80108b0:	89fb      	ldrh	r3, [r7, #14]
 80108b2:	e019      	b.n	80108e8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80108b8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80108ba:	8afb      	ldrh	r3, [r7, #22]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d012      	beq.n	80108e6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80108c0:	2328      	movs	r3, #40	; 0x28
 80108c2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80108c4:	8afa      	ldrh	r2, [r7, #22]
 80108c6:	8abb      	ldrh	r3, [r7, #20]
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d904      	bls.n	80108d6 <tcp_eff_send_mss_netif+0x4e>
 80108cc:	8afa      	ldrh	r2, [r7, #22]
 80108ce:	8abb      	ldrh	r3, [r7, #20]
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	e000      	b.n	80108d8 <tcp_eff_send_mss_netif+0x50>
 80108d6:	2300      	movs	r3, #0
 80108d8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80108da:	8a7a      	ldrh	r2, [r7, #18]
 80108dc:	89fb      	ldrh	r3, [r7, #14]
 80108de:	4293      	cmp	r3, r2
 80108e0:	bf28      	it	cs
 80108e2:	4613      	movcs	r3, r2
 80108e4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80108e6:	89fb      	ldrh	r3, [r7, #14]
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3718      	adds	r7, #24
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	08019634 	.word	0x08019634
 80108f4:	08019d40 	.word	0x08019d40
 80108f8:	08019678 	.word	0x08019678

080108fc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d119      	bne.n	8010944 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010910:	4b10      	ldr	r3, [pc, #64]	; (8010954 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010912:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010916:	4910      	ldr	r1, [pc, #64]	; (8010958 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010918:	4810      	ldr	r0, [pc, #64]	; (801095c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801091a:	f005 fc4f 	bl	80161bc <iprintf>

  while (pcb != NULL) {
 801091e:	e011      	b.n	8010944 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	681a      	ldr	r2, [r3, #0]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	429a      	cmp	r2, r3
 801092a:	d108      	bne.n	801093e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	68db      	ldr	r3, [r3, #12]
 8010930:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010932:	68f8      	ldr	r0, [r7, #12]
 8010934:	f7fe fd52 	bl	800f3dc <tcp_abort>
      pcb = next;
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	60fb      	str	r3, [r7, #12]
 801093c:	e002      	b.n	8010944 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	68db      	ldr	r3, [r3, #12]
 8010942:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d1ea      	bne.n	8010920 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801094a:	bf00      	nop
 801094c:	3710      	adds	r7, #16
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
 8010952:	bf00      	nop
 8010954:	08019634 	.word	0x08019634
 8010958:	08019d68 	.word	0x08019d68
 801095c:	08019678 	.word	0x08019678

08010960 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d02a      	beq.n	80109c6 <tcp_netif_ip_addr_changed+0x66>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d026      	beq.n	80109c6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010978:	4b15      	ldr	r3, [pc, #84]	; (80109d0 <tcp_netif_ip_addr_changed+0x70>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	4619      	mov	r1, r3
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f7ff ffbc 	bl	80108fc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010984:	4b13      	ldr	r3, [pc, #76]	; (80109d4 <tcp_netif_ip_addr_changed+0x74>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	4619      	mov	r1, r3
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7ff ffb6 	bl	80108fc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d017      	beq.n	80109c6 <tcp_netif_ip_addr_changed+0x66>
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d013      	beq.n	80109c6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801099e:	4b0e      	ldr	r3, [pc, #56]	; (80109d8 <tcp_netif_ip_addr_changed+0x78>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	60fb      	str	r3, [r7, #12]
 80109a4:	e00c      	b.n	80109c0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d103      	bne.n	80109ba <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	681a      	ldr	r2, [r3, #0]
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	68db      	ldr	r3, [r3, #12]
 80109be:	60fb      	str	r3, [r7, #12]
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d1ef      	bne.n	80109a6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80109c6:	bf00      	nop
 80109c8:	3710      	adds	r7, #16
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop
 80109d0:	2000e4ec 	.word	0x2000e4ec
 80109d4:	2000e4f8 	.word	0x2000e4f8
 80109d8:	2000e4f4 	.word	0x2000e4f4

080109dc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b082      	sub	sp, #8
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d007      	beq.n	80109fc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7ff fb71 	bl	80100d8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2200      	movs	r2, #0
 80109fa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80109fc:	bf00      	nop
 80109fe:	3708      	adds	r7, #8
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010a04:	b590      	push	{r4, r7, lr}
 8010a06:	b08d      	sub	sp, #52	; 0x34
 8010a08:	af04      	add	r7, sp, #16
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d105      	bne.n	8010a20 <tcp_input+0x1c>
 8010a14:	4b9b      	ldr	r3, [pc, #620]	; (8010c84 <tcp_input+0x280>)
 8010a16:	2283      	movs	r2, #131	; 0x83
 8010a18:	499b      	ldr	r1, [pc, #620]	; (8010c88 <tcp_input+0x284>)
 8010a1a:	489c      	ldr	r0, [pc, #624]	; (8010c8c <tcp_input+0x288>)
 8010a1c:	f005 fbce 	bl	80161bc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	685b      	ldr	r3, [r3, #4]
 8010a24:	4a9a      	ldr	r2, [pc, #616]	; (8010c90 <tcp_input+0x28c>)
 8010a26:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	895b      	ldrh	r3, [r3, #10]
 8010a2c:	2b13      	cmp	r3, #19
 8010a2e:	f240 83c2 	bls.w	80111b6 <tcp_input+0x7b2>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010a32:	4b98      	ldr	r3, [pc, #608]	; (8010c94 <tcp_input+0x290>)
 8010a34:	695a      	ldr	r2, [r3, #20]
 8010a36:	4b97      	ldr	r3, [pc, #604]	; (8010c94 <tcp_input+0x290>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	4610      	mov	r0, r2
 8010a3e:	f7fb fccf 	bl	800c3e0 <ip4_addr_isbroadcast_u32>
 8010a42:	4603      	mov	r3, r0
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	f040 83bb 	bne.w	80111c0 <tcp_input+0x7bc>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010a4a:	4b92      	ldr	r3, [pc, #584]	; (8010c94 <tcp_input+0x290>)
 8010a4c:	695b      	ldr	r3, [r3, #20]
 8010a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010a52:	2be0      	cmp	r3, #224	; 0xe0
 8010a54:	f000 83b4 	beq.w	80111c0 <tcp_input+0x7bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010a58:	4b8d      	ldr	r3, [pc, #564]	; (8010c90 <tcp_input+0x28c>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	899b      	ldrh	r3, [r3, #12]
 8010a5e:	b29b      	uxth	r3, r3
 8010a60:	4618      	mov	r0, r3
 8010a62:	f7fa f90f 	bl	800ac84 <lwip_htons>
 8010a66:	4603      	mov	r3, r0
 8010a68:	0b1b      	lsrs	r3, r3, #12
 8010a6a:	b29b      	uxth	r3, r3
 8010a6c:	b2db      	uxtb	r3, r3
 8010a6e:	009b      	lsls	r3, r3, #2
 8010a70:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010a72:	7cbb      	ldrb	r3, [r7, #18]
 8010a74:	2b13      	cmp	r3, #19
 8010a76:	f240 83a3 	bls.w	80111c0 <tcp_input+0x7bc>
 8010a7a:	7cbb      	ldrb	r3, [r7, #18]
 8010a7c:	b29a      	uxth	r2, r3
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	891b      	ldrh	r3, [r3, #8]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	f200 839c 	bhi.w	80111c0 <tcp_input+0x7bc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010a88:	7cbb      	ldrb	r3, [r7, #18]
 8010a8a:	b29b      	uxth	r3, r3
 8010a8c:	3b14      	subs	r3, #20
 8010a8e:	b29a      	uxth	r2, r3
 8010a90:	4b81      	ldr	r3, [pc, #516]	; (8010c98 <tcp_input+0x294>)
 8010a92:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010a94:	4b81      	ldr	r3, [pc, #516]	; (8010c9c <tcp_input+0x298>)
 8010a96:	2200      	movs	r2, #0
 8010a98:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	895a      	ldrh	r2, [r3, #10]
 8010a9e:	7cbb      	ldrb	r3, [r7, #18]
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d309      	bcc.n	8010aba <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010aa6:	4b7c      	ldr	r3, [pc, #496]	; (8010c98 <tcp_input+0x294>)
 8010aa8:	881a      	ldrh	r2, [r3, #0]
 8010aaa:	4b7d      	ldr	r3, [pc, #500]	; (8010ca0 <tcp_input+0x29c>)
 8010aac:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010aae:	7cbb      	ldrb	r3, [r7, #18]
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f7fd fde4 	bl	800e680 <pbuf_remove_header>
 8010ab8:	e04e      	b.n	8010b58 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d105      	bne.n	8010ace <tcp_input+0xca>
 8010ac2:	4b70      	ldr	r3, [pc, #448]	; (8010c84 <tcp_input+0x280>)
 8010ac4:	22c2      	movs	r2, #194	; 0xc2
 8010ac6:	4977      	ldr	r1, [pc, #476]	; (8010ca4 <tcp_input+0x2a0>)
 8010ac8:	4870      	ldr	r0, [pc, #448]	; (8010c8c <tcp_input+0x288>)
 8010aca:	f005 fb77 	bl	80161bc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010ace:	2114      	movs	r1, #20
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f7fd fdd5 	bl	800e680 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	895a      	ldrh	r2, [r3, #10]
 8010ada:	4b71      	ldr	r3, [pc, #452]	; (8010ca0 <tcp_input+0x29c>)
 8010adc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010ade:	4b6e      	ldr	r3, [pc, #440]	; (8010c98 <tcp_input+0x294>)
 8010ae0:	881a      	ldrh	r2, [r3, #0]
 8010ae2:	4b6f      	ldr	r3, [pc, #444]	; (8010ca0 <tcp_input+0x29c>)
 8010ae4:	881b      	ldrh	r3, [r3, #0]
 8010ae6:	1ad3      	subs	r3, r2, r3
 8010ae8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010aea:	4b6d      	ldr	r3, [pc, #436]	; (8010ca0 <tcp_input+0x29c>)
 8010aec:	881b      	ldrh	r3, [r3, #0]
 8010aee:	4619      	mov	r1, r3
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f7fd fdc5 	bl	800e680 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	895b      	ldrh	r3, [r3, #10]
 8010afc:	8a3a      	ldrh	r2, [r7, #16]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	f200 835b 	bhi.w	80111ba <tcp_input+0x7b6>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	685b      	ldr	r3, [r3, #4]
 8010b0a:	4a64      	ldr	r2, [pc, #400]	; (8010c9c <tcp_input+0x298>)
 8010b0c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	8a3a      	ldrh	r2, [r7, #16]
 8010b14:	4611      	mov	r1, r2
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fd fdb2 	bl	800e680 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	891a      	ldrh	r2, [r3, #8]
 8010b20:	8a3b      	ldrh	r3, [r7, #16]
 8010b22:	1ad3      	subs	r3, r2, r3
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	895b      	ldrh	r3, [r3, #10]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d005      	beq.n	8010b3e <tcp_input+0x13a>
 8010b32:	4b54      	ldr	r3, [pc, #336]	; (8010c84 <tcp_input+0x280>)
 8010b34:	22df      	movs	r2, #223	; 0xdf
 8010b36:	495c      	ldr	r1, [pc, #368]	; (8010ca8 <tcp_input+0x2a4>)
 8010b38:	4854      	ldr	r0, [pc, #336]	; (8010c8c <tcp_input+0x288>)
 8010b3a:	f005 fb3f 	bl	80161bc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	891a      	ldrh	r2, [r3, #8]
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	891b      	ldrh	r3, [r3, #8]
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d005      	beq.n	8010b58 <tcp_input+0x154>
 8010b4c:	4b4d      	ldr	r3, [pc, #308]	; (8010c84 <tcp_input+0x280>)
 8010b4e:	22e0      	movs	r2, #224	; 0xe0
 8010b50:	4956      	ldr	r1, [pc, #344]	; (8010cac <tcp_input+0x2a8>)
 8010b52:	484e      	ldr	r0, [pc, #312]	; (8010c8c <tcp_input+0x288>)
 8010b54:	f005 fb32 	bl	80161bc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010b58:	4b4d      	ldr	r3, [pc, #308]	; (8010c90 <tcp_input+0x28c>)
 8010b5a:	681c      	ldr	r4, [r3, #0]
 8010b5c:	4b4c      	ldr	r3, [pc, #304]	; (8010c90 <tcp_input+0x28c>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	881b      	ldrh	r3, [r3, #0]
 8010b62:	b29b      	uxth	r3, r3
 8010b64:	4618      	mov	r0, r3
 8010b66:	f7fa f88d 	bl	800ac84 <lwip_htons>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010b6e:	4b48      	ldr	r3, [pc, #288]	; (8010c90 <tcp_input+0x28c>)
 8010b70:	681c      	ldr	r4, [r3, #0]
 8010b72:	4b47      	ldr	r3, [pc, #284]	; (8010c90 <tcp_input+0x28c>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	885b      	ldrh	r3, [r3, #2]
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7fa f882 	bl	800ac84 <lwip_htons>
 8010b80:	4603      	mov	r3, r0
 8010b82:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010b84:	4b42      	ldr	r3, [pc, #264]	; (8010c90 <tcp_input+0x28c>)
 8010b86:	681c      	ldr	r4, [r3, #0]
 8010b88:	4b41      	ldr	r3, [pc, #260]	; (8010c90 <tcp_input+0x28c>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	685b      	ldr	r3, [r3, #4]
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7fa f88d 	bl	800acae <lwip_htonl>
 8010b94:	4603      	mov	r3, r0
 8010b96:	6063      	str	r3, [r4, #4]
 8010b98:	6863      	ldr	r3, [r4, #4]
 8010b9a:	4a45      	ldr	r2, [pc, #276]	; (8010cb0 <tcp_input+0x2ac>)
 8010b9c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010b9e:	4b3c      	ldr	r3, [pc, #240]	; (8010c90 <tcp_input+0x28c>)
 8010ba0:	681c      	ldr	r4, [r3, #0]
 8010ba2:	4b3b      	ldr	r3, [pc, #236]	; (8010c90 <tcp_input+0x28c>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	689b      	ldr	r3, [r3, #8]
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7fa f880 	bl	800acae <lwip_htonl>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	60a3      	str	r3, [r4, #8]
 8010bb2:	68a3      	ldr	r3, [r4, #8]
 8010bb4:	4a3f      	ldr	r2, [pc, #252]	; (8010cb4 <tcp_input+0x2b0>)
 8010bb6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010bb8:	4b35      	ldr	r3, [pc, #212]	; (8010c90 <tcp_input+0x28c>)
 8010bba:	681c      	ldr	r4, [r3, #0]
 8010bbc:	4b34      	ldr	r3, [pc, #208]	; (8010c90 <tcp_input+0x28c>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	89db      	ldrh	r3, [r3, #14]
 8010bc2:	b29b      	uxth	r3, r3
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f7fa f85d 	bl	800ac84 <lwip_htons>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010bce:	4b30      	ldr	r3, [pc, #192]	; (8010c90 <tcp_input+0x28c>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	899b      	ldrh	r3, [r3, #12]
 8010bd4:	b29b      	uxth	r3, r3
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fa f854 	bl	800ac84 <lwip_htons>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010be4:	b2da      	uxtb	r2, r3
 8010be6:	4b34      	ldr	r3, [pc, #208]	; (8010cb8 <tcp_input+0x2b4>)
 8010be8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	891a      	ldrh	r2, [r3, #8]
 8010bee:	4b33      	ldr	r3, [pc, #204]	; (8010cbc <tcp_input+0x2b8>)
 8010bf0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010bf2:	4b31      	ldr	r3, [pc, #196]	; (8010cb8 <tcp_input+0x2b4>)
 8010bf4:	781b      	ldrb	r3, [r3, #0]
 8010bf6:	f003 0303 	and.w	r3, r3, #3
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d00c      	beq.n	8010c18 <tcp_input+0x214>
    tcplen++;
 8010bfe:	4b2f      	ldr	r3, [pc, #188]	; (8010cbc <tcp_input+0x2b8>)
 8010c00:	881b      	ldrh	r3, [r3, #0]
 8010c02:	3301      	adds	r3, #1
 8010c04:	b29a      	uxth	r2, r3
 8010c06:	4b2d      	ldr	r3, [pc, #180]	; (8010cbc <tcp_input+0x2b8>)
 8010c08:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	891a      	ldrh	r2, [r3, #8]
 8010c0e:	4b2b      	ldr	r3, [pc, #172]	; (8010cbc <tcp_input+0x2b8>)
 8010c10:	881b      	ldrh	r3, [r3, #0]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	f200 82d3 	bhi.w	80111be <tcp_input+0x7ba>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c1c:	4b28      	ldr	r3, [pc, #160]	; (8010cc0 <tcp_input+0x2bc>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	61fb      	str	r3, [r7, #28]
 8010c22:	e09d      	b.n	8010d60 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010c24:	69fb      	ldr	r3, [r7, #28]
 8010c26:	7d1b      	ldrb	r3, [r3, #20]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d105      	bne.n	8010c38 <tcp_input+0x234>
 8010c2c:	4b15      	ldr	r3, [pc, #84]	; (8010c84 <tcp_input+0x280>)
 8010c2e:	22fb      	movs	r2, #251	; 0xfb
 8010c30:	4924      	ldr	r1, [pc, #144]	; (8010cc4 <tcp_input+0x2c0>)
 8010c32:	4816      	ldr	r0, [pc, #88]	; (8010c8c <tcp_input+0x288>)
 8010c34:	f005 fac2 	bl	80161bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	7d1b      	ldrb	r3, [r3, #20]
 8010c3c:	2b0a      	cmp	r3, #10
 8010c3e:	d105      	bne.n	8010c4c <tcp_input+0x248>
 8010c40:	4b10      	ldr	r3, [pc, #64]	; (8010c84 <tcp_input+0x280>)
 8010c42:	22fc      	movs	r2, #252	; 0xfc
 8010c44:	4920      	ldr	r1, [pc, #128]	; (8010cc8 <tcp_input+0x2c4>)
 8010c46:	4811      	ldr	r0, [pc, #68]	; (8010c8c <tcp_input+0x288>)
 8010c48:	f005 fab8 	bl	80161bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010c4c:	69fb      	ldr	r3, [r7, #28]
 8010c4e:	7d1b      	ldrb	r3, [r3, #20]
 8010c50:	2b01      	cmp	r3, #1
 8010c52:	d105      	bne.n	8010c60 <tcp_input+0x25c>
 8010c54:	4b0b      	ldr	r3, [pc, #44]	; (8010c84 <tcp_input+0x280>)
 8010c56:	22fd      	movs	r2, #253	; 0xfd
 8010c58:	491c      	ldr	r1, [pc, #112]	; (8010ccc <tcp_input+0x2c8>)
 8010c5a:	480c      	ldr	r0, [pc, #48]	; (8010c8c <tcp_input+0x288>)
 8010c5c:	f005 faae 	bl	80161bc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	7a1b      	ldrb	r3, [r3, #8]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d033      	beq.n	8010cd0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010c68:	69fb      	ldr	r3, [r7, #28]
 8010c6a:	7a1a      	ldrb	r2, [r3, #8]
 8010c6c:	4b09      	ldr	r3, [pc, #36]	; (8010c94 <tcp_input+0x290>)
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c74:	3301      	adds	r3, #1
 8010c76:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d029      	beq.n	8010cd0 <tcp_input+0x2cc>
      prev = pcb;
 8010c7c:	69fb      	ldr	r3, [r7, #28]
 8010c7e:	61bb      	str	r3, [r7, #24]
      continue;
 8010c80:	e06b      	b.n	8010d5a <tcp_input+0x356>
 8010c82:	bf00      	nop
 8010c84:	08019d9c 	.word	0x08019d9c
 8010c88:	08019dd0 	.word	0x08019dd0
 8010c8c:	08019de8 	.word	0x08019de8
 8010c90:	200041ec 	.word	0x200041ec
 8010c94:	20007418 	.word	0x20007418
 8010c98:	200041f0 	.word	0x200041f0
 8010c9c:	200041f4 	.word	0x200041f4
 8010ca0:	200041f2 	.word	0x200041f2
 8010ca4:	08019e10 	.word	0x08019e10
 8010ca8:	08019e20 	.word	0x08019e20
 8010cac:	08019e2c 	.word	0x08019e2c
 8010cb0:	200041fc 	.word	0x200041fc
 8010cb4:	20004200 	.word	0x20004200
 8010cb8:	20004208 	.word	0x20004208
 8010cbc:	20004206 	.word	0x20004206
 8010cc0:	2000e4ec 	.word	0x2000e4ec
 8010cc4:	08019e4c 	.word	0x08019e4c
 8010cc8:	08019e74 	.word	0x08019e74
 8010ccc:	08019ea0 	.word	0x08019ea0
    }

    if (pcb->remote_port == tcphdr->src &&
 8010cd0:	69fb      	ldr	r3, [r7, #28]
 8010cd2:	8b1a      	ldrh	r2, [r3, #24]
 8010cd4:	4b94      	ldr	r3, [pc, #592]	; (8010f28 <tcp_input+0x524>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	881b      	ldrh	r3, [r3, #0]
 8010cda:	b29b      	uxth	r3, r3
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d13a      	bne.n	8010d56 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010ce0:	69fb      	ldr	r3, [r7, #28]
 8010ce2:	8ada      	ldrh	r2, [r3, #22]
 8010ce4:	4b90      	ldr	r3, [pc, #576]	; (8010f28 <tcp_input+0x524>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	885b      	ldrh	r3, [r3, #2]
 8010cea:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010cec:	429a      	cmp	r2, r3
 8010cee:	d132      	bne.n	8010d56 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010cf0:	69fb      	ldr	r3, [r7, #28]
 8010cf2:	685a      	ldr	r2, [r3, #4]
 8010cf4:	4b8d      	ldr	r3, [pc, #564]	; (8010f2c <tcp_input+0x528>)
 8010cf6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d12c      	bne.n	8010d56 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010cfc:	69fb      	ldr	r3, [r7, #28]
 8010cfe:	681a      	ldr	r2, [r3, #0]
 8010d00:	4b8a      	ldr	r3, [pc, #552]	; (8010f2c <tcp_input+0x528>)
 8010d02:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d126      	bne.n	8010d56 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010d08:	69fb      	ldr	r3, [r7, #28]
 8010d0a:	68da      	ldr	r2, [r3, #12]
 8010d0c:	69fb      	ldr	r3, [r7, #28]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d106      	bne.n	8010d20 <tcp_input+0x31c>
 8010d12:	4b87      	ldr	r3, [pc, #540]	; (8010f30 <tcp_input+0x52c>)
 8010d14:	f240 120d 	movw	r2, #269	; 0x10d
 8010d18:	4986      	ldr	r1, [pc, #536]	; (8010f34 <tcp_input+0x530>)
 8010d1a:	4887      	ldr	r0, [pc, #540]	; (8010f38 <tcp_input+0x534>)
 8010d1c:	f005 fa4e 	bl	80161bc <iprintf>
      if (prev != NULL) {
 8010d20:	69bb      	ldr	r3, [r7, #24]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d00a      	beq.n	8010d3c <tcp_input+0x338>
        prev->next = pcb->next;
 8010d26:	69fb      	ldr	r3, [r7, #28]
 8010d28:	68da      	ldr	r2, [r3, #12]
 8010d2a:	69bb      	ldr	r3, [r7, #24]
 8010d2c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010d2e:	4b83      	ldr	r3, [pc, #524]	; (8010f3c <tcp_input+0x538>)
 8010d30:	681a      	ldr	r2, [r3, #0]
 8010d32:	69fb      	ldr	r3, [r7, #28]
 8010d34:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010d36:	4a81      	ldr	r2, [pc, #516]	; (8010f3c <tcp_input+0x538>)
 8010d38:	69fb      	ldr	r3, [r7, #28]
 8010d3a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010d3c:	69fb      	ldr	r3, [r7, #28]
 8010d3e:	68da      	ldr	r2, [r3, #12]
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d111      	bne.n	8010d6a <tcp_input+0x366>
 8010d46:	4b7a      	ldr	r3, [pc, #488]	; (8010f30 <tcp_input+0x52c>)
 8010d48:	f240 1215 	movw	r2, #277	; 0x115
 8010d4c:	497c      	ldr	r1, [pc, #496]	; (8010f40 <tcp_input+0x53c>)
 8010d4e:	487a      	ldr	r0, [pc, #488]	; (8010f38 <tcp_input+0x534>)
 8010d50:	f005 fa34 	bl	80161bc <iprintf>
      break;
 8010d54:	e009      	b.n	8010d6a <tcp_input+0x366>
    }
    prev = pcb;
 8010d56:	69fb      	ldr	r3, [r7, #28]
 8010d58:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d5a:	69fb      	ldr	r3, [r7, #28]
 8010d5c:	68db      	ldr	r3, [r3, #12]
 8010d5e:	61fb      	str	r3, [r7, #28]
 8010d60:	69fb      	ldr	r3, [r7, #28]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	f47f af5e 	bne.w	8010c24 <tcp_input+0x220>
 8010d68:	e000      	b.n	8010d6c <tcp_input+0x368>
      break;
 8010d6a:	bf00      	nop
  }

  if (pcb == NULL) {
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	f040 8095 	bne.w	8010e9e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d74:	4b73      	ldr	r3, [pc, #460]	; (8010f44 <tcp_input+0x540>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	61fb      	str	r3, [r7, #28]
 8010d7a:	e03f      	b.n	8010dfc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010d7c:	69fb      	ldr	r3, [r7, #28]
 8010d7e:	7d1b      	ldrb	r3, [r3, #20]
 8010d80:	2b0a      	cmp	r3, #10
 8010d82:	d006      	beq.n	8010d92 <tcp_input+0x38e>
 8010d84:	4b6a      	ldr	r3, [pc, #424]	; (8010f30 <tcp_input+0x52c>)
 8010d86:	f240 121f 	movw	r2, #287	; 0x11f
 8010d8a:	496f      	ldr	r1, [pc, #444]	; (8010f48 <tcp_input+0x544>)
 8010d8c:	486a      	ldr	r0, [pc, #424]	; (8010f38 <tcp_input+0x534>)
 8010d8e:	f005 fa15 	bl	80161bc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010d92:	69fb      	ldr	r3, [r7, #28]
 8010d94:	7a1b      	ldrb	r3, [r3, #8]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d009      	beq.n	8010dae <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010d9a:	69fb      	ldr	r3, [r7, #28]
 8010d9c:	7a1a      	ldrb	r2, [r3, #8]
 8010d9e:	4b63      	ldr	r3, [pc, #396]	; (8010f2c <tcp_input+0x528>)
 8010da0:	685b      	ldr	r3, [r3, #4]
 8010da2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010da6:	3301      	adds	r3, #1
 8010da8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d122      	bne.n	8010df4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	8b1a      	ldrh	r2, [r3, #24]
 8010db2:	4b5d      	ldr	r3, [pc, #372]	; (8010f28 <tcp_input+0x524>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	881b      	ldrh	r3, [r3, #0]
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d11b      	bne.n	8010df6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010dbe:	69fb      	ldr	r3, [r7, #28]
 8010dc0:	8ada      	ldrh	r2, [r3, #22]
 8010dc2:	4b59      	ldr	r3, [pc, #356]	; (8010f28 <tcp_input+0x524>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	885b      	ldrh	r3, [r3, #2]
 8010dc8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d113      	bne.n	8010df6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010dce:	69fb      	ldr	r3, [r7, #28]
 8010dd0:	685a      	ldr	r2, [r3, #4]
 8010dd2:	4b56      	ldr	r3, [pc, #344]	; (8010f2c <tcp_input+0x528>)
 8010dd4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d10d      	bne.n	8010df6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010dda:	69fb      	ldr	r3, [r7, #28]
 8010ddc:	681a      	ldr	r2, [r3, #0]
 8010dde:	4b53      	ldr	r3, [pc, #332]	; (8010f2c <tcp_input+0x528>)
 8010de0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d107      	bne.n	8010df6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010de6:	69f8      	ldr	r0, [r7, #28]
 8010de8:	f000 fb4e 	bl	8011488 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f7fd fcff 	bl	800e7f0 <pbuf_free>
        return;
 8010df2:	e1ea      	b.n	80111ca <tcp_input+0x7c6>
        continue;
 8010df4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010df6:	69fb      	ldr	r3, [r7, #28]
 8010df8:	68db      	ldr	r3, [r3, #12]
 8010dfa:	61fb      	str	r3, [r7, #28]
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d1bc      	bne.n	8010d7c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010e02:	2300      	movs	r3, #0
 8010e04:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010e06:	4b51      	ldr	r3, [pc, #324]	; (8010f4c <tcp_input+0x548>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	617b      	str	r3, [r7, #20]
 8010e0c:	e02a      	b.n	8010e64 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	7a1b      	ldrb	r3, [r3, #8]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d00c      	beq.n	8010e30 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	7a1a      	ldrb	r2, [r3, #8]
 8010e1a:	4b44      	ldr	r3, [pc, #272]	; (8010f2c <tcp_input+0x528>)
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e22:	3301      	adds	r3, #1
 8010e24:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d002      	beq.n	8010e30 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	61bb      	str	r3, [r7, #24]
        continue;
 8010e2e:	e016      	b.n	8010e5e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	8ada      	ldrh	r2, [r3, #22]
 8010e34:	4b3c      	ldr	r3, [pc, #240]	; (8010f28 <tcp_input+0x524>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	885b      	ldrh	r3, [r3, #2]
 8010e3a:	b29b      	uxth	r3, r3
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d10c      	bne.n	8010e5a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	681a      	ldr	r2, [r3, #0]
 8010e44:	4b39      	ldr	r3, [pc, #228]	; (8010f2c <tcp_input+0x528>)
 8010e46:	695b      	ldr	r3, [r3, #20]
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d00f      	beq.n	8010e6c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d00d      	beq.n	8010e6e <tcp_input+0x46a>
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d009      	beq.n	8010e6e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	617b      	str	r3, [r7, #20]
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d1d1      	bne.n	8010e0e <tcp_input+0x40a>
 8010e6a:	e000      	b.n	8010e6e <tcp_input+0x46a>
            break;
 8010e6c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d014      	beq.n	8010e9e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010e74:	69bb      	ldr	r3, [r7, #24]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d00a      	beq.n	8010e90 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	68da      	ldr	r2, [r3, #12]
 8010e7e:	69bb      	ldr	r3, [r7, #24]
 8010e80:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010e82:	4b32      	ldr	r3, [pc, #200]	; (8010f4c <tcp_input+0x548>)
 8010e84:	681a      	ldr	r2, [r3, #0]
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010e8a:	4a30      	ldr	r2, [pc, #192]	; (8010f4c <tcp_input+0x548>)
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010e90:	6978      	ldr	r0, [r7, #20]
 8010e92:	f000 f9fb 	bl	801128c <tcp_listen_input>
      }
      pbuf_free(p);
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f7fd fcaa 	bl	800e7f0 <pbuf_free>
      return;
 8010e9c:	e195      	b.n	80111ca <tcp_input+0x7c6>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010e9e:	69fb      	ldr	r3, [r7, #28]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	f000 815e 	beq.w	8011162 <tcp_input+0x75e>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010ea6:	4b2a      	ldr	r3, [pc, #168]	; (8010f50 <tcp_input+0x54c>)
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	891a      	ldrh	r2, [r3, #8]
 8010eb0:	4b27      	ldr	r3, [pc, #156]	; (8010f50 <tcp_input+0x54c>)
 8010eb2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010eb4:	4a26      	ldr	r2, [pc, #152]	; (8010f50 <tcp_input+0x54c>)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010eba:	4b1b      	ldr	r3, [pc, #108]	; (8010f28 <tcp_input+0x524>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	4a24      	ldr	r2, [pc, #144]	; (8010f50 <tcp_input+0x54c>)
 8010ec0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010ec2:	4b24      	ldr	r3, [pc, #144]	; (8010f54 <tcp_input+0x550>)
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010ec8:	4b23      	ldr	r3, [pc, #140]	; (8010f58 <tcp_input+0x554>)
 8010eca:	2200      	movs	r2, #0
 8010ecc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010ece:	4b23      	ldr	r3, [pc, #140]	; (8010f5c <tcp_input+0x558>)
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010ed4:	4b22      	ldr	r3, [pc, #136]	; (8010f60 <tcp_input+0x55c>)
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	f003 0308 	and.w	r3, r3, #8
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d006      	beq.n	8010eee <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	7b5b      	ldrb	r3, [r3, #13]
 8010ee4:	f043 0301 	orr.w	r3, r3, #1
 8010ee8:	b2da      	uxtb	r2, r3
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010eee:	69fb      	ldr	r3, [r7, #28]
 8010ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d038      	beq.n	8010f68 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010ef6:	69f8      	ldr	r0, [r7, #28]
 8010ef8:	f7ff f872 	bl	800ffe0 <tcp_process_refused_data>
 8010efc:	4603      	mov	r3, r0
 8010efe:	f113 0f0d 	cmn.w	r3, #13
 8010f02:	d007      	beq.n	8010f14 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010f04:	69fb      	ldr	r3, [r7, #28]
 8010f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d02d      	beq.n	8010f68 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010f0c:	4b15      	ldr	r3, [pc, #84]	; (8010f64 <tcp_input+0x560>)
 8010f0e:	881b      	ldrh	r3, [r3, #0]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d029      	beq.n	8010f68 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	f040 8104 	bne.w	8011126 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010f1e:	69f8      	ldr	r0, [r7, #28]
 8010f20:	f003 fe34 	bl	8014b8c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010f24:	e0ff      	b.n	8011126 <tcp_input+0x722>
 8010f26:	bf00      	nop
 8010f28:	200041ec 	.word	0x200041ec
 8010f2c:	20007418 	.word	0x20007418
 8010f30:	08019d9c 	.word	0x08019d9c
 8010f34:	08019ec8 	.word	0x08019ec8
 8010f38:	08019de8 	.word	0x08019de8
 8010f3c:	2000e4ec 	.word	0x2000e4ec
 8010f40:	08019ef4 	.word	0x08019ef4
 8010f44:	2000e4fc 	.word	0x2000e4fc
 8010f48:	08019f20 	.word	0x08019f20
 8010f4c:	2000e4f4 	.word	0x2000e4f4
 8010f50:	200041dc 	.word	0x200041dc
 8010f54:	2000420c 	.word	0x2000420c
 8010f58:	20004209 	.word	0x20004209
 8010f5c:	20004204 	.word	0x20004204
 8010f60:	20004208 	.word	0x20004208
 8010f64:	20004206 	.word	0x20004206
      }
    }
    tcp_input_pcb = pcb;
 8010f68:	4a99      	ldr	r2, [pc, #612]	; (80111d0 <tcp_input+0x7cc>)
 8010f6a:	69fb      	ldr	r3, [r7, #28]
 8010f6c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010f6e:	69f8      	ldr	r0, [r7, #28]
 8010f70:	f000 fb06 	bl	8011580 <tcp_process>
 8010f74:	4603      	mov	r3, r0
 8010f76:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010f78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f7c:	f113 0f0d 	cmn.w	r3, #13
 8010f80:	f000 80dc 	beq.w	801113c <tcp_input+0x738>
      if (recv_flags & TF_RESET) {
 8010f84:	4b93      	ldr	r3, [pc, #588]	; (80111d4 <tcp_input+0x7d0>)
 8010f86:	781b      	ldrb	r3, [r3, #0]
 8010f88:	f003 0308 	and.w	r3, r3, #8
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d015      	beq.n	8010fbc <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010f90:	69fb      	ldr	r3, [r7, #28]
 8010f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d008      	beq.n	8010fac <tcp_input+0x5a8>
 8010f9a:	69fb      	ldr	r3, [r7, #28]
 8010f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010fa0:	69fa      	ldr	r2, [r7, #28]
 8010fa2:	6912      	ldr	r2, [r2, #16]
 8010fa4:	f06f 010d 	mvn.w	r1, #13
 8010fa8:	4610      	mov	r0, r2
 8010faa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010fac:	69f9      	ldr	r1, [r7, #28]
 8010fae:	488a      	ldr	r0, [pc, #552]	; (80111d8 <tcp_input+0x7d4>)
 8010fb0:	f7ff fbb0 	bl	8010714 <tcp_pcb_remove>
        tcp_free(pcb);
 8010fb4:	69f8      	ldr	r0, [r7, #28]
 8010fb6:	f7fd fed7 	bl	800ed68 <tcp_free>
 8010fba:	e0bf      	b.n	801113c <tcp_input+0x738>
      } else {
        err = ERR_OK;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010fc0:	4b86      	ldr	r3, [pc, #536]	; (80111dc <tcp_input+0x7d8>)
 8010fc2:	881b      	ldrh	r3, [r3, #0]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d01d      	beq.n	8011004 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010fc8:	4b84      	ldr	r3, [pc, #528]	; (80111dc <tcp_input+0x7d8>)
 8010fca:	881b      	ldrh	r3, [r3, #0]
 8010fcc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010fce:	69fb      	ldr	r3, [r7, #28]
 8010fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d00a      	beq.n	8010fee <tcp_input+0x5ea>
 8010fd8:	69fb      	ldr	r3, [r7, #28]
 8010fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fde:	69fa      	ldr	r2, [r7, #28]
 8010fe0:	6910      	ldr	r0, [r2, #16]
 8010fe2:	89fa      	ldrh	r2, [r7, #14]
 8010fe4:	69f9      	ldr	r1, [r7, #28]
 8010fe6:	4798      	blx	r3
 8010fe8:	4603      	mov	r3, r0
 8010fea:	74fb      	strb	r3, [r7, #19]
 8010fec:	e001      	b.n	8010ff2 <tcp_input+0x5ee>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010ff2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ff6:	f113 0f0d 	cmn.w	r3, #13
 8010ffa:	f000 8096 	beq.w	801112a <tcp_input+0x726>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010ffe:	4b77      	ldr	r3, [pc, #476]	; (80111dc <tcp_input+0x7d8>)
 8011000:	2200      	movs	r2, #0
 8011002:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011004:	69f8      	ldr	r0, [r7, #28]
 8011006:	f000 f901 	bl	801120c <tcp_input_delayed_close>
 801100a:	4603      	mov	r3, r0
 801100c:	2b00      	cmp	r3, #0
 801100e:	f040 808e 	bne.w	801112e <tcp_input+0x72a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011012:	4b73      	ldr	r3, [pc, #460]	; (80111e0 <tcp_input+0x7dc>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d041      	beq.n	801109e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801101a:	69fb      	ldr	r3, [r7, #28]
 801101c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801101e:	2b00      	cmp	r3, #0
 8011020:	d006      	beq.n	8011030 <tcp_input+0x62c>
 8011022:	4b70      	ldr	r3, [pc, #448]	; (80111e4 <tcp_input+0x7e0>)
 8011024:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011028:	496f      	ldr	r1, [pc, #444]	; (80111e8 <tcp_input+0x7e4>)
 801102a:	4870      	ldr	r0, [pc, #448]	; (80111ec <tcp_input+0x7e8>)
 801102c:	f005 f8c6 	bl	80161bc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011030:	69fb      	ldr	r3, [r7, #28]
 8011032:	8b5b      	ldrh	r3, [r3, #26]
 8011034:	f003 0310 	and.w	r3, r3, #16
 8011038:	2b00      	cmp	r3, #0
 801103a:	d008      	beq.n	801104e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801103c:	4b68      	ldr	r3, [pc, #416]	; (80111e0 <tcp_input+0x7dc>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	4618      	mov	r0, r3
 8011042:	f7fd fbd5 	bl	800e7f0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011046:	69f8      	ldr	r0, [r7, #28]
 8011048:	f7fe f9c8 	bl	800f3dc <tcp_abort>
            goto aborted;
 801104c:	e076      	b.n	801113c <tcp_input+0x738>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801104e:	69fb      	ldr	r3, [r7, #28]
 8011050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011054:	2b00      	cmp	r3, #0
 8011056:	d00c      	beq.n	8011072 <tcp_input+0x66e>
 8011058:	69fb      	ldr	r3, [r7, #28]
 801105a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801105e:	69fb      	ldr	r3, [r7, #28]
 8011060:	6918      	ldr	r0, [r3, #16]
 8011062:	4b5f      	ldr	r3, [pc, #380]	; (80111e0 <tcp_input+0x7dc>)
 8011064:	681a      	ldr	r2, [r3, #0]
 8011066:	2300      	movs	r3, #0
 8011068:	69f9      	ldr	r1, [r7, #28]
 801106a:	47a0      	blx	r4
 801106c:	4603      	mov	r3, r0
 801106e:	74fb      	strb	r3, [r7, #19]
 8011070:	e008      	b.n	8011084 <tcp_input+0x680>
 8011072:	4b5b      	ldr	r3, [pc, #364]	; (80111e0 <tcp_input+0x7dc>)
 8011074:	681a      	ldr	r2, [r3, #0]
 8011076:	2300      	movs	r3, #0
 8011078:	69f9      	ldr	r1, [r7, #28]
 801107a:	2000      	movs	r0, #0
 801107c:	f7ff f884 	bl	8010188 <tcp_recv_null>
 8011080:	4603      	mov	r3, r0
 8011082:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011084:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011088:	f113 0f0d 	cmn.w	r3, #13
 801108c:	d051      	beq.n	8011132 <tcp_input+0x72e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801108e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d003      	beq.n	801109e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011096:	4b52      	ldr	r3, [pc, #328]	; (80111e0 <tcp_input+0x7dc>)
 8011098:	681a      	ldr	r2, [r3, #0]
 801109a:	69fb      	ldr	r3, [r7, #28]
 801109c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801109e:	4b4d      	ldr	r3, [pc, #308]	; (80111d4 <tcp_input+0x7d0>)
 80110a0:	781b      	ldrb	r3, [r3, #0]
 80110a2:	f003 0320 	and.w	r3, r3, #32
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d030      	beq.n	801110c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80110aa:	69fb      	ldr	r3, [r7, #28]
 80110ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d009      	beq.n	80110c6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80110b2:	69fb      	ldr	r3, [r7, #28]
 80110b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110b6:	69fa      	ldr	r2, [r7, #28]
 80110b8:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80110ba:	7b52      	ldrb	r2, [r2, #13]
 80110bc:	f042 0220 	orr.w	r2, r2, #32
 80110c0:	b2d2      	uxtb	r2, r2
 80110c2:	735a      	strb	r2, [r3, #13]
 80110c4:	e022      	b.n	801110c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80110c6:	69fb      	ldr	r3, [r7, #28]
 80110c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80110ce:	d005      	beq.n	80110dc <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80110d0:	69fb      	ldr	r3, [r7, #28]
 80110d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110d4:	3301      	adds	r3, #1
 80110d6:	b29a      	uxth	r2, r3
 80110d8:	69fb      	ldr	r3, [r7, #28]
 80110da:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80110dc:	69fb      	ldr	r3, [r7, #28]
 80110de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d00b      	beq.n	80110fe <tcp_input+0x6fa>
 80110e6:	69fb      	ldr	r3, [r7, #28]
 80110e8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80110ec:	69fb      	ldr	r3, [r7, #28]
 80110ee:	6918      	ldr	r0, [r3, #16]
 80110f0:	2300      	movs	r3, #0
 80110f2:	2200      	movs	r2, #0
 80110f4:	69f9      	ldr	r1, [r7, #28]
 80110f6:	47a0      	blx	r4
 80110f8:	4603      	mov	r3, r0
 80110fa:	74fb      	strb	r3, [r7, #19]
 80110fc:	e001      	b.n	8011102 <tcp_input+0x6fe>
 80110fe:	2300      	movs	r3, #0
 8011100:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011102:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011106:	f113 0f0d 	cmn.w	r3, #13
 801110a:	d014      	beq.n	8011136 <tcp_input+0x732>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801110c:	4b30      	ldr	r3, [pc, #192]	; (80111d0 <tcp_input+0x7cc>)
 801110e:	2200      	movs	r2, #0
 8011110:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011112:	69f8      	ldr	r0, [r7, #28]
 8011114:	f000 f87a 	bl	801120c <tcp_input_delayed_close>
 8011118:	4603      	mov	r3, r0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d10d      	bne.n	801113a <tcp_input+0x736>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801111e:	69f8      	ldr	r0, [r7, #28]
 8011120:	f002 ff16 	bl	8013f50 <tcp_output>
 8011124:	e00a      	b.n	801113c <tcp_input+0x738>
        goto aborted;
 8011126:	bf00      	nop
 8011128:	e008      	b.n	801113c <tcp_input+0x738>
              goto aborted;
 801112a:	bf00      	nop
 801112c:	e006      	b.n	801113c <tcp_input+0x738>
          goto aborted;
 801112e:	bf00      	nop
 8011130:	e004      	b.n	801113c <tcp_input+0x738>
            goto aborted;
 8011132:	bf00      	nop
 8011134:	e002      	b.n	801113c <tcp_input+0x738>
              goto aborted;
 8011136:	bf00      	nop
 8011138:	e000      	b.n	801113c <tcp_input+0x738>
          goto aborted;
 801113a:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 801113c:	4b24      	ldr	r3, [pc, #144]	; (80111d0 <tcp_input+0x7cc>)
 801113e:	2200      	movs	r2, #0
 8011140:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011142:	4b27      	ldr	r3, [pc, #156]	; (80111e0 <tcp_input+0x7dc>)
 8011144:	2200      	movs	r2, #0
 8011146:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011148:	4b29      	ldr	r3, [pc, #164]	; (80111f0 <tcp_input+0x7ec>)
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d03b      	beq.n	80111c8 <tcp_input+0x7c4>
      pbuf_free(inseg.p);
 8011150:	4b27      	ldr	r3, [pc, #156]	; (80111f0 <tcp_input+0x7ec>)
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	4618      	mov	r0, r3
 8011156:	f7fd fb4b 	bl	800e7f0 <pbuf_free>
      inseg.p = NULL;
 801115a:	4b25      	ldr	r3, [pc, #148]	; (80111f0 <tcp_input+0x7ec>)
 801115c:	2200      	movs	r2, #0
 801115e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011160:	e032      	b.n	80111c8 <tcp_input+0x7c4>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011162:	4b24      	ldr	r3, [pc, #144]	; (80111f4 <tcp_input+0x7f0>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	899b      	ldrh	r3, [r3, #12]
 8011168:	b29b      	uxth	r3, r3
 801116a:	4618      	mov	r0, r3
 801116c:	f7f9 fd8a 	bl	800ac84 <lwip_htons>
 8011170:	4603      	mov	r3, r0
 8011172:	b2db      	uxtb	r3, r3
 8011174:	f003 0304 	and.w	r3, r3, #4
 8011178:	2b00      	cmp	r3, #0
 801117a:	d118      	bne.n	80111ae <tcp_input+0x7aa>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801117c:	4b1e      	ldr	r3, [pc, #120]	; (80111f8 <tcp_input+0x7f4>)
 801117e:	6819      	ldr	r1, [r3, #0]
 8011180:	4b1e      	ldr	r3, [pc, #120]	; (80111fc <tcp_input+0x7f8>)
 8011182:	881b      	ldrh	r3, [r3, #0]
 8011184:	461a      	mov	r2, r3
 8011186:	4b1e      	ldr	r3, [pc, #120]	; (8011200 <tcp_input+0x7fc>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801118c:	4b19      	ldr	r3, [pc, #100]	; (80111f4 <tcp_input+0x7f0>)
 801118e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011190:	885b      	ldrh	r3, [r3, #2]
 8011192:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011194:	4a17      	ldr	r2, [pc, #92]	; (80111f4 <tcp_input+0x7f0>)
 8011196:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011198:	8812      	ldrh	r2, [r2, #0]
 801119a:	b292      	uxth	r2, r2
 801119c:	9202      	str	r2, [sp, #8]
 801119e:	9301      	str	r3, [sp, #4]
 80111a0:	4b18      	ldr	r3, [pc, #96]	; (8011204 <tcp_input+0x800>)
 80111a2:	9300      	str	r3, [sp, #0]
 80111a4:	4b18      	ldr	r3, [pc, #96]	; (8011208 <tcp_input+0x804>)
 80111a6:	4602      	mov	r2, r0
 80111a8:	2000      	movs	r0, #0
 80111aa:	f003 fc9d 	bl	8014ae8 <tcp_rst>
    pbuf_free(p);
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f7fd fb1e 	bl	800e7f0 <pbuf_free>
  return;
 80111b4:	e008      	b.n	80111c8 <tcp_input+0x7c4>
    goto dropped;
 80111b6:	bf00      	nop
 80111b8:	e002      	b.n	80111c0 <tcp_input+0x7bc>
      goto dropped;
 80111ba:	bf00      	nop
 80111bc:	e000      	b.n	80111c0 <tcp_input+0x7bc>
      goto dropped;
 80111be:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f7fd fb15 	bl	800e7f0 <pbuf_free>
 80111c6:	e000      	b.n	80111ca <tcp_input+0x7c6>
  return;
 80111c8:	bf00      	nop
}
 80111ca:	3724      	adds	r7, #36	; 0x24
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd90      	pop	{r4, r7, pc}
 80111d0:	2000e500 	.word	0x2000e500
 80111d4:	20004209 	.word	0x20004209
 80111d8:	2000e4ec 	.word	0x2000e4ec
 80111dc:	20004204 	.word	0x20004204
 80111e0:	2000420c 	.word	0x2000420c
 80111e4:	08019d9c 	.word	0x08019d9c
 80111e8:	08019f50 	.word	0x08019f50
 80111ec:	08019de8 	.word	0x08019de8
 80111f0:	200041dc 	.word	0x200041dc
 80111f4:	200041ec 	.word	0x200041ec
 80111f8:	20004200 	.word	0x20004200
 80111fc:	20004206 	.word	0x20004206
 8011200:	200041fc 	.word	0x200041fc
 8011204:	20007428 	.word	0x20007428
 8011208:	2000742c 	.word	0x2000742c

0801120c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b082      	sub	sp, #8
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d106      	bne.n	8011228 <tcp_input_delayed_close+0x1c>
 801121a:	4b17      	ldr	r3, [pc, #92]	; (8011278 <tcp_input_delayed_close+0x6c>)
 801121c:	f240 225a 	movw	r2, #602	; 0x25a
 8011220:	4916      	ldr	r1, [pc, #88]	; (801127c <tcp_input_delayed_close+0x70>)
 8011222:	4817      	ldr	r0, [pc, #92]	; (8011280 <tcp_input_delayed_close+0x74>)
 8011224:	f004 ffca 	bl	80161bc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011228:	4b16      	ldr	r3, [pc, #88]	; (8011284 <tcp_input_delayed_close+0x78>)
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	f003 0310 	and.w	r3, r3, #16
 8011230:	2b00      	cmp	r3, #0
 8011232:	d01c      	beq.n	801126e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	8b5b      	ldrh	r3, [r3, #26]
 8011238:	f003 0310 	and.w	r3, r3, #16
 801123c:	2b00      	cmp	r3, #0
 801123e:	d10d      	bne.n	801125c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011246:	2b00      	cmp	r3, #0
 8011248:	d008      	beq.n	801125c <tcp_input_delayed_close+0x50>
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011250:	687a      	ldr	r2, [r7, #4]
 8011252:	6912      	ldr	r2, [r2, #16]
 8011254:	f06f 010e 	mvn.w	r1, #14
 8011258:	4610      	mov	r0, r2
 801125a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801125c:	6879      	ldr	r1, [r7, #4]
 801125e:	480a      	ldr	r0, [pc, #40]	; (8011288 <tcp_input_delayed_close+0x7c>)
 8011260:	f7ff fa58 	bl	8010714 <tcp_pcb_remove>
    tcp_free(pcb);
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f7fd fd7f 	bl	800ed68 <tcp_free>
    return 1;
 801126a:	2301      	movs	r3, #1
 801126c:	e000      	b.n	8011270 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801126e:	2300      	movs	r3, #0
}
 8011270:	4618      	mov	r0, r3
 8011272:	3708      	adds	r7, #8
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}
 8011278:	08019d9c 	.word	0x08019d9c
 801127c:	08019f6c 	.word	0x08019f6c
 8011280:	08019de8 	.word	0x08019de8
 8011284:	20004209 	.word	0x20004209
 8011288:	2000e4ec 	.word	0x2000e4ec

0801128c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801128c:	b590      	push	{r4, r7, lr}
 801128e:	b08b      	sub	sp, #44	; 0x2c
 8011290:	af04      	add	r7, sp, #16
 8011292:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011294:	4b6f      	ldr	r3, [pc, #444]	; (8011454 <tcp_listen_input+0x1c8>)
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	f003 0304 	and.w	r3, r3, #4
 801129c:	2b00      	cmp	r3, #0
 801129e:	f040 80d3 	bne.w	8011448 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d106      	bne.n	80112b6 <tcp_listen_input+0x2a>
 80112a8:	4b6b      	ldr	r3, [pc, #428]	; (8011458 <tcp_listen_input+0x1cc>)
 80112aa:	f240 2281 	movw	r2, #641	; 0x281
 80112ae:	496b      	ldr	r1, [pc, #428]	; (801145c <tcp_listen_input+0x1d0>)
 80112b0:	486b      	ldr	r0, [pc, #428]	; (8011460 <tcp_listen_input+0x1d4>)
 80112b2:	f004 ff83 	bl	80161bc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80112b6:	4b67      	ldr	r3, [pc, #412]	; (8011454 <tcp_listen_input+0x1c8>)
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	f003 0310 	and.w	r3, r3, #16
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d019      	beq.n	80112f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112c2:	4b68      	ldr	r3, [pc, #416]	; (8011464 <tcp_listen_input+0x1d8>)
 80112c4:	6819      	ldr	r1, [r3, #0]
 80112c6:	4b68      	ldr	r3, [pc, #416]	; (8011468 <tcp_listen_input+0x1dc>)
 80112c8:	881b      	ldrh	r3, [r3, #0]
 80112ca:	461a      	mov	r2, r3
 80112cc:	4b67      	ldr	r3, [pc, #412]	; (801146c <tcp_listen_input+0x1e0>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112d2:	4b67      	ldr	r3, [pc, #412]	; (8011470 <tcp_listen_input+0x1e4>)
 80112d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112d6:	885b      	ldrh	r3, [r3, #2]
 80112d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112da:	4a65      	ldr	r2, [pc, #404]	; (8011470 <tcp_listen_input+0x1e4>)
 80112dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112de:	8812      	ldrh	r2, [r2, #0]
 80112e0:	b292      	uxth	r2, r2
 80112e2:	9202      	str	r2, [sp, #8]
 80112e4:	9301      	str	r3, [sp, #4]
 80112e6:	4b63      	ldr	r3, [pc, #396]	; (8011474 <tcp_listen_input+0x1e8>)
 80112e8:	9300      	str	r3, [sp, #0]
 80112ea:	4b63      	ldr	r3, [pc, #396]	; (8011478 <tcp_listen_input+0x1ec>)
 80112ec:	4602      	mov	r2, r0
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f003 fbfa 	bl	8014ae8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80112f4:	e0aa      	b.n	801144c <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 80112f6:	4b57      	ldr	r3, [pc, #348]	; (8011454 <tcp_listen_input+0x1c8>)
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	f003 0302 	and.w	r3, r3, #2
 80112fe:	2b00      	cmp	r3, #0
 8011300:	f000 80a4 	beq.w	801144c <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	7d5b      	ldrb	r3, [r3, #21]
 8011308:	4618      	mov	r0, r3
 801130a:	f7ff f861 	bl	80103d0 <tcp_alloc>
 801130e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d111      	bne.n	801133a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	699b      	ldr	r3, [r3, #24]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d00a      	beq.n	8011334 <tcp_listen_input+0xa8>
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	699b      	ldr	r3, [r3, #24]
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	6910      	ldr	r0, [r2, #16]
 8011326:	f04f 32ff 	mov.w	r2, #4294967295
 801132a:	2100      	movs	r1, #0
 801132c:	4798      	blx	r3
 801132e:	4603      	mov	r3, r0
 8011330:	74fb      	strb	r3, [r7, #19]
      return;
 8011332:	e08c      	b.n	801144e <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011334:	23f0      	movs	r3, #240	; 0xf0
 8011336:	74fb      	strb	r3, [r7, #19]
      return;
 8011338:	e089      	b.n	801144e <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801133a:	4b50      	ldr	r3, [pc, #320]	; (801147c <tcp_listen_input+0x1f0>)
 801133c:	695a      	ldr	r2, [r3, #20]
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011342:	4b4e      	ldr	r3, [pc, #312]	; (801147c <tcp_listen_input+0x1f0>)
 8011344:	691a      	ldr	r2, [r3, #16]
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	8ada      	ldrh	r2, [r3, #22]
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011352:	4b47      	ldr	r3, [pc, #284]	; (8011470 <tcp_listen_input+0x1e4>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	881b      	ldrh	r3, [r3, #0]
 8011358:	b29a      	uxth	r2, r3
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	2203      	movs	r2, #3
 8011362:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011364:	4b41      	ldr	r3, [pc, #260]	; (801146c <tcp_listen_input+0x1e0>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	1c5a      	adds	r2, r3, #1
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011372:	697b      	ldr	r3, [r7, #20]
 8011374:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011376:	6978      	ldr	r0, [r7, #20]
 8011378:	f7ff fa60 	bl	801083c <tcp_next_iss>
 801137c:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	68fa      	ldr	r2, [r7, #12]
 8011382:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	68fa      	ldr	r2, [r7, #12]
 8011388:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	68fa      	ldr	r2, [r7, #12]
 801138e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	68fa      	ldr	r2, [r7, #12]
 8011394:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011396:	4b35      	ldr	r3, [pc, #212]	; (801146c <tcp_listen_input+0x1e0>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	1e5a      	subs	r2, r3, #1
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	691a      	ldr	r2, [r3, #16]
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	687a      	ldr	r2, [r7, #4]
 80113ac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	7a5b      	ldrb	r3, [r3, #9]
 80113b2:	f003 030c 	and.w	r3, r3, #12
 80113b6:	b2da      	uxtb	r2, r3
 80113b8:	697b      	ldr	r3, [r7, #20]
 80113ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	7a1a      	ldrb	r2, [r3, #8]
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80113c4:	4b2e      	ldr	r3, [pc, #184]	; (8011480 <tcp_listen_input+0x1f4>)
 80113c6:	681a      	ldr	r2, [r3, #0]
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	60da      	str	r2, [r3, #12]
 80113cc:	4a2c      	ldr	r2, [pc, #176]	; (8011480 <tcp_listen_input+0x1f4>)
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	6013      	str	r3, [r2, #0]
 80113d2:	f003 fd4d 	bl	8014e70 <tcp_timer_needed>
 80113d6:	4b2b      	ldr	r3, [pc, #172]	; (8011484 <tcp_listen_input+0x1f8>)
 80113d8:	2201      	movs	r2, #1
 80113da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80113dc:	6978      	ldr	r0, [r7, #20]
 80113de:	f001 fd93 	bl	8012f08 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80113e2:	4b23      	ldr	r3, [pc, #140]	; (8011470 <tcp_listen_input+0x1e4>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	89db      	ldrh	r3, [r3, #14]
 80113e8:	b29a      	uxth	r2, r3
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	3304      	adds	r3, #4
 8011404:	4618      	mov	r0, r3
 8011406:	f7fa fd5d 	bl	800bec4 <ip4_route>
 801140a:	4601      	mov	r1, r0
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	3304      	adds	r3, #4
 8011410:	461a      	mov	r2, r3
 8011412:	4620      	mov	r0, r4
 8011414:	f7ff fa38 	bl	8010888 <tcp_eff_send_mss_netif>
 8011418:	4603      	mov	r3, r0
 801141a:	461a      	mov	r2, r3
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011420:	2112      	movs	r1, #18
 8011422:	6978      	ldr	r0, [r7, #20]
 8011424:	f002 fca4 	bl	8013d70 <tcp_enqueue_flags>
 8011428:	4603      	mov	r3, r0
 801142a:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 801142c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d004      	beq.n	801143e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011434:	2100      	movs	r1, #0
 8011436:	6978      	ldr	r0, [r7, #20]
 8011438:	f7fd ff12 	bl	800f260 <tcp_abandon>
      return;
 801143c:	e007      	b.n	801144e <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 801143e:	6978      	ldr	r0, [r7, #20]
 8011440:	f002 fd86 	bl	8013f50 <tcp_output>
  return;
 8011444:	bf00      	nop
 8011446:	e001      	b.n	801144c <tcp_listen_input+0x1c0>
    return;
 8011448:	bf00      	nop
 801144a:	e000      	b.n	801144e <tcp_listen_input+0x1c2>
  return;
 801144c:	bf00      	nop
}
 801144e:	371c      	adds	r7, #28
 8011450:	46bd      	mov	sp, r7
 8011452:	bd90      	pop	{r4, r7, pc}
 8011454:	20004208 	.word	0x20004208
 8011458:	08019d9c 	.word	0x08019d9c
 801145c:	08019f94 	.word	0x08019f94
 8011460:	08019de8 	.word	0x08019de8
 8011464:	20004200 	.word	0x20004200
 8011468:	20004206 	.word	0x20004206
 801146c:	200041fc 	.word	0x200041fc
 8011470:	200041ec 	.word	0x200041ec
 8011474:	20007428 	.word	0x20007428
 8011478:	2000742c 	.word	0x2000742c
 801147c:	20007418 	.word	0x20007418
 8011480:	2000e4ec 	.word	0x2000e4ec
 8011484:	2000e4e8 	.word	0x2000e4e8

08011488 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b086      	sub	sp, #24
 801148c:	af04      	add	r7, sp, #16
 801148e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011490:	4b30      	ldr	r3, [pc, #192]	; (8011554 <tcp_timewait_input+0xcc>)
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	f003 0304 	and.w	r3, r3, #4
 8011498:	2b00      	cmp	r3, #0
 801149a:	d154      	bne.n	8011546 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d106      	bne.n	80114b0 <tcp_timewait_input+0x28>
 80114a2:	4b2d      	ldr	r3, [pc, #180]	; (8011558 <tcp_timewait_input+0xd0>)
 80114a4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80114a8:	492c      	ldr	r1, [pc, #176]	; (801155c <tcp_timewait_input+0xd4>)
 80114aa:	482d      	ldr	r0, [pc, #180]	; (8011560 <tcp_timewait_input+0xd8>)
 80114ac:	f004 fe86 	bl	80161bc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80114b0:	4b28      	ldr	r3, [pc, #160]	; (8011554 <tcp_timewait_input+0xcc>)
 80114b2:	781b      	ldrb	r3, [r3, #0]
 80114b4:	f003 0302 	and.w	r3, r3, #2
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d02a      	beq.n	8011512 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80114bc:	4b29      	ldr	r3, [pc, #164]	; (8011564 <tcp_timewait_input+0xdc>)
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	db2d      	blt.n	8011526 <tcp_timewait_input+0x9e>
 80114ca:	4b26      	ldr	r3, [pc, #152]	; (8011564 <tcp_timewait_input+0xdc>)
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114d2:	6879      	ldr	r1, [r7, #4]
 80114d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80114d6:	440b      	add	r3, r1
 80114d8:	1ad3      	subs	r3, r2, r3
 80114da:	2b00      	cmp	r3, #0
 80114dc:	dc23      	bgt.n	8011526 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114de:	4b22      	ldr	r3, [pc, #136]	; (8011568 <tcp_timewait_input+0xe0>)
 80114e0:	6819      	ldr	r1, [r3, #0]
 80114e2:	4b22      	ldr	r3, [pc, #136]	; (801156c <tcp_timewait_input+0xe4>)
 80114e4:	881b      	ldrh	r3, [r3, #0]
 80114e6:	461a      	mov	r2, r3
 80114e8:	4b1e      	ldr	r3, [pc, #120]	; (8011564 <tcp_timewait_input+0xdc>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114ee:	4b20      	ldr	r3, [pc, #128]	; (8011570 <tcp_timewait_input+0xe8>)
 80114f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114f2:	885b      	ldrh	r3, [r3, #2]
 80114f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114f6:	4a1e      	ldr	r2, [pc, #120]	; (8011570 <tcp_timewait_input+0xe8>)
 80114f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114fa:	8812      	ldrh	r2, [r2, #0]
 80114fc:	b292      	uxth	r2, r2
 80114fe:	9202      	str	r2, [sp, #8]
 8011500:	9301      	str	r3, [sp, #4]
 8011502:	4b1c      	ldr	r3, [pc, #112]	; (8011574 <tcp_timewait_input+0xec>)
 8011504:	9300      	str	r3, [sp, #0]
 8011506:	4b1c      	ldr	r3, [pc, #112]	; (8011578 <tcp_timewait_input+0xf0>)
 8011508:	4602      	mov	r2, r0
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f003 faec 	bl	8014ae8 <tcp_rst>
      return;
 8011510:	e01c      	b.n	801154c <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8011512:	4b10      	ldr	r3, [pc, #64]	; (8011554 <tcp_timewait_input+0xcc>)
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	f003 0301 	and.w	r3, r3, #1
 801151a:	2b00      	cmp	r3, #0
 801151c:	d003      	beq.n	8011526 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801151e:	4b17      	ldr	r3, [pc, #92]	; (801157c <tcp_timewait_input+0xf4>)
 8011520:	681a      	ldr	r2, [r3, #0]
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011526:	4b11      	ldr	r3, [pc, #68]	; (801156c <tcp_timewait_input+0xe4>)
 8011528:	881b      	ldrh	r3, [r3, #0]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d00d      	beq.n	801154a <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	8b5b      	ldrh	r3, [r3, #26]
 8011532:	f043 0302 	orr.w	r3, r3, #2
 8011536:	b29a      	uxth	r2, r3
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f002 fd07 	bl	8013f50 <tcp_output>
  }
  return;
 8011542:	bf00      	nop
 8011544:	e001      	b.n	801154a <tcp_timewait_input+0xc2>
    return;
 8011546:	bf00      	nop
 8011548:	e000      	b.n	801154c <tcp_timewait_input+0xc4>
  return;
 801154a:	bf00      	nop
}
 801154c:	3708      	adds	r7, #8
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	20004208 	.word	0x20004208
 8011558:	08019d9c 	.word	0x08019d9c
 801155c:	08019fb4 	.word	0x08019fb4
 8011560:	08019de8 	.word	0x08019de8
 8011564:	200041fc 	.word	0x200041fc
 8011568:	20004200 	.word	0x20004200
 801156c:	20004206 	.word	0x20004206
 8011570:	200041ec 	.word	0x200041ec
 8011574:	20007428 	.word	0x20007428
 8011578:	2000742c 	.word	0x2000742c
 801157c:	2000e4f0 	.word	0x2000e4f0

08011580 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011580:	b590      	push	{r4, r7, lr}
 8011582:	b08d      	sub	sp, #52	; 0x34
 8011584:	af04      	add	r7, sp, #16
 8011586:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011588:	2300      	movs	r3, #0
 801158a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801158c:	2300      	movs	r3, #0
 801158e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d106      	bne.n	80115a4 <tcp_process+0x24>
 8011596:	4ba5      	ldr	r3, [pc, #660]	; (801182c <tcp_process+0x2ac>)
 8011598:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801159c:	49a4      	ldr	r1, [pc, #656]	; (8011830 <tcp_process+0x2b0>)
 801159e:	48a5      	ldr	r0, [pc, #660]	; (8011834 <tcp_process+0x2b4>)
 80115a0:	f004 fe0c 	bl	80161bc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80115a4:	4ba4      	ldr	r3, [pc, #656]	; (8011838 <tcp_process+0x2b8>)
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	f003 0304 	and.w	r3, r3, #4
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d04e      	beq.n	801164e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	7d1b      	ldrb	r3, [r3, #20]
 80115b4:	2b02      	cmp	r3, #2
 80115b6:	d108      	bne.n	80115ca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80115bc:	4b9f      	ldr	r3, [pc, #636]	; (801183c <tcp_process+0x2bc>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d123      	bne.n	801160c <tcp_process+0x8c>
        acceptable = 1;
 80115c4:	2301      	movs	r3, #1
 80115c6:	76fb      	strb	r3, [r7, #27]
 80115c8:	e020      	b.n	801160c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115ce:	4b9c      	ldr	r3, [pc, #624]	; (8011840 <tcp_process+0x2c0>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d102      	bne.n	80115dc <tcp_process+0x5c>
        acceptable = 1;
 80115d6:	2301      	movs	r3, #1
 80115d8:	76fb      	strb	r3, [r7, #27]
 80115da:	e017      	b.n	801160c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80115dc:	4b98      	ldr	r3, [pc, #608]	; (8011840 <tcp_process+0x2c0>)
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115e4:	1ad3      	subs	r3, r2, r3
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	db10      	blt.n	801160c <tcp_process+0x8c>
 80115ea:	4b95      	ldr	r3, [pc, #596]	; (8011840 <tcp_process+0x2c0>)
 80115ec:	681a      	ldr	r2, [r3, #0]
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115f2:	6879      	ldr	r1, [r7, #4]
 80115f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80115f6:	440b      	add	r3, r1
 80115f8:	1ad3      	subs	r3, r2, r3
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	dc06      	bgt.n	801160c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	8b5b      	ldrh	r3, [r3, #26]
 8011602:	f043 0302 	orr.w	r3, r3, #2
 8011606:	b29a      	uxth	r2, r3
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801160c:	7efb      	ldrb	r3, [r7, #27]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d01b      	beq.n	801164a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	7d1b      	ldrb	r3, [r3, #20]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d106      	bne.n	8011628 <tcp_process+0xa8>
 801161a:	4b84      	ldr	r3, [pc, #528]	; (801182c <tcp_process+0x2ac>)
 801161c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011620:	4988      	ldr	r1, [pc, #544]	; (8011844 <tcp_process+0x2c4>)
 8011622:	4884      	ldr	r0, [pc, #528]	; (8011834 <tcp_process+0x2b4>)
 8011624:	f004 fdca 	bl	80161bc <iprintf>
      recv_flags |= TF_RESET;
 8011628:	4b87      	ldr	r3, [pc, #540]	; (8011848 <tcp_process+0x2c8>)
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	f043 0308 	orr.w	r3, r3, #8
 8011630:	b2da      	uxtb	r2, r3
 8011632:	4b85      	ldr	r3, [pc, #532]	; (8011848 <tcp_process+0x2c8>)
 8011634:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	8b5b      	ldrh	r3, [r3, #26]
 801163a:	f023 0301 	bic.w	r3, r3, #1
 801163e:	b29a      	uxth	r2, r3
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011644:	f06f 030d 	mvn.w	r3, #13
 8011648:	e37a      	b.n	8011d40 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801164a:	2300      	movs	r3, #0
 801164c:	e378      	b.n	8011d40 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801164e:	4b7a      	ldr	r3, [pc, #488]	; (8011838 <tcp_process+0x2b8>)
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	f003 0302 	and.w	r3, r3, #2
 8011656:	2b00      	cmp	r3, #0
 8011658:	d010      	beq.n	801167c <tcp_process+0xfc>
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	7d1b      	ldrb	r3, [r3, #20]
 801165e:	2b02      	cmp	r3, #2
 8011660:	d00c      	beq.n	801167c <tcp_process+0xfc>
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	7d1b      	ldrb	r3, [r3, #20]
 8011666:	2b03      	cmp	r3, #3
 8011668:	d008      	beq.n	801167c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	8b5b      	ldrh	r3, [r3, #26]
 801166e:	f043 0302 	orr.w	r3, r3, #2
 8011672:	b29a      	uxth	r2, r3
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011678:	2300      	movs	r3, #0
 801167a:	e361      	b.n	8011d40 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	8b5b      	ldrh	r3, [r3, #26]
 8011680:	f003 0310 	and.w	r3, r3, #16
 8011684:	2b00      	cmp	r3, #0
 8011686:	d103      	bne.n	8011690 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011688:	4b70      	ldr	r3, [pc, #448]	; (801184c <tcp_process+0x2cc>)
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2200      	movs	r2, #0
 8011694:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2200      	movs	r2, #0
 801169c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f001 fc31 	bl	8012f08 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	7d1b      	ldrb	r3, [r3, #20]
 80116aa:	3b02      	subs	r3, #2
 80116ac:	2b07      	cmp	r3, #7
 80116ae:	f200 8337 	bhi.w	8011d20 <tcp_process+0x7a0>
 80116b2:	a201      	add	r2, pc, #4	; (adr r2, 80116b8 <tcp_process+0x138>)
 80116b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b8:	080116d9 	.word	0x080116d9
 80116bc:	08011909 	.word	0x08011909
 80116c0:	08011a81 	.word	0x08011a81
 80116c4:	08011aab 	.word	0x08011aab
 80116c8:	08011bcf 	.word	0x08011bcf
 80116cc:	08011a81 	.word	0x08011a81
 80116d0:	08011c5b 	.word	0x08011c5b
 80116d4:	08011ceb 	.word	0x08011ceb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80116d8:	4b57      	ldr	r3, [pc, #348]	; (8011838 <tcp_process+0x2b8>)
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	f003 0310 	and.w	r3, r3, #16
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f000 80e4 	beq.w	80118ae <tcp_process+0x32e>
 80116e6:	4b54      	ldr	r3, [pc, #336]	; (8011838 <tcp_process+0x2b8>)
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	f003 0302 	and.w	r3, r3, #2
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	f000 80dd 	beq.w	80118ae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116f8:	1c5a      	adds	r2, r3, #1
 80116fa:	4b50      	ldr	r3, [pc, #320]	; (801183c <tcp_process+0x2bc>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	429a      	cmp	r2, r3
 8011700:	f040 80d5 	bne.w	80118ae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011704:	4b4e      	ldr	r3, [pc, #312]	; (8011840 <tcp_process+0x2c0>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	1c5a      	adds	r2, r3, #1
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011716:	4b49      	ldr	r3, [pc, #292]	; (801183c <tcp_process+0x2bc>)
 8011718:	681a      	ldr	r2, [r3, #0]
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801171e:	4b4c      	ldr	r3, [pc, #304]	; (8011850 <tcp_process+0x2d0>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	89db      	ldrh	r3, [r3, #14]
 8011724:	b29a      	uxth	r2, r3
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011738:	4b41      	ldr	r3, [pc, #260]	; (8011840 <tcp_process+0x2c0>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	1e5a      	subs	r2, r3, #1
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	2204      	movs	r2, #4
 8011746:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	3304      	adds	r3, #4
 8011750:	4618      	mov	r0, r3
 8011752:	f7fa fbb7 	bl	800bec4 <ip4_route>
 8011756:	4601      	mov	r1, r0
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	3304      	adds	r3, #4
 801175c:	461a      	mov	r2, r3
 801175e:	4620      	mov	r0, r4
 8011760:	f7ff f892 	bl	8010888 <tcp_eff_send_mss_netif>
 8011764:	4603      	mov	r3, r0
 8011766:	461a      	mov	r2, r3
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011770:	009a      	lsls	r2, r3, #2
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011776:	005b      	lsls	r3, r3, #1
 8011778:	f241 111c 	movw	r1, #4380	; 0x111c
 801177c:	428b      	cmp	r3, r1
 801177e:	bf38      	it	cc
 8011780:	460b      	movcc	r3, r1
 8011782:	429a      	cmp	r2, r3
 8011784:	d204      	bcs.n	8011790 <tcp_process+0x210>
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801178a:	009b      	lsls	r3, r3, #2
 801178c:	b29b      	uxth	r3, r3
 801178e:	e00d      	b.n	80117ac <tcp_process+0x22c>
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011794:	005b      	lsls	r3, r3, #1
 8011796:	f241 121c 	movw	r2, #4380	; 0x111c
 801179a:	4293      	cmp	r3, r2
 801179c:	d904      	bls.n	80117a8 <tcp_process+0x228>
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117a2:	005b      	lsls	r3, r3, #1
 80117a4:	b29b      	uxth	r3, r3
 80117a6:	e001      	b.n	80117ac <tcp_process+0x22c>
 80117a8:	f241 131c 	movw	r3, #4380	; 0x111c
 80117ac:	687a      	ldr	r2, [r7, #4]
 80117ae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d106      	bne.n	80117ca <tcp_process+0x24a>
 80117bc:	4b1b      	ldr	r3, [pc, #108]	; (801182c <tcp_process+0x2ac>)
 80117be:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80117c2:	4924      	ldr	r1, [pc, #144]	; (8011854 <tcp_process+0x2d4>)
 80117c4:	481b      	ldr	r0, [pc, #108]	; (8011834 <tcp_process+0x2b4>)
 80117c6:	f004 fcf9 	bl	80161bc <iprintf>
        --pcb->snd_queuelen;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117d0:	3b01      	subs	r3, #1
 80117d2:	b29a      	uxth	r2, r3
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117de:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d111      	bne.n	801180a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117ea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d106      	bne.n	8011800 <tcp_process+0x280>
 80117f2:	4b0e      	ldr	r3, [pc, #56]	; (801182c <tcp_process+0x2ac>)
 80117f4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80117f8:	4917      	ldr	r1, [pc, #92]	; (8011858 <tcp_process+0x2d8>)
 80117fa:	480e      	ldr	r0, [pc, #56]	; (8011834 <tcp_process+0x2b4>)
 80117fc:	f004 fcde 	bl	80161bc <iprintf>
          pcb->unsent = rseg->next;
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	681a      	ldr	r2, [r3, #0]
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	66da      	str	r2, [r3, #108]	; 0x6c
 8011808:	e003      	b.n	8011812 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801180a:	69fb      	ldr	r3, [r7, #28]
 801180c:	681a      	ldr	r2, [r3, #0]
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011812:	69f8      	ldr	r0, [r7, #28]
 8011814:	f7fe fc74 	bl	8010100 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801181c:	2b00      	cmp	r3, #0
 801181e:	d11d      	bne.n	801185c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011826:	861a      	strh	r2, [r3, #48]	; 0x30
 8011828:	e01f      	b.n	801186a <tcp_process+0x2ea>
 801182a:	bf00      	nop
 801182c:	08019d9c 	.word	0x08019d9c
 8011830:	08019fd4 	.word	0x08019fd4
 8011834:	08019de8 	.word	0x08019de8
 8011838:	20004208 	.word	0x20004208
 801183c:	20004200 	.word	0x20004200
 8011840:	200041fc 	.word	0x200041fc
 8011844:	08019ff0 	.word	0x08019ff0
 8011848:	20004209 	.word	0x20004209
 801184c:	2000e4f0 	.word	0x2000e4f0
 8011850:	200041ec 	.word	0x200041ec
 8011854:	0801a010 	.word	0x0801a010
 8011858:	0801a028 	.word	0x0801a028
        } else {
          pcb->rtime = 0;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	2200      	movs	r2, #0
 8011860:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2200      	movs	r2, #0
 8011866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011870:	2b00      	cmp	r3, #0
 8011872:	d00a      	beq.n	801188a <tcp_process+0x30a>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801187a:	687a      	ldr	r2, [r7, #4]
 801187c:	6910      	ldr	r0, [r2, #16]
 801187e:	2200      	movs	r2, #0
 8011880:	6879      	ldr	r1, [r7, #4]
 8011882:	4798      	blx	r3
 8011884:	4603      	mov	r3, r0
 8011886:	76bb      	strb	r3, [r7, #26]
 8011888:	e001      	b.n	801188e <tcp_process+0x30e>
 801188a:	2300      	movs	r3, #0
 801188c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801188e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011892:	f113 0f0d 	cmn.w	r3, #13
 8011896:	d102      	bne.n	801189e <tcp_process+0x31e>
          return ERR_ABRT;
 8011898:	f06f 030c 	mvn.w	r3, #12
 801189c:	e250      	b.n	8011d40 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	8b5b      	ldrh	r3, [r3, #26]
 80118a2:	f043 0302 	orr.w	r3, r3, #2
 80118a6:	b29a      	uxth	r2, r3
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80118ac:	e23a      	b.n	8011d24 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80118ae:	4b9d      	ldr	r3, [pc, #628]	; (8011b24 <tcp_process+0x5a4>)
 80118b0:	781b      	ldrb	r3, [r3, #0]
 80118b2:	f003 0310 	and.w	r3, r3, #16
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	f000 8234 	beq.w	8011d24 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118bc:	4b9a      	ldr	r3, [pc, #616]	; (8011b28 <tcp_process+0x5a8>)
 80118be:	6819      	ldr	r1, [r3, #0]
 80118c0:	4b9a      	ldr	r3, [pc, #616]	; (8011b2c <tcp_process+0x5ac>)
 80118c2:	881b      	ldrh	r3, [r3, #0]
 80118c4:	461a      	mov	r2, r3
 80118c6:	4b9a      	ldr	r3, [pc, #616]	; (8011b30 <tcp_process+0x5b0>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80118cc:	4b99      	ldr	r3, [pc, #612]	; (8011b34 <tcp_process+0x5b4>)
 80118ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118d0:	885b      	ldrh	r3, [r3, #2]
 80118d2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80118d4:	4a97      	ldr	r2, [pc, #604]	; (8011b34 <tcp_process+0x5b4>)
 80118d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118d8:	8812      	ldrh	r2, [r2, #0]
 80118da:	b292      	uxth	r2, r2
 80118dc:	9202      	str	r2, [sp, #8]
 80118de:	9301      	str	r3, [sp, #4]
 80118e0:	4b95      	ldr	r3, [pc, #596]	; (8011b38 <tcp_process+0x5b8>)
 80118e2:	9300      	str	r3, [sp, #0]
 80118e4:	4b95      	ldr	r3, [pc, #596]	; (8011b3c <tcp_process+0x5bc>)
 80118e6:	4602      	mov	r2, r0
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f003 f8fd 	bl	8014ae8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80118f4:	2b05      	cmp	r3, #5
 80118f6:	f200 8215 	bhi.w	8011d24 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2200      	movs	r2, #0
 80118fe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f002 feb7 	bl	8014674 <tcp_rexmit_rto>
      break;
 8011906:	e20d      	b.n	8011d24 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011908:	4b86      	ldr	r3, [pc, #536]	; (8011b24 <tcp_process+0x5a4>)
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	f003 0310 	and.w	r3, r3, #16
 8011910:	2b00      	cmp	r3, #0
 8011912:	f000 80a1 	beq.w	8011a58 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011916:	4b84      	ldr	r3, [pc, #528]	; (8011b28 <tcp_process+0x5a8>)
 8011918:	681a      	ldr	r2, [r3, #0]
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801191e:	1ad3      	subs	r3, r2, r3
 8011920:	3b01      	subs	r3, #1
 8011922:	2b00      	cmp	r3, #0
 8011924:	db7e      	blt.n	8011a24 <tcp_process+0x4a4>
 8011926:	4b80      	ldr	r3, [pc, #512]	; (8011b28 <tcp_process+0x5a8>)
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801192e:	1ad3      	subs	r3, r2, r3
 8011930:	2b00      	cmp	r3, #0
 8011932:	dc77      	bgt.n	8011a24 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2204      	movs	r2, #4
 8011938:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801193e:	2b00      	cmp	r3, #0
 8011940:	d102      	bne.n	8011948 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011942:	23fa      	movs	r3, #250	; 0xfa
 8011944:	76bb      	strb	r3, [r7, #26]
 8011946:	e01d      	b.n	8011984 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801194c:	699b      	ldr	r3, [r3, #24]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d106      	bne.n	8011960 <tcp_process+0x3e0>
 8011952:	4b7b      	ldr	r3, [pc, #492]	; (8011b40 <tcp_process+0x5c0>)
 8011954:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011958:	497a      	ldr	r1, [pc, #488]	; (8011b44 <tcp_process+0x5c4>)
 801195a:	487b      	ldr	r0, [pc, #492]	; (8011b48 <tcp_process+0x5c8>)
 801195c:	f004 fc2e 	bl	80161bc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011964:	699b      	ldr	r3, [r3, #24]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d00a      	beq.n	8011980 <tcp_process+0x400>
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801196e:	699b      	ldr	r3, [r3, #24]
 8011970:	687a      	ldr	r2, [r7, #4]
 8011972:	6910      	ldr	r0, [r2, #16]
 8011974:	2200      	movs	r2, #0
 8011976:	6879      	ldr	r1, [r7, #4]
 8011978:	4798      	blx	r3
 801197a:	4603      	mov	r3, r0
 801197c:	76bb      	strb	r3, [r7, #26]
 801197e:	e001      	b.n	8011984 <tcp_process+0x404>
 8011980:	23f0      	movs	r3, #240	; 0xf0
 8011982:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011984:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d00a      	beq.n	80119a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801198c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011990:	f113 0f0d 	cmn.w	r3, #13
 8011994:	d002      	beq.n	801199c <tcp_process+0x41c>
              tcp_abort(pcb);
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f7fd fd20 	bl	800f3dc <tcp_abort>
            }
            return ERR_ABRT;
 801199c:	f06f 030c 	mvn.w	r3, #12
 80119a0:	e1ce      	b.n	8011d40 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f000 fae0 	bl	8011f68 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80119a8:	4b68      	ldr	r3, [pc, #416]	; (8011b4c <tcp_process+0x5cc>)
 80119aa:	881b      	ldrh	r3, [r3, #0]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d005      	beq.n	80119bc <tcp_process+0x43c>
            recv_acked--;
 80119b0:	4b66      	ldr	r3, [pc, #408]	; (8011b4c <tcp_process+0x5cc>)
 80119b2:	881b      	ldrh	r3, [r3, #0]
 80119b4:	3b01      	subs	r3, #1
 80119b6:	b29a      	uxth	r2, r3
 80119b8:	4b64      	ldr	r3, [pc, #400]	; (8011b4c <tcp_process+0x5cc>)
 80119ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119c0:	009a      	lsls	r2, r3, #2
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119c6:	005b      	lsls	r3, r3, #1
 80119c8:	f241 111c 	movw	r1, #4380	; 0x111c
 80119cc:	428b      	cmp	r3, r1
 80119ce:	bf38      	it	cc
 80119d0:	460b      	movcc	r3, r1
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d204      	bcs.n	80119e0 <tcp_process+0x460>
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119da:	009b      	lsls	r3, r3, #2
 80119dc:	b29b      	uxth	r3, r3
 80119de:	e00d      	b.n	80119fc <tcp_process+0x47c>
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119e4:	005b      	lsls	r3, r3, #1
 80119e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80119ea:	4293      	cmp	r3, r2
 80119ec:	d904      	bls.n	80119f8 <tcp_process+0x478>
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119f2:	005b      	lsls	r3, r3, #1
 80119f4:	b29b      	uxth	r3, r3
 80119f6:	e001      	b.n	80119fc <tcp_process+0x47c>
 80119f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80119fc:	687a      	ldr	r2, [r7, #4]
 80119fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011a02:	4b53      	ldr	r3, [pc, #332]	; (8011b50 <tcp_process+0x5d0>)
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	f003 0320 	and.w	r3, r3, #32
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d037      	beq.n	8011a7e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	8b5b      	ldrh	r3, [r3, #26]
 8011a12:	f043 0302 	orr.w	r3, r3, #2
 8011a16:	b29a      	uxth	r2, r3
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2207      	movs	r2, #7
 8011a20:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011a22:	e02c      	b.n	8011a7e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a24:	4b40      	ldr	r3, [pc, #256]	; (8011b28 <tcp_process+0x5a8>)
 8011a26:	6819      	ldr	r1, [r3, #0]
 8011a28:	4b40      	ldr	r3, [pc, #256]	; (8011b2c <tcp_process+0x5ac>)
 8011a2a:	881b      	ldrh	r3, [r3, #0]
 8011a2c:	461a      	mov	r2, r3
 8011a2e:	4b40      	ldr	r3, [pc, #256]	; (8011b30 <tcp_process+0x5b0>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a34:	4b3f      	ldr	r3, [pc, #252]	; (8011b34 <tcp_process+0x5b4>)
 8011a36:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a38:	885b      	ldrh	r3, [r3, #2]
 8011a3a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a3c:	4a3d      	ldr	r2, [pc, #244]	; (8011b34 <tcp_process+0x5b4>)
 8011a3e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a40:	8812      	ldrh	r2, [r2, #0]
 8011a42:	b292      	uxth	r2, r2
 8011a44:	9202      	str	r2, [sp, #8]
 8011a46:	9301      	str	r3, [sp, #4]
 8011a48:	4b3b      	ldr	r3, [pc, #236]	; (8011b38 <tcp_process+0x5b8>)
 8011a4a:	9300      	str	r3, [sp, #0]
 8011a4c:	4b3b      	ldr	r3, [pc, #236]	; (8011b3c <tcp_process+0x5bc>)
 8011a4e:	4602      	mov	r2, r0
 8011a50:	6878      	ldr	r0, [r7, #4]
 8011a52:	f003 f849 	bl	8014ae8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011a56:	e167      	b.n	8011d28 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011a58:	4b32      	ldr	r3, [pc, #200]	; (8011b24 <tcp_process+0x5a4>)
 8011a5a:	781b      	ldrb	r3, [r3, #0]
 8011a5c:	f003 0302 	and.w	r3, r3, #2
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	f000 8161 	beq.w	8011d28 <tcp_process+0x7a8>
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a6a:	1e5a      	subs	r2, r3, #1
 8011a6c:	4b30      	ldr	r3, [pc, #192]	; (8011b30 <tcp_process+0x5b0>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	429a      	cmp	r2, r3
 8011a72:	f040 8159 	bne.w	8011d28 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f002 fe1e 	bl	80146b8 <tcp_rexmit>
      break;
 8011a7c:	e154      	b.n	8011d28 <tcp_process+0x7a8>
 8011a7e:	e153      	b.n	8011d28 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f000 fa71 	bl	8011f68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011a86:	4b32      	ldr	r3, [pc, #200]	; (8011b50 <tcp_process+0x5d0>)
 8011a88:	781b      	ldrb	r3, [r3, #0]
 8011a8a:	f003 0320 	and.w	r3, r3, #32
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	f000 814c 	beq.w	8011d2c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	8b5b      	ldrh	r3, [r3, #26]
 8011a98:	f043 0302 	orr.w	r3, r3, #2
 8011a9c:	b29a      	uxth	r2, r3
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2207      	movs	r2, #7
 8011aa6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011aa8:	e140      	b.n	8011d2c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f000 fa5c 	bl	8011f68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011ab0:	4b27      	ldr	r3, [pc, #156]	; (8011b50 <tcp_process+0x5d0>)
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	f003 0320 	and.w	r3, r3, #32
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d071      	beq.n	8011ba0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011abc:	4b19      	ldr	r3, [pc, #100]	; (8011b24 <tcp_process+0x5a4>)
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	f003 0310 	and.w	r3, r3, #16
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d060      	beq.n	8011b8a <tcp_process+0x60a>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011acc:	4b16      	ldr	r3, [pc, #88]	; (8011b28 <tcp_process+0x5a8>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d15a      	bne.n	8011b8a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d156      	bne.n	8011b8a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	8b5b      	ldrh	r3, [r3, #26]
 8011ae0:	f043 0302 	orr.w	r3, r3, #2
 8011ae4:	b29a      	uxth	r2, r3
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f7fe fdc2 	bl	8010674 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011af0:	4b18      	ldr	r3, [pc, #96]	; (8011b54 <tcp_process+0x5d4>)
 8011af2:	681a      	ldr	r2, [r3, #0]
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d105      	bne.n	8011b06 <tcp_process+0x586>
 8011afa:	4b16      	ldr	r3, [pc, #88]	; (8011b54 <tcp_process+0x5d4>)
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	68db      	ldr	r3, [r3, #12]
 8011b00:	4a14      	ldr	r2, [pc, #80]	; (8011b54 <tcp_process+0x5d4>)
 8011b02:	6013      	str	r3, [r2, #0]
 8011b04:	e02e      	b.n	8011b64 <tcp_process+0x5e4>
 8011b06:	4b13      	ldr	r3, [pc, #76]	; (8011b54 <tcp_process+0x5d4>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	617b      	str	r3, [r7, #20]
 8011b0c:	e027      	b.n	8011b5e <tcp_process+0x5de>
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	68da      	ldr	r2, [r3, #12]
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d11f      	bne.n	8011b58 <tcp_process+0x5d8>
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	68da      	ldr	r2, [r3, #12]
 8011b1c:	697b      	ldr	r3, [r7, #20]
 8011b1e:	60da      	str	r2, [r3, #12]
 8011b20:	e020      	b.n	8011b64 <tcp_process+0x5e4>
 8011b22:	bf00      	nop
 8011b24:	20004208 	.word	0x20004208
 8011b28:	20004200 	.word	0x20004200
 8011b2c:	20004206 	.word	0x20004206
 8011b30:	200041fc 	.word	0x200041fc
 8011b34:	200041ec 	.word	0x200041ec
 8011b38:	20007428 	.word	0x20007428
 8011b3c:	2000742c 	.word	0x2000742c
 8011b40:	08019d9c 	.word	0x08019d9c
 8011b44:	0801a03c 	.word	0x0801a03c
 8011b48:	08019de8 	.word	0x08019de8
 8011b4c:	20004204 	.word	0x20004204
 8011b50:	20004209 	.word	0x20004209
 8011b54:	2000e4ec 	.word	0x2000e4ec
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	68db      	ldr	r3, [r3, #12]
 8011b5c:	617b      	str	r3, [r7, #20]
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d1d4      	bne.n	8011b0e <tcp_process+0x58e>
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2200      	movs	r2, #0
 8011b68:	60da      	str	r2, [r3, #12]
 8011b6a:	4b77      	ldr	r3, [pc, #476]	; (8011d48 <tcp_process+0x7c8>)
 8011b6c:	2201      	movs	r2, #1
 8011b6e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	220a      	movs	r2, #10
 8011b74:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011b76:	4b75      	ldr	r3, [pc, #468]	; (8011d4c <tcp_process+0x7cc>)
 8011b78:	681a      	ldr	r2, [r3, #0]
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	60da      	str	r2, [r3, #12]
 8011b7e:	4a73      	ldr	r2, [pc, #460]	; (8011d4c <tcp_process+0x7cc>)
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6013      	str	r3, [r2, #0]
 8011b84:	f003 f974 	bl	8014e70 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011b88:	e0d2      	b.n	8011d30 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	8b5b      	ldrh	r3, [r3, #26]
 8011b8e:	f043 0302 	orr.w	r3, r3, #2
 8011b92:	b29a      	uxth	r2, r3
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2208      	movs	r2, #8
 8011b9c:	751a      	strb	r2, [r3, #20]
      break;
 8011b9e:	e0c7      	b.n	8011d30 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011ba0:	4b6b      	ldr	r3, [pc, #428]	; (8011d50 <tcp_process+0x7d0>)
 8011ba2:	781b      	ldrb	r3, [r3, #0]
 8011ba4:	f003 0310 	and.w	r3, r3, #16
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	f000 80c1 	beq.w	8011d30 <tcp_process+0x7b0>
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011bb2:	4b68      	ldr	r3, [pc, #416]	; (8011d54 <tcp_process+0x7d4>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	f040 80ba 	bne.w	8011d30 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	f040 80b5 	bne.w	8011d30 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2206      	movs	r2, #6
 8011bca:	751a      	strb	r2, [r3, #20]
      break;
 8011bcc:	e0b0      	b.n	8011d30 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f000 f9ca 	bl	8011f68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011bd4:	4b60      	ldr	r3, [pc, #384]	; (8011d58 <tcp_process+0x7d8>)
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	f003 0320 	and.w	r3, r3, #32
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	f000 80a9 	beq.w	8011d34 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	8b5b      	ldrh	r3, [r3, #26]
 8011be6:	f043 0302 	orr.w	r3, r3, #2
 8011bea:	b29a      	uxth	r2, r3
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	f7fe fd3f 	bl	8010674 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011bf6:	4b59      	ldr	r3, [pc, #356]	; (8011d5c <tcp_process+0x7dc>)
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d105      	bne.n	8011c0c <tcp_process+0x68c>
 8011c00:	4b56      	ldr	r3, [pc, #344]	; (8011d5c <tcp_process+0x7dc>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	68db      	ldr	r3, [r3, #12]
 8011c06:	4a55      	ldr	r2, [pc, #340]	; (8011d5c <tcp_process+0x7dc>)
 8011c08:	6013      	str	r3, [r2, #0]
 8011c0a:	e013      	b.n	8011c34 <tcp_process+0x6b4>
 8011c0c:	4b53      	ldr	r3, [pc, #332]	; (8011d5c <tcp_process+0x7dc>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	613b      	str	r3, [r7, #16]
 8011c12:	e00c      	b.n	8011c2e <tcp_process+0x6ae>
 8011c14:	693b      	ldr	r3, [r7, #16]
 8011c16:	68da      	ldr	r2, [r3, #12]
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d104      	bne.n	8011c28 <tcp_process+0x6a8>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	68da      	ldr	r2, [r3, #12]
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	60da      	str	r2, [r3, #12]
 8011c26:	e005      	b.n	8011c34 <tcp_process+0x6b4>
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	68db      	ldr	r3, [r3, #12]
 8011c2c:	613b      	str	r3, [r7, #16]
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d1ef      	bne.n	8011c14 <tcp_process+0x694>
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2200      	movs	r2, #0
 8011c38:	60da      	str	r2, [r3, #12]
 8011c3a:	4b43      	ldr	r3, [pc, #268]	; (8011d48 <tcp_process+0x7c8>)
 8011c3c:	2201      	movs	r2, #1
 8011c3e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	220a      	movs	r2, #10
 8011c44:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011c46:	4b41      	ldr	r3, [pc, #260]	; (8011d4c <tcp_process+0x7cc>)
 8011c48:	681a      	ldr	r2, [r3, #0]
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	60da      	str	r2, [r3, #12]
 8011c4e:	4a3f      	ldr	r2, [pc, #252]	; (8011d4c <tcp_process+0x7cc>)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6013      	str	r3, [r2, #0]
 8011c54:	f003 f90c 	bl	8014e70 <tcp_timer_needed>
      }
      break;
 8011c58:	e06c      	b.n	8011d34 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f000 f984 	bl	8011f68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011c60:	4b3b      	ldr	r3, [pc, #236]	; (8011d50 <tcp_process+0x7d0>)
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	f003 0310 	and.w	r3, r3, #16
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d065      	beq.n	8011d38 <tcp_process+0x7b8>
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c70:	4b38      	ldr	r3, [pc, #224]	; (8011d54 <tcp_process+0x7d4>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	429a      	cmp	r2, r3
 8011c76:	d15f      	bne.n	8011d38 <tcp_process+0x7b8>
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d15b      	bne.n	8011d38 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	f7fe fcf7 	bl	8010674 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011c86:	4b35      	ldr	r3, [pc, #212]	; (8011d5c <tcp_process+0x7dc>)
 8011c88:	681a      	ldr	r2, [r3, #0]
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	429a      	cmp	r2, r3
 8011c8e:	d105      	bne.n	8011c9c <tcp_process+0x71c>
 8011c90:	4b32      	ldr	r3, [pc, #200]	; (8011d5c <tcp_process+0x7dc>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	68db      	ldr	r3, [r3, #12]
 8011c96:	4a31      	ldr	r2, [pc, #196]	; (8011d5c <tcp_process+0x7dc>)
 8011c98:	6013      	str	r3, [r2, #0]
 8011c9a:	e013      	b.n	8011cc4 <tcp_process+0x744>
 8011c9c:	4b2f      	ldr	r3, [pc, #188]	; (8011d5c <tcp_process+0x7dc>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	60fb      	str	r3, [r7, #12]
 8011ca2:	e00c      	b.n	8011cbe <tcp_process+0x73e>
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	68da      	ldr	r2, [r3, #12]
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d104      	bne.n	8011cb8 <tcp_process+0x738>
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	68da      	ldr	r2, [r3, #12]
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	60da      	str	r2, [r3, #12]
 8011cb6:	e005      	b.n	8011cc4 <tcp_process+0x744>
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	60fb      	str	r3, [r7, #12]
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d1ef      	bne.n	8011ca4 <tcp_process+0x724>
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	60da      	str	r2, [r3, #12]
 8011cca:	4b1f      	ldr	r3, [pc, #124]	; (8011d48 <tcp_process+0x7c8>)
 8011ccc:	2201      	movs	r2, #1
 8011cce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	220a      	movs	r2, #10
 8011cd4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011cd6:	4b1d      	ldr	r3, [pc, #116]	; (8011d4c <tcp_process+0x7cc>)
 8011cd8:	681a      	ldr	r2, [r3, #0]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	60da      	str	r2, [r3, #12]
 8011cde:	4a1b      	ldr	r2, [pc, #108]	; (8011d4c <tcp_process+0x7cc>)
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6013      	str	r3, [r2, #0]
 8011ce4:	f003 f8c4 	bl	8014e70 <tcp_timer_needed>
      }
      break;
 8011ce8:	e026      	b.n	8011d38 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f000 f93c 	bl	8011f68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011cf0:	4b17      	ldr	r3, [pc, #92]	; (8011d50 <tcp_process+0x7d0>)
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	f003 0310 	and.w	r3, r3, #16
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d01f      	beq.n	8011d3c <tcp_process+0x7bc>
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d00:	4b14      	ldr	r3, [pc, #80]	; (8011d54 <tcp_process+0x7d4>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	429a      	cmp	r2, r3
 8011d06:	d119      	bne.n	8011d3c <tcp_process+0x7bc>
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d115      	bne.n	8011d3c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011d10:	4b11      	ldr	r3, [pc, #68]	; (8011d58 <tcp_process+0x7d8>)
 8011d12:	781b      	ldrb	r3, [r3, #0]
 8011d14:	f043 0310 	orr.w	r3, r3, #16
 8011d18:	b2da      	uxtb	r2, r3
 8011d1a:	4b0f      	ldr	r3, [pc, #60]	; (8011d58 <tcp_process+0x7d8>)
 8011d1c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011d1e:	e00d      	b.n	8011d3c <tcp_process+0x7bc>
    default:
      break;
 8011d20:	bf00      	nop
 8011d22:	e00c      	b.n	8011d3e <tcp_process+0x7be>
      break;
 8011d24:	bf00      	nop
 8011d26:	e00a      	b.n	8011d3e <tcp_process+0x7be>
      break;
 8011d28:	bf00      	nop
 8011d2a:	e008      	b.n	8011d3e <tcp_process+0x7be>
      break;
 8011d2c:	bf00      	nop
 8011d2e:	e006      	b.n	8011d3e <tcp_process+0x7be>
      break;
 8011d30:	bf00      	nop
 8011d32:	e004      	b.n	8011d3e <tcp_process+0x7be>
      break;
 8011d34:	bf00      	nop
 8011d36:	e002      	b.n	8011d3e <tcp_process+0x7be>
      break;
 8011d38:	bf00      	nop
 8011d3a:	e000      	b.n	8011d3e <tcp_process+0x7be>
      break;
 8011d3c:	bf00      	nop
  }
  return ERR_OK;
 8011d3e:	2300      	movs	r3, #0
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3724      	adds	r7, #36	; 0x24
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd90      	pop	{r4, r7, pc}
 8011d48:	2000e4e8 	.word	0x2000e4e8
 8011d4c:	2000e4fc 	.word	0x2000e4fc
 8011d50:	20004208 	.word	0x20004208
 8011d54:	20004200 	.word	0x20004200
 8011d58:	20004209 	.word	0x20004209
 8011d5c:	2000e4ec 	.word	0x2000e4ec

08011d60 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011d60:	b5b0      	push	{r4, r5, r7, lr}
 8011d62:	b084      	sub	sp, #16
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d106      	bne.n	8011d7e <tcp_oos_insert_segment+0x1e>
 8011d70:	4b3b      	ldr	r3, [pc, #236]	; (8011e60 <tcp_oos_insert_segment+0x100>)
 8011d72:	f240 421f 	movw	r2, #1055	; 0x41f
 8011d76:	493b      	ldr	r1, [pc, #236]	; (8011e64 <tcp_oos_insert_segment+0x104>)
 8011d78:	483b      	ldr	r0, [pc, #236]	; (8011e68 <tcp_oos_insert_segment+0x108>)
 8011d7a:	f004 fa1f 	bl	80161bc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	899b      	ldrh	r3, [r3, #12]
 8011d84:	b29b      	uxth	r3, r3
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7f8 ff7c 	bl	800ac84 <lwip_htons>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	b2db      	uxtb	r3, r3
 8011d90:	f003 0301 	and.w	r3, r3, #1
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d027      	beq.n	8011de8 <tcp_oos_insert_segment+0x88>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011d98:	6838      	ldr	r0, [r7, #0]
 8011d9a:	f7fe f99d 	bl	80100d8 <tcp_segs_free>
    next = NULL;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	603b      	str	r3, [r7, #0]
 8011da2:	e055      	b.n	8011e50 <tcp_oos_insert_segment+0xf0>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	68db      	ldr	r3, [r3, #12]
 8011da8:	899b      	ldrh	r3, [r3, #12]
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7f8 ff69 	bl	800ac84 <lwip_htons>
 8011db2:	4603      	mov	r3, r0
 8011db4:	b2db      	uxtb	r3, r3
 8011db6:	f003 0301 	and.w	r3, r3, #1
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d00c      	beq.n	8011dd8 <tcp_oos_insert_segment+0x78>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	68dc      	ldr	r4, [r3, #12]
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	68db      	ldr	r3, [r3, #12]
 8011dc6:	899b      	ldrh	r3, [r3, #12]
 8011dc8:	b29d      	uxth	r5, r3
 8011dca:	2001      	movs	r0, #1
 8011dcc:	f7f8 ff5a 	bl	800ac84 <lwip_htons>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	432b      	orrs	r3, r5
 8011dd4:	b29b      	uxth	r3, r3
 8011dd6:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011de2:	68f8      	ldr	r0, [r7, #12]
 8011de4:	f7fe f98c 	bl	8010100 <tcp_seg_free>
    while (next &&
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d00e      	beq.n	8011e0c <tcp_oos_insert_segment+0xac>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	891b      	ldrh	r3, [r3, #8]
 8011df2:	461a      	mov	r2, r3
 8011df4:	4b1d      	ldr	r3, [pc, #116]	; (8011e6c <tcp_oos_insert_segment+0x10c>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	441a      	add	r2, r3
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	68db      	ldr	r3, [r3, #12]
 8011dfe:	685b      	ldr	r3, [r3, #4]
 8011e00:	6839      	ldr	r1, [r7, #0]
 8011e02:	8909      	ldrh	r1, [r1, #8]
 8011e04:	440b      	add	r3, r1
 8011e06:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	dacb      	bge.n	8011da4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d01e      	beq.n	8011e50 <tcp_oos_insert_segment+0xf0>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	891b      	ldrh	r3, [r3, #8]
 8011e16:	461a      	mov	r2, r3
 8011e18:	4b14      	ldr	r3, [pc, #80]	; (8011e6c <tcp_oos_insert_segment+0x10c>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	441a      	add	r2, r3
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	68db      	ldr	r3, [r3, #12]
 8011e22:	685b      	ldr	r3, [r3, #4]
 8011e24:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	dd12      	ble.n	8011e50 <tcp_oos_insert_segment+0xf0>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	68db      	ldr	r3, [r3, #12]
 8011e2e:	685b      	ldr	r3, [r3, #4]
 8011e30:	b29a      	uxth	r2, r3
 8011e32:	4b0e      	ldr	r3, [pc, #56]	; (8011e6c <tcp_oos_insert_segment+0x10c>)
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	b29b      	uxth	r3, r3
 8011e38:	1ad3      	subs	r3, r2, r3
 8011e3a:	b29a      	uxth	r2, r3
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	685a      	ldr	r2, [r3, #4]
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	891b      	ldrh	r3, [r3, #8]
 8011e48:	4619      	mov	r1, r3
 8011e4a:	4610      	mov	r0, r2
 8011e4c:	f7fc fb16 	bl	800e47c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	683a      	ldr	r2, [r7, #0]
 8011e54:	601a      	str	r2, [r3, #0]
}
 8011e56:	bf00      	nop
 8011e58:	3710      	adds	r7, #16
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8011e5e:	bf00      	nop
 8011e60:	08019d9c 	.word	0x08019d9c
 8011e64:	0801a05c 	.word	0x0801a05c
 8011e68:	08019de8 	.word	0x08019de8
 8011e6c:	200041fc 	.word	0x200041fc

08011e70 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011e70:	b5b0      	push	{r4, r5, r7, lr}
 8011e72:	b086      	sub	sp, #24
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	60f8      	str	r0, [r7, #12]
 8011e78:	60b9      	str	r1, [r7, #8]
 8011e7a:	607a      	str	r2, [r7, #4]
 8011e7c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011e7e:	e03e      	b.n	8011efe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7fc fd3c 	bl	800e90c <pbuf_clen>
 8011e94:	4603      	mov	r3, r0
 8011e96:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e9e:	8a7a      	ldrh	r2, [r7, #18]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d906      	bls.n	8011eb2 <tcp_free_acked_segments+0x42>
 8011ea4:	4b2a      	ldr	r3, [pc, #168]	; (8011f50 <tcp_free_acked_segments+0xe0>)
 8011ea6:	f240 4257 	movw	r2, #1111	; 0x457
 8011eaa:	492a      	ldr	r1, [pc, #168]	; (8011f54 <tcp_free_acked_segments+0xe4>)
 8011eac:	482a      	ldr	r0, [pc, #168]	; (8011f58 <tcp_free_acked_segments+0xe8>)
 8011eae:	f004 f985 	bl	80161bc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011eb8:	8a7b      	ldrh	r3, [r7, #18]
 8011eba:	1ad3      	subs	r3, r2, r3
 8011ebc:	b29a      	uxth	r2, r3
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	891a      	ldrh	r2, [r3, #8]
 8011ec8:	4b24      	ldr	r3, [pc, #144]	; (8011f5c <tcp_free_acked_segments+0xec>)
 8011eca:	881b      	ldrh	r3, [r3, #0]
 8011ecc:	4413      	add	r3, r2
 8011ece:	b29a      	uxth	r2, r3
 8011ed0:	4b22      	ldr	r3, [pc, #136]	; (8011f5c <tcp_free_acked_segments+0xec>)
 8011ed2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011ed4:	6978      	ldr	r0, [r7, #20]
 8011ed6:	f7fe f913 	bl	8010100 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d00c      	beq.n	8011efe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d109      	bne.n	8011efe <tcp_free_acked_segments+0x8e>
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d106      	bne.n	8011efe <tcp_free_acked_segments+0x8e>
 8011ef0:	4b17      	ldr	r3, [pc, #92]	; (8011f50 <tcp_free_acked_segments+0xe0>)
 8011ef2:	f240 4262 	movw	r2, #1122	; 0x462
 8011ef6:	491a      	ldr	r1, [pc, #104]	; (8011f60 <tcp_free_acked_segments+0xf0>)
 8011ef8:	4817      	ldr	r0, [pc, #92]	; (8011f58 <tcp_free_acked_segments+0xe8>)
 8011efa:	f004 f95f 	bl	80161bc <iprintf>
  while (seg_list != NULL &&
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d020      	beq.n	8011f46 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	68db      	ldr	r3, [r3, #12]
 8011f08:	685b      	ldr	r3, [r3, #4]
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7f8 fecf 	bl	800acae <lwip_htonl>
 8011f10:	4604      	mov	r4, r0
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	891b      	ldrh	r3, [r3, #8]
 8011f16:	461d      	mov	r5, r3
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	68db      	ldr	r3, [r3, #12]
 8011f1c:	899b      	ldrh	r3, [r3, #12]
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	4618      	mov	r0, r3
 8011f22:	f7f8 feaf 	bl	800ac84 <lwip_htons>
 8011f26:	4603      	mov	r3, r0
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	f003 0303 	and.w	r3, r3, #3
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d001      	beq.n	8011f36 <tcp_free_acked_segments+0xc6>
 8011f32:	2301      	movs	r3, #1
 8011f34:	e000      	b.n	8011f38 <tcp_free_acked_segments+0xc8>
 8011f36:	2300      	movs	r3, #0
 8011f38:	442b      	add	r3, r5
 8011f3a:	18e2      	adds	r2, r4, r3
 8011f3c:	4b09      	ldr	r3, [pc, #36]	; (8011f64 <tcp_free_acked_segments+0xf4>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	dd9c      	ble.n	8011e80 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011f46:	68bb      	ldr	r3, [r7, #8]
}
 8011f48:	4618      	mov	r0, r3
 8011f4a:	3718      	adds	r7, #24
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8011f50:	08019d9c 	.word	0x08019d9c
 8011f54:	0801a084 	.word	0x0801a084
 8011f58:	08019de8 	.word	0x08019de8
 8011f5c:	20004204 	.word	0x20004204
 8011f60:	0801a0ac 	.word	0x0801a0ac
 8011f64:	20004200 	.word	0x20004200

08011f68 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011f68:	b5b0      	push	{r4, r5, r7, lr}
 8011f6a:	b094      	sub	sp, #80	; 0x50
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011f70:	2300      	movs	r3, #0
 8011f72:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d106      	bne.n	8011f88 <tcp_receive+0x20>
 8011f7a:	4ba6      	ldr	r3, [pc, #664]	; (8012214 <tcp_receive+0x2ac>)
 8011f7c:	f240 427b 	movw	r2, #1147	; 0x47b
 8011f80:	49a5      	ldr	r1, [pc, #660]	; (8012218 <tcp_receive+0x2b0>)
 8011f82:	48a6      	ldr	r0, [pc, #664]	; (801221c <tcp_receive+0x2b4>)
 8011f84:	f004 f91a 	bl	80161bc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	7d1b      	ldrb	r3, [r3, #20]
 8011f8c:	2b03      	cmp	r3, #3
 8011f8e:	d806      	bhi.n	8011f9e <tcp_receive+0x36>
 8011f90:	4ba0      	ldr	r3, [pc, #640]	; (8012214 <tcp_receive+0x2ac>)
 8011f92:	f240 427c 	movw	r2, #1148	; 0x47c
 8011f96:	49a2      	ldr	r1, [pc, #648]	; (8012220 <tcp_receive+0x2b8>)
 8011f98:	48a0      	ldr	r0, [pc, #640]	; (801221c <tcp_receive+0x2b4>)
 8011f9a:	f004 f90f 	bl	80161bc <iprintf>

  if (flags & TCP_ACK) {
 8011f9e:	4ba1      	ldr	r3, [pc, #644]	; (8012224 <tcp_receive+0x2bc>)
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	f003 0310 	and.w	r3, r3, #16
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	f000 8269 	beq.w	801247e <tcp_receive+0x516>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011fb2:	461a      	mov	r2, r3
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fb8:	4413      	add	r3, r2
 8011fba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011fc0:	4b99      	ldr	r3, [pc, #612]	; (8012228 <tcp_receive+0x2c0>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	1ad3      	subs	r3, r2, r3
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	db1b      	blt.n	8012002 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011fce:	4b96      	ldr	r3, [pc, #600]	; (8012228 <tcp_receive+0x2c0>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	d106      	bne.n	8011fe4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011fda:	4b94      	ldr	r3, [pc, #592]	; (801222c <tcp_receive+0x2c4>)
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	1ad3      	subs	r3, r2, r3
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	db0e      	blt.n	8012002 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011fe8:	4b90      	ldr	r3, [pc, #576]	; (801222c <tcp_receive+0x2c4>)
 8011fea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d125      	bne.n	801203c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011ff0:	4b8f      	ldr	r3, [pc, #572]	; (8012230 <tcp_receive+0x2c8>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	89db      	ldrh	r3, [r3, #14]
 8011ff6:	b29a      	uxth	r2, r3
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d91c      	bls.n	801203c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012002:	4b8b      	ldr	r3, [pc, #556]	; (8012230 <tcp_receive+0x2c8>)
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	89db      	ldrh	r3, [r3, #14]
 8012008:	b29a      	uxth	r2, r3
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801201c:	429a      	cmp	r2, r3
 801201e:	d205      	bcs.n	801202c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801202c:	4b7e      	ldr	r3, [pc, #504]	; (8012228 <tcp_receive+0x2c0>)
 801202e:	681a      	ldr	r2, [r3, #0]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012034:	4b7d      	ldr	r3, [pc, #500]	; (801222c <tcp_receive+0x2c4>)
 8012036:	681a      	ldr	r2, [r3, #0]
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801203c:	4b7b      	ldr	r3, [pc, #492]	; (801222c <tcp_receive+0x2c4>)
 801203e:	681a      	ldr	r2, [r3, #0]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012044:	1ad3      	subs	r3, r2, r3
 8012046:	2b00      	cmp	r3, #0
 8012048:	dc5d      	bgt.n	8012106 <tcp_receive+0x19e>
      /* Clause 2 */
      if (tcplen == 0) {
 801204a:	4b7a      	ldr	r3, [pc, #488]	; (8012234 <tcp_receive+0x2cc>)
 801204c:	881b      	ldrh	r3, [r3, #0]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d150      	bne.n	80120f4 <tcp_receive+0x18c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012056:	687a      	ldr	r2, [r7, #4]
 8012058:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801205c:	441a      	add	r2, r3
 801205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012060:	429a      	cmp	r2, r3
 8012062:	d147      	bne.n	80120f4 <tcp_receive+0x18c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801206a:	2b00      	cmp	r3, #0
 801206c:	db42      	blt.n	80120f4 <tcp_receive+0x18c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012072:	4b6e      	ldr	r3, [pc, #440]	; (801222c <tcp_receive+0x2c4>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	429a      	cmp	r2, r3
 8012078:	d13c      	bne.n	80120f4 <tcp_receive+0x18c>
              found_dupack = 1;
 801207a:	2301      	movs	r3, #1
 801207c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012084:	3301      	adds	r3, #1
 8012086:	b2da      	uxtb	r2, r3
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801208e:	429a      	cmp	r2, r3
 8012090:	d907      	bls.n	80120a2 <tcp_receive+0x13a>
                ++pcb->dupacks;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012098:	3301      	adds	r3, #1
 801209a:	b2da      	uxtb	r2, r3
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80120a8:	2b03      	cmp	r3, #3
 80120aa:	d91b      	bls.n	80120e4 <tcp_receive+0x17c>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120b6:	4413      	add	r3, r2
 80120b8:	b29a      	uxth	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d30a      	bcc.n	80120da <tcp_receive+0x172>
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120ce:	4413      	add	r3, r2
 80120d0:	b29a      	uxth	r2, r3
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80120d8:	e004      	b.n	80120e4 <tcp_receive+0x17c>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80120ea:	2b02      	cmp	r3, #2
 80120ec:	d902      	bls.n	80120f4 <tcp_receive+0x18c>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f002 fb4e 	bl	8014790 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80120f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	f040 8161 	bne.w	80123be <tcp_receive+0x456>
        pcb->dupacks = 0;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2200      	movs	r2, #0
 8012100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012104:	e15b      	b.n	80123be <tcp_receive+0x456>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012106:	4b49      	ldr	r3, [pc, #292]	; (801222c <tcp_receive+0x2c4>)
 8012108:	681a      	ldr	r2, [r3, #0]
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801210e:	1ad3      	subs	r3, r2, r3
 8012110:	3b01      	subs	r3, #1
 8012112:	2b00      	cmp	r3, #0
 8012114:	f2c0 814e 	blt.w	80123b4 <tcp_receive+0x44c>
 8012118:	4b44      	ldr	r3, [pc, #272]	; (801222c <tcp_receive+0x2c4>)
 801211a:	681a      	ldr	r2, [r3, #0]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012120:	1ad3      	subs	r3, r2, r3
 8012122:	2b00      	cmp	r3, #0
 8012124:	f300 8146 	bgt.w	80123b4 <tcp_receive+0x44c>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	8b5b      	ldrh	r3, [r3, #26]
 801212c:	f003 0304 	and.w	r3, r3, #4
 8012130:	2b00      	cmp	r3, #0
 8012132:	d010      	beq.n	8012156 <tcp_receive+0x1ee>
        tcp_clear_flags(pcb, TF_INFR);
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	8b5b      	ldrh	r3, [r3, #26]
 8012138:	f023 0304 	bic.w	r3, r3, #4
 801213c:	b29a      	uxth	r2, r3
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	2200      	movs	r2, #0
 8012152:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2200      	movs	r2, #0
 801215a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012164:	10db      	asrs	r3, r3, #3
 8012166:	b21b      	sxth	r3, r3
 8012168:	b29a      	uxth	r2, r3
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012170:	b29b      	uxth	r3, r3
 8012172:	4413      	add	r3, r2
 8012174:	b29b      	uxth	r3, r3
 8012176:	b21a      	sxth	r2, r3
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801217e:	4b2b      	ldr	r3, [pc, #172]	; (801222c <tcp_receive+0x2c4>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	b29a      	uxth	r2, r3
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012188:	b29b      	uxth	r3, r3
 801218a:	1ad3      	subs	r3, r2, r3
 801218c:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2200      	movs	r2, #0
 8012192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012196:	4b25      	ldr	r3, [pc, #148]	; (801222c <tcp_receive+0x2c4>)
 8012198:	681a      	ldr	r2, [r3, #0]
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	7d1b      	ldrb	r3, [r3, #20]
 80121a2:	2b03      	cmp	r3, #3
 80121a4:	f240 8097 	bls.w	80122d6 <tcp_receive+0x36e>
        if (pcb->cwnd < pcb->ssthresh) {
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d245      	bcs.n	8012244 <tcp_receive+0x2dc>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	8b5b      	ldrh	r3, [r3, #26]
 80121bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d001      	beq.n	80121c8 <tcp_receive+0x260>
 80121c4:	2301      	movs	r3, #1
 80121c6:	e000      	b.n	80121ca <tcp_receive+0x262>
 80121c8:	2302      	movs	r3, #2
 80121ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80121ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80121d2:	b29a      	uxth	r2, r3
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121d8:	fb12 f303 	smulbb	r3, r2, r3
 80121dc:	b29a      	uxth	r2, r3
 80121de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80121e0:	4293      	cmp	r3, r2
 80121e2:	bf28      	it	cs
 80121e4:	4613      	movcs	r3, r2
 80121e6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80121ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80121f0:	4413      	add	r3, r2
 80121f2:	b29a      	uxth	r2, r3
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80121fa:	429a      	cmp	r2, r3
 80121fc:	d31c      	bcc.n	8012238 <tcp_receive+0x2d0>
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012204:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012206:	4413      	add	r3, r2
 8012208:	b29a      	uxth	r2, r3
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012210:	e061      	b.n	80122d6 <tcp_receive+0x36e>
 8012212:	bf00      	nop
 8012214:	08019d9c 	.word	0x08019d9c
 8012218:	0801a0cc 	.word	0x0801a0cc
 801221c:	08019de8 	.word	0x08019de8
 8012220:	0801a0e8 	.word	0x0801a0e8
 8012224:	20004208 	.word	0x20004208
 8012228:	200041fc 	.word	0x200041fc
 801222c:	20004200 	.word	0x20004200
 8012230:	200041ec 	.word	0x200041ec
 8012234:	20004206 	.word	0x20004206
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801223e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012242:	e048      	b.n	80122d6 <tcp_receive+0x36e>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801224a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801224c:	4413      	add	r3, r2
 801224e:	b29a      	uxth	r2, r3
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012256:	429a      	cmp	r2, r3
 8012258:	d309      	bcc.n	801226e <tcp_receive+0x306>
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012260:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012262:	4413      	add	r3, r2
 8012264:	b29a      	uxth	r2, r3
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801226c:	e004      	b.n	8012278 <tcp_receive+0x310>
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012274:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012284:	429a      	cmp	r2, r3
 8012286:	d326      	bcc.n	80122d6 <tcp_receive+0x36e>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012294:	1ad3      	subs	r3, r2, r3
 8012296:	b29a      	uxth	r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122a8:	4413      	add	r3, r2
 80122aa:	b29a      	uxth	r2, r3
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d30a      	bcc.n	80122cc <tcp_receive+0x364>
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122c0:	4413      	add	r3, r2
 80122c2:	b29a      	uxth	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80122ca:	e004      	b.n	80122d6 <tcp_receive+0x36e>
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122de:	4a98      	ldr	r2, [pc, #608]	; (8012540 <tcp_receive+0x5d8>)
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f7ff fdc5 	bl	8011e70 <tcp_free_acked_segments>
 80122e6:	4602      	mov	r2, r0
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122f4:	4a93      	ldr	r2, [pc, #588]	; (8012544 <tcp_receive+0x5dc>)
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f7ff fdba 	bl	8011e70 <tcp_free_acked_segments>
 80122fc:	4602      	mov	r2, r0
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012306:	2b00      	cmp	r3, #0
 8012308:	d104      	bne.n	8012314 <tcp_receive+0x3ac>
        pcb->rtime = -1;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012310:	861a      	strh	r2, [r3, #48]	; 0x30
 8012312:	e002      	b.n	801231a <tcp_receive+0x3b2>
      } else {
        pcb->rtime = 0;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2200      	movs	r2, #0
 8012318:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2200      	movs	r2, #0
 801231e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012324:	2b00      	cmp	r3, #0
 8012326:	d103      	bne.n	8012330 <tcp_receive+0x3c8>
        pcb->unsent_oversize = 0;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2200      	movs	r2, #0
 801232c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012336:	4b84      	ldr	r3, [pc, #528]	; (8012548 <tcp_receive+0x5e0>)
 8012338:	881b      	ldrh	r3, [r3, #0]
 801233a:	4413      	add	r3, r2
 801233c:	b29a      	uxth	r2, r3
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	8b5b      	ldrh	r3, [r3, #26]
 8012348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801234c:	2b00      	cmp	r3, #0
 801234e:	d035      	beq.n	80123bc <tcp_receive+0x454>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012354:	2b00      	cmp	r3, #0
 8012356:	d118      	bne.n	801238a <tcp_receive+0x422>
          if ((pcb->unsent == NULL) ||
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801235c:	2b00      	cmp	r3, #0
 801235e:	d00c      	beq.n	801237a <tcp_receive+0x412>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012368:	68db      	ldr	r3, [r3, #12]
 801236a:	685b      	ldr	r3, [r3, #4]
 801236c:	4618      	mov	r0, r3
 801236e:	f7f8 fc9e 	bl	800acae <lwip_htonl>
 8012372:	4603      	mov	r3, r0
 8012374:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012376:	2b00      	cmp	r3, #0
 8012378:	dc20      	bgt.n	80123bc <tcp_receive+0x454>
            tcp_clear_flags(pcb, TF_RTO);
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	8b5b      	ldrh	r3, [r3, #26]
 801237e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012382:	b29a      	uxth	r2, r3
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012388:	e018      	b.n	80123bc <tcp_receive+0x454>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012392:	68db      	ldr	r3, [r3, #12]
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	4618      	mov	r0, r3
 8012398:	f7f8 fc89 	bl	800acae <lwip_htonl>
 801239c:	4603      	mov	r3, r0
 801239e:	1ae3      	subs	r3, r4, r3
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	dc0b      	bgt.n	80123bc <tcp_receive+0x454>
          tcp_clear_flags(pcb, TF_RTO);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	8b5b      	ldrh	r3, [r3, #26]
 80123a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80123ac:	b29a      	uxth	r2, r3
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80123b2:	e003      	b.n	80123bc <tcp_receive+0x454>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f002 fbe9 	bl	8014b8c <tcp_send_empty_ack>
 80123ba:	e000      	b.n	80123be <tcp_receive+0x456>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80123bc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d05b      	beq.n	801247e <tcp_receive+0x516>
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123ca:	4b60      	ldr	r3, [pc, #384]	; (801254c <tcp_receive+0x5e4>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	1ad3      	subs	r3, r2, r3
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	da54      	bge.n	801247e <tcp_receive+0x516>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80123d4:	4b5e      	ldr	r3, [pc, #376]	; (8012550 <tcp_receive+0x5e8>)
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	b29a      	uxth	r2, r3
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123de:	b29b      	uxth	r3, r3
 80123e0:	1ad3      	subs	r3, r2, r3
 80123e2:	b29b      	uxth	r3, r3
 80123e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80123e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80123f2:	10db      	asrs	r3, r3, #3
 80123f4:	b21b      	sxth	r3, r3
 80123f6:	b29b      	uxth	r3, r3
 80123f8:	1ad3      	subs	r3, r2, r3
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012406:	b29a      	uxth	r2, r3
 8012408:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801240c:	4413      	add	r3, r2
 801240e:	b29b      	uxth	r3, r3
 8012410:	b21a      	sxth	r2, r3
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012416:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801241a:	2b00      	cmp	r3, #0
 801241c:	da05      	bge.n	801242a <tcp_receive+0x4c2>
        m = (s16_t) - m;
 801241e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012422:	425b      	negs	r3, r3
 8012424:	b29b      	uxth	r3, r3
 8012426:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801242a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012434:	109b      	asrs	r3, r3, #2
 8012436:	b21b      	sxth	r3, r3
 8012438:	b29b      	uxth	r3, r3
 801243a:	1ad3      	subs	r3, r2, r3
 801243c:	b29b      	uxth	r3, r3
 801243e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012448:	b29a      	uxth	r2, r3
 801244a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801244e:	4413      	add	r3, r2
 8012450:	b29b      	uxth	r3, r3
 8012452:	b21a      	sxth	r2, r3
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801245e:	10db      	asrs	r3, r3, #3
 8012460:	b21b      	sxth	r3, r3
 8012462:	b29a      	uxth	r2, r3
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801246a:	b29b      	uxth	r3, r3
 801246c:	4413      	add	r3, r2
 801246e:	b29b      	uxth	r3, r3
 8012470:	b21a      	sxth	r2, r3
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	2200      	movs	r2, #0
 801247c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801247e:	4b35      	ldr	r3, [pc, #212]	; (8012554 <tcp_receive+0x5ec>)
 8012480:	881b      	ldrh	r3, [r3, #0]
 8012482:	2b00      	cmp	r3, #0
 8012484:	f000 84df 	beq.w	8012e46 <tcp_receive+0xede>
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	7d1b      	ldrb	r3, [r3, #20]
 801248c:	2b06      	cmp	r3, #6
 801248e:	f200 84da 	bhi.w	8012e46 <tcp_receive+0xede>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012496:	4b30      	ldr	r3, [pc, #192]	; (8012558 <tcp_receive+0x5f0>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	1ad3      	subs	r3, r2, r3
 801249c:	3b01      	subs	r3, #1
 801249e:	2b00      	cmp	r3, #0
 80124a0:	f2c0 808e 	blt.w	80125c0 <tcp_receive+0x658>
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124a8:	4b2a      	ldr	r3, [pc, #168]	; (8012554 <tcp_receive+0x5ec>)
 80124aa:	881b      	ldrh	r3, [r3, #0]
 80124ac:	4619      	mov	r1, r3
 80124ae:	4b2a      	ldr	r3, [pc, #168]	; (8012558 <tcp_receive+0x5f0>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	440b      	add	r3, r1
 80124b4:	1ad3      	subs	r3, r2, r3
 80124b6:	3301      	adds	r3, #1
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	f300 8081 	bgt.w	80125c0 <tcp_receive+0x658>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80124be:	4b27      	ldr	r3, [pc, #156]	; (801255c <tcp_receive+0x5f4>)
 80124c0:	685b      	ldr	r3, [r3, #4]
 80124c2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124c8:	4b23      	ldr	r3, [pc, #140]	; (8012558 <tcp_receive+0x5f0>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	1ad3      	subs	r3, r2, r3
 80124ce:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80124d0:	4b22      	ldr	r3, [pc, #136]	; (801255c <tcp_receive+0x5f4>)
 80124d2:	685b      	ldr	r3, [r3, #4]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d106      	bne.n	80124e6 <tcp_receive+0x57e>
 80124d8:	4b21      	ldr	r3, [pc, #132]	; (8012560 <tcp_receive+0x5f8>)
 80124da:	f240 5294 	movw	r2, #1428	; 0x594
 80124de:	4921      	ldr	r1, [pc, #132]	; (8012564 <tcp_receive+0x5fc>)
 80124e0:	4821      	ldr	r0, [pc, #132]	; (8012568 <tcp_receive+0x600>)
 80124e2:	f003 fe6b 	bl	80161bc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80124e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80124ec:	4293      	cmp	r3, r2
 80124ee:	d906      	bls.n	80124fe <tcp_receive+0x596>
 80124f0:	4b1b      	ldr	r3, [pc, #108]	; (8012560 <tcp_receive+0x5f8>)
 80124f2:	f240 5295 	movw	r2, #1429	; 0x595
 80124f6:	491d      	ldr	r1, [pc, #116]	; (801256c <tcp_receive+0x604>)
 80124f8:	481b      	ldr	r0, [pc, #108]	; (8012568 <tcp_receive+0x600>)
 80124fa:	f003 fe5f 	bl	80161bc <iprintf>
      off = (u16_t)off32;
 80124fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012500:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012504:	4b15      	ldr	r3, [pc, #84]	; (801255c <tcp_receive+0x5f4>)
 8012506:	685b      	ldr	r3, [r3, #4]
 8012508:	891b      	ldrh	r3, [r3, #8]
 801250a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801250e:	429a      	cmp	r2, r3
 8012510:	d906      	bls.n	8012520 <tcp_receive+0x5b8>
 8012512:	4b13      	ldr	r3, [pc, #76]	; (8012560 <tcp_receive+0x5f8>)
 8012514:	f240 5297 	movw	r2, #1431	; 0x597
 8012518:	4915      	ldr	r1, [pc, #84]	; (8012570 <tcp_receive+0x608>)
 801251a:	4813      	ldr	r0, [pc, #76]	; (8012568 <tcp_receive+0x600>)
 801251c:	f003 fe4e 	bl	80161bc <iprintf>
      inseg.len -= off;
 8012520:	4b0e      	ldr	r3, [pc, #56]	; (801255c <tcp_receive+0x5f4>)
 8012522:	891a      	ldrh	r2, [r3, #8]
 8012524:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012528:	1ad3      	subs	r3, r2, r3
 801252a:	b29a      	uxth	r2, r3
 801252c:	4b0b      	ldr	r3, [pc, #44]	; (801255c <tcp_receive+0x5f4>)
 801252e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012530:	4b0a      	ldr	r3, [pc, #40]	; (801255c <tcp_receive+0x5f4>)
 8012532:	685b      	ldr	r3, [r3, #4]
 8012534:	891a      	ldrh	r2, [r3, #8]
 8012536:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801253a:	1ad3      	subs	r3, r2, r3
 801253c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801253e:	e029      	b.n	8012594 <tcp_receive+0x62c>
 8012540:	0801a104 	.word	0x0801a104
 8012544:	0801a10c 	.word	0x0801a10c
 8012548:	20004204 	.word	0x20004204
 801254c:	20004200 	.word	0x20004200
 8012550:	2000e4f0 	.word	0x2000e4f0
 8012554:	20004206 	.word	0x20004206
 8012558:	200041fc 	.word	0x200041fc
 801255c:	200041dc 	.word	0x200041dc
 8012560:	08019d9c 	.word	0x08019d9c
 8012564:	0801a114 	.word	0x0801a114
 8012568:	08019de8 	.word	0x08019de8
 801256c:	0801a124 	.word	0x0801a124
 8012570:	0801a134 	.word	0x0801a134
        off -= p->len;
 8012574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012576:	895b      	ldrh	r3, [r3, #10]
 8012578:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801257c:	1ad3      	subs	r3, r2, r3
 801257e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012584:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012586:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801258a:	2200      	movs	r2, #0
 801258c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801258e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012596:	895b      	ldrh	r3, [r3, #10]
 8012598:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801259c:	429a      	cmp	r2, r3
 801259e:	d8e9      	bhi.n	8012574 <tcp_receive+0x60c>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80125a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125a4:	4619      	mov	r1, r3
 80125a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80125a8:	f7fc f86a 	bl	800e680 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80125ac:	4b91      	ldr	r3, [pc, #580]	; (80127f4 <tcp_receive+0x88c>)
 80125ae:	68db      	ldr	r3, [r3, #12]
 80125b0:	687a      	ldr	r2, [r7, #4]
 80125b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80125b4:	4990      	ldr	r1, [pc, #576]	; (80127f8 <tcp_receive+0x890>)
 80125b6:	600a      	str	r2, [r1, #0]
 80125b8:	4a8f      	ldr	r2, [pc, #572]	; (80127f8 <tcp_receive+0x890>)
 80125ba:	6812      	ldr	r2, [r2, #0]
 80125bc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80125be:	e00d      	b.n	80125dc <tcp_receive+0x674>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80125c0:	4b8d      	ldr	r3, [pc, #564]	; (80127f8 <tcp_receive+0x890>)
 80125c2:	681a      	ldr	r2, [r3, #0]
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125c8:	1ad3      	subs	r3, r2, r3
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	da06      	bge.n	80125dc <tcp_receive+0x674>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	8b5b      	ldrh	r3, [r3, #26]
 80125d2:	f043 0302 	orr.w	r3, r3, #2
 80125d6:	b29a      	uxth	r2, r3
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80125dc:	4b86      	ldr	r3, [pc, #536]	; (80127f8 <tcp_receive+0x890>)
 80125de:	681a      	ldr	r2, [r3, #0]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125e4:	1ad3      	subs	r3, r2, r3
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	f2c0 8428 	blt.w	8012e3c <tcp_receive+0xed4>
 80125ec:	4b82      	ldr	r3, [pc, #520]	; (80127f8 <tcp_receive+0x890>)
 80125ee:	681a      	ldr	r2, [r3, #0]
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125f4:	6879      	ldr	r1, [r7, #4]
 80125f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80125f8:	440b      	add	r3, r1
 80125fa:	1ad3      	subs	r3, r2, r3
 80125fc:	3301      	adds	r3, #1
 80125fe:	2b00      	cmp	r3, #0
 8012600:	f300 841c 	bgt.w	8012e3c <tcp_receive+0xed4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012608:	4b7b      	ldr	r3, [pc, #492]	; (80127f8 <tcp_receive+0x890>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	429a      	cmp	r2, r3
 801260e:	f040 8298 	bne.w	8012b42 <tcp_receive+0xbda>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012612:	4b78      	ldr	r3, [pc, #480]	; (80127f4 <tcp_receive+0x88c>)
 8012614:	891c      	ldrh	r4, [r3, #8]
 8012616:	4b77      	ldr	r3, [pc, #476]	; (80127f4 <tcp_receive+0x88c>)
 8012618:	68db      	ldr	r3, [r3, #12]
 801261a:	899b      	ldrh	r3, [r3, #12]
 801261c:	b29b      	uxth	r3, r3
 801261e:	4618      	mov	r0, r3
 8012620:	f7f8 fb30 	bl	800ac84 <lwip_htons>
 8012624:	4603      	mov	r3, r0
 8012626:	b2db      	uxtb	r3, r3
 8012628:	f003 0303 	and.w	r3, r3, #3
 801262c:	2b00      	cmp	r3, #0
 801262e:	d001      	beq.n	8012634 <tcp_receive+0x6cc>
 8012630:	2301      	movs	r3, #1
 8012632:	e000      	b.n	8012636 <tcp_receive+0x6ce>
 8012634:	2300      	movs	r3, #0
 8012636:	4423      	add	r3, r4
 8012638:	b29a      	uxth	r2, r3
 801263a:	4b70      	ldr	r3, [pc, #448]	; (80127fc <tcp_receive+0x894>)
 801263c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012642:	4b6e      	ldr	r3, [pc, #440]	; (80127fc <tcp_receive+0x894>)
 8012644:	881b      	ldrh	r3, [r3, #0]
 8012646:	429a      	cmp	r2, r3
 8012648:	d275      	bcs.n	8012736 <tcp_receive+0x7ce>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801264a:	4b6a      	ldr	r3, [pc, #424]	; (80127f4 <tcp_receive+0x88c>)
 801264c:	68db      	ldr	r3, [r3, #12]
 801264e:	899b      	ldrh	r3, [r3, #12]
 8012650:	b29b      	uxth	r3, r3
 8012652:	4618      	mov	r0, r3
 8012654:	f7f8 fb16 	bl	800ac84 <lwip_htons>
 8012658:	4603      	mov	r3, r0
 801265a:	b2db      	uxtb	r3, r3
 801265c:	f003 0301 	and.w	r3, r3, #1
 8012660:	2b00      	cmp	r3, #0
 8012662:	d01f      	beq.n	80126a4 <tcp_receive+0x73c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012664:	4b63      	ldr	r3, [pc, #396]	; (80127f4 <tcp_receive+0x88c>)
 8012666:	68dc      	ldr	r4, [r3, #12]
 8012668:	4b62      	ldr	r3, [pc, #392]	; (80127f4 <tcp_receive+0x88c>)
 801266a:	68db      	ldr	r3, [r3, #12]
 801266c:	899b      	ldrh	r3, [r3, #12]
 801266e:	b29b      	uxth	r3, r3
 8012670:	b21b      	sxth	r3, r3
 8012672:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012676:	b21d      	sxth	r5, r3
 8012678:	4b5e      	ldr	r3, [pc, #376]	; (80127f4 <tcp_receive+0x88c>)
 801267a:	68db      	ldr	r3, [r3, #12]
 801267c:	899b      	ldrh	r3, [r3, #12]
 801267e:	b29b      	uxth	r3, r3
 8012680:	4618      	mov	r0, r3
 8012682:	f7f8 faff 	bl	800ac84 <lwip_htons>
 8012686:	4603      	mov	r3, r0
 8012688:	b2db      	uxtb	r3, r3
 801268a:	b29b      	uxth	r3, r3
 801268c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012690:	b29b      	uxth	r3, r3
 8012692:	4618      	mov	r0, r3
 8012694:	f7f8 faf6 	bl	800ac84 <lwip_htons>
 8012698:	4603      	mov	r3, r0
 801269a:	b21b      	sxth	r3, r3
 801269c:	432b      	orrs	r3, r5
 801269e:	b21b      	sxth	r3, r3
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80126a8:	4b52      	ldr	r3, [pc, #328]	; (80127f4 <tcp_receive+0x88c>)
 80126aa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80126ac:	4b51      	ldr	r3, [pc, #324]	; (80127f4 <tcp_receive+0x88c>)
 80126ae:	68db      	ldr	r3, [r3, #12]
 80126b0:	899b      	ldrh	r3, [r3, #12]
 80126b2:	b29b      	uxth	r3, r3
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7f8 fae5 	bl	800ac84 <lwip_htons>
 80126ba:	4603      	mov	r3, r0
 80126bc:	b2db      	uxtb	r3, r3
 80126be:	f003 0302 	and.w	r3, r3, #2
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d005      	beq.n	80126d2 <tcp_receive+0x76a>
            inseg.len -= 1;
 80126c6:	4b4b      	ldr	r3, [pc, #300]	; (80127f4 <tcp_receive+0x88c>)
 80126c8:	891b      	ldrh	r3, [r3, #8]
 80126ca:	3b01      	subs	r3, #1
 80126cc:	b29a      	uxth	r2, r3
 80126ce:	4b49      	ldr	r3, [pc, #292]	; (80127f4 <tcp_receive+0x88c>)
 80126d0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80126d2:	4b48      	ldr	r3, [pc, #288]	; (80127f4 <tcp_receive+0x88c>)
 80126d4:	685a      	ldr	r2, [r3, #4]
 80126d6:	4b47      	ldr	r3, [pc, #284]	; (80127f4 <tcp_receive+0x88c>)
 80126d8:	891b      	ldrh	r3, [r3, #8]
 80126da:	4619      	mov	r1, r3
 80126dc:	4610      	mov	r0, r2
 80126de:	f7fb fecd 	bl	800e47c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80126e2:	4b44      	ldr	r3, [pc, #272]	; (80127f4 <tcp_receive+0x88c>)
 80126e4:	891c      	ldrh	r4, [r3, #8]
 80126e6:	4b43      	ldr	r3, [pc, #268]	; (80127f4 <tcp_receive+0x88c>)
 80126e8:	68db      	ldr	r3, [r3, #12]
 80126ea:	899b      	ldrh	r3, [r3, #12]
 80126ec:	b29b      	uxth	r3, r3
 80126ee:	4618      	mov	r0, r3
 80126f0:	f7f8 fac8 	bl	800ac84 <lwip_htons>
 80126f4:	4603      	mov	r3, r0
 80126f6:	b2db      	uxtb	r3, r3
 80126f8:	f003 0303 	and.w	r3, r3, #3
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d001      	beq.n	8012704 <tcp_receive+0x79c>
 8012700:	2301      	movs	r3, #1
 8012702:	e000      	b.n	8012706 <tcp_receive+0x79e>
 8012704:	2300      	movs	r3, #0
 8012706:	4423      	add	r3, r4
 8012708:	b29a      	uxth	r2, r3
 801270a:	4b3c      	ldr	r3, [pc, #240]	; (80127fc <tcp_receive+0x894>)
 801270c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801270e:	4b3b      	ldr	r3, [pc, #236]	; (80127fc <tcp_receive+0x894>)
 8012710:	881b      	ldrh	r3, [r3, #0]
 8012712:	461a      	mov	r2, r3
 8012714:	4b38      	ldr	r3, [pc, #224]	; (80127f8 <tcp_receive+0x890>)
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	441a      	add	r2, r3
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801271e:	6879      	ldr	r1, [r7, #4]
 8012720:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012722:	440b      	add	r3, r1
 8012724:	429a      	cmp	r2, r3
 8012726:	d006      	beq.n	8012736 <tcp_receive+0x7ce>
 8012728:	4b35      	ldr	r3, [pc, #212]	; (8012800 <tcp_receive+0x898>)
 801272a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801272e:	4935      	ldr	r1, [pc, #212]	; (8012804 <tcp_receive+0x89c>)
 8012730:	4835      	ldr	r0, [pc, #212]	; (8012808 <tcp_receive+0x8a0>)
 8012732:	f003 fd43 	bl	80161bc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801273a:	2b00      	cmp	r3, #0
 801273c:	f000 80e5 	beq.w	801290a <tcp_receive+0x9a2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012740:	4b2c      	ldr	r3, [pc, #176]	; (80127f4 <tcp_receive+0x88c>)
 8012742:	68db      	ldr	r3, [r3, #12]
 8012744:	899b      	ldrh	r3, [r3, #12]
 8012746:	b29b      	uxth	r3, r3
 8012748:	4618      	mov	r0, r3
 801274a:	f7f8 fa9b 	bl	800ac84 <lwip_htons>
 801274e:	4603      	mov	r3, r0
 8012750:	b2db      	uxtb	r3, r3
 8012752:	f003 0301 	and.w	r3, r3, #1
 8012756:	2b00      	cmp	r3, #0
 8012758:	d010      	beq.n	801277c <tcp_receive+0x814>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801275a:	e00a      	b.n	8012772 <tcp_receive+0x80a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012760:	61fb      	str	r3, [r7, #28]
              pcb->ooseq = pcb->ooseq->next;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012766:	681a      	ldr	r2, [r3, #0]
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801276c:	69f8      	ldr	r0, [r7, #28]
 801276e:	f7fd fcc7 	bl	8010100 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012776:	2b00      	cmp	r3, #0
 8012778:	d1f0      	bne.n	801275c <tcp_receive+0x7f4>
 801277a:	e0c6      	b.n	801290a <tcp_receive+0x9a2>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012780:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012782:	e050      	b.n	8012826 <tcp_receive+0x8be>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012786:	68db      	ldr	r3, [r3, #12]
 8012788:	899b      	ldrh	r3, [r3, #12]
 801278a:	b29b      	uxth	r3, r3
 801278c:	4618      	mov	r0, r3
 801278e:	f7f8 fa79 	bl	800ac84 <lwip_htons>
 8012792:	4603      	mov	r3, r0
 8012794:	b2db      	uxtb	r3, r3
 8012796:	f003 0301 	and.w	r3, r3, #1
 801279a:	2b00      	cmp	r3, #0
 801279c:	d03b      	beq.n	8012816 <tcp_receive+0x8ae>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801279e:	4b15      	ldr	r3, [pc, #84]	; (80127f4 <tcp_receive+0x88c>)
 80127a0:	68db      	ldr	r3, [r3, #12]
 80127a2:	899b      	ldrh	r3, [r3, #12]
 80127a4:	b29b      	uxth	r3, r3
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7f8 fa6c 	bl	800ac84 <lwip_htons>
 80127ac:	4603      	mov	r3, r0
 80127ae:	b2db      	uxtb	r3, r3
 80127b0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d12e      	bne.n	8012816 <tcp_receive+0x8ae>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80127b8:	4b0e      	ldr	r3, [pc, #56]	; (80127f4 <tcp_receive+0x88c>)
 80127ba:	68dc      	ldr	r4, [r3, #12]
 80127bc:	4b0d      	ldr	r3, [pc, #52]	; (80127f4 <tcp_receive+0x88c>)
 80127be:	68db      	ldr	r3, [r3, #12]
 80127c0:	899b      	ldrh	r3, [r3, #12]
 80127c2:	b29d      	uxth	r5, r3
 80127c4:	2001      	movs	r0, #1
 80127c6:	f7f8 fa5d 	bl	800ac84 <lwip_htons>
 80127ca:	4603      	mov	r3, r0
 80127cc:	432b      	orrs	r3, r5
 80127ce:	b29b      	uxth	r3, r3
 80127d0:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80127d2:	4b08      	ldr	r3, [pc, #32]	; (80127f4 <tcp_receive+0x88c>)
 80127d4:	891c      	ldrh	r4, [r3, #8]
 80127d6:	4b07      	ldr	r3, [pc, #28]	; (80127f4 <tcp_receive+0x88c>)
 80127d8:	68db      	ldr	r3, [r3, #12]
 80127da:	899b      	ldrh	r3, [r3, #12]
 80127dc:	b29b      	uxth	r3, r3
 80127de:	4618      	mov	r0, r3
 80127e0:	f7f8 fa50 	bl	800ac84 <lwip_htons>
 80127e4:	4603      	mov	r3, r0
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	f003 0303 	and.w	r3, r3, #3
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d00d      	beq.n	801280c <tcp_receive+0x8a4>
 80127f0:	2301      	movs	r3, #1
 80127f2:	e00c      	b.n	801280e <tcp_receive+0x8a6>
 80127f4:	200041dc 	.word	0x200041dc
 80127f8:	200041fc 	.word	0x200041fc
 80127fc:	20004206 	.word	0x20004206
 8012800:	08019d9c 	.word	0x08019d9c
 8012804:	0801a144 	.word	0x0801a144
 8012808:	08019de8 	.word	0x08019de8
 801280c:	2300      	movs	r3, #0
 801280e:	4423      	add	r3, r4
 8012810:	b29a      	uxth	r2, r3
 8012812:	4b98      	ldr	r3, [pc, #608]	; (8012a74 <tcp_receive+0xb0c>)
 8012814:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012818:	61bb      	str	r3, [r7, #24]
              next = next->next;
 801281a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012820:	69b8      	ldr	r0, [r7, #24]
 8012822:	f7fd fc6d 	bl	8010100 <tcp_seg_free>
            while (next &&
 8012826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012828:	2b00      	cmp	r3, #0
 801282a:	d00e      	beq.n	801284a <tcp_receive+0x8e2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801282c:	4b91      	ldr	r3, [pc, #580]	; (8012a74 <tcp_receive+0xb0c>)
 801282e:	881b      	ldrh	r3, [r3, #0]
 8012830:	461a      	mov	r2, r3
 8012832:	4b91      	ldr	r3, [pc, #580]	; (8012a78 <tcp_receive+0xb10>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	441a      	add	r2, r3
 8012838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801283a:	68db      	ldr	r3, [r3, #12]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012840:	8909      	ldrh	r1, [r1, #8]
 8012842:	440b      	add	r3, r1
 8012844:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012846:	2b00      	cmp	r3, #0
 8012848:	da9c      	bge.n	8012784 <tcp_receive+0x81c>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801284a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801284c:	2b00      	cmp	r3, #0
 801284e:	d059      	beq.n	8012904 <tcp_receive+0x99c>
                TCP_SEQ_GT(seqno + tcplen,
 8012850:	4b88      	ldr	r3, [pc, #544]	; (8012a74 <tcp_receive+0xb0c>)
 8012852:	881b      	ldrh	r3, [r3, #0]
 8012854:	461a      	mov	r2, r3
 8012856:	4b88      	ldr	r3, [pc, #544]	; (8012a78 <tcp_receive+0xb10>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	441a      	add	r2, r3
 801285c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801285e:	68db      	ldr	r3, [r3, #12]
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012864:	2b00      	cmp	r3, #0
 8012866:	dd4d      	ble.n	8012904 <tcp_receive+0x99c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801286a:	68db      	ldr	r3, [r3, #12]
 801286c:	685b      	ldr	r3, [r3, #4]
 801286e:	b29a      	uxth	r2, r3
 8012870:	4b81      	ldr	r3, [pc, #516]	; (8012a78 <tcp_receive+0xb10>)
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	b29b      	uxth	r3, r3
 8012876:	1ad3      	subs	r3, r2, r3
 8012878:	b29a      	uxth	r2, r3
 801287a:	4b80      	ldr	r3, [pc, #512]	; (8012a7c <tcp_receive+0xb14>)
 801287c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801287e:	4b7f      	ldr	r3, [pc, #508]	; (8012a7c <tcp_receive+0xb14>)
 8012880:	68db      	ldr	r3, [r3, #12]
 8012882:	899b      	ldrh	r3, [r3, #12]
 8012884:	b29b      	uxth	r3, r3
 8012886:	4618      	mov	r0, r3
 8012888:	f7f8 f9fc 	bl	800ac84 <lwip_htons>
 801288c:	4603      	mov	r3, r0
 801288e:	b2db      	uxtb	r3, r3
 8012890:	f003 0302 	and.w	r3, r3, #2
 8012894:	2b00      	cmp	r3, #0
 8012896:	d005      	beq.n	80128a4 <tcp_receive+0x93c>
                inseg.len -= 1;
 8012898:	4b78      	ldr	r3, [pc, #480]	; (8012a7c <tcp_receive+0xb14>)
 801289a:	891b      	ldrh	r3, [r3, #8]
 801289c:	3b01      	subs	r3, #1
 801289e:	b29a      	uxth	r2, r3
 80128a0:	4b76      	ldr	r3, [pc, #472]	; (8012a7c <tcp_receive+0xb14>)
 80128a2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80128a4:	4b75      	ldr	r3, [pc, #468]	; (8012a7c <tcp_receive+0xb14>)
 80128a6:	685a      	ldr	r2, [r3, #4]
 80128a8:	4b74      	ldr	r3, [pc, #464]	; (8012a7c <tcp_receive+0xb14>)
 80128aa:	891b      	ldrh	r3, [r3, #8]
 80128ac:	4619      	mov	r1, r3
 80128ae:	4610      	mov	r0, r2
 80128b0:	f7fb fde4 	bl	800e47c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80128b4:	4b71      	ldr	r3, [pc, #452]	; (8012a7c <tcp_receive+0xb14>)
 80128b6:	891c      	ldrh	r4, [r3, #8]
 80128b8:	4b70      	ldr	r3, [pc, #448]	; (8012a7c <tcp_receive+0xb14>)
 80128ba:	68db      	ldr	r3, [r3, #12]
 80128bc:	899b      	ldrh	r3, [r3, #12]
 80128be:	b29b      	uxth	r3, r3
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7f8 f9df 	bl	800ac84 <lwip_htons>
 80128c6:	4603      	mov	r3, r0
 80128c8:	b2db      	uxtb	r3, r3
 80128ca:	f003 0303 	and.w	r3, r3, #3
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d001      	beq.n	80128d6 <tcp_receive+0x96e>
 80128d2:	2301      	movs	r3, #1
 80128d4:	e000      	b.n	80128d8 <tcp_receive+0x970>
 80128d6:	2300      	movs	r3, #0
 80128d8:	4423      	add	r3, r4
 80128da:	b29a      	uxth	r2, r3
 80128dc:	4b65      	ldr	r3, [pc, #404]	; (8012a74 <tcp_receive+0xb0c>)
 80128de:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80128e0:	4b64      	ldr	r3, [pc, #400]	; (8012a74 <tcp_receive+0xb0c>)
 80128e2:	881b      	ldrh	r3, [r3, #0]
 80128e4:	461a      	mov	r2, r3
 80128e6:	4b64      	ldr	r3, [pc, #400]	; (8012a78 <tcp_receive+0xb10>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	441a      	add	r2, r3
 80128ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128ee:	68db      	ldr	r3, [r3, #12]
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d006      	beq.n	8012904 <tcp_receive+0x99c>
 80128f6:	4b62      	ldr	r3, [pc, #392]	; (8012a80 <tcp_receive+0xb18>)
 80128f8:	f240 52fd 	movw	r2, #1533	; 0x5fd
 80128fc:	4961      	ldr	r1, [pc, #388]	; (8012a84 <tcp_receive+0xb1c>)
 80128fe:	4862      	ldr	r0, [pc, #392]	; (8012a88 <tcp_receive+0xb20>)
 8012900:	f003 fc5c 	bl	80161bc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012908:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801290a:	4b5a      	ldr	r3, [pc, #360]	; (8012a74 <tcp_receive+0xb0c>)
 801290c:	881b      	ldrh	r3, [r3, #0]
 801290e:	461a      	mov	r2, r3
 8012910:	4b59      	ldr	r3, [pc, #356]	; (8012a78 <tcp_receive+0xb10>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	441a      	add	r2, r3
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801291e:	4b55      	ldr	r3, [pc, #340]	; (8012a74 <tcp_receive+0xb0c>)
 8012920:	881b      	ldrh	r3, [r3, #0]
 8012922:	429a      	cmp	r2, r3
 8012924:	d206      	bcs.n	8012934 <tcp_receive+0x9cc>
 8012926:	4b56      	ldr	r3, [pc, #344]	; (8012a80 <tcp_receive+0xb18>)
 8012928:	f240 6207 	movw	r2, #1543	; 0x607
 801292c:	4957      	ldr	r1, [pc, #348]	; (8012a8c <tcp_receive+0xb24>)
 801292e:	4856      	ldr	r0, [pc, #344]	; (8012a88 <tcp_receive+0xb20>)
 8012930:	f003 fc44 	bl	80161bc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012938:	4b4e      	ldr	r3, [pc, #312]	; (8012a74 <tcp_receive+0xb0c>)
 801293a:	881b      	ldrh	r3, [r3, #0]
 801293c:	1ad3      	subs	r3, r2, r3
 801293e:	b29a      	uxth	r2, r3
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f7fc feb7 	bl	800f6b8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801294a:	4b4c      	ldr	r3, [pc, #304]	; (8012a7c <tcp_receive+0xb14>)
 801294c:	685b      	ldr	r3, [r3, #4]
 801294e:	891b      	ldrh	r3, [r3, #8]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d006      	beq.n	8012962 <tcp_receive+0x9fa>
          recv_data = inseg.p;
 8012954:	4b49      	ldr	r3, [pc, #292]	; (8012a7c <tcp_receive+0xb14>)
 8012956:	685b      	ldr	r3, [r3, #4]
 8012958:	4a4d      	ldr	r2, [pc, #308]	; (8012a90 <tcp_receive+0xb28>)
 801295a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801295c:	4b47      	ldr	r3, [pc, #284]	; (8012a7c <tcp_receive+0xb14>)
 801295e:	2200      	movs	r2, #0
 8012960:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012962:	4b46      	ldr	r3, [pc, #280]	; (8012a7c <tcp_receive+0xb14>)
 8012964:	68db      	ldr	r3, [r3, #12]
 8012966:	899b      	ldrh	r3, [r3, #12]
 8012968:	b29b      	uxth	r3, r3
 801296a:	4618      	mov	r0, r3
 801296c:	f7f8 f98a 	bl	800ac84 <lwip_htons>
 8012970:	4603      	mov	r3, r0
 8012972:	b2db      	uxtb	r3, r3
 8012974:	f003 0301 	and.w	r3, r3, #1
 8012978:	2b00      	cmp	r3, #0
 801297a:	f000 80b8 	beq.w	8012aee <tcp_receive+0xb86>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801297e:	4b45      	ldr	r3, [pc, #276]	; (8012a94 <tcp_receive+0xb2c>)
 8012980:	781b      	ldrb	r3, [r3, #0]
 8012982:	f043 0320 	orr.w	r3, r3, #32
 8012986:	b2da      	uxtb	r2, r3
 8012988:	4b42      	ldr	r3, [pc, #264]	; (8012a94 <tcp_receive+0xb2c>)
 801298a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801298c:	e0af      	b.n	8012aee <tcp_receive+0xb86>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012992:	617b      	str	r3, [r7, #20]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012998:	68db      	ldr	r3, [r3, #12]
 801299a:	685b      	ldr	r3, [r3, #4]
 801299c:	4a36      	ldr	r2, [pc, #216]	; (8012a78 <tcp_receive+0xb10>)
 801299e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	891b      	ldrh	r3, [r3, #8]
 80129a4:	461c      	mov	r4, r3
 80129a6:	697b      	ldr	r3, [r7, #20]
 80129a8:	68db      	ldr	r3, [r3, #12]
 80129aa:	899b      	ldrh	r3, [r3, #12]
 80129ac:	b29b      	uxth	r3, r3
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7f8 f968 	bl	800ac84 <lwip_htons>
 80129b4:	4603      	mov	r3, r0
 80129b6:	b2db      	uxtb	r3, r3
 80129b8:	f003 0303 	and.w	r3, r3, #3
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d001      	beq.n	80129c4 <tcp_receive+0xa5c>
 80129c0:	2301      	movs	r3, #1
 80129c2:	e000      	b.n	80129c6 <tcp_receive+0xa5e>
 80129c4:	2300      	movs	r3, #0
 80129c6:	4423      	add	r3, r4
 80129c8:	687a      	ldr	r2, [r7, #4]
 80129ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80129cc:	441a      	add	r2, r3
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80129d6:	461c      	mov	r4, r3
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	891b      	ldrh	r3, [r3, #8]
 80129dc:	461d      	mov	r5, r3
 80129de:	697b      	ldr	r3, [r7, #20]
 80129e0:	68db      	ldr	r3, [r3, #12]
 80129e2:	899b      	ldrh	r3, [r3, #12]
 80129e4:	b29b      	uxth	r3, r3
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7f8 f94c 	bl	800ac84 <lwip_htons>
 80129ec:	4603      	mov	r3, r0
 80129ee:	b2db      	uxtb	r3, r3
 80129f0:	f003 0303 	and.w	r3, r3, #3
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d001      	beq.n	80129fc <tcp_receive+0xa94>
 80129f8:	2301      	movs	r3, #1
 80129fa:	e000      	b.n	80129fe <tcp_receive+0xa96>
 80129fc:	2300      	movs	r3, #0
 80129fe:	442b      	add	r3, r5
 8012a00:	429c      	cmp	r4, r3
 8012a02:	d206      	bcs.n	8012a12 <tcp_receive+0xaaa>
 8012a04:	4b1e      	ldr	r3, [pc, #120]	; (8012a80 <tcp_receive+0xb18>)
 8012a06:	f240 622c 	movw	r2, #1580	; 0x62c
 8012a0a:	4923      	ldr	r1, [pc, #140]	; (8012a98 <tcp_receive+0xb30>)
 8012a0c:	481e      	ldr	r0, [pc, #120]	; (8012a88 <tcp_receive+0xb20>)
 8012a0e:	f003 fbd5 	bl	80161bc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	891b      	ldrh	r3, [r3, #8]
 8012a16:	461c      	mov	r4, r3
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	68db      	ldr	r3, [r3, #12]
 8012a1c:	899b      	ldrh	r3, [r3, #12]
 8012a1e:	b29b      	uxth	r3, r3
 8012a20:	4618      	mov	r0, r3
 8012a22:	f7f8 f92f 	bl	800ac84 <lwip_htons>
 8012a26:	4603      	mov	r3, r0
 8012a28:	b2db      	uxtb	r3, r3
 8012a2a:	f003 0303 	and.w	r3, r3, #3
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d001      	beq.n	8012a36 <tcp_receive+0xace>
 8012a32:	2301      	movs	r3, #1
 8012a34:	e000      	b.n	8012a38 <tcp_receive+0xad0>
 8012a36:	2300      	movs	r3, #0
 8012a38:	18e1      	adds	r1, r4, r3
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012a3e:	b28b      	uxth	r3, r1
 8012a40:	1ad3      	subs	r3, r2, r3
 8012a42:	b29a      	uxth	r2, r3
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f7fc fe35 	bl	800f6b8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	685b      	ldr	r3, [r3, #4]
 8012a52:	891b      	ldrh	r3, [r3, #8]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d028      	beq.n	8012aaa <tcp_receive+0xb42>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012a58:	4b0d      	ldr	r3, [pc, #52]	; (8012a90 <tcp_receive+0xb28>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d01d      	beq.n	8012a9c <tcp_receive+0xb34>
              pbuf_cat(recv_data, cseg->p);
 8012a60:	4b0b      	ldr	r3, [pc, #44]	; (8012a90 <tcp_receive+0xb28>)
 8012a62:	681a      	ldr	r2, [r3, #0]
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	685b      	ldr	r3, [r3, #4]
 8012a68:	4619      	mov	r1, r3
 8012a6a:	4610      	mov	r0, r2
 8012a6c:	f7fb ff8e 	bl	800e98c <pbuf_cat>
 8012a70:	e018      	b.n	8012aa4 <tcp_receive+0xb3c>
 8012a72:	bf00      	nop
 8012a74:	20004206 	.word	0x20004206
 8012a78:	200041fc 	.word	0x200041fc
 8012a7c:	200041dc 	.word	0x200041dc
 8012a80:	08019d9c 	.word	0x08019d9c
 8012a84:	0801a17c 	.word	0x0801a17c
 8012a88:	08019de8 	.word	0x08019de8
 8012a8c:	0801a1b8 	.word	0x0801a1b8
 8012a90:	2000420c 	.word	0x2000420c
 8012a94:	20004209 	.word	0x20004209
 8012a98:	0801a1d8 	.word	0x0801a1d8
            } else {
              recv_data = cseg->p;
 8012a9c:	697b      	ldr	r3, [r7, #20]
 8012a9e:	685b      	ldr	r3, [r3, #4]
 8012aa0:	4a70      	ldr	r2, [pc, #448]	; (8012c64 <tcp_receive+0xcfc>)
 8012aa2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	68db      	ldr	r3, [r3, #12]
 8012aae:	899b      	ldrh	r3, [r3, #12]
 8012ab0:	b29b      	uxth	r3, r3
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7f8 f8e6 	bl	800ac84 <lwip_htons>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	f003 0301 	and.w	r3, r3, #1
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d00d      	beq.n	8012ae0 <tcp_receive+0xb78>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012ac4:	4b68      	ldr	r3, [pc, #416]	; (8012c68 <tcp_receive+0xd00>)
 8012ac6:	781b      	ldrb	r3, [r3, #0]
 8012ac8:	f043 0320 	orr.w	r3, r3, #32
 8012acc:	b2da      	uxtb	r2, r3
 8012ace:	4b66      	ldr	r3, [pc, #408]	; (8012c68 <tcp_receive+0xd00>)
 8012ad0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	7d1b      	ldrb	r3, [r3, #20]
 8012ad6:	2b04      	cmp	r3, #4
 8012ad8:	d102      	bne.n	8012ae0 <tcp_receive+0xb78>
              pcb->state = CLOSE_WAIT;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2207      	movs	r2, #7
 8012ade:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	681a      	ldr	r2, [r3, #0]
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012ae8:	6978      	ldr	r0, [r7, #20]
 8012aea:	f7fd fb09 	bl	8010100 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d008      	beq.n	8012b08 <tcp_receive+0xba0>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012afa:	68db      	ldr	r3, [r3, #12]
 8012afc:	685a      	ldr	r2, [r3, #4]
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012b02:	429a      	cmp	r2, r3
 8012b04:	f43f af43 	beq.w	801298e <tcp_receive+0xa26>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	8b5b      	ldrh	r3, [r3, #26]
 8012b0c:	f003 0301 	and.w	r3, r3, #1
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d00e      	beq.n	8012b32 <tcp_receive+0xbca>
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	8b5b      	ldrh	r3, [r3, #26]
 8012b18:	f023 0301 	bic.w	r3, r3, #1
 8012b1c:	b29a      	uxth	r2, r3
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	835a      	strh	r2, [r3, #26]
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	8b5b      	ldrh	r3, [r3, #26]
 8012b26:	f043 0302 	orr.w	r3, r3, #2
 8012b2a:	b29a      	uxth	r2, r3
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012b30:	e188      	b.n	8012e44 <tcp_receive+0xedc>
        tcp_ack(pcb);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	8b5b      	ldrh	r3, [r3, #26]
 8012b36:	f043 0301 	orr.w	r3, r3, #1
 8012b3a:	b29a      	uxth	r2, r3
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012b40:	e180      	b.n	8012e44 <tcp_receive+0xedc>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d106      	bne.n	8012b58 <tcp_receive+0xbf0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012b4a:	4848      	ldr	r0, [pc, #288]	; (8012c6c <tcp_receive+0xd04>)
 8012b4c:	f7fd faf0 	bl	8010130 <tcp_seg_copy>
 8012b50:	4602      	mov	r2, r0
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	675a      	str	r2, [r3, #116]	; 0x74
 8012b56:	e16d      	b.n	8012e34 <tcp_receive+0xecc>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012b58:	2300      	movs	r3, #0
 8012b5a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b60:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b62:	e157      	b.n	8012e14 <tcp_receive+0xeac>
            if (seqno == next->tcphdr->seqno) {
 8012b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b66:	68db      	ldr	r3, [r3, #12]
 8012b68:	685a      	ldr	r2, [r3, #4]
 8012b6a:	4b41      	ldr	r3, [pc, #260]	; (8012c70 <tcp_receive+0xd08>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d11d      	bne.n	8012bae <tcp_receive+0xc46>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012b72:	4b3e      	ldr	r3, [pc, #248]	; (8012c6c <tcp_receive+0xd04>)
 8012b74:	891a      	ldrh	r2, [r3, #8]
 8012b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b78:	891b      	ldrh	r3, [r3, #8]
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	f240 814f 	bls.w	8012e1e <tcp_receive+0xeb6>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012b80:	483a      	ldr	r0, [pc, #232]	; (8012c6c <tcp_receive+0xd04>)
 8012b82:	f7fd fad5 	bl	8010130 <tcp_seg_copy>
 8012b86:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	f000 8149 	beq.w	8012e22 <tcp_receive+0xeba>
                  if (prev != NULL) {
 8012b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d003      	beq.n	8012b9e <tcp_receive+0xc36>
                    prev->next = cseg;
 8012b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b98:	68ba      	ldr	r2, [r7, #8]
 8012b9a:	601a      	str	r2, [r3, #0]
 8012b9c:	e002      	b.n	8012ba4 <tcp_receive+0xc3c>
                  } else {
                    pcb->ooseq = cseg;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	68ba      	ldr	r2, [r7, #8]
 8012ba2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012ba4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ba6:	68b8      	ldr	r0, [r7, #8]
 8012ba8:	f7ff f8da 	bl	8011d60 <tcp_oos_insert_segment>
                }
                break;
 8012bac:	e139      	b.n	8012e22 <tcp_receive+0xeba>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d117      	bne.n	8012be4 <tcp_receive+0xc7c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012bb4:	4b2e      	ldr	r3, [pc, #184]	; (8012c70 <tcp_receive+0xd08>)
 8012bb6:	681a      	ldr	r2, [r3, #0]
 8012bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bba:	68db      	ldr	r3, [r3, #12]
 8012bbc:	685b      	ldr	r3, [r3, #4]
 8012bbe:	1ad3      	subs	r3, r2, r3
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	da57      	bge.n	8012c74 <tcp_receive+0xd0c>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012bc4:	4829      	ldr	r0, [pc, #164]	; (8012c6c <tcp_receive+0xd04>)
 8012bc6:	f7fd fab3 	bl	8010130 <tcp_seg_copy>
 8012bca:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 8012bcc:	693b      	ldr	r3, [r7, #16]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	f000 8129 	beq.w	8012e26 <tcp_receive+0xebe>
                    pcb->ooseq = cseg;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	693a      	ldr	r2, [r7, #16]
 8012bd8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012bda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012bdc:	6938      	ldr	r0, [r7, #16]
 8012bde:	f7ff f8bf 	bl	8011d60 <tcp_oos_insert_segment>
                  }
                  break;
 8012be2:	e120      	b.n	8012e26 <tcp_receive+0xebe>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012be4:	4b22      	ldr	r3, [pc, #136]	; (8012c70 <tcp_receive+0xd08>)
 8012be6:	681a      	ldr	r2, [r3, #0]
 8012be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bea:	68db      	ldr	r3, [r3, #12]
 8012bec:	685b      	ldr	r3, [r3, #4]
 8012bee:	1ad3      	subs	r3, r2, r3
 8012bf0:	3b01      	subs	r3, #1
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	db3e      	blt.n	8012c74 <tcp_receive+0xd0c>
 8012bf6:	4b1e      	ldr	r3, [pc, #120]	; (8012c70 <tcp_receive+0xd08>)
 8012bf8:	681a      	ldr	r2, [r3, #0]
 8012bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bfc:	68db      	ldr	r3, [r3, #12]
 8012bfe:	685b      	ldr	r3, [r3, #4]
 8012c00:	1ad3      	subs	r3, r2, r3
 8012c02:	3301      	adds	r3, #1
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	dc35      	bgt.n	8012c74 <tcp_receive+0xd0c>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012c08:	4818      	ldr	r0, [pc, #96]	; (8012c6c <tcp_receive+0xd04>)
 8012c0a:	f7fd fa91 	bl	8010130 <tcp_seg_copy>
 8012c0e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	f000 8109 	beq.w	8012e2a <tcp_receive+0xec2>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c1a:	68db      	ldr	r3, [r3, #12]
 8012c1c:	685b      	ldr	r3, [r3, #4]
 8012c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c20:	8912      	ldrh	r2, [r2, #8]
 8012c22:	441a      	add	r2, r3
 8012c24:	4b12      	ldr	r3, [pc, #72]	; (8012c70 <tcp_receive+0xd08>)
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	1ad3      	subs	r3, r2, r3
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	dd12      	ble.n	8012c54 <tcp_receive+0xcec>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012c2e:	4b10      	ldr	r3, [pc, #64]	; (8012c70 <tcp_receive+0xd08>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	b29a      	uxth	r2, r3
 8012c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c36:	68db      	ldr	r3, [r3, #12]
 8012c38:	685b      	ldr	r3, [r3, #4]
 8012c3a:	b29b      	uxth	r3, r3
 8012c3c:	1ad3      	subs	r3, r2, r3
 8012c3e:	b29a      	uxth	r2, r3
 8012c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c42:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c46:	685a      	ldr	r2, [r3, #4]
 8012c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c4a:	891b      	ldrh	r3, [r3, #8]
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	4610      	mov	r0, r2
 8012c50:	f7fb fc14 	bl	800e47c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c56:	68fa      	ldr	r2, [r7, #12]
 8012c58:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012c5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c5c:	68f8      	ldr	r0, [r7, #12]
 8012c5e:	f7ff f87f 	bl	8011d60 <tcp_oos_insert_segment>
                  }
                  break;
 8012c62:	e0e2      	b.n	8012e2a <tcp_receive+0xec2>
 8012c64:	2000420c 	.word	0x2000420c
 8012c68:	20004209 	.word	0x20004209
 8012c6c:	200041dc 	.word	0x200041dc
 8012c70:	200041fc 	.word	0x200041fc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c76:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	f040 80c6 	bne.w	8012e0e <tcp_receive+0xea6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012c82:	4b80      	ldr	r3, [pc, #512]	; (8012e84 <tcp_receive+0xf1c>)
 8012c84:	681a      	ldr	r2, [r3, #0]
 8012c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c88:	68db      	ldr	r3, [r3, #12]
 8012c8a:	685b      	ldr	r3, [r3, #4]
 8012c8c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	f340 80bd 	ble.w	8012e0e <tcp_receive+0xea6>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c96:	68db      	ldr	r3, [r3, #12]
 8012c98:	899b      	ldrh	r3, [r3, #12]
 8012c9a:	b29b      	uxth	r3, r3
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f7f7 fff1 	bl	800ac84 <lwip_htons>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	b2db      	uxtb	r3, r3
 8012ca6:	f003 0301 	and.w	r3, r3, #1
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	f040 80bf 	bne.w	8012e2e <tcp_receive+0xec6>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012cb0:	4875      	ldr	r0, [pc, #468]	; (8012e88 <tcp_receive+0xf20>)
 8012cb2:	f7fd fa3d 	bl	8010130 <tcp_seg_copy>
 8012cb6:	4602      	mov	r2, r0
 8012cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	f000 80b6 	beq.w	8012e32 <tcp_receive+0xeca>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc8:	68db      	ldr	r3, [r3, #12]
 8012cca:	685b      	ldr	r3, [r3, #4]
 8012ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012cce:	8912      	ldrh	r2, [r2, #8]
 8012cd0:	441a      	add	r2, r3
 8012cd2:	4b6c      	ldr	r3, [pc, #432]	; (8012e84 <tcp_receive+0xf1c>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	1ad3      	subs	r3, r2, r3
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	dd12      	ble.n	8012d02 <tcp_receive+0xd9a>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012cdc:	4b69      	ldr	r3, [pc, #420]	; (8012e84 <tcp_receive+0xf1c>)
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	b29a      	uxth	r2, r3
 8012ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce4:	68db      	ldr	r3, [r3, #12]
 8012ce6:	685b      	ldr	r3, [r3, #4]
 8012ce8:	b29b      	uxth	r3, r3
 8012cea:	1ad3      	subs	r3, r2, r3
 8012cec:	b29a      	uxth	r2, r3
 8012cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf4:	685a      	ldr	r2, [r3, #4]
 8012cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf8:	891b      	ldrh	r3, [r3, #8]
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	4610      	mov	r0, r2
 8012cfe:	f7fb fbbd 	bl	800e47c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012d02:	4b62      	ldr	r3, [pc, #392]	; (8012e8c <tcp_receive+0xf24>)
 8012d04:	881b      	ldrh	r3, [r3, #0]
 8012d06:	461a      	mov	r2, r3
 8012d08:	4b5e      	ldr	r3, [pc, #376]	; (8012e84 <tcp_receive+0xf1c>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	441a      	add	r2, r3
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d12:	6879      	ldr	r1, [r7, #4]
 8012d14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012d16:	440b      	add	r3, r1
 8012d18:	1ad3      	subs	r3, r2, r3
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	f340 8089 	ble.w	8012e32 <tcp_receive+0xeca>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	68db      	ldr	r3, [r3, #12]
 8012d26:	899b      	ldrh	r3, [r3, #12]
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7f7 ffaa 	bl	800ac84 <lwip_htons>
 8012d30:	4603      	mov	r3, r0
 8012d32:	b2db      	uxtb	r3, r3
 8012d34:	f003 0301 	and.w	r3, r3, #1
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d022      	beq.n	8012d82 <tcp_receive+0xe1a>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	68dc      	ldr	r4, [r3, #12]
 8012d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	68db      	ldr	r3, [r3, #12]
 8012d48:	899b      	ldrh	r3, [r3, #12]
 8012d4a:	b29b      	uxth	r3, r3
 8012d4c:	b21b      	sxth	r3, r3
 8012d4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012d52:	b21d      	sxth	r5, r3
 8012d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	68db      	ldr	r3, [r3, #12]
 8012d5a:	899b      	ldrh	r3, [r3, #12]
 8012d5c:	b29b      	uxth	r3, r3
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7f7 ff90 	bl	800ac84 <lwip_htons>
 8012d64:	4603      	mov	r3, r0
 8012d66:	b2db      	uxtb	r3, r3
 8012d68:	b29b      	uxth	r3, r3
 8012d6a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012d6e:	b29b      	uxth	r3, r3
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7f7 ff87 	bl	800ac84 <lwip_htons>
 8012d76:	4603      	mov	r3, r0
 8012d78:	b21b      	sxth	r3, r3
 8012d7a:	432b      	orrs	r3, r5
 8012d7c:	b21b      	sxth	r3, r3
 8012d7e:	b29b      	uxth	r3, r3
 8012d80:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	687a      	ldr	r2, [r7, #4]
 8012d88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012d8a:	b291      	uxth	r1, r2
 8012d8c:	687a      	ldr	r2, [r7, #4]
 8012d8e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012d90:	440a      	add	r2, r1
 8012d92:	b291      	uxth	r1, r2
 8012d94:	4a3b      	ldr	r2, [pc, #236]	; (8012e84 <tcp_receive+0xf1c>)
 8012d96:	6812      	ldr	r2, [r2, #0]
 8012d98:	b292      	uxth	r2, r2
 8012d9a:	1a8a      	subs	r2, r1, r2
 8012d9c:	b292      	uxth	r2, r2
 8012d9e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	685a      	ldr	r2, [r3, #4]
 8012da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	891b      	ldrh	r3, [r3, #8]
 8012dac:	4619      	mov	r1, r3
 8012dae:	4610      	mov	r0, r2
 8012db0:	f7fb fb64 	bl	800e47c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	891c      	ldrh	r4, [r3, #8]
 8012dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	68db      	ldr	r3, [r3, #12]
 8012dc0:	899b      	ldrh	r3, [r3, #12]
 8012dc2:	b29b      	uxth	r3, r3
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7f7 ff5d 	bl	800ac84 <lwip_htons>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	b2db      	uxtb	r3, r3
 8012dce:	f003 0303 	and.w	r3, r3, #3
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d001      	beq.n	8012dda <tcp_receive+0xe72>
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	e000      	b.n	8012ddc <tcp_receive+0xe74>
 8012dda:	2300      	movs	r3, #0
 8012ddc:	4423      	add	r3, r4
 8012dde:	b29a      	uxth	r2, r3
 8012de0:	4b2a      	ldr	r3, [pc, #168]	; (8012e8c <tcp_receive+0xf24>)
 8012de2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012de4:	4b29      	ldr	r3, [pc, #164]	; (8012e8c <tcp_receive+0xf24>)
 8012de6:	881b      	ldrh	r3, [r3, #0]
 8012de8:	461a      	mov	r2, r3
 8012dea:	4b26      	ldr	r3, [pc, #152]	; (8012e84 <tcp_receive+0xf1c>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	441a      	add	r2, r3
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012df4:	6879      	ldr	r1, [r7, #4]
 8012df6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012df8:	440b      	add	r3, r1
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d019      	beq.n	8012e32 <tcp_receive+0xeca>
 8012dfe:	4b24      	ldr	r3, [pc, #144]	; (8012e90 <tcp_receive+0xf28>)
 8012e00:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012e04:	4923      	ldr	r1, [pc, #140]	; (8012e94 <tcp_receive+0xf2c>)
 8012e06:	4824      	ldr	r0, [pc, #144]	; (8012e98 <tcp_receive+0xf30>)
 8012e08:	f003 f9d8 	bl	80161bc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012e0c:	e011      	b.n	8012e32 <tcp_receive+0xeca>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8012e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	f47f aea4 	bne.w	8012b64 <tcp_receive+0xbfc>
 8012e1c:	e00a      	b.n	8012e34 <tcp_receive+0xecc>
                break;
 8012e1e:	bf00      	nop
 8012e20:	e008      	b.n	8012e34 <tcp_receive+0xecc>
                break;
 8012e22:	bf00      	nop
 8012e24:	e006      	b.n	8012e34 <tcp_receive+0xecc>
                  break;
 8012e26:	bf00      	nop
 8012e28:	e004      	b.n	8012e34 <tcp_receive+0xecc>
                  break;
 8012e2a:	bf00      	nop
 8012e2c:	e002      	b.n	8012e34 <tcp_receive+0xecc>
                  break;
 8012e2e:	bf00      	nop
 8012e30:	e000      	b.n	8012e34 <tcp_receive+0xecc>
                break;
 8012e32:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f001 fea9 	bl	8014b8c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012e3a:	e003      	b.n	8012e44 <tcp_receive+0xedc>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f001 fea5 	bl	8014b8c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012e42:	e01a      	b.n	8012e7a <tcp_receive+0xf12>
 8012e44:	e019      	b.n	8012e7a <tcp_receive+0xf12>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012e46:	4b0f      	ldr	r3, [pc, #60]	; (8012e84 <tcp_receive+0xf1c>)
 8012e48:	681a      	ldr	r2, [r3, #0]
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e4e:	1ad3      	subs	r3, r2, r3
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	db0a      	blt.n	8012e6a <tcp_receive+0xf02>
 8012e54:	4b0b      	ldr	r3, [pc, #44]	; (8012e84 <tcp_receive+0xf1c>)
 8012e56:	681a      	ldr	r2, [r3, #0]
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e5c:	6879      	ldr	r1, [r7, #4]
 8012e5e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012e60:	440b      	add	r3, r1
 8012e62:	1ad3      	subs	r3, r2, r3
 8012e64:	3301      	adds	r3, #1
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	dd07      	ble.n	8012e7a <tcp_receive+0xf12>
      tcp_ack_now(pcb);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	8b5b      	ldrh	r3, [r3, #26]
 8012e6e:	f043 0302 	orr.w	r3, r3, #2
 8012e72:	b29a      	uxth	r2, r3
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012e78:	e7ff      	b.n	8012e7a <tcp_receive+0xf12>
 8012e7a:	bf00      	nop
 8012e7c:	3750      	adds	r7, #80	; 0x50
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bdb0      	pop	{r4, r5, r7, pc}
 8012e82:	bf00      	nop
 8012e84:	200041fc 	.word	0x200041fc
 8012e88:	200041dc 	.word	0x200041dc
 8012e8c:	20004206 	.word	0x20004206
 8012e90:	08019d9c 	.word	0x08019d9c
 8012e94:	0801a144 	.word	0x0801a144
 8012e98:	08019de8 	.word	0x08019de8

08012e9c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b083      	sub	sp, #12
 8012ea0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012ea2:	4b15      	ldr	r3, [pc, #84]	; (8012ef8 <tcp_get_next_optbyte+0x5c>)
 8012ea4:	881b      	ldrh	r3, [r3, #0]
 8012ea6:	1c5a      	adds	r2, r3, #1
 8012ea8:	b291      	uxth	r1, r2
 8012eaa:	4a13      	ldr	r2, [pc, #76]	; (8012ef8 <tcp_get_next_optbyte+0x5c>)
 8012eac:	8011      	strh	r1, [r2, #0]
 8012eae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012eb0:	4b12      	ldr	r3, [pc, #72]	; (8012efc <tcp_get_next_optbyte+0x60>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d004      	beq.n	8012ec2 <tcp_get_next_optbyte+0x26>
 8012eb8:	4b11      	ldr	r3, [pc, #68]	; (8012f00 <tcp_get_next_optbyte+0x64>)
 8012eba:	881b      	ldrh	r3, [r3, #0]
 8012ebc:	88fa      	ldrh	r2, [r7, #6]
 8012ebe:	429a      	cmp	r2, r3
 8012ec0:	d208      	bcs.n	8012ed4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012ec2:	4b10      	ldr	r3, [pc, #64]	; (8012f04 <tcp_get_next_optbyte+0x68>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	3314      	adds	r3, #20
 8012ec8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012eca:	88fb      	ldrh	r3, [r7, #6]
 8012ecc:	683a      	ldr	r2, [r7, #0]
 8012ece:	4413      	add	r3, r2
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	e00b      	b.n	8012eec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012ed4:	88fb      	ldrh	r3, [r7, #6]
 8012ed6:	b2da      	uxtb	r2, r3
 8012ed8:	4b09      	ldr	r3, [pc, #36]	; (8012f00 <tcp_get_next_optbyte+0x64>)
 8012eda:	881b      	ldrh	r3, [r3, #0]
 8012edc:	b2db      	uxtb	r3, r3
 8012ede:	1ad3      	subs	r3, r2, r3
 8012ee0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012ee2:	4b06      	ldr	r3, [pc, #24]	; (8012efc <tcp_get_next_optbyte+0x60>)
 8012ee4:	681a      	ldr	r2, [r3, #0]
 8012ee6:	797b      	ldrb	r3, [r7, #5]
 8012ee8:	4413      	add	r3, r2
 8012eea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	370c      	adds	r7, #12
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef6:	4770      	bx	lr
 8012ef8:	200041f8 	.word	0x200041f8
 8012efc:	200041f4 	.word	0x200041f4
 8012f00:	200041f2 	.word	0x200041f2
 8012f04:	200041ec 	.word	0x200041ec

08012f08 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b084      	sub	sp, #16
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d106      	bne.n	8012f24 <tcp_parseopt+0x1c>
 8012f16:	4b31      	ldr	r3, [pc, #196]	; (8012fdc <tcp_parseopt+0xd4>)
 8012f18:	f240 727d 	movw	r2, #1917	; 0x77d
 8012f1c:	4930      	ldr	r1, [pc, #192]	; (8012fe0 <tcp_parseopt+0xd8>)
 8012f1e:	4831      	ldr	r0, [pc, #196]	; (8012fe4 <tcp_parseopt+0xdc>)
 8012f20:	f003 f94c 	bl	80161bc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012f24:	4b30      	ldr	r3, [pc, #192]	; (8012fe8 <tcp_parseopt+0xe0>)
 8012f26:	881b      	ldrh	r3, [r3, #0]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d053      	beq.n	8012fd4 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012f2c:	4b2f      	ldr	r3, [pc, #188]	; (8012fec <tcp_parseopt+0xe4>)
 8012f2e:	2200      	movs	r2, #0
 8012f30:	801a      	strh	r2, [r3, #0]
 8012f32:	e043      	b.n	8012fbc <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8012f34:	f7ff ffb2 	bl	8012e9c <tcp_get_next_optbyte>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012f3c:	7bfb      	ldrb	r3, [r7, #15]
 8012f3e:	2b01      	cmp	r3, #1
 8012f40:	d03c      	beq.n	8012fbc <tcp_parseopt+0xb4>
 8012f42:	2b02      	cmp	r3, #2
 8012f44:	d002      	beq.n	8012f4c <tcp_parseopt+0x44>
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d03f      	beq.n	8012fca <tcp_parseopt+0xc2>
 8012f4a:	e026      	b.n	8012f9a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012f4c:	f7ff ffa6 	bl	8012e9c <tcp_get_next_optbyte>
 8012f50:	4603      	mov	r3, r0
 8012f52:	2b04      	cmp	r3, #4
 8012f54:	d13b      	bne.n	8012fce <tcp_parseopt+0xc6>
 8012f56:	4b25      	ldr	r3, [pc, #148]	; (8012fec <tcp_parseopt+0xe4>)
 8012f58:	881b      	ldrh	r3, [r3, #0]
 8012f5a:	3302      	adds	r3, #2
 8012f5c:	4a22      	ldr	r2, [pc, #136]	; (8012fe8 <tcp_parseopt+0xe0>)
 8012f5e:	8812      	ldrh	r2, [r2, #0]
 8012f60:	4293      	cmp	r3, r2
 8012f62:	dc34      	bgt.n	8012fce <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012f64:	f7ff ff9a 	bl	8012e9c <tcp_get_next_optbyte>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	021b      	lsls	r3, r3, #8
 8012f6e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012f70:	f7ff ff94 	bl	8012e9c <tcp_get_next_optbyte>
 8012f74:	4603      	mov	r3, r0
 8012f76:	b29a      	uxth	r2, r3
 8012f78:	89bb      	ldrh	r3, [r7, #12]
 8012f7a:	4313      	orrs	r3, r2
 8012f7c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012f7e:	89bb      	ldrh	r3, [r7, #12]
 8012f80:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012f84:	d804      	bhi.n	8012f90 <tcp_parseopt+0x88>
 8012f86:	89bb      	ldrh	r3, [r7, #12]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d001      	beq.n	8012f90 <tcp_parseopt+0x88>
 8012f8c:	89ba      	ldrh	r2, [r7, #12]
 8012f8e:	e001      	b.n	8012f94 <tcp_parseopt+0x8c>
 8012f90:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012f98:	e010      	b.n	8012fbc <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012f9a:	f7ff ff7f 	bl	8012e9c <tcp_get_next_optbyte>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012fa2:	7afb      	ldrb	r3, [r7, #11]
 8012fa4:	2b01      	cmp	r3, #1
 8012fa6:	d914      	bls.n	8012fd2 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012fa8:	7afb      	ldrb	r3, [r7, #11]
 8012faa:	b29a      	uxth	r2, r3
 8012fac:	4b0f      	ldr	r3, [pc, #60]	; (8012fec <tcp_parseopt+0xe4>)
 8012fae:	881b      	ldrh	r3, [r3, #0]
 8012fb0:	4413      	add	r3, r2
 8012fb2:	b29b      	uxth	r3, r3
 8012fb4:	3b02      	subs	r3, #2
 8012fb6:	b29a      	uxth	r2, r3
 8012fb8:	4b0c      	ldr	r3, [pc, #48]	; (8012fec <tcp_parseopt+0xe4>)
 8012fba:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012fbc:	4b0b      	ldr	r3, [pc, #44]	; (8012fec <tcp_parseopt+0xe4>)
 8012fbe:	881a      	ldrh	r2, [r3, #0]
 8012fc0:	4b09      	ldr	r3, [pc, #36]	; (8012fe8 <tcp_parseopt+0xe0>)
 8012fc2:	881b      	ldrh	r3, [r3, #0]
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d3b5      	bcc.n	8012f34 <tcp_parseopt+0x2c>
 8012fc8:	e004      	b.n	8012fd4 <tcp_parseopt+0xcc>
          return;
 8012fca:	bf00      	nop
 8012fcc:	e002      	b.n	8012fd4 <tcp_parseopt+0xcc>
            return;
 8012fce:	bf00      	nop
 8012fd0:	e000      	b.n	8012fd4 <tcp_parseopt+0xcc>
            return;
 8012fd2:	bf00      	nop
      }
    }
  }
}
 8012fd4:	3710      	adds	r7, #16
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}
 8012fda:	bf00      	nop
 8012fdc:	08019d9c 	.word	0x08019d9c
 8012fe0:	0801a200 	.word	0x0801a200
 8012fe4:	08019de8 	.word	0x08019de8
 8012fe8:	200041f0 	.word	0x200041f0
 8012fec:	200041f8 	.word	0x200041f8

08012ff0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012ff0:	b480      	push	{r7}
 8012ff2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012ff4:	4b05      	ldr	r3, [pc, #20]	; (801300c <tcp_trigger_input_pcb_close+0x1c>)
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	f043 0310 	orr.w	r3, r3, #16
 8012ffc:	b2da      	uxtb	r2, r3
 8012ffe:	4b03      	ldr	r3, [pc, #12]	; (801300c <tcp_trigger_input_pcb_close+0x1c>)
 8013000:	701a      	strb	r2, [r3, #0]
}
 8013002:	bf00      	nop
 8013004:	46bd      	mov	sp, r7
 8013006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300a:	4770      	bx	lr
 801300c:	20004209 	.word	0x20004209

08013010 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b084      	sub	sp, #16
 8013014:	af00      	add	r7, sp, #0
 8013016:	60f8      	str	r0, [r7, #12]
 8013018:	60b9      	str	r1, [r7, #8]
 801301a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d00a      	beq.n	8013038 <tcp_route+0x28>
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	7a1b      	ldrb	r3, [r3, #8]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d006      	beq.n	8013038 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	7a1b      	ldrb	r3, [r3, #8]
 801302e:	4618      	mov	r0, r3
 8013030:	f7fb f820 	bl	800e074 <netif_get_by_index>
 8013034:	4603      	mov	r3, r0
 8013036:	e003      	b.n	8013040 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013038:	6878      	ldr	r0, [r7, #4]
 801303a:	f7f8 ff43 	bl	800bec4 <ip4_route>
 801303e:	4603      	mov	r3, r0
  }
}
 8013040:	4618      	mov	r0, r3
 8013042:	3710      	adds	r7, #16
 8013044:	46bd      	mov	sp, r7
 8013046:	bd80      	pop	{r7, pc}

08013048 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013048:	b590      	push	{r4, r7, lr}
 801304a:	b087      	sub	sp, #28
 801304c:	af00      	add	r7, sp, #0
 801304e:	60f8      	str	r0, [r7, #12]
 8013050:	60b9      	str	r1, [r7, #8]
 8013052:	603b      	str	r3, [r7, #0]
 8013054:	4613      	mov	r3, r2
 8013056:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d105      	bne.n	801306a <tcp_create_segment+0x22>
 801305e:	4b45      	ldr	r3, [pc, #276]	; (8013174 <tcp_create_segment+0x12c>)
 8013060:	22a3      	movs	r2, #163	; 0xa3
 8013062:	4945      	ldr	r1, [pc, #276]	; (8013178 <tcp_create_segment+0x130>)
 8013064:	4845      	ldr	r0, [pc, #276]	; (801317c <tcp_create_segment+0x134>)
 8013066:	f003 f8a9 	bl	80161bc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801306a:	68bb      	ldr	r3, [r7, #8]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d105      	bne.n	801307c <tcp_create_segment+0x34>
 8013070:	4b40      	ldr	r3, [pc, #256]	; (8013174 <tcp_create_segment+0x12c>)
 8013072:	22a4      	movs	r2, #164	; 0xa4
 8013074:	4942      	ldr	r1, [pc, #264]	; (8013180 <tcp_create_segment+0x138>)
 8013076:	4841      	ldr	r0, [pc, #260]	; (801317c <tcp_create_segment+0x134>)
 8013078:	f003 f8a0 	bl	80161bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801307c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013080:	f003 0301 	and.w	r3, r3, #1
 8013084:	2b00      	cmp	r3, #0
 8013086:	d001      	beq.n	801308c <tcp_create_segment+0x44>
 8013088:	2304      	movs	r3, #4
 801308a:	e000      	b.n	801308e <tcp_create_segment+0x46>
 801308c:	2300      	movs	r3, #0
 801308e:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013090:	2003      	movs	r0, #3
 8013092:	f7fa fc87 	bl	800d9a4 <memp_malloc>
 8013096:	6138      	str	r0, [r7, #16]
 8013098:	693b      	ldr	r3, [r7, #16]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d104      	bne.n	80130a8 <tcp_create_segment+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801309e:	68b8      	ldr	r0, [r7, #8]
 80130a0:	f7fb fba6 	bl	800e7f0 <pbuf_free>
    return NULL;
 80130a4:	2300      	movs	r3, #0
 80130a6:	e061      	b.n	801316c <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 80130a8:	693b      	ldr	r3, [r7, #16]
 80130aa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80130ae:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80130b0:	693b      	ldr	r3, [r7, #16]
 80130b2:	2200      	movs	r2, #0
 80130b4:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80130b6:	693b      	ldr	r3, [r7, #16]
 80130b8:	68ba      	ldr	r2, [r7, #8]
 80130ba:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80130bc:	68bb      	ldr	r3, [r7, #8]
 80130be:	891a      	ldrh	r2, [r3, #8]
 80130c0:	7dfb      	ldrb	r3, [r7, #23]
 80130c2:	b29b      	uxth	r3, r3
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d205      	bcs.n	80130d4 <tcp_create_segment+0x8c>
 80130c8:	4b2a      	ldr	r3, [pc, #168]	; (8013174 <tcp_create_segment+0x12c>)
 80130ca:	22b0      	movs	r2, #176	; 0xb0
 80130cc:	492d      	ldr	r1, [pc, #180]	; (8013184 <tcp_create_segment+0x13c>)
 80130ce:	482b      	ldr	r0, [pc, #172]	; (801317c <tcp_create_segment+0x134>)
 80130d0:	f003 f874 	bl	80161bc <iprintf>
  seg->len = p->tot_len - optlen;
 80130d4:	68bb      	ldr	r3, [r7, #8]
 80130d6:	891a      	ldrh	r2, [r3, #8]
 80130d8:	7dfb      	ldrb	r3, [r7, #23]
 80130da:	b29b      	uxth	r3, r3
 80130dc:	1ad3      	subs	r3, r2, r3
 80130de:	b29a      	uxth	r2, r3
 80130e0:	693b      	ldr	r3, [r7, #16]
 80130e2:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80130e4:	2114      	movs	r1, #20
 80130e6:	68b8      	ldr	r0, [r7, #8]
 80130e8:	f7fb faba 	bl	800e660 <pbuf_add_header>
 80130ec:	4603      	mov	r3, r0
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d004      	beq.n	80130fc <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80130f2:	6938      	ldr	r0, [r7, #16]
 80130f4:	f7fd f804 	bl	8010100 <tcp_seg_free>
    return NULL;
 80130f8:	2300      	movs	r3, #0
 80130fa:	e037      	b.n	801316c <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80130fc:	693b      	ldr	r3, [r7, #16]
 80130fe:	685b      	ldr	r3, [r3, #4]
 8013100:	685a      	ldr	r2, [r3, #4]
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013106:	693b      	ldr	r3, [r7, #16]
 8013108:	68dc      	ldr	r4, [r3, #12]
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	8adb      	ldrh	r3, [r3, #22]
 801310e:	4618      	mov	r0, r3
 8013110:	f7f7 fdb8 	bl	800ac84 <lwip_htons>
 8013114:	4603      	mov	r3, r0
 8013116:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013118:	693b      	ldr	r3, [r7, #16]
 801311a:	68dc      	ldr	r4, [r3, #12]
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	8b1b      	ldrh	r3, [r3, #24]
 8013120:	4618      	mov	r0, r3
 8013122:	f7f7 fdaf 	bl	800ac84 <lwip_htons>
 8013126:	4603      	mov	r3, r0
 8013128:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801312a:	693b      	ldr	r3, [r7, #16]
 801312c:	68dc      	ldr	r4, [r3, #12]
 801312e:	6838      	ldr	r0, [r7, #0]
 8013130:	f7f7 fdbd 	bl	800acae <lwip_htonl>
 8013134:	4603      	mov	r3, r0
 8013136:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	68dc      	ldr	r4, [r3, #12]
 801313c:	7dfb      	ldrb	r3, [r7, #23]
 801313e:	089b      	lsrs	r3, r3, #2
 8013140:	b2db      	uxtb	r3, r3
 8013142:	b29b      	uxth	r3, r3
 8013144:	3305      	adds	r3, #5
 8013146:	b29b      	uxth	r3, r3
 8013148:	031b      	lsls	r3, r3, #12
 801314a:	b29a      	uxth	r2, r3
 801314c:	79fb      	ldrb	r3, [r7, #7]
 801314e:	b29b      	uxth	r3, r3
 8013150:	4313      	orrs	r3, r2
 8013152:	b29b      	uxth	r3, r3
 8013154:	4618      	mov	r0, r3
 8013156:	f7f7 fd95 	bl	800ac84 <lwip_htons>
 801315a:	4603      	mov	r3, r0
 801315c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801315e:	693b      	ldr	r3, [r7, #16]
 8013160:	68db      	ldr	r3, [r3, #12]
 8013162:	2200      	movs	r2, #0
 8013164:	749a      	strb	r2, [r3, #18]
 8013166:	2200      	movs	r2, #0
 8013168:	74da      	strb	r2, [r3, #19]
  return seg;
 801316a:	693b      	ldr	r3, [r7, #16]
}
 801316c:	4618      	mov	r0, r3
 801316e:	371c      	adds	r7, #28
 8013170:	46bd      	mov	sp, r7
 8013172:	bd90      	pop	{r4, r7, pc}
 8013174:	0801a21c 	.word	0x0801a21c
 8013178:	0801a250 	.word	0x0801a250
 801317c:	0801a270 	.word	0x0801a270
 8013180:	0801a298 	.word	0x0801a298
 8013184:	0801a2bc 	.word	0x0801a2bc

08013188 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b086      	sub	sp, #24
 801318c:	af00      	add	r7, sp, #0
 801318e:	607b      	str	r3, [r7, #4]
 8013190:	4603      	mov	r3, r0
 8013192:	73fb      	strb	r3, [r7, #15]
 8013194:	460b      	mov	r3, r1
 8013196:	81bb      	strh	r3, [r7, #12]
 8013198:	4613      	mov	r3, r2
 801319a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801319c:	89bb      	ldrh	r3, [r7, #12]
 801319e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d105      	bne.n	80131b2 <tcp_pbuf_prealloc+0x2a>
 80131a6:	4b30      	ldr	r3, [pc, #192]	; (8013268 <tcp_pbuf_prealloc+0xe0>)
 80131a8:	22e8      	movs	r2, #232	; 0xe8
 80131aa:	4930      	ldr	r1, [pc, #192]	; (801326c <tcp_pbuf_prealloc+0xe4>)
 80131ac:	4830      	ldr	r0, [pc, #192]	; (8013270 <tcp_pbuf_prealloc+0xe8>)
 80131ae:	f003 f805 	bl	80161bc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80131b2:	6a3b      	ldr	r3, [r7, #32]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d105      	bne.n	80131c4 <tcp_pbuf_prealloc+0x3c>
 80131b8:	4b2b      	ldr	r3, [pc, #172]	; (8013268 <tcp_pbuf_prealloc+0xe0>)
 80131ba:	22e9      	movs	r2, #233	; 0xe9
 80131bc:	492d      	ldr	r1, [pc, #180]	; (8013274 <tcp_pbuf_prealloc+0xec>)
 80131be:	482c      	ldr	r0, [pc, #176]	; (8013270 <tcp_pbuf_prealloc+0xe8>)
 80131c0:	f002 fffc 	bl	80161bc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80131c4:	89ba      	ldrh	r2, [r7, #12]
 80131c6:	897b      	ldrh	r3, [r7, #10]
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d221      	bcs.n	8013210 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80131cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80131d0:	f003 0302 	and.w	r3, r3, #2
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d111      	bne.n	80131fc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80131d8:	6a3b      	ldr	r3, [r7, #32]
 80131da:	8b5b      	ldrh	r3, [r3, #26]
 80131dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d115      	bne.n	8013210 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80131e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d007      	beq.n	80131fc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80131ec:	6a3b      	ldr	r3, [r7, #32]
 80131ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d103      	bne.n	80131fc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80131f4:	6a3b      	ldr	r3, [r7, #32]
 80131f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d009      	beq.n	8013210 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80131fc:	89bb      	ldrh	r3, [r7, #12]
 80131fe:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8013202:	f023 0203 	bic.w	r2, r3, #3
 8013206:	897b      	ldrh	r3, [r7, #10]
 8013208:	4293      	cmp	r3, r2
 801320a:	bf28      	it	cs
 801320c:	4613      	movcs	r3, r2
 801320e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013210:	8af9      	ldrh	r1, [r7, #22]
 8013212:	7bfb      	ldrb	r3, [r7, #15]
 8013214:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013218:	4618      	mov	r0, r3
 801321a:	f7fa ffd5 	bl	800e1c8 <pbuf_alloc>
 801321e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d101      	bne.n	801322a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8013226:	2300      	movs	r3, #0
 8013228:	e019      	b.n	801325e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d006      	beq.n	8013240 <tcp_pbuf_prealloc+0xb8>
 8013232:	4b0d      	ldr	r3, [pc, #52]	; (8013268 <tcp_pbuf_prealloc+0xe0>)
 8013234:	f240 120b 	movw	r2, #267	; 0x10b
 8013238:	490f      	ldr	r1, [pc, #60]	; (8013278 <tcp_pbuf_prealloc+0xf0>)
 801323a:	480d      	ldr	r0, [pc, #52]	; (8013270 <tcp_pbuf_prealloc+0xe8>)
 801323c:	f002 ffbe 	bl	80161bc <iprintf>
  *oversize = p->len - length;
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	895a      	ldrh	r2, [r3, #10]
 8013244:	89bb      	ldrh	r3, [r7, #12]
 8013246:	1ad3      	subs	r3, r2, r3
 8013248:	b29a      	uxth	r2, r3
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801324e:	693b      	ldr	r3, [r7, #16]
 8013250:	89ba      	ldrh	r2, [r7, #12]
 8013252:	811a      	strh	r2, [r3, #8]
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	891a      	ldrh	r2, [r3, #8]
 8013258:	693b      	ldr	r3, [r7, #16]
 801325a:	815a      	strh	r2, [r3, #10]
  return p;
 801325c:	693b      	ldr	r3, [r7, #16]
}
 801325e:	4618      	mov	r0, r3
 8013260:	3718      	adds	r7, #24
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	0801a21c 	.word	0x0801a21c
 801326c:	0801a2d4 	.word	0x0801a2d4
 8013270:	0801a270 	.word	0x0801a270
 8013274:	0801a2f8 	.word	0x0801a2f8
 8013278:	0801a318 	.word	0x0801a318

0801327c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b082      	sub	sp, #8
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	460b      	mov	r3, r1
 8013286:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d106      	bne.n	801329c <tcp_write_checks+0x20>
 801328e:	4b33      	ldr	r3, [pc, #204]	; (801335c <tcp_write_checks+0xe0>)
 8013290:	f240 1233 	movw	r2, #307	; 0x133
 8013294:	4932      	ldr	r1, [pc, #200]	; (8013360 <tcp_write_checks+0xe4>)
 8013296:	4833      	ldr	r0, [pc, #204]	; (8013364 <tcp_write_checks+0xe8>)
 8013298:	f002 ff90 	bl	80161bc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	7d1b      	ldrb	r3, [r3, #20]
 80132a0:	2b04      	cmp	r3, #4
 80132a2:	d00e      	beq.n	80132c2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80132a8:	2b07      	cmp	r3, #7
 80132aa:	d00a      	beq.n	80132c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80132b0:	2b02      	cmp	r3, #2
 80132b2:	d006      	beq.n	80132c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80132b8:	2b03      	cmp	r3, #3
 80132ba:	d002      	beq.n	80132c2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80132bc:	f06f 030a 	mvn.w	r3, #10
 80132c0:	e048      	b.n	8013354 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80132c2:	887b      	ldrh	r3, [r7, #2]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d101      	bne.n	80132cc <tcp_write_checks+0x50>
    return ERR_OK;
 80132c8:	2300      	movs	r3, #0
 80132ca:	e043      	b.n	8013354 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80132d2:	887a      	ldrh	r2, [r7, #2]
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d909      	bls.n	80132ec <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	8b5b      	ldrh	r3, [r3, #26]
 80132dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132e0:	b29a      	uxth	r2, r3
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80132e6:	f04f 33ff 	mov.w	r3, #4294967295
 80132ea:	e033      	b.n	8013354 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80132f2:	2b08      	cmp	r3, #8
 80132f4:	d909      	bls.n	801330a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	8b5b      	ldrh	r3, [r3, #26]
 80132fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132fe:	b29a      	uxth	r2, r3
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013304:	f04f 33ff 	mov.w	r3, #4294967295
 8013308:	e024      	b.n	8013354 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013310:	2b00      	cmp	r3, #0
 8013312:	d00f      	beq.n	8013334 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013318:	2b00      	cmp	r3, #0
 801331a:	d11a      	bne.n	8013352 <tcp_write_checks+0xd6>
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013320:	2b00      	cmp	r3, #0
 8013322:	d116      	bne.n	8013352 <tcp_write_checks+0xd6>
 8013324:	4b0d      	ldr	r3, [pc, #52]	; (801335c <tcp_write_checks+0xe0>)
 8013326:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801332a:	490f      	ldr	r1, [pc, #60]	; (8013368 <tcp_write_checks+0xec>)
 801332c:	480d      	ldr	r0, [pc, #52]	; (8013364 <tcp_write_checks+0xe8>)
 801332e:	f002 ff45 	bl	80161bc <iprintf>
 8013332:	e00e      	b.n	8013352 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013338:	2b00      	cmp	r3, #0
 801333a:	d103      	bne.n	8013344 <tcp_write_checks+0xc8>
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013340:	2b00      	cmp	r3, #0
 8013342:	d006      	beq.n	8013352 <tcp_write_checks+0xd6>
 8013344:	4b05      	ldr	r3, [pc, #20]	; (801335c <tcp_write_checks+0xe0>)
 8013346:	f240 1259 	movw	r2, #345	; 0x159
 801334a:	4908      	ldr	r1, [pc, #32]	; (801336c <tcp_write_checks+0xf0>)
 801334c:	4805      	ldr	r0, [pc, #20]	; (8013364 <tcp_write_checks+0xe8>)
 801334e:	f002 ff35 	bl	80161bc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013352:	2300      	movs	r3, #0
}
 8013354:	4618      	mov	r0, r3
 8013356:	3708      	adds	r7, #8
 8013358:	46bd      	mov	sp, r7
 801335a:	bd80      	pop	{r7, pc}
 801335c:	0801a21c 	.word	0x0801a21c
 8013360:	0801a32c 	.word	0x0801a32c
 8013364:	0801a270 	.word	0x0801a270
 8013368:	0801a34c 	.word	0x0801a34c
 801336c:	0801a388 	.word	0x0801a388

08013370 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013370:	b5b0      	push	{r4, r5, r7, lr}
 8013372:	b09a      	sub	sp, #104	; 0x68
 8013374:	af04      	add	r7, sp, #16
 8013376:	60f8      	str	r0, [r7, #12]
 8013378:	60b9      	str	r1, [r7, #8]
 801337a:	4611      	mov	r1, r2
 801337c:	461a      	mov	r2, r3
 801337e:	460b      	mov	r3, r1
 8013380:	80fb      	strh	r3, [r7, #6]
 8013382:	4613      	mov	r3, r2
 8013384:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8013386:	2300      	movs	r3, #0
 8013388:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801338a:	2300      	movs	r3, #0
 801338c:	653b      	str	r3, [r7, #80]	; 0x50
 801338e:	2300      	movs	r3, #0
 8013390:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013392:	2300      	movs	r3, #0
 8013394:	64bb      	str	r3, [r7, #72]	; 0x48
 8013396:	2300      	movs	r3, #0
 8013398:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801339a:	2300      	movs	r3, #0
 801339c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80133a0:	2300      	movs	r3, #0
 80133a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80133a6:	2300      	movs	r3, #0
 80133a8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80133aa:	2300      	movs	r3, #0
 80133ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80133ae:	2300      	movs	r3, #0
 80133b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d109      	bne.n	80133cc <tcp_write+0x5c>
 80133b8:	4ba6      	ldr	r3, [pc, #664]	; (8013654 <tcp_write+0x2e4>)
 80133ba:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80133be:	49a6      	ldr	r1, [pc, #664]	; (8013658 <tcp_write+0x2e8>)
 80133c0:	48a6      	ldr	r0, [pc, #664]	; (801365c <tcp_write+0x2ec>)
 80133c2:	f002 fefb 	bl	80161bc <iprintf>
 80133c6:	f06f 030f 	mvn.w	r3, #15
 80133ca:	e32d      	b.n	8013a28 <tcp_write+0x6b8>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80133d2:	085b      	lsrs	r3, r3, #1
 80133d4:	b29a      	uxth	r2, r3
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133da:	4293      	cmp	r3, r2
 80133dc:	bf28      	it	cs
 80133de:	4613      	movcs	r3, r2
 80133e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80133e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d102      	bne.n	80133ee <tcp_write+0x7e>
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133ec:	e000      	b.n	80133f0 <tcp_write+0x80>
 80133ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d109      	bne.n	801340c <tcp_write+0x9c>
 80133f8:	4b96      	ldr	r3, [pc, #600]	; (8013654 <tcp_write+0x2e4>)
 80133fa:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80133fe:	4998      	ldr	r1, [pc, #608]	; (8013660 <tcp_write+0x2f0>)
 8013400:	4896      	ldr	r0, [pc, #600]	; (801365c <tcp_write+0x2ec>)
 8013402:	f002 fedb 	bl	80161bc <iprintf>
 8013406:	f06f 030f 	mvn.w	r3, #15
 801340a:	e30d      	b.n	8013a28 <tcp_write+0x6b8>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801340c:	88fb      	ldrh	r3, [r7, #6]
 801340e:	4619      	mov	r1, r3
 8013410:	68f8      	ldr	r0, [r7, #12]
 8013412:	f7ff ff33 	bl	801327c <tcp_write_checks>
 8013416:	4603      	mov	r3, r0
 8013418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801341c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013420:	2b00      	cmp	r3, #0
 8013422:	d002      	beq.n	801342a <tcp_write+0xba>
    return err;
 8013424:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013428:	e2fe      	b.n	8013a28 <tcp_write+0x6b8>
  }
  queuelen = pcb->snd_queuelen;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013430:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013434:	2300      	movs	r3, #0
 8013436:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801343e:	2b00      	cmp	r3, #0
 8013440:	f000 80fa 	beq.w	8013638 <tcp_write+0x2c8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013448:	653b      	str	r3, [r7, #80]	; 0x50
 801344a:	e002      	b.n	8013452 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801344c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d1f8      	bne.n	801344c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801345a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801345c:	7a9b      	ldrb	r3, [r3, #10]
 801345e:	f003 0301 	and.w	r3, r3, #1
 8013462:	2b00      	cmp	r3, #0
 8013464:	d001      	beq.n	801346a <tcp_write+0xfa>
 8013466:	2304      	movs	r3, #4
 8013468:	e000      	b.n	801346c <tcp_write+0xfc>
 801346a:	2300      	movs	r3, #0
 801346c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801346e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013472:	891b      	ldrh	r3, [r3, #8]
 8013474:	4619      	mov	r1, r3
 8013476:	8c3b      	ldrh	r3, [r7, #32]
 8013478:	440b      	add	r3, r1
 801347a:	429a      	cmp	r2, r3
 801347c:	da06      	bge.n	801348c <tcp_write+0x11c>
 801347e:	4b75      	ldr	r3, [pc, #468]	; (8013654 <tcp_write+0x2e4>)
 8013480:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013484:	4977      	ldr	r1, [pc, #476]	; (8013664 <tcp_write+0x2f4>)
 8013486:	4875      	ldr	r0, [pc, #468]	; (801365c <tcp_write+0x2ec>)
 8013488:	f002 fe98 	bl	80161bc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801348c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801348e:	891a      	ldrh	r2, [r3, #8]
 8013490:	8c3b      	ldrh	r3, [r7, #32]
 8013492:	4413      	add	r3, r2
 8013494:	b29b      	uxth	r3, r3
 8013496:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013498:	1ad3      	subs	r3, r2, r3
 801349a:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80134a2:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80134a4:	8a7b      	ldrh	r3, [r7, #18]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d027      	beq.n	80134fa <tcp_write+0x18a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80134aa:	8a7b      	ldrh	r3, [r7, #18]
 80134ac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d206      	bcs.n	80134c0 <tcp_write+0x150>
 80134b2:	4b68      	ldr	r3, [pc, #416]	; (8013654 <tcp_write+0x2e4>)
 80134b4:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80134b8:	496b      	ldr	r1, [pc, #428]	; (8013668 <tcp_write+0x2f8>)
 80134ba:	4868      	ldr	r0, [pc, #416]	; (801365c <tcp_write+0x2ec>)
 80134bc:	f002 fe7e 	bl	80161bc <iprintf>
      seg = last_unsent;
 80134c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80134c4:	8a7b      	ldrh	r3, [r7, #18]
 80134c6:	88fa      	ldrh	r2, [r7, #6]
 80134c8:	429a      	cmp	r2, r3
 80134ca:	d901      	bls.n	80134d0 <tcp_write+0x160>
 80134cc:	8a7b      	ldrh	r3, [r7, #18]
 80134ce:	e000      	b.n	80134d2 <tcp_write+0x162>
 80134d0:	88fb      	ldrh	r3, [r7, #6]
 80134d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80134d4:	4293      	cmp	r3, r2
 80134d6:	bfa8      	it	ge
 80134d8:	4613      	movge	r3, r2
 80134da:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80134dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80134e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80134e2:	4413      	add	r3, r2
 80134e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80134e8:	8a7a      	ldrh	r2, [r7, #18]
 80134ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80134ec:	1ad3      	subs	r3, r2, r3
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80134f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80134f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80134f6:	1ad3      	subs	r3, r2, r3
 80134f8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80134fa:	8a7b      	ldrh	r3, [r7, #18]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d00b      	beq.n	8013518 <tcp_write+0x1a8>
 8013500:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013504:	88fb      	ldrh	r3, [r7, #6]
 8013506:	429a      	cmp	r2, r3
 8013508:	d006      	beq.n	8013518 <tcp_write+0x1a8>
 801350a:	4b52      	ldr	r3, [pc, #328]	; (8013654 <tcp_write+0x2e4>)
 801350c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013510:	4956      	ldr	r1, [pc, #344]	; (801366c <tcp_write+0x2fc>)
 8013512:	4852      	ldr	r0, [pc, #328]	; (801365c <tcp_write+0x2ec>)
 8013514:	f002 fe52 	bl	80161bc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013518:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801351c:	88fb      	ldrh	r3, [r7, #6]
 801351e:	429a      	cmp	r2, r3
 8013520:	f080 8167 	bcs.w	80137f2 <tcp_write+0x482>
 8013524:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013526:	2b00      	cmp	r3, #0
 8013528:	f000 8163 	beq.w	80137f2 <tcp_write+0x482>
 801352c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801352e:	891b      	ldrh	r3, [r3, #8]
 8013530:	2b00      	cmp	r3, #0
 8013532:	f000 815e 	beq.w	80137f2 <tcp_write+0x482>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013536:	88fa      	ldrh	r2, [r7, #6]
 8013538:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801353c:	1ad2      	subs	r2, r2, r3
 801353e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013540:	4293      	cmp	r3, r2
 8013542:	bfa8      	it	ge
 8013544:	4613      	movge	r3, r2
 8013546:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801354a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801354c:	797b      	ldrb	r3, [r7, #5]
 801354e:	f003 0301 	and.w	r3, r3, #1
 8013552:	2b00      	cmp	r3, #0
 8013554:	d027      	beq.n	80135a6 <tcp_write+0x236>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013556:	f107 0012 	add.w	r0, r7, #18
 801355a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801355c:	8bf9      	ldrh	r1, [r7, #30]
 801355e:	2301      	movs	r3, #1
 8013560:	9302      	str	r3, [sp, #8]
 8013562:	797b      	ldrb	r3, [r7, #5]
 8013564:	9301      	str	r3, [sp, #4]
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	9300      	str	r3, [sp, #0]
 801356a:	4603      	mov	r3, r0
 801356c:	2000      	movs	r0, #0
 801356e:	f7ff fe0b 	bl	8013188 <tcp_pbuf_prealloc>
 8013572:	6578      	str	r0, [r7, #84]	; 0x54
 8013574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013576:	2b00      	cmp	r3, #0
 8013578:	f000 8224 	beq.w	80139c4 <tcp_write+0x654>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801357c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801357e:	6858      	ldr	r0, [r3, #4]
 8013580:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013584:	68ba      	ldr	r2, [r7, #8]
 8013586:	4413      	add	r3, r2
 8013588:	8bfa      	ldrh	r2, [r7, #30]
 801358a:	4619      	mov	r1, r3
 801358c:	f002 fdd5 	bl	801613a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013590:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013592:	f7fb f9bb 	bl	800e90c <pbuf_clen>
 8013596:	4603      	mov	r3, r0
 8013598:	461a      	mov	r2, r3
 801359a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801359e:	4413      	add	r3, r2
 80135a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80135a4:	e041      	b.n	801362a <tcp_write+0x2ba>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80135a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135a8:	685b      	ldr	r3, [r3, #4]
 80135aa:	637b      	str	r3, [r7, #52]	; 0x34
 80135ac:	e002      	b.n	80135b4 <tcp_write+0x244>
 80135ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	637b      	str	r3, [r7, #52]	; 0x34
 80135b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d1f8      	bne.n	80135ae <tcp_write+0x23e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80135bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135be:	7b1b      	ldrb	r3, [r3, #12]
 80135c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d115      	bne.n	80135f4 <tcp_write+0x284>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80135c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135ca:	685b      	ldr	r3, [r3, #4]
 80135cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80135ce:	8952      	ldrh	r2, [r2, #10]
 80135d0:	441a      	add	r2, r3
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d10d      	bne.n	80135f4 <tcp_write+0x284>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80135d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d006      	beq.n	80135ee <tcp_write+0x27e>
 80135e0:	4b1c      	ldr	r3, [pc, #112]	; (8013654 <tcp_write+0x2e4>)
 80135e2:	f240 2231 	movw	r2, #561	; 0x231
 80135e6:	4922      	ldr	r1, [pc, #136]	; (8013670 <tcp_write+0x300>)
 80135e8:	481c      	ldr	r0, [pc, #112]	; (801365c <tcp_write+0x2ec>)
 80135ea:	f002 fde7 	bl	80161bc <iprintf>
          extendlen = seglen;
 80135ee:	8bfb      	ldrh	r3, [r7, #30]
 80135f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80135f2:	e01a      	b.n	801362a <tcp_write+0x2ba>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80135f4:	8bfb      	ldrh	r3, [r7, #30]
 80135f6:	2201      	movs	r2, #1
 80135f8:	4619      	mov	r1, r3
 80135fa:	2000      	movs	r0, #0
 80135fc:	f7fa fde4 	bl	800e1c8 <pbuf_alloc>
 8013600:	6578      	str	r0, [r7, #84]	; 0x54
 8013602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013604:	2b00      	cmp	r3, #0
 8013606:	f000 81df 	beq.w	80139c8 <tcp_write+0x658>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801360a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801360e:	68ba      	ldr	r2, [r7, #8]
 8013610:	441a      	add	r2, r3
 8013612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013614:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013616:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013618:	f7fb f978 	bl	800e90c <pbuf_clen>
 801361c:	4603      	mov	r3, r0
 801361e:	461a      	mov	r2, r3
 8013620:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013624:	4413      	add	r3, r2
 8013626:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801362a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801362e:	8bfb      	ldrh	r3, [r7, #30]
 8013630:	4413      	add	r3, r2
 8013632:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013636:	e0dc      	b.n	80137f2 <tcp_write+0x482>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801363e:	2b00      	cmp	r3, #0
 8013640:	f000 80d7 	beq.w	80137f2 <tcp_write+0x482>
 8013644:	4b03      	ldr	r3, [pc, #12]	; (8013654 <tcp_write+0x2e4>)
 8013646:	f240 224b 	movw	r2, #587	; 0x24b
 801364a:	490a      	ldr	r1, [pc, #40]	; (8013674 <tcp_write+0x304>)
 801364c:	4803      	ldr	r0, [pc, #12]	; (801365c <tcp_write+0x2ec>)
 801364e:	f002 fdb5 	bl	80161bc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013652:	e0ce      	b.n	80137f2 <tcp_write+0x482>
 8013654:	0801a21c 	.word	0x0801a21c
 8013658:	0801a3bc 	.word	0x0801a3bc
 801365c:	0801a270 	.word	0x0801a270
 8013660:	0801a3d4 	.word	0x0801a3d4
 8013664:	0801a408 	.word	0x0801a408
 8013668:	0801a420 	.word	0x0801a420
 801366c:	0801a440 	.word	0x0801a440
 8013670:	0801a460 	.word	0x0801a460
 8013674:	0801a48c 	.word	0x0801a48c
    struct pbuf *p;
    u16_t left = len - pos;
 8013678:	88fa      	ldrh	r2, [r7, #6]
 801367a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801367e:	1ad3      	subs	r3, r2, r3
 8013680:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013682:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013686:	b29b      	uxth	r3, r3
 8013688:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801368a:	1ad3      	subs	r3, r2, r3
 801368c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801368e:	8b7a      	ldrh	r2, [r7, #26]
 8013690:	8bbb      	ldrh	r3, [r7, #28]
 8013692:	4293      	cmp	r3, r2
 8013694:	bf28      	it	cs
 8013696:	4613      	movcs	r3, r2
 8013698:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801369a:	797b      	ldrb	r3, [r7, #5]
 801369c:	f003 0301 	and.w	r3, r3, #1
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d036      	beq.n	8013712 <tcp_write+0x3a2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80136a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80136a8:	b29a      	uxth	r2, r3
 80136aa:	8b3b      	ldrh	r3, [r7, #24]
 80136ac:	4413      	add	r3, r2
 80136ae:	b299      	uxth	r1, r3
 80136b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	bf0c      	ite	eq
 80136b6:	2301      	moveq	r3, #1
 80136b8:	2300      	movne	r3, #0
 80136ba:	b2db      	uxtb	r3, r3
 80136bc:	f107 0012 	add.w	r0, r7, #18
 80136c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80136c2:	9302      	str	r3, [sp, #8]
 80136c4:	797b      	ldrb	r3, [r7, #5]
 80136c6:	9301      	str	r3, [sp, #4]
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	9300      	str	r3, [sp, #0]
 80136cc:	4603      	mov	r3, r0
 80136ce:	2036      	movs	r0, #54	; 0x36
 80136d0:	f7ff fd5a 	bl	8013188 <tcp_pbuf_prealloc>
 80136d4:	6338      	str	r0, [r7, #48]	; 0x30
 80136d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136d8:	2b00      	cmp	r3, #0
 80136da:	f000 8177 	beq.w	80139cc <tcp_write+0x65c>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80136de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e0:	895b      	ldrh	r3, [r3, #10]
 80136e2:	8b3a      	ldrh	r2, [r7, #24]
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d906      	bls.n	80136f6 <tcp_write+0x386>
 80136e8:	4b8c      	ldr	r3, [pc, #560]	; (801391c <tcp_write+0x5ac>)
 80136ea:	f240 2267 	movw	r2, #615	; 0x267
 80136ee:	498c      	ldr	r1, [pc, #560]	; (8013920 <tcp_write+0x5b0>)
 80136f0:	488c      	ldr	r0, [pc, #560]	; (8013924 <tcp_write+0x5b4>)
 80136f2:	f002 fd63 	bl	80161bc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80136f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f8:	685a      	ldr	r2, [r3, #4]
 80136fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80136fe:	18d0      	adds	r0, r2, r3
 8013700:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013704:	68ba      	ldr	r2, [r7, #8]
 8013706:	4413      	add	r3, r2
 8013708:	8b3a      	ldrh	r2, [r7, #24]
 801370a:	4619      	mov	r1, r3
 801370c:	f002 fd15 	bl	801613a <memcpy>
 8013710:	e02f      	b.n	8013772 <tcp_write+0x402>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013712:	8a7b      	ldrh	r3, [r7, #18]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d006      	beq.n	8013726 <tcp_write+0x3b6>
 8013718:	4b80      	ldr	r3, [pc, #512]	; (801391c <tcp_write+0x5ac>)
 801371a:	f240 2271 	movw	r2, #625	; 0x271
 801371e:	4982      	ldr	r1, [pc, #520]	; (8013928 <tcp_write+0x5b8>)
 8013720:	4880      	ldr	r0, [pc, #512]	; (8013924 <tcp_write+0x5b4>)
 8013722:	f002 fd4b 	bl	80161bc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013726:	8b3b      	ldrh	r3, [r7, #24]
 8013728:	2201      	movs	r2, #1
 801372a:	4619      	mov	r1, r3
 801372c:	2036      	movs	r0, #54	; 0x36
 801372e:	f7fa fd4b 	bl	800e1c8 <pbuf_alloc>
 8013732:	6178      	str	r0, [r7, #20]
 8013734:	697b      	ldr	r3, [r7, #20]
 8013736:	2b00      	cmp	r3, #0
 8013738:	f000 814a 	beq.w	80139d0 <tcp_write+0x660>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801373c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013740:	68ba      	ldr	r2, [r7, #8]
 8013742:	441a      	add	r2, r3
 8013744:	697b      	ldr	r3, [r7, #20]
 8013746:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013748:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801374c:	b29b      	uxth	r3, r3
 801374e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013752:	4619      	mov	r1, r3
 8013754:	2036      	movs	r0, #54	; 0x36
 8013756:	f7fa fd37 	bl	800e1c8 <pbuf_alloc>
 801375a:	6338      	str	r0, [r7, #48]	; 0x30
 801375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801375e:	2b00      	cmp	r3, #0
 8013760:	d103      	bne.n	801376a <tcp_write+0x3fa>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013762:	6978      	ldr	r0, [r7, #20]
 8013764:	f7fb f844 	bl	800e7f0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013768:	e135      	b.n	80139d6 <tcp_write+0x666>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801376a:	6979      	ldr	r1, [r7, #20]
 801376c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801376e:	f7fb f90d 	bl	800e98c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013774:	f7fb f8ca 	bl	800e90c <pbuf_clen>
 8013778:	4603      	mov	r3, r0
 801377a:	461a      	mov	r2, r3
 801377c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013780:	4413      	add	r3, r2
 8013782:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013786:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801378a:	2b09      	cmp	r3, #9
 801378c:	d903      	bls.n	8013796 <tcp_write+0x426>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801378e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013790:	f7fb f82e 	bl	800e7f0 <pbuf_free>
      goto memerr;
 8013794:	e11f      	b.n	80139d6 <tcp_write+0x666>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801379a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801379e:	441a      	add	r2, r3
 80137a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137a4:	9300      	str	r3, [sp, #0]
 80137a6:	4613      	mov	r3, r2
 80137a8:	2200      	movs	r2, #0
 80137aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80137ac:	68f8      	ldr	r0, [r7, #12]
 80137ae:	f7ff fc4b 	bl	8013048 <tcp_create_segment>
 80137b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80137b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	f000 810c 	beq.w	80139d4 <tcp_write+0x664>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80137bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d102      	bne.n	80137c8 <tcp_write+0x458>
      queue = seg;
 80137c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137c4:	647b      	str	r3, [r7, #68]	; 0x44
 80137c6:	e00c      	b.n	80137e2 <tcp_write+0x472>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80137c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d106      	bne.n	80137dc <tcp_write+0x46c>
 80137ce:	4b53      	ldr	r3, [pc, #332]	; (801391c <tcp_write+0x5ac>)
 80137d0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80137d4:	4955      	ldr	r1, [pc, #340]	; (801392c <tcp_write+0x5bc>)
 80137d6:	4853      	ldr	r0, [pc, #332]	; (8013924 <tcp_write+0x5b4>)
 80137d8:	f002 fcf0 	bl	80161bc <iprintf>
      prev_seg->next = seg;
 80137dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80137e0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80137e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137e4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80137e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80137ea:	8b3b      	ldrh	r3, [r7, #24]
 80137ec:	4413      	add	r3, r2
 80137ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80137f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80137f6:	88fb      	ldrh	r3, [r7, #6]
 80137f8:	429a      	cmp	r2, r3
 80137fa:	f4ff af3d 	bcc.w	8013678 <tcp_write+0x308>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80137fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013800:	2b00      	cmp	r3, #0
 8013802:	d02c      	beq.n	801385e <tcp_write+0x4ee>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013806:	685b      	ldr	r3, [r3, #4]
 8013808:	62fb      	str	r3, [r7, #44]	; 0x2c
 801380a:	e01e      	b.n	801384a <tcp_write+0x4da>
      p->tot_len += oversize_used;
 801380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801380e:	891a      	ldrh	r2, [r3, #8]
 8013810:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013812:	4413      	add	r3, r2
 8013814:	b29a      	uxth	r2, r3
 8013816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013818:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d110      	bne.n	8013844 <tcp_write+0x4d4>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013824:	685b      	ldr	r3, [r3, #4]
 8013826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013828:	8952      	ldrh	r2, [r2, #10]
 801382a:	4413      	add	r3, r2
 801382c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801382e:	68b9      	ldr	r1, [r7, #8]
 8013830:	4618      	mov	r0, r3
 8013832:	f002 fc82 	bl	801613a <memcpy>
        p->len += oversize_used;
 8013836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013838:	895a      	ldrh	r2, [r3, #10]
 801383a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801383c:	4413      	add	r3, r2
 801383e:	b29a      	uxth	r2, r3
 8013840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013842:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	62fb      	str	r3, [r7, #44]	; 0x2c
 801384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801384c:	2b00      	cmp	r3, #0
 801384e:	d1dd      	bne.n	801380c <tcp_write+0x49c>
      }
    }
    last_unsent->len += oversize_used;
 8013850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013852:	891a      	ldrh	r2, [r3, #8]
 8013854:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013856:	4413      	add	r3, r2
 8013858:	b29a      	uxth	r2, r3
 801385a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801385c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801385e:	8a7a      	ldrh	r2, [r7, #18]
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013868:	2b00      	cmp	r3, #0
 801386a:	d018      	beq.n	801389e <tcp_write+0x52e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801386c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801386e:	2b00      	cmp	r3, #0
 8013870:	d106      	bne.n	8013880 <tcp_write+0x510>
 8013872:	4b2a      	ldr	r3, [pc, #168]	; (801391c <tcp_write+0x5ac>)
 8013874:	f240 22e1 	movw	r2, #737	; 0x2e1
 8013878:	492d      	ldr	r1, [pc, #180]	; (8013930 <tcp_write+0x5c0>)
 801387a:	482a      	ldr	r0, [pc, #168]	; (8013924 <tcp_write+0x5b4>)
 801387c:	f002 fc9e 	bl	80161bc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013882:	685b      	ldr	r3, [r3, #4]
 8013884:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013886:	4618      	mov	r0, r3
 8013888:	f7fb f880 	bl	800e98c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801388c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801388e:	891a      	ldrh	r2, [r3, #8]
 8013890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013892:	891b      	ldrh	r3, [r3, #8]
 8013894:	4413      	add	r3, r2
 8013896:	b29a      	uxth	r2, r3
 8013898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801389a:	811a      	strh	r2, [r3, #8]
 801389c:	e037      	b.n	801390e <tcp_write+0x59e>
  } else if (extendlen > 0) {
 801389e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d034      	beq.n	801390e <tcp_write+0x59e>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80138a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d003      	beq.n	80138b2 <tcp_write+0x542>
 80138aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138ac:	685b      	ldr	r3, [r3, #4]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d106      	bne.n	80138c0 <tcp_write+0x550>
 80138b2:	4b1a      	ldr	r3, [pc, #104]	; (801391c <tcp_write+0x5ac>)
 80138b4:	f240 22e7 	movw	r2, #743	; 0x2e7
 80138b8:	491e      	ldr	r1, [pc, #120]	; (8013934 <tcp_write+0x5c4>)
 80138ba:	481a      	ldr	r0, [pc, #104]	; (8013924 <tcp_write+0x5b4>)
 80138bc:	f002 fc7e 	bl	80161bc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80138c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138c2:	685b      	ldr	r3, [r3, #4]
 80138c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80138c6:	e009      	b.n	80138dc <tcp_write+0x56c>
      p->tot_len += extendlen;
 80138c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ca:	891a      	ldrh	r2, [r3, #8]
 80138cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80138ce:	4413      	add	r3, r2
 80138d0:	b29a      	uxth	r2, r3
 80138d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80138d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	62bb      	str	r3, [r7, #40]	; 0x28
 80138dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d1f1      	bne.n	80138c8 <tcp_write+0x558>
    }
    p->tot_len += extendlen;
 80138e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e6:	891a      	ldrh	r2, [r3, #8]
 80138e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80138ea:	4413      	add	r3, r2
 80138ec:	b29a      	uxth	r2, r3
 80138ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80138f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f4:	895a      	ldrh	r2, [r3, #10]
 80138f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80138f8:	4413      	add	r3, r2
 80138fa:	b29a      	uxth	r2, r3
 80138fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138fe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013902:	891a      	ldrh	r2, [r3, #8]
 8013904:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013906:	4413      	add	r3, r2
 8013908:	b29a      	uxth	r2, r3
 801390a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801390c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801390e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013910:	2b00      	cmp	r3, #0
 8013912:	d111      	bne.n	8013938 <tcp_write+0x5c8>
    pcb->unsent = queue;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013918:	66da      	str	r2, [r3, #108]	; 0x6c
 801391a:	e010      	b.n	801393e <tcp_write+0x5ce>
 801391c:	0801a21c 	.word	0x0801a21c
 8013920:	0801a4bc 	.word	0x0801a4bc
 8013924:	0801a270 	.word	0x0801a270
 8013928:	0801a4fc 	.word	0x0801a4fc
 801392c:	0801a50c 	.word	0x0801a50c
 8013930:	0801a520 	.word	0x0801a520
 8013934:	0801a558 	.word	0x0801a558
  } else {
    last_unsent->next = queue;
 8013938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801393a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801393c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013942:	88fb      	ldrh	r3, [r7, #6]
 8013944:	441a      	add	r2, r3
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013950:	88fb      	ldrh	r3, [r7, #6]
 8013952:	1ad3      	subs	r3, r2, r3
 8013954:	b29a      	uxth	r2, r3
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013962:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801396c:	2b00      	cmp	r3, #0
 801396e:	d00e      	beq.n	801398e <tcp_write+0x61e>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013974:	2b00      	cmp	r3, #0
 8013976:	d10a      	bne.n	801398e <tcp_write+0x61e>
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801397c:	2b00      	cmp	r3, #0
 801397e:	d106      	bne.n	801398e <tcp_write+0x61e>
 8013980:	4b2b      	ldr	r3, [pc, #172]	; (8013a30 <tcp_write+0x6c0>)
 8013982:	f240 3213 	movw	r2, #787	; 0x313
 8013986:	492b      	ldr	r1, [pc, #172]	; (8013a34 <tcp_write+0x6c4>)
 8013988:	482b      	ldr	r0, [pc, #172]	; (8013a38 <tcp_write+0x6c8>)
 801398a:	f002 fc17 	bl	80161bc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801398e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013990:	2b00      	cmp	r3, #0
 8013992:	d015      	beq.n	80139c0 <tcp_write+0x650>
 8013994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013996:	68db      	ldr	r3, [r3, #12]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d011      	beq.n	80139c0 <tcp_write+0x650>
 801399c:	797b      	ldrb	r3, [r7, #5]
 801399e:	f003 0302 	and.w	r3, r3, #2
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d10c      	bne.n	80139c0 <tcp_write+0x650>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80139a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139a8:	68dc      	ldr	r4, [r3, #12]
 80139aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139ac:	68db      	ldr	r3, [r3, #12]
 80139ae:	899b      	ldrh	r3, [r3, #12]
 80139b0:	b29d      	uxth	r5, r3
 80139b2:	2008      	movs	r0, #8
 80139b4:	f7f7 f966 	bl	800ac84 <lwip_htons>
 80139b8:	4603      	mov	r3, r0
 80139ba:	432b      	orrs	r3, r5
 80139bc:	b29b      	uxth	r3, r3
 80139be:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 80139c0:	2300      	movs	r3, #0
 80139c2:	e031      	b.n	8013a28 <tcp_write+0x6b8>
          goto memerr;
 80139c4:	bf00      	nop
 80139c6:	e006      	b.n	80139d6 <tcp_write+0x666>
            goto memerr;
 80139c8:	bf00      	nop
 80139ca:	e004      	b.n	80139d6 <tcp_write+0x666>
        goto memerr;
 80139cc:	bf00      	nop
 80139ce:	e002      	b.n	80139d6 <tcp_write+0x666>
        goto memerr;
 80139d0:	bf00      	nop
 80139d2:	e000      	b.n	80139d6 <tcp_write+0x666>
      goto memerr;
 80139d4:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	8b5b      	ldrh	r3, [r3, #26]
 80139da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139de:	b29a      	uxth	r2, r3
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80139e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d002      	beq.n	80139f0 <tcp_write+0x680>
    pbuf_free(concat_p);
 80139ea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80139ec:	f7fa ff00 	bl	800e7f0 <pbuf_free>
  }
  if (queue != NULL) {
 80139f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d002      	beq.n	80139fc <tcp_write+0x68c>
    tcp_segs_free(queue);
 80139f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80139f8:	f7fc fb6e 	bl	80100d8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d00e      	beq.n	8013a24 <tcp_write+0x6b4>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d10a      	bne.n	8013a24 <tcp_write+0x6b4>
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d106      	bne.n	8013a24 <tcp_write+0x6b4>
 8013a16:	4b06      	ldr	r3, [pc, #24]	; (8013a30 <tcp_write+0x6c0>)
 8013a18:	f44f 724a 	mov.w	r2, #808	; 0x328
 8013a1c:	4905      	ldr	r1, [pc, #20]	; (8013a34 <tcp_write+0x6c4>)
 8013a1e:	4806      	ldr	r0, [pc, #24]	; (8013a38 <tcp_write+0x6c8>)
 8013a20:	f002 fbcc 	bl	80161bc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3758      	adds	r7, #88	; 0x58
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8013a30:	0801a21c 	.word	0x0801a21c
 8013a34:	0801a590 	.word	0x0801a590
 8013a38:	0801a270 	.word	0x0801a270

08013a3c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013a3c:	b5b0      	push	{r4, r5, r7, lr}
 8013a3e:	b08a      	sub	sp, #40	; 0x28
 8013a40:	af02      	add	r7, sp, #8
 8013a42:	6078      	str	r0, [r7, #4]
 8013a44:	460b      	mov	r3, r1
 8013a46:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013a48:	2300      	movs	r3, #0
 8013a4a:	61fb      	str	r3, [r7, #28]
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013a50:	2300      	movs	r3, #0
 8013a52:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d106      	bne.n	8013a68 <tcp_split_unsent_seg+0x2c>
 8013a5a:	4b96      	ldr	r3, [pc, #600]	; (8013cb4 <tcp_split_unsent_seg+0x278>)
 8013a5c:	f240 324b 	movw	r2, #843	; 0x34b
 8013a60:	4995      	ldr	r1, [pc, #596]	; (8013cb8 <tcp_split_unsent_seg+0x27c>)
 8013a62:	4896      	ldr	r0, [pc, #600]	; (8013cbc <tcp_split_unsent_seg+0x280>)
 8013a64:	f002 fbaa 	bl	80161bc <iprintf>

  useg = pcb->unsent;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a6c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013a6e:	697b      	ldr	r3, [r7, #20]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d102      	bne.n	8013a7a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013a74:	f04f 33ff 	mov.w	r3, #4294967295
 8013a78:	e118      	b.n	8013cac <tcp_split_unsent_seg+0x270>
  }

  if (split == 0) {
 8013a7a:	887b      	ldrh	r3, [r7, #2]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d109      	bne.n	8013a94 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013a80:	4b8c      	ldr	r3, [pc, #560]	; (8013cb4 <tcp_split_unsent_seg+0x278>)
 8013a82:	f240 3253 	movw	r2, #851	; 0x353
 8013a86:	498e      	ldr	r1, [pc, #568]	; (8013cc0 <tcp_split_unsent_seg+0x284>)
 8013a88:	488c      	ldr	r0, [pc, #560]	; (8013cbc <tcp_split_unsent_seg+0x280>)
 8013a8a:	f002 fb97 	bl	80161bc <iprintf>
    return ERR_VAL;
 8013a8e:	f06f 0305 	mvn.w	r3, #5
 8013a92:	e10b      	b.n	8013cac <tcp_split_unsent_seg+0x270>
  }

  if (useg->len <= split) {
 8013a94:	697b      	ldr	r3, [r7, #20]
 8013a96:	891b      	ldrh	r3, [r3, #8]
 8013a98:	887a      	ldrh	r2, [r7, #2]
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d301      	bcc.n	8013aa2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	e104      	b.n	8013cac <tcp_split_unsent_seg+0x270>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013aa6:	887a      	ldrh	r2, [r7, #2]
 8013aa8:	429a      	cmp	r2, r3
 8013aaa:	d906      	bls.n	8013aba <tcp_split_unsent_seg+0x7e>
 8013aac:	4b81      	ldr	r3, [pc, #516]	; (8013cb4 <tcp_split_unsent_seg+0x278>)
 8013aae:	f240 325b 	movw	r2, #859	; 0x35b
 8013ab2:	4984      	ldr	r1, [pc, #528]	; (8013cc4 <tcp_split_unsent_seg+0x288>)
 8013ab4:	4881      	ldr	r0, [pc, #516]	; (8013cbc <tcp_split_unsent_seg+0x280>)
 8013ab6:	f002 fb81 	bl	80161bc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	891b      	ldrh	r3, [r3, #8]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d106      	bne.n	8013ad0 <tcp_split_unsent_seg+0x94>
 8013ac2:	4b7c      	ldr	r3, [pc, #496]	; (8013cb4 <tcp_split_unsent_seg+0x278>)
 8013ac4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013ac8:	497f      	ldr	r1, [pc, #508]	; (8013cc8 <tcp_split_unsent_seg+0x28c>)
 8013aca:	487c      	ldr	r0, [pc, #496]	; (8013cbc <tcp_split_unsent_seg+0x280>)
 8013acc:	f002 fb76 	bl	80161bc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013ad0:	697b      	ldr	r3, [r7, #20]
 8013ad2:	7a9b      	ldrb	r3, [r3, #10]
 8013ad4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013ad6:	7bfb      	ldrb	r3, [r7, #15]
 8013ad8:	f003 0301 	and.w	r3, r3, #1
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d001      	beq.n	8013ae4 <tcp_split_unsent_seg+0xa8>
 8013ae0:	2304      	movs	r3, #4
 8013ae2:	e000      	b.n	8013ae6 <tcp_split_unsent_seg+0xaa>
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	891a      	ldrh	r2, [r3, #8]
 8013aec:	887b      	ldrh	r3, [r7, #2]
 8013aee:	1ad3      	subs	r3, r2, r3
 8013af0:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013af2:	7bbb      	ldrb	r3, [r7, #14]
 8013af4:	b29a      	uxth	r2, r3
 8013af6:	89bb      	ldrh	r3, [r7, #12]
 8013af8:	4413      	add	r3, r2
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b00:	4619      	mov	r1, r3
 8013b02:	2036      	movs	r0, #54	; 0x36
 8013b04:	f7fa fb60 	bl	800e1c8 <pbuf_alloc>
 8013b08:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	f000 80b6 	beq.w	8013c7e <tcp_split_unsent_seg+0x242>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	685b      	ldr	r3, [r3, #4]
 8013b16:	891a      	ldrh	r2, [r3, #8]
 8013b18:	697b      	ldr	r3, [r7, #20]
 8013b1a:	891b      	ldrh	r3, [r3, #8]
 8013b1c:	1ad3      	subs	r3, r2, r3
 8013b1e:	b29a      	uxth	r2, r3
 8013b20:	887b      	ldrh	r3, [r7, #2]
 8013b22:	4413      	add	r3, r2
 8013b24:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013b26:	697b      	ldr	r3, [r7, #20]
 8013b28:	6858      	ldr	r0, [r3, #4]
 8013b2a:	693b      	ldr	r3, [r7, #16]
 8013b2c:	685a      	ldr	r2, [r3, #4]
 8013b2e:	7bbb      	ldrb	r3, [r7, #14]
 8013b30:	18d1      	adds	r1, r2, r3
 8013b32:	897b      	ldrh	r3, [r7, #10]
 8013b34:	89ba      	ldrh	r2, [r7, #12]
 8013b36:	f7fb f861 	bl	800ebfc <pbuf_copy_partial>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	461a      	mov	r2, r3
 8013b3e:	89bb      	ldrh	r3, [r7, #12]
 8013b40:	4293      	cmp	r3, r2
 8013b42:	f040 809e 	bne.w	8013c82 <tcp_split_unsent_seg+0x246>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	68db      	ldr	r3, [r3, #12]
 8013b4a:	899b      	ldrh	r3, [r3, #12]
 8013b4c:	b29b      	uxth	r3, r3
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7f7 f898 	bl	800ac84 <lwip_htons>
 8013b54:	4603      	mov	r3, r0
 8013b56:	b2db      	uxtb	r3, r3
 8013b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013b5c:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013b5e:	2300      	movs	r3, #0
 8013b60:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013b62:	7efb      	ldrb	r3, [r7, #27]
 8013b64:	f003 0308 	and.w	r3, r3, #8
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d007      	beq.n	8013b7c <tcp_split_unsent_seg+0x140>
    split_flags &= ~TCP_PSH;
 8013b6c:	7efb      	ldrb	r3, [r7, #27]
 8013b6e:	f023 0308 	bic.w	r3, r3, #8
 8013b72:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013b74:	7ebb      	ldrb	r3, [r7, #26]
 8013b76:	f043 0308 	orr.w	r3, r3, #8
 8013b7a:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013b7c:	7efb      	ldrb	r3, [r7, #27]
 8013b7e:	f003 0301 	and.w	r3, r3, #1
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d007      	beq.n	8013b96 <tcp_split_unsent_seg+0x15a>
    split_flags &= ~TCP_FIN;
 8013b86:	7efb      	ldrb	r3, [r7, #27]
 8013b88:	f023 0301 	bic.w	r3, r3, #1
 8013b8c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013b8e:	7ebb      	ldrb	r3, [r7, #26]
 8013b90:	f043 0301 	orr.w	r3, r3, #1
 8013b94:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013b96:	697b      	ldr	r3, [r7, #20]
 8013b98:	68db      	ldr	r3, [r3, #12]
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f7f7 f886 	bl	800acae <lwip_htonl>
 8013ba2:	4602      	mov	r2, r0
 8013ba4:	887b      	ldrh	r3, [r7, #2]
 8013ba6:	18d1      	adds	r1, r2, r3
 8013ba8:	7eba      	ldrb	r2, [r7, #26]
 8013baa:	7bfb      	ldrb	r3, [r7, #15]
 8013bac:	9300      	str	r3, [sp, #0]
 8013bae:	460b      	mov	r3, r1
 8013bb0:	6939      	ldr	r1, [r7, #16]
 8013bb2:	6878      	ldr	r0, [r7, #4]
 8013bb4:	f7ff fa48 	bl	8013048 <tcp_create_segment>
 8013bb8:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013bba:	69fb      	ldr	r3, [r7, #28]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d062      	beq.n	8013c86 <tcp_split_unsent_seg+0x24a>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013bc0:	697b      	ldr	r3, [r7, #20]
 8013bc2:	685b      	ldr	r3, [r3, #4]
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f7fa fea1 	bl	800e90c <pbuf_clen>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	461a      	mov	r2, r3
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013bd4:	1a9b      	subs	r3, r3, r2
 8013bd6:	b29a      	uxth	r2, r3
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013bde:	697b      	ldr	r3, [r7, #20]
 8013be0:	6858      	ldr	r0, [r3, #4]
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	685b      	ldr	r3, [r3, #4]
 8013be6:	891a      	ldrh	r2, [r3, #8]
 8013be8:	89bb      	ldrh	r3, [r7, #12]
 8013bea:	1ad3      	subs	r3, r2, r3
 8013bec:	b29b      	uxth	r3, r3
 8013bee:	4619      	mov	r1, r3
 8013bf0:	f7fa fc44 	bl	800e47c <pbuf_realloc>
  useg->len -= remainder;
 8013bf4:	697b      	ldr	r3, [r7, #20]
 8013bf6:	891a      	ldrh	r2, [r3, #8]
 8013bf8:	89bb      	ldrh	r3, [r7, #12]
 8013bfa:	1ad3      	subs	r3, r2, r3
 8013bfc:	b29a      	uxth	r2, r3
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013c02:	697b      	ldr	r3, [r7, #20]
 8013c04:	68dc      	ldr	r4, [r3, #12]
 8013c06:	697b      	ldr	r3, [r7, #20]
 8013c08:	68db      	ldr	r3, [r3, #12]
 8013c0a:	899b      	ldrh	r3, [r3, #12]
 8013c0c:	b29d      	uxth	r5, r3
 8013c0e:	7efb      	ldrb	r3, [r7, #27]
 8013c10:	b29b      	uxth	r3, r3
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7f7 f836 	bl	800ac84 <lwip_htons>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	432b      	orrs	r3, r5
 8013c1c:	b29b      	uxth	r3, r3
 8013c1e:	81a3      	strh	r3, [r4, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013c20:	697b      	ldr	r3, [r7, #20]
 8013c22:	685b      	ldr	r3, [r3, #4]
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7fa fe71 	bl	800e90c <pbuf_clen>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c34:	4413      	add	r3, r2
 8013c36:	b29a      	uxth	r2, r3
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013c3e:	69fb      	ldr	r3, [r7, #28]
 8013c40:	685b      	ldr	r3, [r3, #4]
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7fa fe62 	bl	800e90c <pbuf_clen>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	461a      	mov	r2, r3
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c52:	4413      	add	r3, r2
 8013c54:	b29a      	uxth	r2, r3
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013c5c:	697b      	ldr	r3, [r7, #20]
 8013c5e:	681a      	ldr	r2, [r3, #0]
 8013c60:	69fb      	ldr	r3, [r7, #28]
 8013c62:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	69fa      	ldr	r2, [r7, #28]
 8013c68:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013c6a:	69fb      	ldr	r3, [r7, #28]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d103      	bne.n	8013c7a <tcp_split_unsent_seg+0x23e>
    pcb->unsent_oversize = 0;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	2200      	movs	r2, #0
 8013c76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	e016      	b.n	8013cac <tcp_split_unsent_seg+0x270>
    goto memerr;
 8013c7e:	bf00      	nop
 8013c80:	e002      	b.n	8013c88 <tcp_split_unsent_seg+0x24c>
    goto memerr;
 8013c82:	bf00      	nop
 8013c84:	e000      	b.n	8013c88 <tcp_split_unsent_seg+0x24c>
    goto memerr;
 8013c86:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d006      	beq.n	8013c9c <tcp_split_unsent_seg+0x260>
 8013c8e:	4b09      	ldr	r3, [pc, #36]	; (8013cb4 <tcp_split_unsent_seg+0x278>)
 8013c90:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013c94:	490d      	ldr	r1, [pc, #52]	; (8013ccc <tcp_split_unsent_seg+0x290>)
 8013c96:	4809      	ldr	r0, [pc, #36]	; (8013cbc <tcp_split_unsent_seg+0x280>)
 8013c98:	f002 fa90 	bl	80161bc <iprintf>
  if (p != NULL) {
 8013c9c:	693b      	ldr	r3, [r7, #16]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d002      	beq.n	8013ca8 <tcp_split_unsent_seg+0x26c>
    pbuf_free(p);
 8013ca2:	6938      	ldr	r0, [r7, #16]
 8013ca4:	f7fa fda4 	bl	800e7f0 <pbuf_free>
  }

  return ERR_MEM;
 8013ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013cac:	4618      	mov	r0, r3
 8013cae:	3720      	adds	r7, #32
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8013cb4:	0801a21c 	.word	0x0801a21c
 8013cb8:	0801a5b0 	.word	0x0801a5b0
 8013cbc:	0801a270 	.word	0x0801a270
 8013cc0:	0801a5d4 	.word	0x0801a5d4
 8013cc4:	0801a5f8 	.word	0x0801a5f8
 8013cc8:	0801a608 	.word	0x0801a608
 8013ccc:	0801a618 	.word	0x0801a618

08013cd0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013cd0:	b5b0      	push	{r4, r5, r7, lr}
 8013cd2:	b084      	sub	sp, #16
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d106      	bne.n	8013cec <tcp_send_fin+0x1c>
 8013cde:	4b21      	ldr	r3, [pc, #132]	; (8013d64 <tcp_send_fin+0x94>)
 8013ce0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013ce4:	4920      	ldr	r1, [pc, #128]	; (8013d68 <tcp_send_fin+0x98>)
 8013ce6:	4821      	ldr	r0, [pc, #132]	; (8013d6c <tcp_send_fin+0x9c>)
 8013ce8:	f002 fa68 	bl	80161bc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d02d      	beq.n	8013d50 <tcp_send_fin+0x80>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cf8:	60fb      	str	r3, [r7, #12]
 8013cfa:	e002      	b.n	8013d02 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d1f8      	bne.n	8013cfc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	68db      	ldr	r3, [r3, #12]
 8013d0e:	899b      	ldrh	r3, [r3, #12]
 8013d10:	b29b      	uxth	r3, r3
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7f6 ffb6 	bl	800ac84 <lwip_htons>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	b2db      	uxtb	r3, r3
 8013d1c:	f003 0307 	and.w	r3, r3, #7
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d115      	bne.n	8013d50 <tcp_send_fin+0x80>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	68dc      	ldr	r4, [r3, #12]
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	68db      	ldr	r3, [r3, #12]
 8013d2c:	899b      	ldrh	r3, [r3, #12]
 8013d2e:	b29d      	uxth	r5, r3
 8013d30:	2001      	movs	r0, #1
 8013d32:	f7f6 ffa7 	bl	800ac84 <lwip_htons>
 8013d36:	4603      	mov	r3, r0
 8013d38:	432b      	orrs	r3, r5
 8013d3a:	b29b      	uxth	r3, r3
 8013d3c:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	8b5b      	ldrh	r3, [r3, #26]
 8013d42:	f043 0320 	orr.w	r3, r3, #32
 8013d46:	b29a      	uxth	r2, r3
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	e004      	b.n	8013d5a <tcp_send_fin+0x8a>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013d50:	2101      	movs	r1, #1
 8013d52:	6878      	ldr	r0, [r7, #4]
 8013d54:	f000 f80c 	bl	8013d70 <tcp_enqueue_flags>
 8013d58:	4603      	mov	r3, r0
}
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	3710      	adds	r7, #16
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bdb0      	pop	{r4, r5, r7, pc}
 8013d62:	bf00      	nop
 8013d64:	0801a21c 	.word	0x0801a21c
 8013d68:	0801a624 	.word	0x0801a624
 8013d6c:	0801a270 	.word	0x0801a270

08013d70 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b08a      	sub	sp, #40	; 0x28
 8013d74:	af02      	add	r7, sp, #8
 8013d76:	6078      	str	r0, [r7, #4]
 8013d78:	460b      	mov	r3, r1
 8013d7a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013d80:	2300      	movs	r3, #0
 8013d82:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013d84:	78fb      	ldrb	r3, [r7, #3]
 8013d86:	f003 0303 	and.w	r3, r3, #3
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d106      	bne.n	8013d9c <tcp_enqueue_flags+0x2c>
 8013d8e:	4b68      	ldr	r3, [pc, #416]	; (8013f30 <tcp_enqueue_flags+0x1c0>)
 8013d90:	f240 4212 	movw	r2, #1042	; 0x412
 8013d94:	4967      	ldr	r1, [pc, #412]	; (8013f34 <tcp_enqueue_flags+0x1c4>)
 8013d96:	4868      	ldr	r0, [pc, #416]	; (8013f38 <tcp_enqueue_flags+0x1c8>)
 8013d98:	f002 fa10 	bl	80161bc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d106      	bne.n	8013db0 <tcp_enqueue_flags+0x40>
 8013da2:	4b63      	ldr	r3, [pc, #396]	; (8013f30 <tcp_enqueue_flags+0x1c0>)
 8013da4:	f240 4213 	movw	r2, #1043	; 0x413
 8013da8:	4964      	ldr	r1, [pc, #400]	; (8013f3c <tcp_enqueue_flags+0x1cc>)
 8013daa:	4863      	ldr	r0, [pc, #396]	; (8013f38 <tcp_enqueue_flags+0x1c8>)
 8013dac:	f002 fa06 	bl	80161bc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013db0:	78fb      	ldrb	r3, [r7, #3]
 8013db2:	f003 0302 	and.w	r3, r3, #2
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d001      	beq.n	8013dbe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013dba:	2301      	movs	r3, #1
 8013dbc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013dbe:	7ffb      	ldrb	r3, [r7, #31]
 8013dc0:	f003 0301 	and.w	r3, r3, #1
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d001      	beq.n	8013dcc <tcp_enqueue_flags+0x5c>
 8013dc8:	2304      	movs	r3, #4
 8013dca:	e000      	b.n	8013dce <tcp_enqueue_flags+0x5e>
 8013dcc:	2300      	movs	r3, #0
 8013dce:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013dd0:	7dfb      	ldrb	r3, [r7, #23]
 8013dd2:	b29b      	uxth	r3, r3
 8013dd4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013dd8:	4619      	mov	r1, r3
 8013dda:	2036      	movs	r0, #54	; 0x36
 8013ddc:	f7fa f9f4 	bl	800e1c8 <pbuf_alloc>
 8013de0:	6138      	str	r0, [r7, #16]
 8013de2:	693b      	ldr	r3, [r7, #16]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d109      	bne.n	8013dfc <tcp_enqueue_flags+0x8c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	8b5b      	ldrh	r3, [r3, #26]
 8013dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013df0:	b29a      	uxth	r2, r3
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013df6:	f04f 33ff 	mov.w	r3, #4294967295
 8013dfa:	e095      	b.n	8013f28 <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013dfc:	693b      	ldr	r3, [r7, #16]
 8013dfe:	895a      	ldrh	r2, [r3, #10]
 8013e00:	7dfb      	ldrb	r3, [r7, #23]
 8013e02:	b29b      	uxth	r3, r3
 8013e04:	429a      	cmp	r2, r3
 8013e06:	d206      	bcs.n	8013e16 <tcp_enqueue_flags+0xa6>
 8013e08:	4b49      	ldr	r3, [pc, #292]	; (8013f30 <tcp_enqueue_flags+0x1c0>)
 8013e0a:	f240 423a 	movw	r2, #1082	; 0x43a
 8013e0e:	494c      	ldr	r1, [pc, #304]	; (8013f40 <tcp_enqueue_flags+0x1d0>)
 8013e10:	4849      	ldr	r0, [pc, #292]	; (8013f38 <tcp_enqueue_flags+0x1c8>)
 8013e12:	f002 f9d3 	bl	80161bc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013e1a:	78fa      	ldrb	r2, [r7, #3]
 8013e1c:	7ffb      	ldrb	r3, [r7, #31]
 8013e1e:	9300      	str	r3, [sp, #0]
 8013e20:	460b      	mov	r3, r1
 8013e22:	6939      	ldr	r1, [r7, #16]
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	f7ff f90f 	bl	8013048 <tcp_create_segment>
 8013e2a:	60f8      	str	r0, [r7, #12]
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d109      	bne.n	8013e46 <tcp_enqueue_flags+0xd6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	8b5b      	ldrh	r3, [r3, #26]
 8013e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e3a:	b29a      	uxth	r2, r3
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013e40:	f04f 33ff 	mov.w	r3, #4294967295
 8013e44:	e070      	b.n	8013f28 <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	68db      	ldr	r3, [r3, #12]
 8013e4a:	f003 0303 	and.w	r3, r3, #3
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d006      	beq.n	8013e60 <tcp_enqueue_flags+0xf0>
 8013e52:	4b37      	ldr	r3, [pc, #220]	; (8013f30 <tcp_enqueue_flags+0x1c0>)
 8013e54:	f240 4242 	movw	r2, #1090	; 0x442
 8013e58:	493a      	ldr	r1, [pc, #232]	; (8013f44 <tcp_enqueue_flags+0x1d4>)
 8013e5a:	4837      	ldr	r0, [pc, #220]	; (8013f38 <tcp_enqueue_flags+0x1c8>)
 8013e5c:	f002 f9ae 	bl	80161bc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	891b      	ldrh	r3, [r3, #8]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d006      	beq.n	8013e76 <tcp_enqueue_flags+0x106>
 8013e68:	4b31      	ldr	r3, [pc, #196]	; (8013f30 <tcp_enqueue_flags+0x1c0>)
 8013e6a:	f240 4243 	movw	r2, #1091	; 0x443
 8013e6e:	4936      	ldr	r1, [pc, #216]	; (8013f48 <tcp_enqueue_flags+0x1d8>)
 8013e70:	4831      	ldr	r0, [pc, #196]	; (8013f38 <tcp_enqueue_flags+0x1c8>)
 8013e72:	f002 f9a3 	bl	80161bc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d103      	bne.n	8013e86 <tcp_enqueue_flags+0x116>
    pcb->unsent = seg;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	68fa      	ldr	r2, [r7, #12]
 8013e82:	66da      	str	r2, [r3, #108]	; 0x6c
 8013e84:	e00d      	b.n	8013ea2 <tcp_enqueue_flags+0x132>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e8a:	61bb      	str	r3, [r7, #24]
 8013e8c:	e002      	b.n	8013e94 <tcp_enqueue_flags+0x124>
 8013e8e:	69bb      	ldr	r3, [r7, #24]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	61bb      	str	r3, [r7, #24]
 8013e94:	69bb      	ldr	r3, [r7, #24]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d1f8      	bne.n	8013e8e <tcp_enqueue_flags+0x11e>
    useg->next = seg;
 8013e9c:	69bb      	ldr	r3, [r7, #24]
 8013e9e:	68fa      	ldr	r2, [r7, #12]
 8013ea0:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013eaa:	78fb      	ldrb	r3, [r7, #3]
 8013eac:	f003 0302 	and.w	r3, r3, #2
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d104      	bne.n	8013ebe <tcp_enqueue_flags+0x14e>
 8013eb4:	78fb      	ldrb	r3, [r7, #3]
 8013eb6:	f003 0301 	and.w	r3, r3, #1
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d004      	beq.n	8013ec8 <tcp_enqueue_flags+0x158>
    pcb->snd_lbb++;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013ec2:	1c5a      	adds	r2, r3, #1
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013ec8:	78fb      	ldrb	r3, [r7, #3]
 8013eca:	f003 0301 	and.w	r3, r3, #1
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d006      	beq.n	8013ee0 <tcp_enqueue_flags+0x170>
    tcp_set_flags(pcb, TF_FIN);
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	8b5b      	ldrh	r3, [r3, #26]
 8013ed6:	f043 0320 	orr.w	r3, r3, #32
 8013eda:	b29a      	uxth	r2, r3
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	685b      	ldr	r3, [r3, #4]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7fa fd11 	bl	800e90c <pbuf_clen>
 8013eea:	4603      	mov	r3, r0
 8013eec:	461a      	mov	r2, r3
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ef4:	4413      	add	r3, r2
 8013ef6:	b29a      	uxth	r2, r3
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d00e      	beq.n	8013f26 <tcp_enqueue_flags+0x1b6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d10a      	bne.n	8013f26 <tcp_enqueue_flags+0x1b6>
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d106      	bne.n	8013f26 <tcp_enqueue_flags+0x1b6>
 8013f18:	4b05      	ldr	r3, [pc, #20]	; (8013f30 <tcp_enqueue_flags+0x1c0>)
 8013f1a:	f240 4266 	movw	r2, #1126	; 0x466
 8013f1e:	490b      	ldr	r1, [pc, #44]	; (8013f4c <tcp_enqueue_flags+0x1dc>)
 8013f20:	4805      	ldr	r0, [pc, #20]	; (8013f38 <tcp_enqueue_flags+0x1c8>)
 8013f22:	f002 f94b 	bl	80161bc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013f26:	2300      	movs	r3, #0
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3720      	adds	r7, #32
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}
 8013f30:	0801a21c 	.word	0x0801a21c
 8013f34:	0801a640 	.word	0x0801a640
 8013f38:	0801a270 	.word	0x0801a270
 8013f3c:	0801a698 	.word	0x0801a698
 8013f40:	0801a6b8 	.word	0x0801a6b8
 8013f44:	0801a6f4 	.word	0x0801a6f4
 8013f48:	0801a70c 	.word	0x0801a70c
 8013f4c:	0801a738 	.word	0x0801a738

08013f50 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013f50:	b5b0      	push	{r4, r5, r7, lr}
 8013f52:	b08a      	sub	sp, #40	; 0x28
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d106      	bne.n	8013f6c <tcp_output+0x1c>
 8013f5e:	4ba0      	ldr	r3, [pc, #640]	; (80141e0 <tcp_output+0x290>)
 8013f60:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013f64:	499f      	ldr	r1, [pc, #636]	; (80141e4 <tcp_output+0x294>)
 8013f66:	48a0      	ldr	r0, [pc, #640]	; (80141e8 <tcp_output+0x298>)
 8013f68:	f002 f928 	bl	80161bc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	7d1b      	ldrb	r3, [r3, #20]
 8013f70:	2b01      	cmp	r3, #1
 8013f72:	d106      	bne.n	8013f82 <tcp_output+0x32>
 8013f74:	4b9a      	ldr	r3, [pc, #616]	; (80141e0 <tcp_output+0x290>)
 8013f76:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8013f7a:	499c      	ldr	r1, [pc, #624]	; (80141ec <tcp_output+0x29c>)
 8013f7c:	489a      	ldr	r0, [pc, #616]	; (80141e8 <tcp_output+0x298>)
 8013f7e:	f002 f91d 	bl	80161bc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013f82:	4b9b      	ldr	r3, [pc, #620]	; (80141f0 <tcp_output+0x2a0>)
 8013f84:	681a      	ldr	r2, [r3, #0]
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	429a      	cmp	r2, r3
 8013f8a:	d101      	bne.n	8013f90 <tcp_output+0x40>
    return ERR_OK;
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	e1d0      	b.n	8014332 <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013f9c:	429a      	cmp	r2, r3
 8013f9e:	d203      	bcs.n	8013fa8 <tcp_output+0x58>
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013fa6:	e002      	b.n	8013fae <tcp_output+0x5e>
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013fae:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fb4:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d10b      	bne.n	8013fd4 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	8b5b      	ldrh	r3, [r3, #26]
 8013fc0:	f003 0302 	and.w	r3, r3, #2
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	f000 81a9 	beq.w	801431c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f000 fdde 	bl	8014b8c <tcp_send_empty_ack>
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	e1ae      	b.n	8014332 <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013fd4:	6879      	ldr	r1, [r7, #4]
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	3304      	adds	r3, #4
 8013fda:	461a      	mov	r2, r3
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f7ff f817 	bl	8013010 <tcp_route>
 8013fe2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013fe4:	697b      	ldr	r3, [r7, #20]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d102      	bne.n	8013ff0 <tcp_output+0xa0>
    return ERR_RTE;
 8013fea:	f06f 0303 	mvn.w	r3, #3
 8013fee:	e1a0      	b.n	8014332 <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d003      	beq.n	8013ffe <tcp_output+0xae>
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d111      	bne.n	8014022 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013ffe:	697b      	ldr	r3, [r7, #20]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d002      	beq.n	801400a <tcp_output+0xba>
 8014004:	697b      	ldr	r3, [r7, #20]
 8014006:	3304      	adds	r3, #4
 8014008:	e000      	b.n	801400c <tcp_output+0xbc>
 801400a:	2300      	movs	r3, #0
 801400c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801400e:	693b      	ldr	r3, [r7, #16]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d102      	bne.n	801401a <tcp_output+0xca>
      return ERR_RTE;
 8014014:	f06f 0303 	mvn.w	r3, #3
 8014018:	e18b      	b.n	8014332 <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801401a:	693b      	ldr	r3, [r7, #16]
 801401c:	681a      	ldr	r2, [r3, #0]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014024:	68db      	ldr	r3, [r3, #12]
 8014026:	685b      	ldr	r3, [r3, #4]
 8014028:	4618      	mov	r0, r3
 801402a:	f7f6 fe40 	bl	800acae <lwip_htonl>
 801402e:	4602      	mov	r2, r0
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014034:	1ad3      	subs	r3, r2, r3
 8014036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014038:	8912      	ldrh	r2, [r2, #8]
 801403a:	441a      	add	r2, r3
 801403c:	69bb      	ldr	r3, [r7, #24]
 801403e:	429a      	cmp	r2, r3
 8014040:	d927      	bls.n	8014092 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014048:	461a      	mov	r2, r3
 801404a:	69bb      	ldr	r3, [r7, #24]
 801404c:	429a      	cmp	r2, r3
 801404e:	d114      	bne.n	801407a <tcp_output+0x12a>
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014054:	2b00      	cmp	r3, #0
 8014056:	d110      	bne.n	801407a <tcp_output+0x12a>
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801405e:	2b00      	cmp	r3, #0
 8014060:	d10b      	bne.n	801407a <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	2200      	movs	r2, #0
 8014066:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	2201      	movs	r2, #1
 801406e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	2200      	movs	r2, #0
 8014076:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	8b5b      	ldrh	r3, [r3, #26]
 801407e:	f003 0302 	and.w	r3, r3, #2
 8014082:	2b00      	cmp	r3, #0
 8014084:	f000 814c 	beq.w	8014320 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f000 fd7f 	bl	8014b8c <tcp_send_empty_ack>
 801408e:	4603      	mov	r3, r0
 8014090:	e14f      	b.n	8014332 <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	2200      	movs	r2, #0
 8014096:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801409e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80140a0:	6a3b      	ldr	r3, [r7, #32]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	f000 811b 	beq.w	80142de <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 80140a8:	e002      	b.n	80140b0 <tcp_output+0x160>
 80140aa:	6a3b      	ldr	r3, [r7, #32]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	623b      	str	r3, [r7, #32]
 80140b0:	6a3b      	ldr	r3, [r7, #32]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d1f8      	bne.n	80140aa <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80140b8:	e111      	b.n	80142de <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80140ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140bc:	68db      	ldr	r3, [r3, #12]
 80140be:	899b      	ldrh	r3, [r3, #12]
 80140c0:	b29b      	uxth	r3, r3
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7f6 fdde 	bl	800ac84 <lwip_htons>
 80140c8:	4603      	mov	r3, r0
 80140ca:	b2db      	uxtb	r3, r3
 80140cc:	f003 0304 	and.w	r3, r3, #4
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d006      	beq.n	80140e2 <tcp_output+0x192>
 80140d4:	4b42      	ldr	r3, [pc, #264]	; (80141e0 <tcp_output+0x290>)
 80140d6:	f240 5237 	movw	r2, #1335	; 0x537
 80140da:	4946      	ldr	r1, [pc, #280]	; (80141f4 <tcp_output+0x2a4>)
 80140dc:	4842      	ldr	r0, [pc, #264]	; (80141e8 <tcp_output+0x298>)
 80140de:	f002 f86d 	bl	80161bc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d01f      	beq.n	801412a <tcp_output+0x1da>
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	8b5b      	ldrh	r3, [r3, #26]
 80140ee:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d119      	bne.n	801412a <tcp_output+0x1da>
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d00b      	beq.n	8014116 <tcp_output+0x1c6>
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d110      	bne.n	801412a <tcp_output+0x1da>
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801410c:	891a      	ldrh	r2, [r3, #8]
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014112:	429a      	cmp	r2, r3
 8014114:	d209      	bcs.n	801412a <tcp_output+0x1da>
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801411c:	2b00      	cmp	r3, #0
 801411e:	d004      	beq.n	801412a <tcp_output+0x1da>
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014126:	2b08      	cmp	r3, #8
 8014128:	d901      	bls.n	801412e <tcp_output+0x1de>
 801412a:	2301      	movs	r3, #1
 801412c:	e000      	b.n	8014130 <tcp_output+0x1e0>
 801412e:	2300      	movs	r3, #0
 8014130:	2b00      	cmp	r3, #0
 8014132:	d106      	bne.n	8014142 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	8b5b      	ldrh	r3, [r3, #26]
 8014138:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801413c:	2b00      	cmp	r3, #0
 801413e:	f000 80e3 	beq.w	8014308 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	7d1b      	ldrb	r3, [r3, #20]
 8014146:	2b02      	cmp	r3, #2
 8014148:	d00c      	beq.n	8014164 <tcp_output+0x214>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801414c:	68dc      	ldr	r4, [r3, #12]
 801414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014150:	68db      	ldr	r3, [r3, #12]
 8014152:	899b      	ldrh	r3, [r3, #12]
 8014154:	b29d      	uxth	r5, r3
 8014156:	2010      	movs	r0, #16
 8014158:	f7f6 fd94 	bl	800ac84 <lwip_htons>
 801415c:	4603      	mov	r3, r0
 801415e:	432b      	orrs	r3, r5
 8014160:	b29b      	uxth	r3, r3
 8014162:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014164:	697a      	ldr	r2, [r7, #20]
 8014166:	6879      	ldr	r1, [r7, #4]
 8014168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801416a:	f000 f907 	bl	801437c <tcp_output_segment>
 801416e:	4603      	mov	r3, r0
 8014170:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d009      	beq.n	801418e <tcp_output+0x23e>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	8b5b      	ldrh	r3, [r3, #26]
 801417e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014182:	b29a      	uxth	r2, r3
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	835a      	strh	r2, [r3, #26]
      return err;
 8014188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801418c:	e0d1      	b.n	8014332 <tcp_output+0x3e2>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014190:	681a      	ldr	r2, [r3, #0]
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	7d1b      	ldrb	r3, [r3, #20]
 801419a:	2b02      	cmp	r3, #2
 801419c:	d006      	beq.n	80141ac <tcp_output+0x25c>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	8b5b      	ldrh	r3, [r3, #26]
 80141a2:	f023 0303 	bic.w	r3, r3, #3
 80141a6:	b29a      	uxth	r2, r3
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80141ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ae:	68db      	ldr	r3, [r3, #12]
 80141b0:	685b      	ldr	r3, [r3, #4]
 80141b2:	4618      	mov	r0, r3
 80141b4:	f7f6 fd7b 	bl	800acae <lwip_htonl>
 80141b8:	4604      	mov	r4, r0
 80141ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141bc:	891b      	ldrh	r3, [r3, #8]
 80141be:	461d      	mov	r5, r3
 80141c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c2:	68db      	ldr	r3, [r3, #12]
 80141c4:	899b      	ldrh	r3, [r3, #12]
 80141c6:	b29b      	uxth	r3, r3
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7f6 fd5b 	bl	800ac84 <lwip_htons>
 80141ce:	4603      	mov	r3, r0
 80141d0:	b2db      	uxtb	r3, r3
 80141d2:	f003 0303 	and.w	r3, r3, #3
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d00e      	beq.n	80141f8 <tcp_output+0x2a8>
 80141da:	2301      	movs	r3, #1
 80141dc:	e00d      	b.n	80141fa <tcp_output+0x2aa>
 80141de:	bf00      	nop
 80141e0:	0801a21c 	.word	0x0801a21c
 80141e4:	0801a760 	.word	0x0801a760
 80141e8:	0801a270 	.word	0x0801a270
 80141ec:	0801a778 	.word	0x0801a778
 80141f0:	2000e500 	.word	0x2000e500
 80141f4:	0801a7a0 	.word	0x0801a7a0
 80141f8:	2300      	movs	r3, #0
 80141fa:	442b      	add	r3, r5
 80141fc:	4423      	add	r3, r4
 80141fe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	1ad3      	subs	r3, r2, r3
 8014208:	2b00      	cmp	r3, #0
 801420a:	da02      	bge.n	8014212 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	68ba      	ldr	r2, [r7, #8]
 8014210:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014214:	891b      	ldrh	r3, [r3, #8]
 8014216:	461c      	mov	r4, r3
 8014218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801421a:	68db      	ldr	r3, [r3, #12]
 801421c:	899b      	ldrh	r3, [r3, #12]
 801421e:	b29b      	uxth	r3, r3
 8014220:	4618      	mov	r0, r3
 8014222:	f7f6 fd2f 	bl	800ac84 <lwip_htons>
 8014226:	4603      	mov	r3, r0
 8014228:	b2db      	uxtb	r3, r3
 801422a:	f003 0303 	and.w	r3, r3, #3
 801422e:	2b00      	cmp	r3, #0
 8014230:	d001      	beq.n	8014236 <tcp_output+0x2e6>
 8014232:	2301      	movs	r3, #1
 8014234:	e000      	b.n	8014238 <tcp_output+0x2e8>
 8014236:	2300      	movs	r3, #0
 8014238:	4423      	add	r3, r4
 801423a:	2b00      	cmp	r3, #0
 801423c:	d049      	beq.n	80142d2 <tcp_output+0x382>
      seg->next = NULL;
 801423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014240:	2200      	movs	r2, #0
 8014242:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014248:	2b00      	cmp	r3, #0
 801424a:	d105      	bne.n	8014258 <tcp_output+0x308>
        pcb->unacked = seg;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014250:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014254:	623b      	str	r3, [r7, #32]
 8014256:	e03f      	b.n	80142d8 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801425a:	68db      	ldr	r3, [r3, #12]
 801425c:	685b      	ldr	r3, [r3, #4]
 801425e:	4618      	mov	r0, r3
 8014260:	f7f6 fd25 	bl	800acae <lwip_htonl>
 8014264:	4604      	mov	r4, r0
 8014266:	6a3b      	ldr	r3, [r7, #32]
 8014268:	68db      	ldr	r3, [r3, #12]
 801426a:	685b      	ldr	r3, [r3, #4]
 801426c:	4618      	mov	r0, r3
 801426e:	f7f6 fd1e 	bl	800acae <lwip_htonl>
 8014272:	4603      	mov	r3, r0
 8014274:	1ae3      	subs	r3, r4, r3
 8014276:	2b00      	cmp	r3, #0
 8014278:	da24      	bge.n	80142c4 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	3370      	adds	r3, #112	; 0x70
 801427e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014280:	e002      	b.n	8014288 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014282:	69fb      	ldr	r3, [r7, #28]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014288:	69fb      	ldr	r3, [r7, #28]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d011      	beq.n	80142b4 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	68db      	ldr	r3, [r3, #12]
 8014296:	685b      	ldr	r3, [r3, #4]
 8014298:	4618      	mov	r0, r3
 801429a:	f7f6 fd08 	bl	800acae <lwip_htonl>
 801429e:	4604      	mov	r4, r0
 80142a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142a2:	68db      	ldr	r3, [r3, #12]
 80142a4:	685b      	ldr	r3, [r3, #4]
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7f6 fd01 	bl	800acae <lwip_htonl>
 80142ac:	4603      	mov	r3, r0
 80142ae:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	dbe6      	blt.n	8014282 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 80142b4:	69fb      	ldr	r3, [r7, #28]
 80142b6:	681a      	ldr	r2, [r3, #0]
 80142b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ba:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80142bc:	69fb      	ldr	r3, [r7, #28]
 80142be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142c0:	601a      	str	r2, [r3, #0]
 80142c2:	e009      	b.n	80142d8 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80142c4:	6a3b      	ldr	r3, [r7, #32]
 80142c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142c8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80142ca:	6a3b      	ldr	r3, [r7, #32]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	623b      	str	r3, [r7, #32]
 80142d0:	e002      	b.n	80142d8 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80142d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142d4:	f7fb ff14 	bl	8010100 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80142de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d012      	beq.n	801430a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80142e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e6:	68db      	ldr	r3, [r3, #12]
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	4618      	mov	r0, r3
 80142ec:	f7f6 fcdf 	bl	800acae <lwip_htonl>
 80142f0:	4602      	mov	r2, r0
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142f6:	1ad3      	subs	r3, r2, r3
 80142f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142fa:	8912      	ldrh	r2, [r2, #8]
 80142fc:	441a      	add	r2, r3
  while (seg != NULL &&
 80142fe:	69bb      	ldr	r3, [r7, #24]
 8014300:	429a      	cmp	r2, r3
 8014302:	f67f aeda 	bls.w	80140ba <tcp_output+0x16a>
 8014306:	e000      	b.n	801430a <tcp_output+0x3ba>
      break;
 8014308:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801430e:	2b00      	cmp	r3, #0
 8014310:	d107      	bne.n	8014322 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	2200      	movs	r2, #0
 8014316:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801431a:	e002      	b.n	8014322 <tcp_output+0x3d2>
    goto output_done;
 801431c:	bf00      	nop
 801431e:	e000      	b.n	8014322 <tcp_output+0x3d2>
    goto output_done;
 8014320:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	8b5b      	ldrh	r3, [r3, #26]
 8014326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801432a:	b29a      	uxth	r2, r3
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014330:	2300      	movs	r3, #0
}
 8014332:	4618      	mov	r0, r3
 8014334:	3728      	adds	r7, #40	; 0x28
 8014336:	46bd      	mov	sp, r7
 8014338:	bdb0      	pop	{r4, r5, r7, pc}
 801433a:	bf00      	nop

0801433c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b082      	sub	sp, #8
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d106      	bne.n	8014358 <tcp_output_segment_busy+0x1c>
 801434a:	4b09      	ldr	r3, [pc, #36]	; (8014370 <tcp_output_segment_busy+0x34>)
 801434c:	f240 529a 	movw	r2, #1434	; 0x59a
 8014350:	4908      	ldr	r1, [pc, #32]	; (8014374 <tcp_output_segment_busy+0x38>)
 8014352:	4809      	ldr	r0, [pc, #36]	; (8014378 <tcp_output_segment_busy+0x3c>)
 8014354:	f001 ff32 	bl	80161bc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	685b      	ldr	r3, [r3, #4]
 801435c:	7b9b      	ldrb	r3, [r3, #14]
 801435e:	2b01      	cmp	r3, #1
 8014360:	d001      	beq.n	8014366 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014362:	2301      	movs	r3, #1
 8014364:	e000      	b.n	8014368 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014366:	2300      	movs	r3, #0
}
 8014368:	4618      	mov	r0, r3
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}
 8014370:	0801a21c 	.word	0x0801a21c
 8014374:	0801a7b8 	.word	0x0801a7b8
 8014378:	0801a270 	.word	0x0801a270

0801437c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801437c:	b5b0      	push	{r4, r5, r7, lr}
 801437e:	b08c      	sub	sp, #48	; 0x30
 8014380:	af04      	add	r7, sp, #16
 8014382:	60f8      	str	r0, [r7, #12]
 8014384:	60b9      	str	r1, [r7, #8]
 8014386:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d106      	bne.n	801439c <tcp_output_segment+0x20>
 801438e:	4b66      	ldr	r3, [pc, #408]	; (8014528 <tcp_output_segment+0x1ac>)
 8014390:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014394:	4965      	ldr	r1, [pc, #404]	; (801452c <tcp_output_segment+0x1b0>)
 8014396:	4866      	ldr	r0, [pc, #408]	; (8014530 <tcp_output_segment+0x1b4>)
 8014398:	f001 ff10 	bl	80161bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801439c:	68bb      	ldr	r3, [r7, #8]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d106      	bne.n	80143b0 <tcp_output_segment+0x34>
 80143a2:	4b61      	ldr	r3, [pc, #388]	; (8014528 <tcp_output_segment+0x1ac>)
 80143a4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80143a8:	4962      	ldr	r1, [pc, #392]	; (8014534 <tcp_output_segment+0x1b8>)
 80143aa:	4861      	ldr	r0, [pc, #388]	; (8014530 <tcp_output_segment+0x1b4>)
 80143ac:	f001 ff06 	bl	80161bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d106      	bne.n	80143c4 <tcp_output_segment+0x48>
 80143b6:	4b5c      	ldr	r3, [pc, #368]	; (8014528 <tcp_output_segment+0x1ac>)
 80143b8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80143bc:	495e      	ldr	r1, [pc, #376]	; (8014538 <tcp_output_segment+0x1bc>)
 80143be:	485c      	ldr	r0, [pc, #368]	; (8014530 <tcp_output_segment+0x1b4>)
 80143c0:	f001 fefc 	bl	80161bc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80143c4:	68f8      	ldr	r0, [r7, #12]
 80143c6:	f7ff ffb9 	bl	801433c <tcp_output_segment_busy>
 80143ca:	4603      	mov	r3, r0
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d001      	beq.n	80143d4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80143d0:	2300      	movs	r3, #0
 80143d2:	e0a4      	b.n	801451e <tcp_output_segment+0x1a2>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	68dc      	ldr	r4, [r3, #12]
 80143d8:	68bb      	ldr	r3, [r7, #8]
 80143da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143dc:	4618      	mov	r0, r3
 80143de:	f7f6 fc66 	bl	800acae <lwip_htonl>
 80143e2:	4603      	mov	r3, r0
 80143e4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	68dc      	ldr	r4, [r3, #12]
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7f6 fc48 	bl	800ac84 <lwip_htons>
 80143f4:	4603      	mov	r3, r0
 80143f6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143fc:	68ba      	ldr	r2, [r7, #8]
 80143fe:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014400:	441a      	add	r2, r3
 8014402:	68bb      	ldr	r3, [r7, #8]
 8014404:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	68db      	ldr	r3, [r3, #12]
 801440a:	3314      	adds	r3, #20
 801440c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	7a9b      	ldrb	r3, [r3, #10]
 8014412:	f003 0301 	and.w	r3, r3, #1
 8014416:	2b00      	cmp	r3, #0
 8014418:	d015      	beq.n	8014446 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801441a:	68bb      	ldr	r3, [r7, #8]
 801441c:	3304      	adds	r3, #4
 801441e:	461a      	mov	r2, r3
 8014420:	6879      	ldr	r1, [r7, #4]
 8014422:	f44f 7006 	mov.w	r0, #536	; 0x218
 8014426:	f7fc fa2f 	bl	8010888 <tcp_eff_send_mss_netif>
 801442a:	4603      	mov	r3, r0
 801442c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801442e:	8b7b      	ldrh	r3, [r7, #26]
 8014430:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014434:	4618      	mov	r0, r3
 8014436:	f7f6 fc3a 	bl	800acae <lwip_htonl>
 801443a:	4602      	mov	r2, r0
 801443c:	69fb      	ldr	r3, [r7, #28]
 801443e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014440:	69fb      	ldr	r3, [r7, #28]
 8014442:	3304      	adds	r3, #4
 8014444:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801444c:	2b00      	cmp	r3, #0
 801444e:	da02      	bge.n	8014456 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014450:	68bb      	ldr	r3, [r7, #8]
 8014452:	2200      	movs	r2, #0
 8014454:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801445a:	2b00      	cmp	r3, #0
 801445c:	d10c      	bne.n	8014478 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801445e:	4b37      	ldr	r3, [pc, #220]	; (801453c <tcp_output_segment+0x1c0>)
 8014460:	681a      	ldr	r2, [r3, #0]
 8014462:	68bb      	ldr	r3, [r7, #8]
 8014464:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	68db      	ldr	r3, [r3, #12]
 801446a:	685b      	ldr	r3, [r3, #4]
 801446c:	4618      	mov	r0, r3
 801446e:	f7f6 fc1e 	bl	800acae <lwip_htonl>
 8014472:	4602      	mov	r2, r0
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	68db      	ldr	r3, [r3, #12]
 801447c:	461a      	mov	r2, r3
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	685b      	ldr	r3, [r3, #4]
 8014482:	685b      	ldr	r3, [r3, #4]
 8014484:	1ad3      	subs	r3, r2, r3
 8014486:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	685b      	ldr	r3, [r3, #4]
 801448c:	68fa      	ldr	r2, [r7, #12]
 801448e:	6852      	ldr	r2, [r2, #4]
 8014490:	8951      	ldrh	r1, [r2, #10]
 8014492:	8b3a      	ldrh	r2, [r7, #24]
 8014494:	1a8a      	subs	r2, r1, r2
 8014496:	b292      	uxth	r2, r2
 8014498:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	685b      	ldr	r3, [r3, #4]
 801449e:	68fa      	ldr	r2, [r7, #12]
 80144a0:	6852      	ldr	r2, [r2, #4]
 80144a2:	8911      	ldrh	r1, [r2, #8]
 80144a4:	8b3a      	ldrh	r2, [r7, #24]
 80144a6:	1a8a      	subs	r2, r1, r2
 80144a8:	b292      	uxth	r2, r2
 80144aa:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	685b      	ldr	r3, [r3, #4]
 80144b0:	68fa      	ldr	r2, [r7, #12]
 80144b2:	68d2      	ldr	r2, [r2, #12]
 80144b4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	68db      	ldr	r3, [r3, #12]
 80144ba:	2200      	movs	r2, #0
 80144bc:	741a      	strb	r2, [r3, #16]
 80144be:	2200      	movs	r2, #0
 80144c0:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	68db      	ldr	r3, [r3, #12]
 80144c6:	f103 0214 	add.w	r2, r3, #20
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	7a9b      	ldrb	r3, [r3, #10]
 80144ce:	f003 0301 	and.w	r3, r3, #1
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d001      	beq.n	80144da <tcp_output_segment+0x15e>
 80144d6:	2304      	movs	r3, #4
 80144d8:	e000      	b.n	80144dc <tcp_output_segment+0x160>
 80144da:	2300      	movs	r3, #0
 80144dc:	441a      	add	r2, r3
 80144de:	69fb      	ldr	r3, [r7, #28]
 80144e0:	429a      	cmp	r2, r3
 80144e2:	d006      	beq.n	80144f2 <tcp_output_segment+0x176>
 80144e4:	4b10      	ldr	r3, [pc, #64]	; (8014528 <tcp_output_segment+0x1ac>)
 80144e6:	f240 621c 	movw	r2, #1564	; 0x61c
 80144ea:	4915      	ldr	r1, [pc, #84]	; (8014540 <tcp_output_segment+0x1c4>)
 80144ec:	4810      	ldr	r0, [pc, #64]	; (8014530 <tcp_output_segment+0x1b4>)
 80144ee:	f001 fe65 	bl	80161bc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	6858      	ldr	r0, [r3, #4]
 80144f6:	68b9      	ldr	r1, [r7, #8]
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	1d1c      	adds	r4, r3, #4
 80144fc:	68bb      	ldr	r3, [r7, #8]
 80144fe:	7add      	ldrb	r5, [r3, #11]
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	7a9b      	ldrb	r3, [r3, #10]
 8014504:	687a      	ldr	r2, [r7, #4]
 8014506:	9202      	str	r2, [sp, #8]
 8014508:	2206      	movs	r2, #6
 801450a:	9201      	str	r2, [sp, #4]
 801450c:	9300      	str	r3, [sp, #0]
 801450e:	462b      	mov	r3, r5
 8014510:	4622      	mov	r2, r4
 8014512:	f7f7 fe8d 	bl	800c230 <ip4_output_if>
 8014516:	4603      	mov	r3, r0
 8014518:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801451a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801451e:	4618      	mov	r0, r3
 8014520:	3720      	adds	r7, #32
 8014522:	46bd      	mov	sp, r7
 8014524:	bdb0      	pop	{r4, r5, r7, pc}
 8014526:	bf00      	nop
 8014528:	0801a21c 	.word	0x0801a21c
 801452c:	0801a7e0 	.word	0x0801a7e0
 8014530:	0801a270 	.word	0x0801a270
 8014534:	0801a800 	.word	0x0801a800
 8014538:	0801a820 	.word	0x0801a820
 801453c:	2000e4f0 	.word	0x2000e4f0
 8014540:	0801a844 	.word	0x0801a844

08014544 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014544:	b5b0      	push	{r4, r5, r7, lr}
 8014546:	b084      	sub	sp, #16
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d106      	bne.n	8014560 <tcp_rexmit_rto_prepare+0x1c>
 8014552:	4b31      	ldr	r3, [pc, #196]	; (8014618 <tcp_rexmit_rto_prepare+0xd4>)
 8014554:	f240 6263 	movw	r2, #1635	; 0x663
 8014558:	4930      	ldr	r1, [pc, #192]	; (801461c <tcp_rexmit_rto_prepare+0xd8>)
 801455a:	4831      	ldr	r0, [pc, #196]	; (8014620 <tcp_rexmit_rto_prepare+0xdc>)
 801455c:	f001 fe2e 	bl	80161bc <iprintf>

  if (pcb->unacked == NULL) {
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014564:	2b00      	cmp	r3, #0
 8014566:	d102      	bne.n	801456e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014568:	f06f 0305 	mvn.w	r3, #5
 801456c:	e050      	b.n	8014610 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014572:	60fb      	str	r3, [r7, #12]
 8014574:	e00b      	b.n	801458e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014576:	68f8      	ldr	r0, [r7, #12]
 8014578:	f7ff fee0 	bl	801433c <tcp_output_segment_busy>
 801457c:	4603      	mov	r3, r0
 801457e:	2b00      	cmp	r3, #0
 8014580:	d002      	beq.n	8014588 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014582:	f06f 0305 	mvn.w	r3, #5
 8014586:	e043      	b.n	8014610 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	60fb      	str	r3, [r7, #12]
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d1ef      	bne.n	8014576 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014596:	68f8      	ldr	r0, [r7, #12]
 8014598:	f7ff fed0 	bl	801433c <tcp_output_segment_busy>
 801459c:	4603      	mov	r3, r0
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d002      	beq.n	80145a8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80145a2:	f06f 0305 	mvn.w	r3, #5
 80145a6:	e033      	b.n	8014610 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	2200      	movs	r2, #0
 80145bc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	8b5b      	ldrh	r3, [r3, #26]
 80145c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80145c6:	b29a      	uxth	r2, r3
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	68db      	ldr	r3, [r3, #12]
 80145d0:	685b      	ldr	r3, [r3, #4]
 80145d2:	4618      	mov	r0, r3
 80145d4:	f7f6 fb6b 	bl	800acae <lwip_htonl>
 80145d8:	4604      	mov	r4, r0
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	891b      	ldrh	r3, [r3, #8]
 80145de:	461d      	mov	r5, r3
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	68db      	ldr	r3, [r3, #12]
 80145e4:	899b      	ldrh	r3, [r3, #12]
 80145e6:	b29b      	uxth	r3, r3
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7f6 fb4b 	bl	800ac84 <lwip_htons>
 80145ee:	4603      	mov	r3, r0
 80145f0:	b2db      	uxtb	r3, r3
 80145f2:	f003 0303 	and.w	r3, r3, #3
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d001      	beq.n	80145fe <tcp_rexmit_rto_prepare+0xba>
 80145fa:	2301      	movs	r3, #1
 80145fc:	e000      	b.n	8014600 <tcp_rexmit_rto_prepare+0xbc>
 80145fe:	2300      	movs	r3, #0
 8014600:	442b      	add	r3, r5
 8014602:	18e2      	adds	r2, r4, r3
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2200      	movs	r2, #0
 801460c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801460e:	2300      	movs	r3, #0
}
 8014610:	4618      	mov	r0, r3
 8014612:	3710      	adds	r7, #16
 8014614:	46bd      	mov	sp, r7
 8014616:	bdb0      	pop	{r4, r5, r7, pc}
 8014618:	0801a21c 	.word	0x0801a21c
 801461c:	0801a858 	.word	0x0801a858
 8014620:	0801a270 	.word	0x0801a270

08014624 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d106      	bne.n	8014640 <tcp_rexmit_rto_commit+0x1c>
 8014632:	4b0d      	ldr	r3, [pc, #52]	; (8014668 <tcp_rexmit_rto_commit+0x44>)
 8014634:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014638:	490c      	ldr	r1, [pc, #48]	; (801466c <tcp_rexmit_rto_commit+0x48>)
 801463a:	480d      	ldr	r0, [pc, #52]	; (8014670 <tcp_rexmit_rto_commit+0x4c>)
 801463c:	f001 fdbe 	bl	80161bc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014646:	2bff      	cmp	r3, #255	; 0xff
 8014648:	d007      	beq.n	801465a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014650:	3301      	adds	r3, #1
 8014652:	b2da      	uxtb	r2, r3
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f7ff fc78 	bl	8013f50 <tcp_output>
}
 8014660:	bf00      	nop
 8014662:	3708      	adds	r7, #8
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}
 8014668:	0801a21c 	.word	0x0801a21c
 801466c:	0801a87c 	.word	0x0801a87c
 8014670:	0801a270 	.word	0x0801a270

08014674 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b082      	sub	sp, #8
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d106      	bne.n	8014690 <tcp_rexmit_rto+0x1c>
 8014682:	4b0a      	ldr	r3, [pc, #40]	; (80146ac <tcp_rexmit_rto+0x38>)
 8014684:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014688:	4909      	ldr	r1, [pc, #36]	; (80146b0 <tcp_rexmit_rto+0x3c>)
 801468a:	480a      	ldr	r0, [pc, #40]	; (80146b4 <tcp_rexmit_rto+0x40>)
 801468c:	f001 fd96 	bl	80161bc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f7ff ff57 	bl	8014544 <tcp_rexmit_rto_prepare>
 8014696:	4603      	mov	r3, r0
 8014698:	2b00      	cmp	r3, #0
 801469a:	d102      	bne.n	80146a2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f7ff ffc1 	bl	8014624 <tcp_rexmit_rto_commit>
  }
}
 80146a2:	bf00      	nop
 80146a4:	3708      	adds	r7, #8
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	bf00      	nop
 80146ac:	0801a21c 	.word	0x0801a21c
 80146b0:	0801a8a0 	.word	0x0801a8a0
 80146b4:	0801a270 	.word	0x0801a270

080146b8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80146b8:	b590      	push	{r4, r7, lr}
 80146ba:	b085      	sub	sp, #20
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d106      	bne.n	80146d4 <tcp_rexmit+0x1c>
 80146c6:	4b2f      	ldr	r3, [pc, #188]	; (8014784 <tcp_rexmit+0xcc>)
 80146c8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80146cc:	492e      	ldr	r1, [pc, #184]	; (8014788 <tcp_rexmit+0xd0>)
 80146ce:	482f      	ldr	r0, [pc, #188]	; (801478c <tcp_rexmit+0xd4>)
 80146d0:	f001 fd74 	bl	80161bc <iprintf>

  if (pcb->unacked == NULL) {
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d102      	bne.n	80146e2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80146dc:	f06f 0305 	mvn.w	r3, #5
 80146e0:	e04c      	b.n	801477c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146e6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80146e8:	68b8      	ldr	r0, [r7, #8]
 80146ea:	f7ff fe27 	bl	801433c <tcp_output_segment_busy>
 80146ee:	4603      	mov	r3, r0
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d002      	beq.n	80146fa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80146f4:	f06f 0305 	mvn.w	r3, #5
 80146f8:	e040      	b.n	801477c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	681a      	ldr	r2, [r3, #0]
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	336c      	adds	r3, #108	; 0x6c
 8014706:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014708:	e002      	b.n	8014710 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d011      	beq.n	801473c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	68db      	ldr	r3, [r3, #12]
 801471e:	685b      	ldr	r3, [r3, #4]
 8014720:	4618      	mov	r0, r3
 8014722:	f7f6 fac4 	bl	800acae <lwip_htonl>
 8014726:	4604      	mov	r4, r0
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	68db      	ldr	r3, [r3, #12]
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	4618      	mov	r0, r3
 8014730:	f7f6 fabd 	bl	800acae <lwip_htonl>
 8014734:	4603      	mov	r3, r0
 8014736:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014738:	2b00      	cmp	r3, #0
 801473a:	dbe6      	blt.n	801470a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	681a      	ldr	r2, [r3, #0]
 8014740:	68bb      	ldr	r3, [r7, #8]
 8014742:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	68ba      	ldr	r2, [r7, #8]
 8014748:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d103      	bne.n	801475a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	2200      	movs	r2, #0
 8014756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014760:	2bff      	cmp	r3, #255	; 0xff
 8014762:	d007      	beq.n	8014774 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801476a:	3301      	adds	r3, #1
 801476c:	b2da      	uxtb	r2, r3
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2200      	movs	r2, #0
 8014778:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801477a:	2300      	movs	r3, #0
}
 801477c:	4618      	mov	r0, r3
 801477e:	3714      	adds	r7, #20
 8014780:	46bd      	mov	sp, r7
 8014782:	bd90      	pop	{r4, r7, pc}
 8014784:	0801a21c 	.word	0x0801a21c
 8014788:	0801a8bc 	.word	0x0801a8bc
 801478c:	0801a270 	.word	0x0801a270

08014790 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b082      	sub	sp, #8
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d106      	bne.n	80147ac <tcp_rexmit_fast+0x1c>
 801479e:	4b2f      	ldr	r3, [pc, #188]	; (801485c <tcp_rexmit_fast+0xcc>)
 80147a0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80147a4:	492e      	ldr	r1, [pc, #184]	; (8014860 <tcp_rexmit_fast+0xd0>)
 80147a6:	482f      	ldr	r0, [pc, #188]	; (8014864 <tcp_rexmit_fast+0xd4>)
 80147a8:	f001 fd08 	bl	80161bc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d04f      	beq.n	8014854 <tcp_rexmit_fast+0xc4>
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	8b5b      	ldrh	r3, [r3, #26]
 80147b8:	f003 0304 	and.w	r3, r3, #4
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d149      	bne.n	8014854 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f7ff ff79 	bl	80146b8 <tcp_rexmit>
 80147c6:	4603      	mov	r3, r0
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d143      	bne.n	8014854 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80147d8:	429a      	cmp	r2, r3
 80147da:	d208      	bcs.n	80147ee <tcp_rexmit_fast+0x5e>
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	da00      	bge.n	80147e8 <tcp_rexmit_fast+0x58>
 80147e6:	3301      	adds	r3, #1
 80147e8:	105b      	asrs	r3, r3, #1
 80147ea:	b29b      	uxth	r3, r3
 80147ec:	e007      	b.n	80147fe <tcp_rexmit_fast+0x6e>
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	da00      	bge.n	80147fa <tcp_rexmit_fast+0x6a>
 80147f8:	3301      	adds	r3, #1
 80147fa:	105b      	asrs	r3, r3, #1
 80147fc:	b29b      	uxth	r3, r3
 80147fe:	687a      	ldr	r2, [r7, #4]
 8014800:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801480a:	461a      	mov	r2, r3
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014810:	005b      	lsls	r3, r3, #1
 8014812:	429a      	cmp	r2, r3
 8014814:	d206      	bcs.n	8014824 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801481a:	005b      	lsls	r3, r3, #1
 801481c:	b29a      	uxth	r2, r3
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801482e:	4619      	mov	r1, r3
 8014830:	0049      	lsls	r1, r1, #1
 8014832:	440b      	add	r3, r1
 8014834:	b29b      	uxth	r3, r3
 8014836:	4413      	add	r3, r2
 8014838:	b29a      	uxth	r2, r3
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	8b5b      	ldrh	r3, [r3, #26]
 8014844:	f043 0304 	orr.w	r3, r3, #4
 8014848:	b29a      	uxth	r2, r3
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2200      	movs	r2, #0
 8014852:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014854:	bf00      	nop
 8014856:	3708      	adds	r7, #8
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}
 801485c:	0801a21c 	.word	0x0801a21c
 8014860:	0801a8d4 	.word	0x0801a8d4
 8014864:	0801a270 	.word	0x0801a270

08014868 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b086      	sub	sp, #24
 801486c:	af00      	add	r7, sp, #0
 801486e:	60f8      	str	r0, [r7, #12]
 8014870:	607b      	str	r3, [r7, #4]
 8014872:	460b      	mov	r3, r1
 8014874:	817b      	strh	r3, [r7, #10]
 8014876:	4613      	mov	r3, r2
 8014878:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801487a:	897a      	ldrh	r2, [r7, #10]
 801487c:	893b      	ldrh	r3, [r7, #8]
 801487e:	4413      	add	r3, r2
 8014880:	b29b      	uxth	r3, r3
 8014882:	3314      	adds	r3, #20
 8014884:	b29b      	uxth	r3, r3
 8014886:	f44f 7220 	mov.w	r2, #640	; 0x280
 801488a:	4619      	mov	r1, r3
 801488c:	2022      	movs	r0, #34	; 0x22
 801488e:	f7f9 fc9b 	bl	800e1c8 <pbuf_alloc>
 8014892:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d04e      	beq.n	8014938 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801489a:	697b      	ldr	r3, [r7, #20]
 801489c:	895b      	ldrh	r3, [r3, #10]
 801489e:	461a      	mov	r2, r3
 80148a0:	897b      	ldrh	r3, [r7, #10]
 80148a2:	3314      	adds	r3, #20
 80148a4:	429a      	cmp	r2, r3
 80148a6:	da06      	bge.n	80148b6 <tcp_output_alloc_header_common+0x4e>
 80148a8:	4b26      	ldr	r3, [pc, #152]	; (8014944 <tcp_output_alloc_header_common+0xdc>)
 80148aa:	f240 7224 	movw	r2, #1828	; 0x724
 80148ae:	4926      	ldr	r1, [pc, #152]	; (8014948 <tcp_output_alloc_header_common+0xe0>)
 80148b0:	4826      	ldr	r0, [pc, #152]	; (801494c <tcp_output_alloc_header_common+0xe4>)
 80148b2:	f001 fc83 	bl	80161bc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80148b6:	697b      	ldr	r3, [r7, #20]
 80148b8:	685b      	ldr	r3, [r3, #4]
 80148ba:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80148bc:	8c3b      	ldrh	r3, [r7, #32]
 80148be:	4618      	mov	r0, r3
 80148c0:	f7f6 f9e0 	bl	800ac84 <lwip_htons>
 80148c4:	4603      	mov	r3, r0
 80148c6:	461a      	mov	r2, r3
 80148c8:	693b      	ldr	r3, [r7, #16]
 80148ca:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80148cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148ce:	4618      	mov	r0, r3
 80148d0:	f7f6 f9d8 	bl	800ac84 <lwip_htons>
 80148d4:	4603      	mov	r3, r0
 80148d6:	461a      	mov	r2, r3
 80148d8:	693b      	ldr	r3, [r7, #16]
 80148da:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80148dc:	693b      	ldr	r3, [r7, #16]
 80148de:	687a      	ldr	r2, [r7, #4]
 80148e0:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80148e2:	68f8      	ldr	r0, [r7, #12]
 80148e4:	f7f6 f9e3 	bl	800acae <lwip_htonl>
 80148e8:	4602      	mov	r2, r0
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80148ee:	897b      	ldrh	r3, [r7, #10]
 80148f0:	089b      	lsrs	r3, r3, #2
 80148f2:	b29b      	uxth	r3, r3
 80148f4:	3305      	adds	r3, #5
 80148f6:	b29b      	uxth	r3, r3
 80148f8:	031b      	lsls	r3, r3, #12
 80148fa:	b29a      	uxth	r2, r3
 80148fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014900:	b29b      	uxth	r3, r3
 8014902:	4313      	orrs	r3, r2
 8014904:	b29b      	uxth	r3, r3
 8014906:	4618      	mov	r0, r3
 8014908:	f7f6 f9bc 	bl	800ac84 <lwip_htons>
 801490c:	4603      	mov	r3, r0
 801490e:	461a      	mov	r2, r3
 8014910:	693b      	ldr	r3, [r7, #16]
 8014912:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014914:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014916:	4618      	mov	r0, r3
 8014918:	f7f6 f9b4 	bl	800ac84 <lwip_htons>
 801491c:	4603      	mov	r3, r0
 801491e:	461a      	mov	r2, r3
 8014920:	693b      	ldr	r3, [r7, #16]
 8014922:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014924:	693b      	ldr	r3, [r7, #16]
 8014926:	2200      	movs	r2, #0
 8014928:	741a      	strb	r2, [r3, #16]
 801492a:	2200      	movs	r2, #0
 801492c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	2200      	movs	r2, #0
 8014932:	749a      	strb	r2, [r3, #18]
 8014934:	2200      	movs	r2, #0
 8014936:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014938:	697b      	ldr	r3, [r7, #20]
}
 801493a:	4618      	mov	r0, r3
 801493c:	3718      	adds	r7, #24
 801493e:	46bd      	mov	sp, r7
 8014940:	bd80      	pop	{r7, pc}
 8014942:	bf00      	nop
 8014944:	0801a21c 	.word	0x0801a21c
 8014948:	0801a8f4 	.word	0x0801a8f4
 801494c:	0801a270 	.word	0x0801a270

08014950 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014950:	b5b0      	push	{r4, r5, r7, lr}
 8014952:	b08a      	sub	sp, #40	; 0x28
 8014954:	af04      	add	r7, sp, #16
 8014956:	60f8      	str	r0, [r7, #12]
 8014958:	607b      	str	r3, [r7, #4]
 801495a:	460b      	mov	r3, r1
 801495c:	817b      	strh	r3, [r7, #10]
 801495e:	4613      	mov	r3, r2
 8014960:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d106      	bne.n	8014976 <tcp_output_alloc_header+0x26>
 8014968:	4b15      	ldr	r3, [pc, #84]	; (80149c0 <tcp_output_alloc_header+0x70>)
 801496a:	f240 7242 	movw	r2, #1858	; 0x742
 801496e:	4915      	ldr	r1, [pc, #84]	; (80149c4 <tcp_output_alloc_header+0x74>)
 8014970:	4815      	ldr	r0, [pc, #84]	; (80149c8 <tcp_output_alloc_header+0x78>)
 8014972:	f001 fc23 	bl	80161bc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	8adb      	ldrh	r3, [r3, #22]
 801497e:	68fa      	ldr	r2, [r7, #12]
 8014980:	8b12      	ldrh	r2, [r2, #24]
 8014982:	68f9      	ldr	r1, [r7, #12]
 8014984:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014986:	893d      	ldrh	r5, [r7, #8]
 8014988:	897c      	ldrh	r4, [r7, #10]
 801498a:	9103      	str	r1, [sp, #12]
 801498c:	2110      	movs	r1, #16
 801498e:	9102      	str	r1, [sp, #8]
 8014990:	9201      	str	r2, [sp, #4]
 8014992:	9300      	str	r3, [sp, #0]
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	462a      	mov	r2, r5
 8014998:	4621      	mov	r1, r4
 801499a:	f7ff ff65 	bl	8014868 <tcp_output_alloc_header_common>
 801499e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80149a0:	697b      	ldr	r3, [r7, #20]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d006      	beq.n	80149b4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149aa:	68fa      	ldr	r2, [r7, #12]
 80149ac:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80149ae:	441a      	add	r2, r3
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80149b4:	697b      	ldr	r3, [r7, #20]
}
 80149b6:	4618      	mov	r0, r3
 80149b8:	3718      	adds	r7, #24
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bdb0      	pop	{r4, r5, r7, pc}
 80149be:	bf00      	nop
 80149c0:	0801a21c 	.word	0x0801a21c
 80149c4:	0801a924 	.word	0x0801a924
 80149c8:	0801a270 	.word	0x0801a270

080149cc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b088      	sub	sp, #32
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	60f8      	str	r0, [r7, #12]
 80149d4:	60b9      	str	r1, [r7, #8]
 80149d6:	4611      	mov	r1, r2
 80149d8:	461a      	mov	r2, r3
 80149da:	460b      	mov	r3, r1
 80149dc:	71fb      	strb	r3, [r7, #7]
 80149de:	4613      	mov	r3, r2
 80149e0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80149e2:	2300      	movs	r3, #0
 80149e4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d106      	bne.n	80149fa <tcp_output_fill_options+0x2e>
 80149ec:	4b15      	ldr	r3, [pc, #84]	; (8014a44 <tcp_output_fill_options+0x78>)
 80149ee:	f240 7256 	movw	r2, #1878	; 0x756
 80149f2:	4915      	ldr	r1, [pc, #84]	; (8014a48 <tcp_output_fill_options+0x7c>)
 80149f4:	4815      	ldr	r0, [pc, #84]	; (8014a4c <tcp_output_fill_options+0x80>)
 80149f6:	f001 fbe1 	bl	80161bc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80149fa:	68bb      	ldr	r3, [r7, #8]
 80149fc:	685b      	ldr	r3, [r3, #4]
 80149fe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014a00:	69bb      	ldr	r3, [r7, #24]
 8014a02:	3314      	adds	r3, #20
 8014a04:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014a06:	69bb      	ldr	r3, [r7, #24]
 8014a08:	f103 0214 	add.w	r2, r3, #20
 8014a0c:	8bfb      	ldrh	r3, [r7, #30]
 8014a0e:	009b      	lsls	r3, r3, #2
 8014a10:	4619      	mov	r1, r3
 8014a12:	79fb      	ldrb	r3, [r7, #7]
 8014a14:	f003 0301 	and.w	r3, r3, #1
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d001      	beq.n	8014a20 <tcp_output_fill_options+0x54>
 8014a1c:	2304      	movs	r3, #4
 8014a1e:	e000      	b.n	8014a22 <tcp_output_fill_options+0x56>
 8014a20:	2300      	movs	r3, #0
 8014a22:	440b      	add	r3, r1
 8014a24:	441a      	add	r2, r3
 8014a26:	697b      	ldr	r3, [r7, #20]
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	d006      	beq.n	8014a3a <tcp_output_fill_options+0x6e>
 8014a2c:	4b05      	ldr	r3, [pc, #20]	; (8014a44 <tcp_output_fill_options+0x78>)
 8014a2e:	f240 7275 	movw	r2, #1909	; 0x775
 8014a32:	4907      	ldr	r1, [pc, #28]	; (8014a50 <tcp_output_fill_options+0x84>)
 8014a34:	4805      	ldr	r0, [pc, #20]	; (8014a4c <tcp_output_fill_options+0x80>)
 8014a36:	f001 fbc1 	bl	80161bc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014a3a:	bf00      	nop
 8014a3c:	3720      	adds	r7, #32
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}
 8014a42:	bf00      	nop
 8014a44:	0801a21c 	.word	0x0801a21c
 8014a48:	0801a94c 	.word	0x0801a94c
 8014a4c:	0801a270 	.word	0x0801a270
 8014a50:	0801a844 	.word	0x0801a844

08014a54 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b08a      	sub	sp, #40	; 0x28
 8014a58:	af04      	add	r7, sp, #16
 8014a5a:	60f8      	str	r0, [r7, #12]
 8014a5c:	60b9      	str	r1, [r7, #8]
 8014a5e:	607a      	str	r2, [r7, #4]
 8014a60:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d106      	bne.n	8014a76 <tcp_output_control_segment+0x22>
 8014a68:	4b1c      	ldr	r3, [pc, #112]	; (8014adc <tcp_output_control_segment+0x88>)
 8014a6a:	f240 7287 	movw	r2, #1927	; 0x787
 8014a6e:	491c      	ldr	r1, [pc, #112]	; (8014ae0 <tcp_output_control_segment+0x8c>)
 8014a70:	481c      	ldr	r0, [pc, #112]	; (8014ae4 <tcp_output_control_segment+0x90>)
 8014a72:	f001 fba3 	bl	80161bc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014a76:	683a      	ldr	r2, [r7, #0]
 8014a78:	6879      	ldr	r1, [r7, #4]
 8014a7a:	68f8      	ldr	r0, [r7, #12]
 8014a7c:	f7fe fac8 	bl	8013010 <tcp_route>
 8014a80:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014a82:	693b      	ldr	r3, [r7, #16]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d102      	bne.n	8014a8e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014a88:	23fc      	movs	r3, #252	; 0xfc
 8014a8a:	75fb      	strb	r3, [r7, #23]
 8014a8c:	e01c      	b.n	8014ac8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d006      	beq.n	8014aa2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	7adb      	ldrb	r3, [r3, #11]
 8014a98:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	7a9b      	ldrb	r3, [r3, #10]
 8014a9e:	757b      	strb	r3, [r7, #21]
 8014aa0:	e003      	b.n	8014aaa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014aa2:	23ff      	movs	r3, #255	; 0xff
 8014aa4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014aaa:	7dba      	ldrb	r2, [r7, #22]
 8014aac:	693b      	ldr	r3, [r7, #16]
 8014aae:	9302      	str	r3, [sp, #8]
 8014ab0:	2306      	movs	r3, #6
 8014ab2:	9301      	str	r3, [sp, #4]
 8014ab4:	7d7b      	ldrb	r3, [r7, #21]
 8014ab6:	9300      	str	r3, [sp, #0]
 8014ab8:	4613      	mov	r3, r2
 8014aba:	683a      	ldr	r2, [r7, #0]
 8014abc:	6879      	ldr	r1, [r7, #4]
 8014abe:	68b8      	ldr	r0, [r7, #8]
 8014ac0:	f7f7 fbb6 	bl	800c230 <ip4_output_if>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014ac8:	68b8      	ldr	r0, [r7, #8]
 8014aca:	f7f9 fe91 	bl	800e7f0 <pbuf_free>
  return err;
 8014ace:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	3718      	adds	r7, #24
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}
 8014ada:	bf00      	nop
 8014adc:	0801a21c 	.word	0x0801a21c
 8014ae0:	0801a974 	.word	0x0801a974
 8014ae4:	0801a270 	.word	0x0801a270

08014ae8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014ae8:	b590      	push	{r4, r7, lr}
 8014aea:	b08b      	sub	sp, #44	; 0x2c
 8014aec:	af04      	add	r7, sp, #16
 8014aee:	60f8      	str	r0, [r7, #12]
 8014af0:	60b9      	str	r1, [r7, #8]
 8014af2:	607a      	str	r2, [r7, #4]
 8014af4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d106      	bne.n	8014b0a <tcp_rst+0x22>
 8014afc:	4b1f      	ldr	r3, [pc, #124]	; (8014b7c <tcp_rst+0x94>)
 8014afe:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014b02:	491f      	ldr	r1, [pc, #124]	; (8014b80 <tcp_rst+0x98>)
 8014b04:	481f      	ldr	r0, [pc, #124]	; (8014b84 <tcp_rst+0x9c>)
 8014b06:	f001 fb59 	bl	80161bc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d106      	bne.n	8014b1e <tcp_rst+0x36>
 8014b10:	4b1a      	ldr	r3, [pc, #104]	; (8014b7c <tcp_rst+0x94>)
 8014b12:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014b16:	491c      	ldr	r1, [pc, #112]	; (8014b88 <tcp_rst+0xa0>)
 8014b18:	481a      	ldr	r0, [pc, #104]	; (8014b84 <tcp_rst+0x9c>)
 8014b1a:	f001 fb4f 	bl	80161bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014b1e:	2300      	movs	r3, #0
 8014b20:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014b22:	f246 0308 	movw	r3, #24584	; 0x6008
 8014b26:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014b28:	7dfb      	ldrb	r3, [r7, #23]
 8014b2a:	b29c      	uxth	r4, r3
 8014b2c:	68b8      	ldr	r0, [r7, #8]
 8014b2e:	f7f6 f8be 	bl	800acae <lwip_htonl>
 8014b32:	4602      	mov	r2, r0
 8014b34:	8abb      	ldrh	r3, [r7, #20]
 8014b36:	9303      	str	r3, [sp, #12]
 8014b38:	2314      	movs	r3, #20
 8014b3a:	9302      	str	r3, [sp, #8]
 8014b3c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014b3e:	9301      	str	r3, [sp, #4]
 8014b40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014b42:	9300      	str	r3, [sp, #0]
 8014b44:	4613      	mov	r3, r2
 8014b46:	2200      	movs	r2, #0
 8014b48:	4621      	mov	r1, r4
 8014b4a:	6878      	ldr	r0, [r7, #4]
 8014b4c:	f7ff fe8c 	bl	8014868 <tcp_output_alloc_header_common>
 8014b50:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014b52:	693b      	ldr	r3, [r7, #16]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d00c      	beq.n	8014b72 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014b58:	7dfb      	ldrb	r3, [r7, #23]
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	6939      	ldr	r1, [r7, #16]
 8014b5e:	68f8      	ldr	r0, [r7, #12]
 8014b60:	f7ff ff34 	bl	80149cc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b66:	683a      	ldr	r2, [r7, #0]
 8014b68:	6939      	ldr	r1, [r7, #16]
 8014b6a:	68f8      	ldr	r0, [r7, #12]
 8014b6c:	f7ff ff72 	bl	8014a54 <tcp_output_control_segment>
 8014b70:	e000      	b.n	8014b74 <tcp_rst+0x8c>
    return;
 8014b72:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014b74:	371c      	adds	r7, #28
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd90      	pop	{r4, r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	0801a21c 	.word	0x0801a21c
 8014b80:	0801a9a0 	.word	0x0801a9a0
 8014b84:	0801a270 	.word	0x0801a270
 8014b88:	0801a9bc 	.word	0x0801a9bc

08014b8c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014b8c:	b590      	push	{r4, r7, lr}
 8014b8e:	b087      	sub	sp, #28
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014b94:	2300      	movs	r3, #0
 8014b96:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014b98:	2300      	movs	r3, #0
 8014b9a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d106      	bne.n	8014bb0 <tcp_send_empty_ack+0x24>
 8014ba2:	4b29      	ldr	r3, [pc, #164]	; (8014c48 <tcp_send_empty_ack+0xbc>)
 8014ba4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014ba8:	4928      	ldr	r1, [pc, #160]	; (8014c4c <tcp_send_empty_ack+0xc0>)
 8014baa:	4829      	ldr	r0, [pc, #164]	; (8014c50 <tcp_send_empty_ack+0xc4>)
 8014bac:	f001 fb06 	bl	80161bc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014bb0:	7dfb      	ldrb	r3, [r7, #23]
 8014bb2:	f003 0301 	and.w	r3, r3, #1
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d001      	beq.n	8014bbe <tcp_send_empty_ack+0x32>
 8014bba:	2304      	movs	r3, #4
 8014bbc:	e000      	b.n	8014bc0 <tcp_send_empty_ack+0x34>
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014bc2:	7d7b      	ldrb	r3, [r7, #21]
 8014bc4:	b29c      	uxth	r4, r3
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7f6 f86f 	bl	800acae <lwip_htonl>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	4621      	mov	r1, r4
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	f7ff feba 	bl	8014950 <tcp_output_alloc_header>
 8014bdc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014bde:	693b      	ldr	r3, [r7, #16]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d109      	bne.n	8014bf8 <tcp_send_empty_ack+0x6c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	8b5b      	ldrh	r3, [r3, #26]
 8014be8:	f043 0303 	orr.w	r3, r3, #3
 8014bec:	b29a      	uxth	r2, r3
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014bf2:	f06f 0301 	mvn.w	r3, #1
 8014bf6:	e023      	b.n	8014c40 <tcp_send_empty_ack+0xb4>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014bf8:	7dbb      	ldrb	r3, [r7, #22]
 8014bfa:	7dfa      	ldrb	r2, [r7, #23]
 8014bfc:	6939      	ldr	r1, [r7, #16]
 8014bfe:	6878      	ldr	r0, [r7, #4]
 8014c00:	f7ff fee4 	bl	80149cc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014c04:	687a      	ldr	r2, [r7, #4]
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	3304      	adds	r3, #4
 8014c0a:	6939      	ldr	r1, [r7, #16]
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f7ff ff21 	bl	8014a54 <tcp_output_control_segment>
 8014c12:	4603      	mov	r3, r0
 8014c14:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d007      	beq.n	8014c2e <tcp_send_empty_ack+0xa2>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	8b5b      	ldrh	r3, [r3, #26]
 8014c22:	f043 0303 	orr.w	r3, r3, #3
 8014c26:	b29a      	uxth	r2, r3
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	835a      	strh	r2, [r3, #26]
 8014c2c:	e006      	b.n	8014c3c <tcp_send_empty_ack+0xb0>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	8b5b      	ldrh	r3, [r3, #26]
 8014c32:	f023 0303 	bic.w	r3, r3, #3
 8014c36:	b29a      	uxth	r2, r3
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	371c      	adds	r7, #28
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd90      	pop	{r4, r7, pc}
 8014c48:	0801a21c 	.word	0x0801a21c
 8014c4c:	0801a9d8 	.word	0x0801a9d8
 8014c50:	0801a270 	.word	0x0801a270

08014c54 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014c54:	b590      	push	{r4, r7, lr}
 8014c56:	b087      	sub	sp, #28
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d106      	bne.n	8014c74 <tcp_keepalive+0x20>
 8014c66:	4b18      	ldr	r3, [pc, #96]	; (8014cc8 <tcp_keepalive+0x74>)
 8014c68:	f640 0224 	movw	r2, #2084	; 0x824
 8014c6c:	4917      	ldr	r1, [pc, #92]	; (8014ccc <tcp_keepalive+0x78>)
 8014c6e:	4818      	ldr	r0, [pc, #96]	; (8014cd0 <tcp_keepalive+0x7c>)
 8014c70:	f001 faa4 	bl	80161bc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014c74:	7dfb      	ldrb	r3, [r7, #23]
 8014c76:	b29c      	uxth	r4, r3
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c7c:	3b01      	subs	r3, #1
 8014c7e:	4618      	mov	r0, r3
 8014c80:	f7f6 f815 	bl	800acae <lwip_htonl>
 8014c84:	4603      	mov	r3, r0
 8014c86:	2200      	movs	r2, #0
 8014c88:	4621      	mov	r1, r4
 8014c8a:	6878      	ldr	r0, [r7, #4]
 8014c8c:	f7ff fe60 	bl	8014950 <tcp_output_alloc_header>
 8014c90:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014c92:	693b      	ldr	r3, [r7, #16]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d102      	bne.n	8014c9e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014c98:	f04f 33ff 	mov.w	r3, #4294967295
 8014c9c:	e010      	b.n	8014cc0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014c9e:	7dfb      	ldrb	r3, [r7, #23]
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	6939      	ldr	r1, [r7, #16]
 8014ca4:	6878      	ldr	r0, [r7, #4]
 8014ca6:	f7ff fe91 	bl	80149cc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014caa:	687a      	ldr	r2, [r7, #4]
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	3304      	adds	r3, #4
 8014cb0:	6939      	ldr	r1, [r7, #16]
 8014cb2:	6878      	ldr	r0, [r7, #4]
 8014cb4:	f7ff fece 	bl	8014a54 <tcp_output_control_segment>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	371c      	adds	r7, #28
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd90      	pop	{r4, r7, pc}
 8014cc8:	0801a21c 	.word	0x0801a21c
 8014ccc:	0801a9f8 	.word	0x0801a9f8
 8014cd0:	0801a270 	.word	0x0801a270

08014cd4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014cd4:	b590      	push	{r4, r7, lr}
 8014cd6:	b08b      	sub	sp, #44	; 0x2c
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014cdc:	2300      	movs	r3, #0
 8014cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d106      	bne.n	8014cf6 <tcp_zero_window_probe+0x22>
 8014ce8:	4b4c      	ldr	r3, [pc, #304]	; (8014e1c <tcp_zero_window_probe+0x148>)
 8014cea:	f640 024f 	movw	r2, #2127	; 0x84f
 8014cee:	494c      	ldr	r1, [pc, #304]	; (8014e20 <tcp_zero_window_probe+0x14c>)
 8014cf0:	484c      	ldr	r0, [pc, #304]	; (8014e24 <tcp_zero_window_probe+0x150>)
 8014cf2:	f001 fa63 	bl	80161bc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cfa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014cfc:	6a3b      	ldr	r3, [r7, #32]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d101      	bne.n	8014d06 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014d02:	2300      	movs	r3, #0
 8014d04:	e086      	b.n	8014e14 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014d0c:	2bff      	cmp	r3, #255	; 0xff
 8014d0e:	d007      	beq.n	8014d20 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014d16:	3301      	adds	r3, #1
 8014d18:	b2da      	uxtb	r2, r3
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014d20:	6a3b      	ldr	r3, [r7, #32]
 8014d22:	68db      	ldr	r3, [r3, #12]
 8014d24:	899b      	ldrh	r3, [r3, #12]
 8014d26:	b29b      	uxth	r3, r3
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7f5 ffab 	bl	800ac84 <lwip_htons>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	b2db      	uxtb	r3, r3
 8014d32:	f003 0301 	and.w	r3, r3, #1
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d005      	beq.n	8014d46 <tcp_zero_window_probe+0x72>
 8014d3a:	6a3b      	ldr	r3, [r7, #32]
 8014d3c:	891b      	ldrh	r3, [r3, #8]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d101      	bne.n	8014d46 <tcp_zero_window_probe+0x72>
 8014d42:	2301      	movs	r3, #1
 8014d44:	e000      	b.n	8014d48 <tcp_zero_window_probe+0x74>
 8014d46:	2300      	movs	r3, #0
 8014d48:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014d4a:	7ffb      	ldrb	r3, [r7, #31]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	bf0c      	ite	eq
 8014d50:	2301      	moveq	r3, #1
 8014d52:	2300      	movne	r3, #0
 8014d54:	b2db      	uxtb	r3, r3
 8014d56:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d5c:	b299      	uxth	r1, r3
 8014d5e:	6a3b      	ldr	r3, [r7, #32]
 8014d60:	68db      	ldr	r3, [r3, #12]
 8014d62:	685b      	ldr	r3, [r3, #4]
 8014d64:	8bba      	ldrh	r2, [r7, #28]
 8014d66:	6878      	ldr	r0, [r7, #4]
 8014d68:	f7ff fdf2 	bl	8014950 <tcp_output_alloc_header>
 8014d6c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014d6e:	69bb      	ldr	r3, [r7, #24]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d102      	bne.n	8014d7a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014d74:	f04f 33ff 	mov.w	r3, #4294967295
 8014d78:	e04c      	b.n	8014e14 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014d7a:	69bb      	ldr	r3, [r7, #24]
 8014d7c:	685b      	ldr	r3, [r3, #4]
 8014d7e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014d80:	7ffb      	ldrb	r3, [r7, #31]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d011      	beq.n	8014daa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	899b      	ldrh	r3, [r3, #12]
 8014d8a:	b29b      	uxth	r3, r3
 8014d8c:	b21b      	sxth	r3, r3
 8014d8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014d92:	b21c      	sxth	r4, r3
 8014d94:	2011      	movs	r0, #17
 8014d96:	f7f5 ff75 	bl	800ac84 <lwip_htons>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	b21b      	sxth	r3, r3
 8014d9e:	4323      	orrs	r3, r4
 8014da0:	b21b      	sxth	r3, r3
 8014da2:	b29a      	uxth	r2, r3
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	819a      	strh	r2, [r3, #12]
 8014da8:	e010      	b.n	8014dcc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014daa:	69bb      	ldr	r3, [r7, #24]
 8014dac:	685b      	ldr	r3, [r3, #4]
 8014dae:	3314      	adds	r3, #20
 8014db0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014db2:	6a3b      	ldr	r3, [r7, #32]
 8014db4:	6858      	ldr	r0, [r3, #4]
 8014db6:	6a3b      	ldr	r3, [r7, #32]
 8014db8:	685b      	ldr	r3, [r3, #4]
 8014dba:	891a      	ldrh	r2, [r3, #8]
 8014dbc:	6a3b      	ldr	r3, [r7, #32]
 8014dbe:	891b      	ldrh	r3, [r3, #8]
 8014dc0:	1ad3      	subs	r3, r2, r3
 8014dc2:	b29b      	uxth	r3, r3
 8014dc4:	2201      	movs	r2, #1
 8014dc6:	6939      	ldr	r1, [r7, #16]
 8014dc8:	f7f9 ff18 	bl	800ebfc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014dcc:	6a3b      	ldr	r3, [r7, #32]
 8014dce:	68db      	ldr	r3, [r3, #12]
 8014dd0:	685b      	ldr	r3, [r3, #4]
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f7f5 ff6b 	bl	800acae <lwip_htonl>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	3301      	adds	r3, #1
 8014ddc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	1ad3      	subs	r3, r2, r3
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	da02      	bge.n	8014df0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	68fa      	ldr	r2, [r7, #12]
 8014dee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014df4:	2200      	movs	r2, #0
 8014df6:	69b9      	ldr	r1, [r7, #24]
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	f7ff fde7 	bl	80149cc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014dfe:	687a      	ldr	r2, [r7, #4]
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	3304      	adds	r3, #4
 8014e04:	69b9      	ldr	r1, [r7, #24]
 8014e06:	6878      	ldr	r0, [r7, #4]
 8014e08:	f7ff fe24 	bl	8014a54 <tcp_output_control_segment>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014e10:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014e14:	4618      	mov	r0, r3
 8014e16:	372c      	adds	r7, #44	; 0x2c
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	bd90      	pop	{r4, r7, pc}
 8014e1c:	0801a21c 	.word	0x0801a21c
 8014e20:	0801aa14 	.word	0x0801aa14
 8014e24:	0801a270 	.word	0x0801a270

08014e28 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b082      	sub	sp, #8
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014e30:	f7f9 ffd2 	bl	800edd8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014e34:	4b0a      	ldr	r3, [pc, #40]	; (8014e60 <tcpip_tcp_timer+0x38>)
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d103      	bne.n	8014e44 <tcpip_tcp_timer+0x1c>
 8014e3c:	4b09      	ldr	r3, [pc, #36]	; (8014e64 <tcpip_tcp_timer+0x3c>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d005      	beq.n	8014e50 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014e44:	2200      	movs	r2, #0
 8014e46:	4908      	ldr	r1, [pc, #32]	; (8014e68 <tcpip_tcp_timer+0x40>)
 8014e48:	20fa      	movs	r0, #250	; 0xfa
 8014e4a:	f000 f8e5 	bl	8015018 <sys_timeout>
 8014e4e:	e002      	b.n	8014e56 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014e50:	4b06      	ldr	r3, [pc, #24]	; (8014e6c <tcpip_tcp_timer+0x44>)
 8014e52:	2200      	movs	r2, #0
 8014e54:	601a      	str	r2, [r3, #0]
  }
}
 8014e56:	bf00      	nop
 8014e58:	3708      	adds	r7, #8
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}
 8014e5e:	bf00      	nop
 8014e60:	2000e4ec 	.word	0x2000e4ec
 8014e64:	2000e4fc 	.word	0x2000e4fc
 8014e68:	08014e29 	.word	0x08014e29
 8014e6c:	20004218 	.word	0x20004218

08014e70 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014e74:	4b0a      	ldr	r3, [pc, #40]	; (8014ea0 <tcp_timer_needed+0x30>)
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d10f      	bne.n	8014e9c <tcp_timer_needed+0x2c>
 8014e7c:	4b09      	ldr	r3, [pc, #36]	; (8014ea4 <tcp_timer_needed+0x34>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d103      	bne.n	8014e8c <tcp_timer_needed+0x1c>
 8014e84:	4b08      	ldr	r3, [pc, #32]	; (8014ea8 <tcp_timer_needed+0x38>)
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d007      	beq.n	8014e9c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014e8c:	4b04      	ldr	r3, [pc, #16]	; (8014ea0 <tcp_timer_needed+0x30>)
 8014e8e:	2201      	movs	r2, #1
 8014e90:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014e92:	2200      	movs	r2, #0
 8014e94:	4905      	ldr	r1, [pc, #20]	; (8014eac <tcp_timer_needed+0x3c>)
 8014e96:	20fa      	movs	r0, #250	; 0xfa
 8014e98:	f000 f8be 	bl	8015018 <sys_timeout>
  }
}
 8014e9c:	bf00      	nop
 8014e9e:	bd80      	pop	{r7, pc}
 8014ea0:	20004218 	.word	0x20004218
 8014ea4:	2000e4ec 	.word	0x2000e4ec
 8014ea8:	2000e4fc 	.word	0x2000e4fc
 8014eac:	08014e29 	.word	0x08014e29

08014eb0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b086      	sub	sp, #24
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	60b9      	str	r1, [r7, #8]
 8014eba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014ebc:	200a      	movs	r0, #10
 8014ebe:	f7f8 fd71 	bl	800d9a4 <memp_malloc>
 8014ec2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014ec4:	693b      	ldr	r3, [r7, #16]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d109      	bne.n	8014ede <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014eca:	693b      	ldr	r3, [r7, #16]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d149      	bne.n	8014f64 <sys_timeout_abs+0xb4>
 8014ed0:	4b26      	ldr	r3, [pc, #152]	; (8014f6c <sys_timeout_abs+0xbc>)
 8014ed2:	22be      	movs	r2, #190	; 0xbe
 8014ed4:	4926      	ldr	r1, [pc, #152]	; (8014f70 <sys_timeout_abs+0xc0>)
 8014ed6:	4827      	ldr	r0, [pc, #156]	; (8014f74 <sys_timeout_abs+0xc4>)
 8014ed8:	f001 f970 	bl	80161bc <iprintf>
    return;
 8014edc:	e042      	b.n	8014f64 <sys_timeout_abs+0xb4>
  }

  timeout->next = NULL;
 8014ede:	693b      	ldr	r3, [r7, #16]
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014ee4:	693b      	ldr	r3, [r7, #16]
 8014ee6:	68ba      	ldr	r2, [r7, #8]
 8014ee8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014eea:	693b      	ldr	r3, [r7, #16]
 8014eec:	687a      	ldr	r2, [r7, #4]
 8014eee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014ef0:	693b      	ldr	r3, [r7, #16]
 8014ef2:	68fa      	ldr	r2, [r7, #12]
 8014ef4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014ef6:	4b20      	ldr	r3, [pc, #128]	; (8014f78 <sys_timeout_abs+0xc8>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d103      	bne.n	8014f06 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014efe:	4a1e      	ldr	r2, [pc, #120]	; (8014f78 <sys_timeout_abs+0xc8>)
 8014f00:	693b      	ldr	r3, [r7, #16]
 8014f02:	6013      	str	r3, [r2, #0]
    return;
 8014f04:	e02f      	b.n	8014f66 <sys_timeout_abs+0xb6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014f06:	693b      	ldr	r3, [r7, #16]
 8014f08:	685a      	ldr	r2, [r3, #4]
 8014f0a:	4b1b      	ldr	r3, [pc, #108]	; (8014f78 <sys_timeout_abs+0xc8>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	685b      	ldr	r3, [r3, #4]
 8014f10:	1ad3      	subs	r3, r2, r3
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	da07      	bge.n	8014f26 <sys_timeout_abs+0x76>
    timeout->next = next_timeout;
 8014f16:	4b18      	ldr	r3, [pc, #96]	; (8014f78 <sys_timeout_abs+0xc8>)
 8014f18:	681a      	ldr	r2, [r3, #0]
 8014f1a:	693b      	ldr	r3, [r7, #16]
 8014f1c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014f1e:	4a16      	ldr	r2, [pc, #88]	; (8014f78 <sys_timeout_abs+0xc8>)
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	6013      	str	r3, [r2, #0]
 8014f24:	e01f      	b.n	8014f66 <sys_timeout_abs+0xb6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014f26:	4b14      	ldr	r3, [pc, #80]	; (8014f78 <sys_timeout_abs+0xc8>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	617b      	str	r3, [r7, #20]
 8014f2c:	e016      	b.n	8014f5c <sys_timeout_abs+0xac>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014f2e:	697b      	ldr	r3, [r7, #20]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d007      	beq.n	8014f46 <sys_timeout_abs+0x96>
 8014f36:	693b      	ldr	r3, [r7, #16]
 8014f38:	685a      	ldr	r2, [r3, #4]
 8014f3a:	697b      	ldr	r3, [r7, #20]
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	1ad3      	subs	r3, r2, r3
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	da07      	bge.n	8014f56 <sys_timeout_abs+0xa6>
        timeout->next = t->next;
 8014f46:	697b      	ldr	r3, [r7, #20]
 8014f48:	681a      	ldr	r2, [r3, #0]
 8014f4a:	693b      	ldr	r3, [r7, #16]
 8014f4c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	693a      	ldr	r2, [r7, #16]
 8014f52:	601a      	str	r2, [r3, #0]
        break;
 8014f54:	e007      	b.n	8014f66 <sys_timeout_abs+0xb6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014f56:	697b      	ldr	r3, [r7, #20]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	617b      	str	r3, [r7, #20]
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d1e5      	bne.n	8014f2e <sys_timeout_abs+0x7e>
 8014f62:	e000      	b.n	8014f66 <sys_timeout_abs+0xb6>
    return;
 8014f64:	bf00      	nop
      }
    }
  }
}
 8014f66:	3718      	adds	r7, #24
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}
 8014f6c:	0801aa38 	.word	0x0801aa38
 8014f70:	0801aa6c 	.word	0x0801aa6c
 8014f74:	0801aaac 	.word	0x0801aaac
 8014f78:	20004210 	.word	0x20004210

08014f7c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b086      	sub	sp, #24
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	685b      	ldr	r3, [r3, #4]
 8014f8c:	4798      	blx	r3

  now = sys_now();
 8014f8e:	f7ef f843 	bl	8004018 <sys_now>
 8014f92:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014f94:	697b      	ldr	r3, [r7, #20]
 8014f96:	681a      	ldr	r2, [r3, #0]
 8014f98:	4b0d      	ldr	r3, [pc, #52]	; (8014fd0 <lwip_cyclic_timer+0x54>)
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	4413      	add	r3, r2
 8014f9e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014fa0:	68fa      	ldr	r2, [r7, #12]
 8014fa2:	693b      	ldr	r3, [r7, #16]
 8014fa4:	1ad3      	subs	r3, r2, r3
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	da09      	bge.n	8014fbe <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	681a      	ldr	r2, [r3, #0]
 8014fae:	693b      	ldr	r3, [r7, #16]
 8014fb0:	4413      	add	r3, r2
 8014fb2:	687a      	ldr	r2, [r7, #4]
 8014fb4:	4907      	ldr	r1, [pc, #28]	; (8014fd4 <lwip_cyclic_timer+0x58>)
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	f7ff ff7a 	bl	8014eb0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014fbc:	e004      	b.n	8014fc8 <lwip_cyclic_timer+0x4c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014fbe:	687a      	ldr	r2, [r7, #4]
 8014fc0:	4904      	ldr	r1, [pc, #16]	; (8014fd4 <lwip_cyclic_timer+0x58>)
 8014fc2:	68f8      	ldr	r0, [r7, #12]
 8014fc4:	f7ff ff74 	bl	8014eb0 <sys_timeout_abs>
}
 8014fc8:	bf00      	nop
 8014fca:	3718      	adds	r7, #24
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	bd80      	pop	{r7, pc}
 8014fd0:	20004214 	.word	0x20004214
 8014fd4:	08014f7d 	.word	0x08014f7d

08014fd8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b082      	sub	sp, #8
 8014fdc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014fde:	2301      	movs	r3, #1
 8014fe0:	607b      	str	r3, [r7, #4]
 8014fe2:	e00e      	b.n	8015002 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014fe4:	4a0a      	ldr	r2, [pc, #40]	; (8015010 <sys_timeouts_init+0x38>)
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	00db      	lsls	r3, r3, #3
 8014ff0:	4a07      	ldr	r2, [pc, #28]	; (8015010 <sys_timeouts_init+0x38>)
 8014ff2:	4413      	add	r3, r2
 8014ff4:	461a      	mov	r2, r3
 8014ff6:	4907      	ldr	r1, [pc, #28]	; (8015014 <sys_timeouts_init+0x3c>)
 8014ff8:	f000 f80e 	bl	8015018 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	3301      	adds	r3, #1
 8015000:	607b      	str	r3, [r7, #4]
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	2b02      	cmp	r3, #2
 8015006:	d9ed      	bls.n	8014fe4 <sys_timeouts_init+0xc>
  }
}
 8015008:	bf00      	nop
 801500a:	3708      	adds	r7, #8
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}
 8015010:	0801b074 	.word	0x0801b074
 8015014:	08014f7d 	.word	0x08014f7d

08015018 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b086      	sub	sp, #24
 801501c:	af00      	add	r7, sp, #0
 801501e:	60f8      	str	r0, [r7, #12]
 8015020:	60b9      	str	r1, [r7, #8]
 8015022:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801502a:	d306      	bcc.n	801503a <sys_timeout+0x22>
 801502c:	4b0a      	ldr	r3, [pc, #40]	; (8015058 <sys_timeout+0x40>)
 801502e:	f240 1229 	movw	r2, #297	; 0x129
 8015032:	490a      	ldr	r1, [pc, #40]	; (801505c <sys_timeout+0x44>)
 8015034:	480a      	ldr	r0, [pc, #40]	; (8015060 <sys_timeout+0x48>)
 8015036:	f001 f8c1 	bl	80161bc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801503a:	f7ee ffed 	bl	8004018 <sys_now>
 801503e:	4602      	mov	r2, r0
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	4413      	add	r3, r2
 8015044:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015046:	687a      	ldr	r2, [r7, #4]
 8015048:	68b9      	ldr	r1, [r7, #8]
 801504a:	6978      	ldr	r0, [r7, #20]
 801504c:	f7ff ff30 	bl	8014eb0 <sys_timeout_abs>
#endif
}
 8015050:	bf00      	nop
 8015052:	3718      	adds	r7, #24
 8015054:	46bd      	mov	sp, r7
 8015056:	bd80      	pop	{r7, pc}
 8015058:	0801aa38 	.word	0x0801aa38
 801505c:	0801aad4 	.word	0x0801aad4
 8015060:	0801aaac 	.word	0x0801aaac

08015064 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b084      	sub	sp, #16
 8015068:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801506a:	f7ee ffd5 	bl	8004018 <sys_now>
 801506e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015070:	4b15      	ldr	r3, [pc, #84]	; (80150c8 <sys_check_timeouts+0x64>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015076:	68bb      	ldr	r3, [r7, #8]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d01e      	beq.n	80150ba <sys_check_timeouts+0x56>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	685b      	ldr	r3, [r3, #4]
 8015080:	68fa      	ldr	r2, [r7, #12]
 8015082:	1ad3      	subs	r3, r2, r3
 8015084:	2b00      	cmp	r3, #0
 8015086:	db1a      	blt.n	80150be <sys_check_timeouts+0x5a>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015088:	68bb      	ldr	r3, [r7, #8]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	4a0e      	ldr	r2, [pc, #56]	; (80150c8 <sys_check_timeouts+0x64>)
 801508e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015090:	68bb      	ldr	r3, [r7, #8]
 8015092:	689b      	ldr	r3, [r3, #8]
 8015094:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015096:	68bb      	ldr	r3, [r7, #8]
 8015098:	68db      	ldr	r3, [r3, #12]
 801509a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801509c:	68bb      	ldr	r3, [r7, #8]
 801509e:	685b      	ldr	r3, [r3, #4]
 80150a0:	4a0a      	ldr	r2, [pc, #40]	; (80150cc <sys_check_timeouts+0x68>)
 80150a2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80150a4:	68b9      	ldr	r1, [r7, #8]
 80150a6:	200a      	movs	r0, #10
 80150a8:	f7f8 fcce 	bl	800da48 <memp_free>
    if (handler != NULL) {
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d0de      	beq.n	8015070 <sys_check_timeouts+0xc>
      handler(arg);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	6838      	ldr	r0, [r7, #0]
 80150b6:	4798      	blx	r3
  do {
 80150b8:	e7da      	b.n	8015070 <sys_check_timeouts+0xc>
      return;
 80150ba:	bf00      	nop
 80150bc:	e000      	b.n	80150c0 <sys_check_timeouts+0x5c>
      return;
 80150be:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80150c0:	3710      	adds	r7, #16
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}
 80150c6:	bf00      	nop
 80150c8:	20004210 	.word	0x20004210
 80150cc:	20004214 	.word	0x20004214

080150d0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b082      	sub	sp, #8
 80150d4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80150d6:	4b14      	ldr	r3, [pc, #80]	; (8015128 <sys_timeouts_sleeptime+0x58>)
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d102      	bne.n	80150e4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80150de:	f04f 33ff 	mov.w	r3, #4294967295
 80150e2:	e01c      	b.n	801511e <sys_timeouts_sleeptime+0x4e>
  }
  now = sys_now();
 80150e4:	f7ee ff98 	bl	8004018 <sys_now>
 80150e8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80150ea:	4b0f      	ldr	r3, [pc, #60]	; (8015128 <sys_timeouts_sleeptime+0x58>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	685a      	ldr	r2, [r3, #4]
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	1ad3      	subs	r3, r2, r3
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	da01      	bge.n	80150fc <sys_timeouts_sleeptime+0x2c>
    return 0;
 80150f8:	2300      	movs	r3, #0
 80150fa:	e010      	b.n	801511e <sys_timeouts_sleeptime+0x4e>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80150fc:	4b0a      	ldr	r3, [pc, #40]	; (8015128 <sys_timeouts_sleeptime+0x58>)
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	685a      	ldr	r2, [r3, #4]
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	1ad3      	subs	r3, r2, r3
 8015106:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015108:	683b      	ldr	r3, [r7, #0]
 801510a:	2b00      	cmp	r3, #0
 801510c:	da06      	bge.n	801511c <sys_timeouts_sleeptime+0x4c>
 801510e:	4b07      	ldr	r3, [pc, #28]	; (801512c <sys_timeouts_sleeptime+0x5c>)
 8015110:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015114:	4906      	ldr	r1, [pc, #24]	; (8015130 <sys_timeouts_sleeptime+0x60>)
 8015116:	4807      	ldr	r0, [pc, #28]	; (8015134 <sys_timeouts_sleeptime+0x64>)
 8015118:	f001 f850 	bl	80161bc <iprintf>
    return ret;
 801511c:	683b      	ldr	r3, [r7, #0]
  }
}
 801511e:	4618      	mov	r0, r3
 8015120:	3708      	adds	r7, #8
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}
 8015126:	bf00      	nop
 8015128:	20004210 	.word	0x20004210
 801512c:	0801aa38 	.word	0x0801aa38
 8015130:	0801ab0c 	.word	0x0801ab0c
 8015134:	0801aaac 	.word	0x0801aaac

08015138 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801513c:	f001 f856 	bl	80161ec <rand>
 8015140:	4603      	mov	r3, r0
 8015142:	b29b      	uxth	r3, r3
 8015144:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015148:	b29b      	uxth	r3, r3
 801514a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801514e:	b29a      	uxth	r2, r3
 8015150:	4b01      	ldr	r3, [pc, #4]	; (8015158 <udp_init+0x20>)
 8015152:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015154:	bf00      	nop
 8015156:	bd80      	pop	{r7, pc}
 8015158:	20000018 	.word	0x20000018

0801515c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801515c:	b480      	push	{r7}
 801515e:	b083      	sub	sp, #12
 8015160:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015162:	2300      	movs	r3, #0
 8015164:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015166:	4b17      	ldr	r3, [pc, #92]	; (80151c4 <udp_new_port+0x68>)
 8015168:	881b      	ldrh	r3, [r3, #0]
 801516a:	1c5a      	adds	r2, r3, #1
 801516c:	b291      	uxth	r1, r2
 801516e:	4a15      	ldr	r2, [pc, #84]	; (80151c4 <udp_new_port+0x68>)
 8015170:	8011      	strh	r1, [r2, #0]
 8015172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015176:	4293      	cmp	r3, r2
 8015178:	d103      	bne.n	8015182 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801517a:	4b12      	ldr	r3, [pc, #72]	; (80151c4 <udp_new_port+0x68>)
 801517c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015180:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015182:	4b11      	ldr	r3, [pc, #68]	; (80151c8 <udp_new_port+0x6c>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	603b      	str	r3, [r7, #0]
 8015188:	e011      	b.n	80151ae <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801518a:	683b      	ldr	r3, [r7, #0]
 801518c:	8a5a      	ldrh	r2, [r3, #18]
 801518e:	4b0d      	ldr	r3, [pc, #52]	; (80151c4 <udp_new_port+0x68>)
 8015190:	881b      	ldrh	r3, [r3, #0]
 8015192:	429a      	cmp	r2, r3
 8015194:	d108      	bne.n	80151a8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015196:	88fb      	ldrh	r3, [r7, #6]
 8015198:	3301      	adds	r3, #1
 801519a:	80fb      	strh	r3, [r7, #6]
 801519c:	88fb      	ldrh	r3, [r7, #6]
 801519e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80151a2:	d3e0      	bcc.n	8015166 <udp_new_port+0xa>
        return 0;
 80151a4:	2300      	movs	r3, #0
 80151a6:	e007      	b.n	80151b8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	68db      	ldr	r3, [r3, #12]
 80151ac:	603b      	str	r3, [r7, #0]
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d1ea      	bne.n	801518a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80151b4:	4b03      	ldr	r3, [pc, #12]	; (80151c4 <udp_new_port+0x68>)
 80151b6:	881b      	ldrh	r3, [r3, #0]
}
 80151b8:	4618      	mov	r0, r3
 80151ba:	370c      	adds	r7, #12
 80151bc:	46bd      	mov	sp, r7
 80151be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c2:	4770      	bx	lr
 80151c4:	20000018 	.word	0x20000018
 80151c8:	2000e504 	.word	0x2000e504

080151cc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b084      	sub	sp, #16
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	60f8      	str	r0, [r7, #12]
 80151d4:	60b9      	str	r1, [r7, #8]
 80151d6:	4613      	mov	r3, r2
 80151d8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d105      	bne.n	80151ec <udp_input_local_match+0x20>
 80151e0:	4b27      	ldr	r3, [pc, #156]	; (8015280 <udp_input_local_match+0xb4>)
 80151e2:	2287      	movs	r2, #135	; 0x87
 80151e4:	4927      	ldr	r1, [pc, #156]	; (8015284 <udp_input_local_match+0xb8>)
 80151e6:	4828      	ldr	r0, [pc, #160]	; (8015288 <udp_input_local_match+0xbc>)
 80151e8:	f000 ffe8 	bl	80161bc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80151ec:	68bb      	ldr	r3, [r7, #8]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d105      	bne.n	80151fe <udp_input_local_match+0x32>
 80151f2:	4b23      	ldr	r3, [pc, #140]	; (8015280 <udp_input_local_match+0xb4>)
 80151f4:	2288      	movs	r2, #136	; 0x88
 80151f6:	4925      	ldr	r1, [pc, #148]	; (801528c <udp_input_local_match+0xc0>)
 80151f8:	4823      	ldr	r0, [pc, #140]	; (8015288 <udp_input_local_match+0xbc>)
 80151fa:	f000 ffdf 	bl	80161bc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	7a1b      	ldrb	r3, [r3, #8]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d00b      	beq.n	801521e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	7a1a      	ldrb	r2, [r3, #8]
 801520a:	4b21      	ldr	r3, [pc, #132]	; (8015290 <udp_input_local_match+0xc4>)
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015212:	3301      	adds	r3, #1
 8015214:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015216:	429a      	cmp	r2, r3
 8015218:	d001      	beq.n	801521e <udp_input_local_match+0x52>
    return 0;
 801521a:	2300      	movs	r3, #0
 801521c:	e02b      	b.n	8015276 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801521e:	79fb      	ldrb	r3, [r7, #7]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d018      	beq.n	8015256 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d013      	beq.n	8015252 <udp_input_local_match+0x86>
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d00f      	beq.n	8015252 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015232:	4b17      	ldr	r3, [pc, #92]	; (8015290 <udp_input_local_match+0xc4>)
 8015234:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015236:	f1b3 3fff 	cmp.w	r3, #4294967295
 801523a:	d00a      	beq.n	8015252 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	681a      	ldr	r2, [r3, #0]
 8015240:	4b13      	ldr	r3, [pc, #76]	; (8015290 <udp_input_local_match+0xc4>)
 8015242:	695b      	ldr	r3, [r3, #20]
 8015244:	405a      	eors	r2, r3
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	3308      	adds	r3, #8
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801524e:	2b00      	cmp	r3, #0
 8015250:	d110      	bne.n	8015274 <udp_input_local_match+0xa8>
          return 1;
 8015252:	2301      	movs	r3, #1
 8015254:	e00f      	b.n	8015276 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d009      	beq.n	8015270 <udp_input_local_match+0xa4>
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d005      	beq.n	8015270 <udp_input_local_match+0xa4>
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	681a      	ldr	r2, [r3, #0]
 8015268:	4b09      	ldr	r3, [pc, #36]	; (8015290 <udp_input_local_match+0xc4>)
 801526a:	695b      	ldr	r3, [r3, #20]
 801526c:	429a      	cmp	r2, r3
 801526e:	d101      	bne.n	8015274 <udp_input_local_match+0xa8>
        return 1;
 8015270:	2301      	movs	r3, #1
 8015272:	e000      	b.n	8015276 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015274:	2300      	movs	r3, #0
}
 8015276:	4618      	mov	r0, r3
 8015278:	3710      	adds	r7, #16
 801527a:	46bd      	mov	sp, r7
 801527c:	bd80      	pop	{r7, pc}
 801527e:	bf00      	nop
 8015280:	0801ab20 	.word	0x0801ab20
 8015284:	0801ab50 	.word	0x0801ab50
 8015288:	0801ab74 	.word	0x0801ab74
 801528c:	0801ab9c 	.word	0x0801ab9c
 8015290:	20007418 	.word	0x20007418

08015294 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015294:	b590      	push	{r4, r7, lr}
 8015296:	b08d      	sub	sp, #52	; 0x34
 8015298:	af02      	add	r7, sp, #8
 801529a:	6078      	str	r0, [r7, #4]
 801529c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801529e:	2300      	movs	r3, #0
 80152a0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d105      	bne.n	80152b4 <udp_input+0x20>
 80152a8:	4b7c      	ldr	r3, [pc, #496]	; (801549c <udp_input+0x208>)
 80152aa:	22cf      	movs	r2, #207	; 0xcf
 80152ac:	497c      	ldr	r1, [pc, #496]	; (80154a0 <udp_input+0x20c>)
 80152ae:	487d      	ldr	r0, [pc, #500]	; (80154a4 <udp_input+0x210>)
 80152b0:	f000 ff84 	bl	80161bc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d105      	bne.n	80152c6 <udp_input+0x32>
 80152ba:	4b78      	ldr	r3, [pc, #480]	; (801549c <udp_input+0x208>)
 80152bc:	22d0      	movs	r2, #208	; 0xd0
 80152be:	497a      	ldr	r1, [pc, #488]	; (80154a8 <udp_input+0x214>)
 80152c0:	4878      	ldr	r0, [pc, #480]	; (80154a4 <udp_input+0x210>)
 80152c2:	f000 ff7b 	bl	80161bc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	895b      	ldrh	r3, [r3, #10]
 80152ca:	2b07      	cmp	r3, #7
 80152cc:	d803      	bhi.n	80152d6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80152ce:	6878      	ldr	r0, [r7, #4]
 80152d0:	f7f9 fa8e 	bl	800e7f0 <pbuf_free>
    goto end;
 80152d4:	e0de      	b.n	8015494 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80152dc:	4b73      	ldr	r3, [pc, #460]	; (80154ac <udp_input+0x218>)
 80152de:	695a      	ldr	r2, [r3, #20]
 80152e0:	4b72      	ldr	r3, [pc, #456]	; (80154ac <udp_input+0x218>)
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	4619      	mov	r1, r3
 80152e6:	4610      	mov	r0, r2
 80152e8:	f7f7 f87a 	bl	800c3e0 <ip4_addr_isbroadcast_u32>
 80152ec:	4603      	mov	r3, r0
 80152ee:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80152f0:	697b      	ldr	r3, [r7, #20]
 80152f2:	881b      	ldrh	r3, [r3, #0]
 80152f4:	b29b      	uxth	r3, r3
 80152f6:	4618      	mov	r0, r3
 80152f8:	f7f5 fcc4 	bl	800ac84 <lwip_htons>
 80152fc:	4603      	mov	r3, r0
 80152fe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015300:	697b      	ldr	r3, [r7, #20]
 8015302:	885b      	ldrh	r3, [r3, #2]
 8015304:	b29b      	uxth	r3, r3
 8015306:	4618      	mov	r0, r3
 8015308:	f7f5 fcbc 	bl	800ac84 <lwip_htons>
 801530c:	4603      	mov	r3, r0
 801530e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015310:	2300      	movs	r3, #0
 8015312:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015314:	2300      	movs	r3, #0
 8015316:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015318:	2300      	movs	r3, #0
 801531a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801531c:	4b64      	ldr	r3, [pc, #400]	; (80154b0 <udp_input+0x21c>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	627b      	str	r3, [r7, #36]	; 0x24
 8015322:	e054      	b.n	80153ce <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015326:	8a5b      	ldrh	r3, [r3, #18]
 8015328:	89fa      	ldrh	r2, [r7, #14]
 801532a:	429a      	cmp	r2, r3
 801532c:	d14a      	bne.n	80153c4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801532e:	7cfb      	ldrb	r3, [r7, #19]
 8015330:	461a      	mov	r2, r3
 8015332:	6839      	ldr	r1, [r7, #0]
 8015334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015336:	f7ff ff49 	bl	80151cc <udp_input_local_match>
 801533a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801533c:	2b00      	cmp	r3, #0
 801533e:	d041      	beq.n	80153c4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015342:	7c1b      	ldrb	r3, [r3, #16]
 8015344:	f003 0304 	and.w	r3, r3, #4
 8015348:	2b00      	cmp	r3, #0
 801534a:	d11d      	bne.n	8015388 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801534c:	69fb      	ldr	r3, [r7, #28]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d102      	bne.n	8015358 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015354:	61fb      	str	r3, [r7, #28]
 8015356:	e017      	b.n	8015388 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015358:	7cfb      	ldrb	r3, [r7, #19]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d014      	beq.n	8015388 <udp_input+0xf4>
 801535e:	4b53      	ldr	r3, [pc, #332]	; (80154ac <udp_input+0x218>)
 8015360:	695b      	ldr	r3, [r3, #20]
 8015362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015366:	d10f      	bne.n	8015388 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015368:	69fb      	ldr	r3, [r7, #28]
 801536a:	681a      	ldr	r2, [r3, #0]
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	3304      	adds	r3, #4
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	429a      	cmp	r2, r3
 8015374:	d008      	beq.n	8015388 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015378:	681a      	ldr	r2, [r3, #0]
 801537a:	683b      	ldr	r3, [r7, #0]
 801537c:	3304      	adds	r3, #4
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	429a      	cmp	r2, r3
 8015382:	d101      	bne.n	8015388 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015386:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801538a:	8a9b      	ldrh	r3, [r3, #20]
 801538c:	8a3a      	ldrh	r2, [r7, #16]
 801538e:	429a      	cmp	r2, r3
 8015390:	d118      	bne.n	80153c4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015394:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015396:	2b00      	cmp	r3, #0
 8015398:	d005      	beq.n	80153a6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801539c:	685a      	ldr	r2, [r3, #4]
 801539e:	4b43      	ldr	r3, [pc, #268]	; (80154ac <udp_input+0x218>)
 80153a0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80153a2:	429a      	cmp	r2, r3
 80153a4:	d10e      	bne.n	80153c4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80153a6:	6a3b      	ldr	r3, [r7, #32]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d014      	beq.n	80153d6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80153ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ae:	68da      	ldr	r2, [r3, #12]
 80153b0:	6a3b      	ldr	r3, [r7, #32]
 80153b2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80153b4:	4b3e      	ldr	r3, [pc, #248]	; (80154b0 <udp_input+0x21c>)
 80153b6:	681a      	ldr	r2, [r3, #0]
 80153b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ba:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80153bc:	4a3c      	ldr	r2, [pc, #240]	; (80154b0 <udp_input+0x21c>)
 80153be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153c0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80153c2:	e008      	b.n	80153d6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80153c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153c6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80153c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ca:	68db      	ldr	r3, [r3, #12]
 80153cc:	627b      	str	r3, [r7, #36]	; 0x24
 80153ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d1a7      	bne.n	8015324 <udp_input+0x90>
 80153d4:	e000      	b.n	80153d8 <udp_input+0x144>
        break;
 80153d6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80153d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d101      	bne.n	80153e2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80153de:	69fb      	ldr	r3, [r7, #28]
 80153e0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80153e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d002      	beq.n	80153ee <udp_input+0x15a>
    for_us = 1;
 80153e8:	2301      	movs	r3, #1
 80153ea:	76fb      	strb	r3, [r7, #27]
 80153ec:	e00a      	b.n	8015404 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80153ee:	683b      	ldr	r3, [r7, #0]
 80153f0:	3304      	adds	r3, #4
 80153f2:	681a      	ldr	r2, [r3, #0]
 80153f4:	4b2d      	ldr	r3, [pc, #180]	; (80154ac <udp_input+0x218>)
 80153f6:	695b      	ldr	r3, [r3, #20]
 80153f8:	429a      	cmp	r2, r3
 80153fa:	bf0c      	ite	eq
 80153fc:	2301      	moveq	r3, #1
 80153fe:	2300      	movne	r3, #0
 8015400:	b2db      	uxtb	r3, r3
 8015402:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015404:	7efb      	ldrb	r3, [r7, #27]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d041      	beq.n	801548e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801540a:	2108      	movs	r1, #8
 801540c:	6878      	ldr	r0, [r7, #4]
 801540e:	f7f9 f937 	bl	800e680 <pbuf_remove_header>
 8015412:	4603      	mov	r3, r0
 8015414:	2b00      	cmp	r3, #0
 8015416:	d00a      	beq.n	801542e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015418:	4b20      	ldr	r3, [pc, #128]	; (801549c <udp_input+0x208>)
 801541a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801541e:	4925      	ldr	r1, [pc, #148]	; (80154b4 <udp_input+0x220>)
 8015420:	4820      	ldr	r0, [pc, #128]	; (80154a4 <udp_input+0x210>)
 8015422:	f000 fecb 	bl	80161bc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f7f9 f9e2 	bl	800e7f0 <pbuf_free>
      goto end;
 801542c:	e032      	b.n	8015494 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015430:	2b00      	cmp	r3, #0
 8015432:	d012      	beq.n	801545a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015436:	699b      	ldr	r3, [r3, #24]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d00a      	beq.n	8015452 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801543e:	699c      	ldr	r4, [r3, #24]
 8015440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015442:	69d8      	ldr	r0, [r3, #28]
 8015444:	8a3b      	ldrh	r3, [r7, #16]
 8015446:	9300      	str	r3, [sp, #0]
 8015448:	4b1b      	ldr	r3, [pc, #108]	; (80154b8 <udp_input+0x224>)
 801544a:	687a      	ldr	r2, [r7, #4]
 801544c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801544e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015450:	e021      	b.n	8015496 <udp_input+0x202>
        pbuf_free(p);
 8015452:	6878      	ldr	r0, [r7, #4]
 8015454:	f7f9 f9cc 	bl	800e7f0 <pbuf_free>
        goto end;
 8015458:	e01c      	b.n	8015494 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801545a:	7cfb      	ldrb	r3, [r7, #19]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d112      	bne.n	8015486 <udp_input+0x1f2>
 8015460:	4b12      	ldr	r3, [pc, #72]	; (80154ac <udp_input+0x218>)
 8015462:	695b      	ldr	r3, [r3, #20]
 8015464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015468:	2be0      	cmp	r3, #224	; 0xe0
 801546a:	d00c      	beq.n	8015486 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801546c:	4b0f      	ldr	r3, [pc, #60]	; (80154ac <udp_input+0x218>)
 801546e:	899b      	ldrh	r3, [r3, #12]
 8015470:	3308      	adds	r3, #8
 8015472:	b29b      	uxth	r3, r3
 8015474:	b21b      	sxth	r3, r3
 8015476:	4619      	mov	r1, r3
 8015478:	6878      	ldr	r0, [r7, #4]
 801547a:	f7f9 f974 	bl	800e766 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801547e:	2103      	movs	r1, #3
 8015480:	6878      	ldr	r0, [r7, #4]
 8015482:	f7f6 fc95 	bl	800bdb0 <icmp_dest_unreach>
      pbuf_free(p);
 8015486:	6878      	ldr	r0, [r7, #4]
 8015488:	f7f9 f9b2 	bl	800e7f0 <pbuf_free>
  return;
 801548c:	e003      	b.n	8015496 <udp_input+0x202>
    pbuf_free(p);
 801548e:	6878      	ldr	r0, [r7, #4]
 8015490:	f7f9 f9ae 	bl	800e7f0 <pbuf_free>
  return;
 8015494:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015496:	372c      	adds	r7, #44	; 0x2c
 8015498:	46bd      	mov	sp, r7
 801549a:	bd90      	pop	{r4, r7, pc}
 801549c:	0801ab20 	.word	0x0801ab20
 80154a0:	0801abc4 	.word	0x0801abc4
 80154a4:	0801ab74 	.word	0x0801ab74
 80154a8:	0801abdc 	.word	0x0801abdc
 80154ac:	20007418 	.word	0x20007418
 80154b0:	2000e504 	.word	0x2000e504
 80154b4:	0801abf8 	.word	0x0801abf8
 80154b8:	20007428 	.word	0x20007428

080154bc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b082      	sub	sp, #8
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d109      	bne.n	80154e0 <udp_send+0x24>
 80154cc:	4b11      	ldr	r3, [pc, #68]	; (8015514 <udp_send+0x58>)
 80154ce:	f240 12d5 	movw	r2, #469	; 0x1d5
 80154d2:	4911      	ldr	r1, [pc, #68]	; (8015518 <udp_send+0x5c>)
 80154d4:	4811      	ldr	r0, [pc, #68]	; (801551c <udp_send+0x60>)
 80154d6:	f000 fe71 	bl	80161bc <iprintf>
 80154da:	f06f 030f 	mvn.w	r3, #15
 80154de:	e015      	b.n	801550c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d109      	bne.n	80154fa <udp_send+0x3e>
 80154e6:	4b0b      	ldr	r3, [pc, #44]	; (8015514 <udp_send+0x58>)
 80154e8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80154ec:	490c      	ldr	r1, [pc, #48]	; (8015520 <udp_send+0x64>)
 80154ee:	480b      	ldr	r0, [pc, #44]	; (801551c <udp_send+0x60>)
 80154f0:	f000 fe64 	bl	80161bc <iprintf>
 80154f4:	f06f 030f 	mvn.w	r3, #15
 80154f8:	e008      	b.n	801550c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	1d1a      	adds	r2, r3, #4
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	8a9b      	ldrh	r3, [r3, #20]
 8015502:	6839      	ldr	r1, [r7, #0]
 8015504:	6878      	ldr	r0, [r7, #4]
 8015506:	f000 f80d 	bl	8015524 <udp_sendto>
 801550a:	4603      	mov	r3, r0
}
 801550c:	4618      	mov	r0, r3
 801550e:	3708      	adds	r7, #8
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}
 8015514:	0801ab20 	.word	0x0801ab20
 8015518:	0801ac14 	.word	0x0801ac14
 801551c:	0801ab74 	.word	0x0801ab74
 8015520:	0801ac2c 	.word	0x0801ac2c

08015524 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b088      	sub	sp, #32
 8015528:	af02      	add	r7, sp, #8
 801552a:	60f8      	str	r0, [r7, #12]
 801552c:	60b9      	str	r1, [r7, #8]
 801552e:	607a      	str	r2, [r7, #4]
 8015530:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d109      	bne.n	801554c <udp_sendto+0x28>
 8015538:	4b23      	ldr	r3, [pc, #140]	; (80155c8 <udp_sendto+0xa4>)
 801553a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801553e:	4923      	ldr	r1, [pc, #140]	; (80155cc <udp_sendto+0xa8>)
 8015540:	4823      	ldr	r0, [pc, #140]	; (80155d0 <udp_sendto+0xac>)
 8015542:	f000 fe3b 	bl	80161bc <iprintf>
 8015546:	f06f 030f 	mvn.w	r3, #15
 801554a:	e038      	b.n	80155be <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801554c:	68bb      	ldr	r3, [r7, #8]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d109      	bne.n	8015566 <udp_sendto+0x42>
 8015552:	4b1d      	ldr	r3, [pc, #116]	; (80155c8 <udp_sendto+0xa4>)
 8015554:	f240 2219 	movw	r2, #537	; 0x219
 8015558:	491e      	ldr	r1, [pc, #120]	; (80155d4 <udp_sendto+0xb0>)
 801555a:	481d      	ldr	r0, [pc, #116]	; (80155d0 <udp_sendto+0xac>)
 801555c:	f000 fe2e 	bl	80161bc <iprintf>
 8015560:	f06f 030f 	mvn.w	r3, #15
 8015564:	e02b      	b.n	80155be <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d109      	bne.n	8015580 <udp_sendto+0x5c>
 801556c:	4b16      	ldr	r3, [pc, #88]	; (80155c8 <udp_sendto+0xa4>)
 801556e:	f240 221a 	movw	r2, #538	; 0x21a
 8015572:	4919      	ldr	r1, [pc, #100]	; (80155d8 <udp_sendto+0xb4>)
 8015574:	4816      	ldr	r0, [pc, #88]	; (80155d0 <udp_sendto+0xac>)
 8015576:	f000 fe21 	bl	80161bc <iprintf>
 801557a:	f06f 030f 	mvn.w	r3, #15
 801557e:	e01e      	b.n	80155be <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	7a1b      	ldrb	r3, [r3, #8]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d006      	beq.n	8015596 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	7a1b      	ldrb	r3, [r3, #8]
 801558c:	4618      	mov	r0, r3
 801558e:	f7f8 fd71 	bl	800e074 <netif_get_by_index>
 8015592:	6178      	str	r0, [r7, #20]
 8015594:	e003      	b.n	801559e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015596:	6878      	ldr	r0, [r7, #4]
 8015598:	f7f6 fc94 	bl	800bec4 <ip4_route>
 801559c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801559e:	697b      	ldr	r3, [r7, #20]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d102      	bne.n	80155aa <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80155a4:	f06f 0303 	mvn.w	r3, #3
 80155a8:	e009      	b.n	80155be <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80155aa:	887a      	ldrh	r2, [r7, #2]
 80155ac:	697b      	ldr	r3, [r7, #20]
 80155ae:	9300      	str	r3, [sp, #0]
 80155b0:	4613      	mov	r3, r2
 80155b2:	687a      	ldr	r2, [r7, #4]
 80155b4:	68b9      	ldr	r1, [r7, #8]
 80155b6:	68f8      	ldr	r0, [r7, #12]
 80155b8:	f000 f810 	bl	80155dc <udp_sendto_if>
 80155bc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80155be:	4618      	mov	r0, r3
 80155c0:	3718      	adds	r7, #24
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bd80      	pop	{r7, pc}
 80155c6:	bf00      	nop
 80155c8:	0801ab20 	.word	0x0801ab20
 80155cc:	0801ac44 	.word	0x0801ac44
 80155d0:	0801ab74 	.word	0x0801ab74
 80155d4:	0801ac5c 	.word	0x0801ac5c
 80155d8:	0801ac78 	.word	0x0801ac78

080155dc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80155dc:	b580      	push	{r7, lr}
 80155de:	b088      	sub	sp, #32
 80155e0:	af02      	add	r7, sp, #8
 80155e2:	60f8      	str	r0, [r7, #12]
 80155e4:	60b9      	str	r1, [r7, #8]
 80155e6:	607a      	str	r2, [r7, #4]
 80155e8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d109      	bne.n	8015604 <udp_sendto_if+0x28>
 80155f0:	4b2e      	ldr	r3, [pc, #184]	; (80156ac <udp_sendto_if+0xd0>)
 80155f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80155f6:	492e      	ldr	r1, [pc, #184]	; (80156b0 <udp_sendto_if+0xd4>)
 80155f8:	482e      	ldr	r0, [pc, #184]	; (80156b4 <udp_sendto_if+0xd8>)
 80155fa:	f000 fddf 	bl	80161bc <iprintf>
 80155fe:	f06f 030f 	mvn.w	r3, #15
 8015602:	e04f      	b.n	80156a4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015604:	68bb      	ldr	r3, [r7, #8]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d109      	bne.n	801561e <udp_sendto_if+0x42>
 801560a:	4b28      	ldr	r3, [pc, #160]	; (80156ac <udp_sendto_if+0xd0>)
 801560c:	f240 2281 	movw	r2, #641	; 0x281
 8015610:	4929      	ldr	r1, [pc, #164]	; (80156b8 <udp_sendto_if+0xdc>)
 8015612:	4828      	ldr	r0, [pc, #160]	; (80156b4 <udp_sendto_if+0xd8>)
 8015614:	f000 fdd2 	bl	80161bc <iprintf>
 8015618:	f06f 030f 	mvn.w	r3, #15
 801561c:	e042      	b.n	80156a4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d109      	bne.n	8015638 <udp_sendto_if+0x5c>
 8015624:	4b21      	ldr	r3, [pc, #132]	; (80156ac <udp_sendto_if+0xd0>)
 8015626:	f240 2282 	movw	r2, #642	; 0x282
 801562a:	4924      	ldr	r1, [pc, #144]	; (80156bc <udp_sendto_if+0xe0>)
 801562c:	4821      	ldr	r0, [pc, #132]	; (80156b4 <udp_sendto_if+0xd8>)
 801562e:	f000 fdc5 	bl	80161bc <iprintf>
 8015632:	f06f 030f 	mvn.w	r3, #15
 8015636:	e035      	b.n	80156a4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015638:	6a3b      	ldr	r3, [r7, #32]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d109      	bne.n	8015652 <udp_sendto_if+0x76>
 801563e:	4b1b      	ldr	r3, [pc, #108]	; (80156ac <udp_sendto_if+0xd0>)
 8015640:	f240 2283 	movw	r2, #643	; 0x283
 8015644:	491e      	ldr	r1, [pc, #120]	; (80156c0 <udp_sendto_if+0xe4>)
 8015646:	481b      	ldr	r0, [pc, #108]	; (80156b4 <udp_sendto_if+0xd8>)
 8015648:	f000 fdb8 	bl	80161bc <iprintf>
 801564c:	f06f 030f 	mvn.w	r3, #15
 8015650:	e028      	b.n	80156a4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d009      	beq.n	801566c <udp_sendto_if+0x90>
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d005      	beq.n	801566c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015668:	2be0      	cmp	r3, #224	; 0xe0
 801566a:	d103      	bne.n	8015674 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801566c:	6a3b      	ldr	r3, [r7, #32]
 801566e:	3304      	adds	r3, #4
 8015670:	617b      	str	r3, [r7, #20]
 8015672:	e00b      	b.n	801568c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	681a      	ldr	r2, [r3, #0]
 8015678:	6a3b      	ldr	r3, [r7, #32]
 801567a:	3304      	adds	r3, #4
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	429a      	cmp	r2, r3
 8015680:	d002      	beq.n	8015688 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015682:	f06f 0303 	mvn.w	r3, #3
 8015686:	e00d      	b.n	80156a4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801568c:	887a      	ldrh	r2, [r7, #2]
 801568e:	697b      	ldr	r3, [r7, #20]
 8015690:	9301      	str	r3, [sp, #4]
 8015692:	6a3b      	ldr	r3, [r7, #32]
 8015694:	9300      	str	r3, [sp, #0]
 8015696:	4613      	mov	r3, r2
 8015698:	687a      	ldr	r2, [r7, #4]
 801569a:	68b9      	ldr	r1, [r7, #8]
 801569c:	68f8      	ldr	r0, [r7, #12]
 801569e:	f000 f811 	bl	80156c4 <udp_sendto_if_src>
 80156a2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80156a4:	4618      	mov	r0, r3
 80156a6:	3718      	adds	r7, #24
 80156a8:	46bd      	mov	sp, r7
 80156aa:	bd80      	pop	{r7, pc}
 80156ac:	0801ab20 	.word	0x0801ab20
 80156b0:	0801ac94 	.word	0x0801ac94
 80156b4:	0801ab74 	.word	0x0801ab74
 80156b8:	0801acb0 	.word	0x0801acb0
 80156bc:	0801accc 	.word	0x0801accc
 80156c0:	0801acec 	.word	0x0801acec

080156c4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b08c      	sub	sp, #48	; 0x30
 80156c8:	af04      	add	r7, sp, #16
 80156ca:	60f8      	str	r0, [r7, #12]
 80156cc:	60b9      	str	r1, [r7, #8]
 80156ce:	607a      	str	r2, [r7, #4]
 80156d0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d109      	bne.n	80156ec <udp_sendto_if_src+0x28>
 80156d8:	4b66      	ldr	r3, [pc, #408]	; (8015874 <udp_sendto_if_src+0x1b0>)
 80156da:	f240 22d1 	movw	r2, #721	; 0x2d1
 80156de:	4966      	ldr	r1, [pc, #408]	; (8015878 <udp_sendto_if_src+0x1b4>)
 80156e0:	4866      	ldr	r0, [pc, #408]	; (801587c <udp_sendto_if_src+0x1b8>)
 80156e2:	f000 fd6b 	bl	80161bc <iprintf>
 80156e6:	f06f 030f 	mvn.w	r3, #15
 80156ea:	e0be      	b.n	801586a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80156ec:	68bb      	ldr	r3, [r7, #8]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d109      	bne.n	8015706 <udp_sendto_if_src+0x42>
 80156f2:	4b60      	ldr	r3, [pc, #384]	; (8015874 <udp_sendto_if_src+0x1b0>)
 80156f4:	f240 22d2 	movw	r2, #722	; 0x2d2
 80156f8:	4961      	ldr	r1, [pc, #388]	; (8015880 <udp_sendto_if_src+0x1bc>)
 80156fa:	4860      	ldr	r0, [pc, #384]	; (801587c <udp_sendto_if_src+0x1b8>)
 80156fc:	f000 fd5e 	bl	80161bc <iprintf>
 8015700:	f06f 030f 	mvn.w	r3, #15
 8015704:	e0b1      	b.n	801586a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d109      	bne.n	8015720 <udp_sendto_if_src+0x5c>
 801570c:	4b59      	ldr	r3, [pc, #356]	; (8015874 <udp_sendto_if_src+0x1b0>)
 801570e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015712:	495c      	ldr	r1, [pc, #368]	; (8015884 <udp_sendto_if_src+0x1c0>)
 8015714:	4859      	ldr	r0, [pc, #356]	; (801587c <udp_sendto_if_src+0x1b8>)
 8015716:	f000 fd51 	bl	80161bc <iprintf>
 801571a:	f06f 030f 	mvn.w	r3, #15
 801571e:	e0a4      	b.n	801586a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015722:	2b00      	cmp	r3, #0
 8015724:	d109      	bne.n	801573a <udp_sendto_if_src+0x76>
 8015726:	4b53      	ldr	r3, [pc, #332]	; (8015874 <udp_sendto_if_src+0x1b0>)
 8015728:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801572c:	4956      	ldr	r1, [pc, #344]	; (8015888 <udp_sendto_if_src+0x1c4>)
 801572e:	4853      	ldr	r0, [pc, #332]	; (801587c <udp_sendto_if_src+0x1b8>)
 8015730:	f000 fd44 	bl	80161bc <iprintf>
 8015734:	f06f 030f 	mvn.w	r3, #15
 8015738:	e097      	b.n	801586a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573c:	2b00      	cmp	r3, #0
 801573e:	d109      	bne.n	8015754 <udp_sendto_if_src+0x90>
 8015740:	4b4c      	ldr	r3, [pc, #304]	; (8015874 <udp_sendto_if_src+0x1b0>)
 8015742:	f240 22d5 	movw	r2, #725	; 0x2d5
 8015746:	4951      	ldr	r1, [pc, #324]	; (801588c <udp_sendto_if_src+0x1c8>)
 8015748:	484c      	ldr	r0, [pc, #304]	; (801587c <udp_sendto_if_src+0x1b8>)
 801574a:	f000 fd37 	bl	80161bc <iprintf>
 801574e:	f06f 030f 	mvn.w	r3, #15
 8015752:	e08a      	b.n	801586a <udp_sendto_if_src+0x1a6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	8a5b      	ldrh	r3, [r3, #18]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d10f      	bne.n	801577c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801575c:	68f9      	ldr	r1, [r7, #12]
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	8a5b      	ldrh	r3, [r3, #18]
 8015762:	461a      	mov	r2, r3
 8015764:	68f8      	ldr	r0, [r7, #12]
 8015766:	f000 f895 	bl	8015894 <udp_bind>
 801576a:	4603      	mov	r3, r0
 801576c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801576e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d002      	beq.n	801577c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015776:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801577a:	e076      	b.n	801586a <udp_sendto_if_src+0x1a6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	891b      	ldrh	r3, [r3, #8]
 8015780:	3308      	adds	r3, #8
 8015782:	b29a      	uxth	r2, r3
 8015784:	68bb      	ldr	r3, [r7, #8]
 8015786:	891b      	ldrh	r3, [r3, #8]
 8015788:	429a      	cmp	r2, r3
 801578a:	d202      	bcs.n	8015792 <udp_sendto_if_src+0xce>
    return ERR_MEM;
 801578c:	f04f 33ff 	mov.w	r3, #4294967295
 8015790:	e06b      	b.n	801586a <udp_sendto_if_src+0x1a6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8015792:	2108      	movs	r1, #8
 8015794:	68b8      	ldr	r0, [r7, #8]
 8015796:	f7f8 ff63 	bl	800e660 <pbuf_add_header>
 801579a:	4603      	mov	r3, r0
 801579c:	2b00      	cmp	r3, #0
 801579e:	d015      	beq.n	80157cc <udp_sendto_if_src+0x108>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80157a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80157a4:	2108      	movs	r1, #8
 80157a6:	2022      	movs	r0, #34	; 0x22
 80157a8:	f7f8 fd0e 	bl	800e1c8 <pbuf_alloc>
 80157ac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80157ae:	69fb      	ldr	r3, [r7, #28]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d102      	bne.n	80157ba <udp_sendto_if_src+0xf6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80157b4:	f04f 33ff 	mov.w	r3, #4294967295
 80157b8:	e057      	b.n	801586a <udp_sendto_if_src+0x1a6>
    }
    if (p->tot_len != 0) {
 80157ba:	68bb      	ldr	r3, [r7, #8]
 80157bc:	891b      	ldrh	r3, [r3, #8]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d006      	beq.n	80157d0 <udp_sendto_if_src+0x10c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80157c2:	68b9      	ldr	r1, [r7, #8]
 80157c4:	69f8      	ldr	r0, [r7, #28]
 80157c6:	f7f9 f937 	bl	800ea38 <pbuf_chain>
 80157ca:	e001      	b.n	80157d0 <udp_sendto_if_src+0x10c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80157d0:	69fb      	ldr	r3, [r7, #28]
 80157d2:	895b      	ldrh	r3, [r3, #10]
 80157d4:	2b07      	cmp	r3, #7
 80157d6:	d806      	bhi.n	80157e6 <udp_sendto_if_src+0x122>
 80157d8:	4b26      	ldr	r3, [pc, #152]	; (8015874 <udp_sendto_if_src+0x1b0>)
 80157da:	f240 320e 	movw	r2, #782	; 0x30e
 80157de:	492c      	ldr	r1, [pc, #176]	; (8015890 <udp_sendto_if_src+0x1cc>)
 80157e0:	4826      	ldr	r0, [pc, #152]	; (801587c <udp_sendto_if_src+0x1b8>)
 80157e2:	f000 fceb 	bl	80161bc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80157e6:	69fb      	ldr	r3, [r7, #28]
 80157e8:	685b      	ldr	r3, [r3, #4]
 80157ea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	8a5b      	ldrh	r3, [r3, #18]
 80157f0:	4618      	mov	r0, r3
 80157f2:	f7f5 fa47 	bl	800ac84 <lwip_htons>
 80157f6:	4603      	mov	r3, r0
 80157f8:	461a      	mov	r2, r3
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80157fe:	887b      	ldrh	r3, [r7, #2]
 8015800:	4618      	mov	r0, r3
 8015802:	f7f5 fa3f 	bl	800ac84 <lwip_htons>
 8015806:	4603      	mov	r3, r0
 8015808:	461a      	mov	r2, r3
 801580a:	697b      	ldr	r3, [r7, #20]
 801580c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801580e:	697b      	ldr	r3, [r7, #20]
 8015810:	2200      	movs	r2, #0
 8015812:	719a      	strb	r2, [r3, #6]
 8015814:	2200      	movs	r2, #0
 8015816:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015818:	69fb      	ldr	r3, [r7, #28]
 801581a:	891b      	ldrh	r3, [r3, #8]
 801581c:	4618      	mov	r0, r3
 801581e:	f7f5 fa31 	bl	800ac84 <lwip_htons>
 8015822:	4603      	mov	r3, r0
 8015824:	461a      	mov	r2, r3
 8015826:	697b      	ldr	r3, [r7, #20]
 8015828:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801582a:	2311      	movs	r3, #17
 801582c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	7adb      	ldrb	r3, [r3, #11]
 8015832:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	7a9b      	ldrb	r3, [r3, #10]
 8015838:	7cb9      	ldrb	r1, [r7, #18]
 801583a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801583c:	9202      	str	r2, [sp, #8]
 801583e:	7cfa      	ldrb	r2, [r7, #19]
 8015840:	9201      	str	r2, [sp, #4]
 8015842:	9300      	str	r3, [sp, #0]
 8015844:	460b      	mov	r3, r1
 8015846:	687a      	ldr	r2, [r7, #4]
 8015848:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801584a:	69f8      	ldr	r0, [r7, #28]
 801584c:	f7f6 fd1a 	bl	800c284 <ip4_output_if_src>
 8015850:	4603      	mov	r3, r0
 8015852:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015854:	69fa      	ldr	r2, [r7, #28]
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	429a      	cmp	r2, r3
 801585a:	d004      	beq.n	8015866 <udp_sendto_if_src+0x1a2>
    /* free the header pbuf */
    pbuf_free(q);
 801585c:	69f8      	ldr	r0, [r7, #28]
 801585e:	f7f8 ffc7 	bl	800e7f0 <pbuf_free>
    q = NULL;
 8015862:	2300      	movs	r3, #0
 8015864:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015866:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801586a:	4618      	mov	r0, r3
 801586c:	3720      	adds	r7, #32
 801586e:	46bd      	mov	sp, r7
 8015870:	bd80      	pop	{r7, pc}
 8015872:	bf00      	nop
 8015874:	0801ab20 	.word	0x0801ab20
 8015878:	0801ad0c 	.word	0x0801ad0c
 801587c:	0801ab74 	.word	0x0801ab74
 8015880:	0801ad2c 	.word	0x0801ad2c
 8015884:	0801ad4c 	.word	0x0801ad4c
 8015888:	0801ad70 	.word	0x0801ad70
 801588c:	0801ad94 	.word	0x0801ad94
 8015890:	0801adb8 	.word	0x0801adb8

08015894 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b086      	sub	sp, #24
 8015898:	af00      	add	r7, sp, #0
 801589a:	60f8      	str	r0, [r7, #12]
 801589c:	60b9      	str	r1, [r7, #8]
 801589e:	4613      	mov	r3, r2
 80158a0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80158a2:	68bb      	ldr	r3, [r7, #8]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d101      	bne.n	80158ac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80158a8:	4b39      	ldr	r3, [pc, #228]	; (8015990 <udp_bind+0xfc>)
 80158aa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d109      	bne.n	80158c6 <udp_bind+0x32>
 80158b2:	4b38      	ldr	r3, [pc, #224]	; (8015994 <udp_bind+0x100>)
 80158b4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80158b8:	4937      	ldr	r1, [pc, #220]	; (8015998 <udp_bind+0x104>)
 80158ba:	4838      	ldr	r0, [pc, #224]	; (801599c <udp_bind+0x108>)
 80158bc:	f000 fc7e 	bl	80161bc <iprintf>
 80158c0:	f06f 030f 	mvn.w	r3, #15
 80158c4:	e060      	b.n	8015988 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80158c6:	2300      	movs	r3, #0
 80158c8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80158ca:	4b35      	ldr	r3, [pc, #212]	; (80159a0 <udp_bind+0x10c>)
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	617b      	str	r3, [r7, #20]
 80158d0:	e009      	b.n	80158e6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80158d2:	68fa      	ldr	r2, [r7, #12]
 80158d4:	697b      	ldr	r3, [r7, #20]
 80158d6:	429a      	cmp	r2, r3
 80158d8:	d102      	bne.n	80158e0 <udp_bind+0x4c>
      rebind = 1;
 80158da:	2301      	movs	r3, #1
 80158dc:	74fb      	strb	r3, [r7, #19]
      break;
 80158de:	e005      	b.n	80158ec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80158e0:	697b      	ldr	r3, [r7, #20]
 80158e2:	68db      	ldr	r3, [r3, #12]
 80158e4:	617b      	str	r3, [r7, #20]
 80158e6:	697b      	ldr	r3, [r7, #20]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d1f2      	bne.n	80158d2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80158ec:	88fb      	ldrh	r3, [r7, #6]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d109      	bne.n	8015906 <udp_bind+0x72>
    port = udp_new_port();
 80158f2:	f7ff fc33 	bl	801515c <udp_new_port>
 80158f6:	4603      	mov	r3, r0
 80158f8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80158fa:	88fb      	ldrh	r3, [r7, #6]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d12c      	bne.n	801595a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015900:	f06f 0307 	mvn.w	r3, #7
 8015904:	e040      	b.n	8015988 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015906:	4b26      	ldr	r3, [pc, #152]	; (80159a0 <udp_bind+0x10c>)
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	617b      	str	r3, [r7, #20]
 801590c:	e022      	b.n	8015954 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801590e:	68fa      	ldr	r2, [r7, #12]
 8015910:	697b      	ldr	r3, [r7, #20]
 8015912:	429a      	cmp	r2, r3
 8015914:	d01b      	beq.n	801594e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	8a5b      	ldrh	r3, [r3, #18]
 801591a:	88fa      	ldrh	r2, [r7, #6]
 801591c:	429a      	cmp	r2, r3
 801591e:	d116      	bne.n	801594e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015920:	697b      	ldr	r3, [r7, #20]
 8015922:	681a      	ldr	r2, [r3, #0]
 8015924:	68bb      	ldr	r3, [r7, #8]
 8015926:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015928:	429a      	cmp	r2, r3
 801592a:	d00d      	beq.n	8015948 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801592c:	68bb      	ldr	r3, [r7, #8]
 801592e:	2b00      	cmp	r3, #0
 8015930:	d00a      	beq.n	8015948 <udp_bind+0xb4>
 8015932:	68bb      	ldr	r3, [r7, #8]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d006      	beq.n	8015948 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801593a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801593c:	2b00      	cmp	r3, #0
 801593e:	d003      	beq.n	8015948 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015940:	697b      	ldr	r3, [r7, #20]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d102      	bne.n	801594e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015948:	f06f 0307 	mvn.w	r3, #7
 801594c:	e01c      	b.n	8015988 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801594e:	697b      	ldr	r3, [r7, #20]
 8015950:	68db      	ldr	r3, [r3, #12]
 8015952:	617b      	str	r3, [r7, #20]
 8015954:	697b      	ldr	r3, [r7, #20]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d1d9      	bne.n	801590e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801595a:	68bb      	ldr	r3, [r7, #8]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d002      	beq.n	8015966 <udp_bind+0xd2>
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	e000      	b.n	8015968 <udp_bind+0xd4>
 8015966:	2300      	movs	r3, #0
 8015968:	68fa      	ldr	r2, [r7, #12]
 801596a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	88fa      	ldrh	r2, [r7, #6]
 8015970:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8015972:	7cfb      	ldrb	r3, [r7, #19]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d106      	bne.n	8015986 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015978:	4b09      	ldr	r3, [pc, #36]	; (80159a0 <udp_bind+0x10c>)
 801597a:	681a      	ldr	r2, [r3, #0]
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015980:	4a07      	ldr	r2, [pc, #28]	; (80159a0 <udp_bind+0x10c>)
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015986:	2300      	movs	r3, #0
}
 8015988:	4618      	mov	r0, r3
 801598a:	3718      	adds	r7, #24
 801598c:	46bd      	mov	sp, r7
 801598e:	bd80      	pop	{r7, pc}
 8015990:	0801af78 	.word	0x0801af78
 8015994:	0801ab20 	.word	0x0801ab20
 8015998:	0801ade8 	.word	0x0801ade8
 801599c:	0801ab74 	.word	0x0801ab74
 80159a0:	2000e504 	.word	0x2000e504

080159a4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b084      	sub	sp, #16
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	60f8      	str	r0, [r7, #12]
 80159ac:	60b9      	str	r1, [r7, #8]
 80159ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d107      	bne.n	80159c6 <udp_recv+0x22>
 80159b6:	4b08      	ldr	r3, [pc, #32]	; (80159d8 <udp_recv+0x34>)
 80159b8:	f240 428a 	movw	r2, #1162	; 0x48a
 80159bc:	4907      	ldr	r1, [pc, #28]	; (80159dc <udp_recv+0x38>)
 80159be:	4808      	ldr	r0, [pc, #32]	; (80159e0 <udp_recv+0x3c>)
 80159c0:	f000 fbfc 	bl	80161bc <iprintf>
 80159c4:	e005      	b.n	80159d2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	68ba      	ldr	r2, [r7, #8]
 80159ca:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	687a      	ldr	r2, [r7, #4]
 80159d0:	61da      	str	r2, [r3, #28]
}
 80159d2:	3710      	adds	r7, #16
 80159d4:	46bd      	mov	sp, r7
 80159d6:	bd80      	pop	{r7, pc}
 80159d8:	0801ab20 	.word	0x0801ab20
 80159dc:	0801ae54 	.word	0x0801ae54
 80159e0:	0801ab74 	.word	0x0801ab74

080159e4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b084      	sub	sp, #16
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d107      	bne.n	8015a02 <udp_remove+0x1e>
 80159f2:	4b19      	ldr	r3, [pc, #100]	; (8015a58 <udp_remove+0x74>)
 80159f4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80159f8:	4918      	ldr	r1, [pc, #96]	; (8015a5c <udp_remove+0x78>)
 80159fa:	4819      	ldr	r0, [pc, #100]	; (8015a60 <udp_remove+0x7c>)
 80159fc:	f000 fbde 	bl	80161bc <iprintf>
 8015a00:	e026      	b.n	8015a50 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015a02:	4b18      	ldr	r3, [pc, #96]	; (8015a64 <udp_remove+0x80>)
 8015a04:	681a      	ldr	r2, [r3, #0]
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	429a      	cmp	r2, r3
 8015a0a:	d105      	bne.n	8015a18 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015a0c:	4b15      	ldr	r3, [pc, #84]	; (8015a64 <udp_remove+0x80>)
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	68db      	ldr	r3, [r3, #12]
 8015a12:	4a14      	ldr	r2, [pc, #80]	; (8015a64 <udp_remove+0x80>)
 8015a14:	6013      	str	r3, [r2, #0]
 8015a16:	e017      	b.n	8015a48 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015a18:	4b12      	ldr	r3, [pc, #72]	; (8015a64 <udp_remove+0x80>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	60fb      	str	r3, [r7, #12]
 8015a1e:	e010      	b.n	8015a42 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	68db      	ldr	r3, [r3, #12]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d009      	beq.n	8015a3c <udp_remove+0x58>
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	68da      	ldr	r2, [r3, #12]
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	429a      	cmp	r2, r3
 8015a30:	d104      	bne.n	8015a3c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	68da      	ldr	r2, [r3, #12]
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	60da      	str	r2, [r3, #12]
        break;
 8015a3a:	e005      	b.n	8015a48 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	68db      	ldr	r3, [r3, #12]
 8015a40:	60fb      	str	r3, [r7, #12]
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d1eb      	bne.n	8015a20 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015a48:	6879      	ldr	r1, [r7, #4]
 8015a4a:	2000      	movs	r0, #0
 8015a4c:	f7f7 fffc 	bl	800da48 <memp_free>
}
 8015a50:	3710      	adds	r7, #16
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd80      	pop	{r7, pc}
 8015a56:	bf00      	nop
 8015a58:	0801ab20 	.word	0x0801ab20
 8015a5c:	0801ae6c 	.word	0x0801ae6c
 8015a60:	0801ab74 	.word	0x0801ab74
 8015a64:	2000e504 	.word	0x2000e504

08015a68 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b082      	sub	sp, #8
 8015a6c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015a6e:	2000      	movs	r0, #0
 8015a70:	f7f7 ff98 	bl	800d9a4 <memp_malloc>
 8015a74:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d007      	beq.n	8015a8c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015a7c:	2220      	movs	r2, #32
 8015a7e:	2100      	movs	r1, #0
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	f000 fb65 	bl	8016150 <memset>
    pcb->ttl = UDP_TTL;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	22ff      	movs	r2, #255	; 0xff
 8015a8a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015a8c:	687b      	ldr	r3, [r7, #4]
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3708      	adds	r7, #8
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}

08015a96 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8015a96:	b580      	push	{r7, lr}
 8015a98:	b084      	sub	sp, #16
 8015a9a:	af00      	add	r7, sp, #0
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015aa0:	f7ff ffe2 	bl	8015a68 <udp_new>
 8015aa4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015aa6:	68fb      	ldr	r3, [r7, #12]
}
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	3710      	adds	r7, #16
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}

08015ab0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015ab0:	b480      	push	{r7}
 8015ab2:	b085      	sub	sp, #20
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
 8015ab8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d01e      	beq.n	8015afe <udp_netif_ip_addr_changed+0x4e>
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d01a      	beq.n	8015afe <udp_netif_ip_addr_changed+0x4e>
 8015ac8:	683b      	ldr	r3, [r7, #0]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d017      	beq.n	8015afe <udp_netif_ip_addr_changed+0x4e>
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d013      	beq.n	8015afe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015ad6:	4b0d      	ldr	r3, [pc, #52]	; (8015b0c <udp_netif_ip_addr_changed+0x5c>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	60fb      	str	r3, [r7, #12]
 8015adc:	e00c      	b.n	8015af8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	681a      	ldr	r2, [r3, #0]
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	429a      	cmp	r2, r3
 8015ae8:	d103      	bne.n	8015af2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015aea:	683b      	ldr	r3, [r7, #0]
 8015aec:	681a      	ldr	r2, [r3, #0]
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	68db      	ldr	r3, [r3, #12]
 8015af6:	60fb      	str	r3, [r7, #12]
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d1ef      	bne.n	8015ade <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015afe:	bf00      	nop
 8015b00:	3714      	adds	r7, #20
 8015b02:	46bd      	mov	sp, r7
 8015b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b08:	4770      	bx	lr
 8015b0a:	bf00      	nop
 8015b0c:	2000e504 	.word	0x2000e504

08015b10 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b086      	sub	sp, #24
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
 8015b18:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015b1a:	230e      	movs	r3, #14
 8015b1c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	895b      	ldrh	r3, [r3, #10]
 8015b22:	2b0e      	cmp	r3, #14
 8015b24:	d96e      	bls.n	8015c04 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	7bdb      	ldrb	r3, [r3, #15]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d106      	bne.n	8015b3c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015b34:	3301      	adds	r3, #1
 8015b36:	b2da      	uxtb	r2, r3
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	685b      	ldr	r3, [r3, #4]
 8015b40:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015b42:	693b      	ldr	r3, [r7, #16]
 8015b44:	7b1a      	ldrb	r2, [r3, #12]
 8015b46:	7b5b      	ldrb	r3, [r3, #13]
 8015b48:	021b      	lsls	r3, r3, #8
 8015b4a:	4313      	orrs	r3, r2
 8015b4c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015b4e:	693b      	ldr	r3, [r7, #16]
 8015b50:	781b      	ldrb	r3, [r3, #0]
 8015b52:	f003 0301 	and.w	r3, r3, #1
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d023      	beq.n	8015ba2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015b5a:	693b      	ldr	r3, [r7, #16]
 8015b5c:	781b      	ldrb	r3, [r3, #0]
 8015b5e:	2b01      	cmp	r3, #1
 8015b60:	d10f      	bne.n	8015b82 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015b62:	693b      	ldr	r3, [r7, #16]
 8015b64:	785b      	ldrb	r3, [r3, #1]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d11b      	bne.n	8015ba2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015b6a:	693b      	ldr	r3, [r7, #16]
 8015b6c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015b6e:	2b5e      	cmp	r3, #94	; 0x5e
 8015b70:	d117      	bne.n	8015ba2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	7b5b      	ldrb	r3, [r3, #13]
 8015b76:	f043 0310 	orr.w	r3, r3, #16
 8015b7a:	b2da      	uxtb	r2, r3
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	735a      	strb	r2, [r3, #13]
 8015b80:	e00f      	b.n	8015ba2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015b82:	693b      	ldr	r3, [r7, #16]
 8015b84:	2206      	movs	r2, #6
 8015b86:	4928      	ldr	r1, [pc, #160]	; (8015c28 <ethernet_input+0x118>)
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f000 fac7 	bl	801611c <memcmp>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d106      	bne.n	8015ba2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	7b5b      	ldrb	r3, [r3, #13]
 8015b98:	f043 0308 	orr.w	r3, r3, #8
 8015b9c:	b2da      	uxtb	r2, r3
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015ba2:	89fb      	ldrh	r3, [r7, #14]
 8015ba4:	2b08      	cmp	r3, #8
 8015ba6:	d003      	beq.n	8015bb0 <ethernet_input+0xa0>
 8015ba8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015bac:	d014      	beq.n	8015bd8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015bae:	e032      	b.n	8015c16 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015bb0:	683b      	ldr	r3, [r7, #0]
 8015bb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015bb6:	f003 0308 	and.w	r3, r3, #8
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d024      	beq.n	8015c08 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015bbe:	8afb      	ldrh	r3, [r7, #22]
 8015bc0:	4619      	mov	r1, r3
 8015bc2:	6878      	ldr	r0, [r7, #4]
 8015bc4:	f7f8 fd5c 	bl	800e680 <pbuf_remove_header>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d11e      	bne.n	8015c0c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015bce:	6839      	ldr	r1, [r7, #0]
 8015bd0:	6878      	ldr	r0, [r7, #4]
 8015bd2:	f7f6 fa0d 	bl	800bff0 <ip4_input>
      break;
 8015bd6:	e013      	b.n	8015c00 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015bde:	f003 0308 	and.w	r3, r3, #8
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d014      	beq.n	8015c10 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015be6:	8afb      	ldrh	r3, [r7, #22]
 8015be8:	4619      	mov	r1, r3
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	f7f8 fd48 	bl	800e680 <pbuf_remove_header>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d10e      	bne.n	8015c14 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015bf6:	6839      	ldr	r1, [r7, #0]
 8015bf8:	6878      	ldr	r0, [r7, #4]
 8015bfa:	f7f5 fbb1 	bl	800b360 <etharp_input>
      break;
 8015bfe:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015c00:	2300      	movs	r3, #0
 8015c02:	e00c      	b.n	8015c1e <ethernet_input+0x10e>
    goto free_and_return;
 8015c04:	bf00      	nop
 8015c06:	e006      	b.n	8015c16 <ethernet_input+0x106>
        goto free_and_return;
 8015c08:	bf00      	nop
 8015c0a:	e004      	b.n	8015c16 <ethernet_input+0x106>
        goto free_and_return;
 8015c0c:	bf00      	nop
 8015c0e:	e002      	b.n	8015c16 <ethernet_input+0x106>
        goto free_and_return;
 8015c10:	bf00      	nop
 8015c12:	e000      	b.n	8015c16 <ethernet_input+0x106>
        goto free_and_return;
 8015c14:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015c16:	6878      	ldr	r0, [r7, #4]
 8015c18:	f7f8 fdea 	bl	800e7f0 <pbuf_free>
  return ERR_OK;
 8015c1c:	2300      	movs	r3, #0
}
 8015c1e:	4618      	mov	r0, r3
 8015c20:	3718      	adds	r7, #24
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd80      	pop	{r7, pc}
 8015c26:	bf00      	nop
 8015c28:	0801b08c 	.word	0x0801b08c

08015c2c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b086      	sub	sp, #24
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	60f8      	str	r0, [r7, #12]
 8015c34:	60b9      	str	r1, [r7, #8]
 8015c36:	607a      	str	r2, [r7, #4]
 8015c38:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015c3a:	8c3b      	ldrh	r3, [r7, #32]
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f7f5 f821 	bl	800ac84 <lwip_htons>
 8015c42:	4603      	mov	r3, r0
 8015c44:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015c46:	210e      	movs	r1, #14
 8015c48:	68b8      	ldr	r0, [r7, #8]
 8015c4a:	f7f8 fd09 	bl	800e660 <pbuf_add_header>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d125      	bne.n	8015ca0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015c54:	68bb      	ldr	r3, [r7, #8]
 8015c56:	685b      	ldr	r3, [r3, #4]
 8015c58:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015c5a:	693b      	ldr	r3, [r7, #16]
 8015c5c:	8afa      	ldrh	r2, [r7, #22]
 8015c5e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015c60:	693b      	ldr	r3, [r7, #16]
 8015c62:	2206      	movs	r2, #6
 8015c64:	6839      	ldr	r1, [r7, #0]
 8015c66:	4618      	mov	r0, r3
 8015c68:	f000 fa67 	bl	801613a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015c6c:	693b      	ldr	r3, [r7, #16]
 8015c6e:	3306      	adds	r3, #6
 8015c70:	2206      	movs	r2, #6
 8015c72:	6879      	ldr	r1, [r7, #4]
 8015c74:	4618      	mov	r0, r3
 8015c76:	f000 fa60 	bl	801613a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015c80:	2b06      	cmp	r3, #6
 8015c82:	d006      	beq.n	8015c92 <ethernet_output+0x66>
 8015c84:	4b0a      	ldr	r3, [pc, #40]	; (8015cb0 <ethernet_output+0x84>)
 8015c86:	f240 1233 	movw	r2, #307	; 0x133
 8015c8a:	490a      	ldr	r1, [pc, #40]	; (8015cb4 <ethernet_output+0x88>)
 8015c8c:	480a      	ldr	r0, [pc, #40]	; (8015cb8 <ethernet_output+0x8c>)
 8015c8e:	f000 fa95 	bl	80161bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	699b      	ldr	r3, [r3, #24]
 8015c96:	68b9      	ldr	r1, [r7, #8]
 8015c98:	68f8      	ldr	r0, [r7, #12]
 8015c9a:	4798      	blx	r3
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	e002      	b.n	8015ca6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015ca0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015ca2:	f06f 0301 	mvn.w	r3, #1
}
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	3718      	adds	r7, #24
 8015caa:	46bd      	mov	sp, r7
 8015cac:	bd80      	pop	{r7, pc}
 8015cae:	bf00      	nop
 8015cb0:	0801ae84 	.word	0x0801ae84
 8015cb4:	0801aebc 	.word	0x0801aebc
 8015cb8:	0801aef0 	.word	0x0801aef0

08015cbc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b086      	sub	sp, #24
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
 8015cc4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015cc6:	683b      	ldr	r3, [r7, #0]
 8015cc8:	60bb      	str	r3, [r7, #8]
 8015cca:	2304      	movs	r3, #4
 8015ccc:	60fb      	str	r3, [r7, #12]
 8015cce:	2300      	movs	r3, #0
 8015cd0:	613b      	str	r3, [r7, #16]
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015cd6:	f107 0308 	add.w	r3, r7, #8
 8015cda:	2100      	movs	r1, #0
 8015cdc:	4618      	mov	r0, r3
 8015cde:	f7ee fc68 	bl	80045b2 <osMessageCreate>
 8015ce2:	4602      	mov	r2, r0
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d102      	bne.n	8015cf6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8015cf4:	e000      	b.n	8015cf8 <sys_mbox_new+0x3c>

  return ERR_OK;
 8015cf6:	2300      	movs	r3, #0
}
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	3718      	adds	r7, #24
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}

08015d00 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b082      	sub	sp, #8
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f7ee fd2d 	bl	800476c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	4618      	mov	r0, r3
 8015d18:	f7ee fd3e 	bl	8004798 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8015d1c:	bf00      	nop
 8015d1e:	3708      	adds	r7, #8
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd80      	pop	{r7, pc}

08015d24 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b084      	sub	sp, #16
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
 8015d2c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	6839      	ldr	r1, [r7, #0]
 8015d34:	2200      	movs	r2, #0
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7ee fc64 	bl	8004604 <osMessagePut>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d102      	bne.n	8015d48 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015d42:	2300      	movs	r3, #0
 8015d44:	73fb      	strb	r3, [r7, #15]
 8015d46:	e001      	b.n	8015d4c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015d48:	23ff      	movs	r3, #255	; 0xff
 8015d4a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015d50:	4618      	mov	r0, r3
 8015d52:	3710      	adds	r7, #16
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd80      	pop	{r7, pc}

08015d58 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b08c      	sub	sp, #48	; 0x30
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	61f8      	str	r0, [r7, #28]
 8015d60:	61b9      	str	r1, [r7, #24]
 8015d62:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015d64:	f7ee fa4d 	bl	8004202 <osKernelSysTick>
 8015d68:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015d6a:	697b      	ldr	r3, [r7, #20]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d017      	beq.n	8015da0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015d70:	69fb      	ldr	r3, [r7, #28]
 8015d72:	6819      	ldr	r1, [r3, #0]
 8015d74:	f107 0320 	add.w	r3, r7, #32
 8015d78:	697a      	ldr	r2, [r7, #20]
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	f7ee fc82 	bl	8004684 <osMessageGet>

    if(event.status == osEventMessage)
 8015d80:	6a3b      	ldr	r3, [r7, #32]
 8015d82:	2b10      	cmp	r3, #16
 8015d84:	d109      	bne.n	8015d9a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8015d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d88:	461a      	mov	r2, r3
 8015d8a:	69bb      	ldr	r3, [r7, #24]
 8015d8c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015d8e:	f7ee fa38 	bl	8004202 <osKernelSysTick>
 8015d92:	4602      	mov	r2, r0
 8015d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d96:	1ad3      	subs	r3, r2, r3
 8015d98:	e019      	b.n	8015dce <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8015d9e:	e016      	b.n	8015dce <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015da0:	69fb      	ldr	r3, [r7, #28]
 8015da2:	6819      	ldr	r1, [r3, #0]
 8015da4:	463b      	mov	r3, r7
 8015da6:	f04f 32ff 	mov.w	r2, #4294967295
 8015daa:	4618      	mov	r0, r3
 8015dac:	f7ee fc6a 	bl	8004684 <osMessageGet>
 8015db0:	f107 0320 	add.w	r3, r7, #32
 8015db4:	463a      	mov	r2, r7
 8015db6:	ca07      	ldmia	r2, {r0, r1, r2}
 8015db8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dbe:	461a      	mov	r2, r3
 8015dc0:	69bb      	ldr	r3, [r7, #24]
 8015dc2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015dc4:	f7ee fa1d 	bl	8004202 <osKernelSysTick>
 8015dc8:	4602      	mov	r2, r0
 8015dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dcc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015dce:	4618      	mov	r0, r3
 8015dd0:	3730      	adds	r7, #48	; 0x30
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	bd80      	pop	{r7, pc}

08015dd6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015dd6:	b580      	push	{r7, lr}
 8015dd8:	b086      	sub	sp, #24
 8015dda:	af00      	add	r7, sp, #0
 8015ddc:	6078      	str	r0, [r7, #4]
 8015dde:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	6819      	ldr	r1, [r3, #0]
 8015de4:	f107 030c 	add.w	r3, r7, #12
 8015de8:	2200      	movs	r2, #0
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7ee fc4a 	bl	8004684 <osMessageGet>

  if(event.status == osEventMessage)
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	2b10      	cmp	r3, #16
 8015df4:	d105      	bne.n	8015e02 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8015df6:	693b      	ldr	r3, [r7, #16]
 8015df8:	461a      	mov	r2, r3
 8015dfa:	683b      	ldr	r3, [r7, #0]
 8015dfc:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8015dfe:	2300      	movs	r3, #0
 8015e00:	e001      	b.n	8015e06 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015e02:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	3718      	adds	r7, #24
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}

08015e0e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015e0e:	b480      	push	{r7}
 8015e10:	b083      	sub	sp, #12
 8015e12:	af00      	add	r7, sp, #0
 8015e14:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d101      	bne.n	8015e22 <sys_mbox_valid+0x14>
    return 0;
 8015e1e:	2300      	movs	r3, #0
 8015e20:	e000      	b.n	8015e24 <sys_mbox_valid+0x16>
  else
    return 1;
 8015e22:	2301      	movs	r3, #1
}
 8015e24:	4618      	mov	r0, r3
 8015e26:	370c      	adds	r7, #12
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2e:	4770      	bx	lr

08015e30 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8015e30:	b480      	push	{r7}
 8015e32:	b083      	sub	sp, #12
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	601a      	str	r2, [r3, #0]
}
 8015e3e:	bf00      	nop
 8015e40:	370c      	adds	r7, #12
 8015e42:	46bd      	mov	sp, r7
 8015e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e48:	4770      	bx	lr

08015e4a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8015e4a:	b580      	push	{r7, lr}
 8015e4c:	b084      	sub	sp, #16
 8015e4e:	af00      	add	r7, sp, #0
 8015e50:	6078      	str	r0, [r7, #4]
 8015e52:	460b      	mov	r3, r1
 8015e54:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8015e56:	2300      	movs	r3, #0
 8015e58:	60bb      	str	r3, [r7, #8]
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8015e5e:	f107 0308 	add.w	r3, r7, #8
 8015e62:	2101      	movs	r1, #1
 8015e64:	4618      	mov	r0, r3
 8015e66:	f7ee fad9 	bl	800441c <osSemaphoreCreate>
 8015e6a:	4602      	mov	r2, r0
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d102      	bne.n	8015e7e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015e78:	f04f 33ff 	mov.w	r3, #4294967295
 8015e7c:	e009      	b.n	8015e92 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8015e7e:	78fb      	ldrb	r3, [r7, #3]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d105      	bne.n	8015e90 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	2100      	movs	r1, #0
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f7ee fafa 	bl	8004484 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8015e90:	2300      	movs	r3, #0
}
 8015e92:	4618      	mov	r0, r3
 8015e94:	3710      	adds	r7, #16
 8015e96:	46bd      	mov	sp, r7
 8015e98:	bd80      	pop	{r7, pc}

08015e9a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8015e9a:	b580      	push	{r7, lr}
 8015e9c:	b084      	sub	sp, #16
 8015e9e:	af00      	add	r7, sp, #0
 8015ea0:	6078      	str	r0, [r7, #4]
 8015ea2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8015ea4:	f7ee f9ad 	bl	8004202 <osKernelSysTick>
 8015ea8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d011      	beq.n	8015ed4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	6839      	ldr	r1, [r7, #0]
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f7ee fae4 	bl	8004484 <osSemaphoreWait>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d105      	bne.n	8015ece <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8015ec2:	f7ee f99e 	bl	8004202 <osKernelSysTick>
 8015ec6:	4602      	mov	r2, r0
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	1ad3      	subs	r3, r2, r3
 8015ecc:	e012      	b.n	8015ef4 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015ece:	f04f 33ff 	mov.w	r3, #4294967295
 8015ed2:	e00f      	b.n	8015ef4 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8015ed4:	bf00      	nop
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	f04f 31ff 	mov.w	r1, #4294967295
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f7ee fad0 	bl	8004484 <osSemaphoreWait>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d1f5      	bne.n	8015ed6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8015eea:	f7ee f98a 	bl	8004202 <osKernelSysTick>
 8015eee:	4602      	mov	r2, r0
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	3710      	adds	r7, #16
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	bd80      	pop	{r7, pc}

08015efc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b082      	sub	sp, #8
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f7ee fb09 	bl	8004520 <osSemaphoreRelease>
}
 8015f0e:	bf00      	nop
 8015f10:	3708      	adds	r7, #8
 8015f12:	46bd      	mov	sp, r7
 8015f14:	bd80      	pop	{r7, pc}

08015f16 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8015f16:	b580      	push	{r7, lr}
 8015f18:	b082      	sub	sp, #8
 8015f1a:	af00      	add	r7, sp, #0
 8015f1c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	4618      	mov	r0, r3
 8015f24:	f7ee fb32 	bl	800458c <osSemaphoreDelete>
}
 8015f28:	bf00      	nop
 8015f2a:	3708      	adds	r7, #8
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd80      	pop	{r7, pc}

08015f30 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015f30:	b480      	push	{r7}
 8015f32:	b083      	sub	sp, #12
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d101      	bne.n	8015f44 <sys_sem_valid+0x14>
    return 0;
 8015f40:	2300      	movs	r3, #0
 8015f42:	e000      	b.n	8015f46 <sys_sem_valid+0x16>
  else
    return 1;
 8015f44:	2301      	movs	r3, #1
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	370c      	adds	r7, #12
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f50:	4770      	bx	lr

08015f52 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8015f52:	b480      	push	{r7}
 8015f54:	b083      	sub	sp, #12
 8015f56:	af00      	add	r7, sp, #0
 8015f58:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	2200      	movs	r2, #0
 8015f5e:	601a      	str	r2, [r3, #0]
}
 8015f60:	bf00      	nop
 8015f62:	370c      	adds	r7, #12
 8015f64:	46bd      	mov	sp, r7
 8015f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6a:	4770      	bx	lr

08015f6c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015f70:	4803      	ldr	r0, [pc, #12]	; (8015f80 <sys_init+0x14>)
 8015f72:	f7ee f9b6 	bl	80042e2 <osMutexCreate>
 8015f76:	4602      	mov	r2, r0
 8015f78:	4b02      	ldr	r3, [pc, #8]	; (8015f84 <sys_init+0x18>)
 8015f7a:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015f7c:	bf00      	nop
 8015f7e:	bd80      	pop	{r7, pc}
 8015f80:	0801b09c 	.word	0x0801b09c
 8015f84:	2000e50c 	.word	0x2000e50c

08015f88 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b084      	sub	sp, #16
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015f90:	2300      	movs	r3, #0
 8015f92:	60bb      	str	r3, [r7, #8]
 8015f94:	2300      	movs	r3, #0
 8015f96:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015f98:	f107 0308 	add.w	r3, r7, #8
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f7ee f9a0 	bl	80042e2 <osMutexCreate>
 8015fa2:	4602      	mov	r2, r0
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d102      	bne.n	8015fb6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8015fb4:	e000      	b.n	8015fb8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015fb6:	2300      	movs	r3, #0
}
 8015fb8:	4618      	mov	r0, r3
 8015fba:	3710      	adds	r7, #16
 8015fbc:	46bd      	mov	sp, r7
 8015fbe:	bd80      	pop	{r7, pc}

08015fc0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b082      	sub	sp, #8
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f7ee f99f 	bl	8004314 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015fd6:	bf00      	nop
 8015fd8:	3708      	adds	r7, #8
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}

08015fde <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015fde:	b580      	push	{r7, lr}
 8015fe0:	b082      	sub	sp, #8
 8015fe2:	af00      	add	r7, sp, #0
 8015fe4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	4618      	mov	r0, r3
 8015fec:	f7ee f9e0 	bl	80043b0 <osMutexRelease>
}
 8015ff0:	bf00      	nop
 8015ff2:	3708      	adds	r7, #8
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}

08015ff8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b08c      	sub	sp, #48	; 0x30
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	60f8      	str	r0, [r7, #12]
 8016000:	60b9      	str	r1, [r7, #8]
 8016002:	607a      	str	r2, [r7, #4]
 8016004:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016006:	f107 0314 	add.w	r3, r7, #20
 801600a:	2200      	movs	r2, #0
 801600c:	601a      	str	r2, [r3, #0]
 801600e:	605a      	str	r2, [r3, #4]
 8016010:	609a      	str	r2, [r3, #8]
 8016012:	60da      	str	r2, [r3, #12]
 8016014:	611a      	str	r2, [r3, #16]
 8016016:	615a      	str	r2, [r3, #20]
 8016018:	619a      	str	r2, [r3, #24]
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	617b      	str	r3, [r7, #20]
 801601e:	68bb      	ldr	r3, [r7, #8]
 8016020:	61bb      	str	r3, [r7, #24]
 8016022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016024:	b21b      	sxth	r3, r3
 8016026:	83bb      	strh	r3, [r7, #28]
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801602c:	f107 0314 	add.w	r3, r7, #20
 8016030:	6879      	ldr	r1, [r7, #4]
 8016032:	4618      	mov	r0, r3
 8016034:	f7ee f8f5 	bl	8004222 <osThreadCreate>
 8016038:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801603a:	4618      	mov	r0, r3
 801603c:	3730      	adds	r7, #48	; 0x30
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}
	...

08016044 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016044:	b580      	push	{r7, lr}
 8016046:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016048:	4b04      	ldr	r3, [pc, #16]	; (801605c <sys_arch_protect+0x18>)
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	f04f 31ff 	mov.w	r1, #4294967295
 8016050:	4618      	mov	r0, r3
 8016052:	f7ee f95f 	bl	8004314 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016056:	2301      	movs	r3, #1
}
 8016058:	4618      	mov	r0, r3
 801605a:	bd80      	pop	{r7, pc}
 801605c:	2000e50c 	.word	0x2000e50c

08016060 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b082      	sub	sp, #8
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016068:	4b04      	ldr	r3, [pc, #16]	; (801607c <sys_arch_unprotect+0x1c>)
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	4618      	mov	r0, r3
 801606e:	f7ee f99f 	bl	80043b0 <osMutexRelease>
}
 8016072:	bf00      	nop
 8016074:	3708      	adds	r7, #8
 8016076:	46bd      	mov	sp, r7
 8016078:	bd80      	pop	{r7, pc}
 801607a:	bf00      	nop
 801607c:	2000e50c 	.word	0x2000e50c

08016080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8016080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80160b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8016084:	480d      	ldr	r0, [pc, #52]	; (80160bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8016086:	490e      	ldr	r1, [pc, #56]	; (80160c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8016088:	4a0e      	ldr	r2, [pc, #56]	; (80160c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801608a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801608c:	e002      	b.n	8016094 <LoopCopyDataInit>

0801608e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801608e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8016090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8016092:	3304      	adds	r3, #4

08016094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8016094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8016096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8016098:	d3f9      	bcc.n	801608e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801609a:	4a0b      	ldr	r2, [pc, #44]	; (80160c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 801609c:	4c0b      	ldr	r4, [pc, #44]	; (80160cc <LoopFillZerobss+0x26>)
  movs r3, #0
 801609e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80160a0:	e001      	b.n	80160a6 <LoopFillZerobss>

080160a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80160a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80160a4:	3204      	adds	r2, #4

080160a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80160a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80160a8:	d3fb      	bcc.n	80160a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80160aa:	f7ea fe4b 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80160ae:	f000 f811 	bl	80160d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80160b2:	f7ea fab7 	bl	8000624 <main>
  bx  lr    
 80160b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80160b8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80160bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80160c0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80160c4:	0801b7e8 	.word	0x0801b7e8
  ldr r2, =_sbss
 80160c8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80160cc:	2000e510 	.word	0x2000e510

080160d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80160d0:	e7fe      	b.n	80160d0 <ADC_IRQHandler>
	...

080160d4 <__libc_init_array>:
 80160d4:	b570      	push	{r4, r5, r6, lr}
 80160d6:	4e0d      	ldr	r6, [pc, #52]	; (801610c <__libc_init_array+0x38>)
 80160d8:	4c0d      	ldr	r4, [pc, #52]	; (8016110 <__libc_init_array+0x3c>)
 80160da:	1ba4      	subs	r4, r4, r6
 80160dc:	10a4      	asrs	r4, r4, #2
 80160de:	2500      	movs	r5, #0
 80160e0:	42a5      	cmp	r5, r4
 80160e2:	d109      	bne.n	80160f8 <__libc_init_array+0x24>
 80160e4:	4e0b      	ldr	r6, [pc, #44]	; (8016114 <__libc_init_array+0x40>)
 80160e6:	4c0c      	ldr	r4, [pc, #48]	; (8016118 <__libc_init_array+0x44>)
 80160e8:	f001 fa3c 	bl	8017564 <_init>
 80160ec:	1ba4      	subs	r4, r4, r6
 80160ee:	10a4      	asrs	r4, r4, #2
 80160f0:	2500      	movs	r5, #0
 80160f2:	42a5      	cmp	r5, r4
 80160f4:	d105      	bne.n	8016102 <__libc_init_array+0x2e>
 80160f6:	bd70      	pop	{r4, r5, r6, pc}
 80160f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80160fc:	4798      	blx	r3
 80160fe:	3501      	adds	r5, #1
 8016100:	e7ee      	b.n	80160e0 <__libc_init_array+0xc>
 8016102:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016106:	4798      	blx	r3
 8016108:	3501      	adds	r5, #1
 801610a:	e7f2      	b.n	80160f2 <__libc_init_array+0x1e>
 801610c:	0801b7e0 	.word	0x0801b7e0
 8016110:	0801b7e0 	.word	0x0801b7e0
 8016114:	0801b7e0 	.word	0x0801b7e0
 8016118:	0801b7e4 	.word	0x0801b7e4

0801611c <memcmp>:
 801611c:	b510      	push	{r4, lr}
 801611e:	3901      	subs	r1, #1
 8016120:	4402      	add	r2, r0
 8016122:	4290      	cmp	r0, r2
 8016124:	d101      	bne.n	801612a <memcmp+0xe>
 8016126:	2000      	movs	r0, #0
 8016128:	bd10      	pop	{r4, pc}
 801612a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801612e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016132:	42a3      	cmp	r3, r4
 8016134:	d0f5      	beq.n	8016122 <memcmp+0x6>
 8016136:	1b18      	subs	r0, r3, r4
 8016138:	bd10      	pop	{r4, pc}

0801613a <memcpy>:
 801613a:	b510      	push	{r4, lr}
 801613c:	1e43      	subs	r3, r0, #1
 801613e:	440a      	add	r2, r1
 8016140:	4291      	cmp	r1, r2
 8016142:	d100      	bne.n	8016146 <memcpy+0xc>
 8016144:	bd10      	pop	{r4, pc}
 8016146:	f811 4b01 	ldrb.w	r4, [r1], #1
 801614a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801614e:	e7f7      	b.n	8016140 <memcpy+0x6>

08016150 <memset>:
 8016150:	4402      	add	r2, r0
 8016152:	4603      	mov	r3, r0
 8016154:	4293      	cmp	r3, r2
 8016156:	d100      	bne.n	801615a <memset+0xa>
 8016158:	4770      	bx	lr
 801615a:	f803 1b01 	strb.w	r1, [r3], #1
 801615e:	e7f9      	b.n	8016154 <memset+0x4>

08016160 <_perror_r>:
 8016160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016162:	460d      	mov	r5, r1
 8016164:	4604      	mov	r4, r0
 8016166:	b118      	cbz	r0, 8016170 <_perror_r+0x10>
 8016168:	6983      	ldr	r3, [r0, #24]
 801616a:	b90b      	cbnz	r3, 8016170 <_perror_r+0x10>
 801616c:	f000 faa0 	bl	80166b0 <__sinit>
 8016170:	b14d      	cbz	r5, 8016186 <_perror_r+0x26>
 8016172:	782b      	ldrb	r3, [r5, #0]
 8016174:	b13b      	cbz	r3, 8016186 <_perror_r+0x26>
 8016176:	68e1      	ldr	r1, [r4, #12]
 8016178:	4628      	mov	r0, r5
 801617a:	f000 fb79 	bl	8016870 <fputs>
 801617e:	68e1      	ldr	r1, [r4, #12]
 8016180:	4809      	ldr	r0, [pc, #36]	; (80161a8 <_perror_r+0x48>)
 8016182:	f000 fb75 	bl	8016870 <fputs>
 8016186:	ab01      	add	r3, sp, #4
 8016188:	2201      	movs	r2, #1
 801618a:	6821      	ldr	r1, [r4, #0]
 801618c:	4620      	mov	r0, r4
 801618e:	f000 f867 	bl	8016260 <_strerror_r>
 8016192:	b110      	cbz	r0, 801619a <_perror_r+0x3a>
 8016194:	68e1      	ldr	r1, [r4, #12]
 8016196:	f000 fb6b 	bl	8016870 <fputs>
 801619a:	68e1      	ldr	r1, [r4, #12]
 801619c:	200a      	movs	r0, #10
 801619e:	f000 fb17 	bl	80167d0 <fputc>
 80161a2:	b003      	add	sp, #12
 80161a4:	bd30      	pop	{r4, r5, pc}
 80161a6:	bf00      	nop
 80161a8:	0801b0a4 	.word	0x0801b0a4

080161ac <perror>:
 80161ac:	4b02      	ldr	r3, [pc, #8]	; (80161b8 <perror+0xc>)
 80161ae:	4601      	mov	r1, r0
 80161b0:	6818      	ldr	r0, [r3, #0]
 80161b2:	f7ff bfd5 	b.w	8016160 <_perror_r>
 80161b6:	bf00      	nop
 80161b8:	2000001c 	.word	0x2000001c

080161bc <iprintf>:
 80161bc:	b40f      	push	{r0, r1, r2, r3}
 80161be:	4b0a      	ldr	r3, [pc, #40]	; (80161e8 <iprintf+0x2c>)
 80161c0:	b513      	push	{r0, r1, r4, lr}
 80161c2:	681c      	ldr	r4, [r3, #0]
 80161c4:	b124      	cbz	r4, 80161d0 <iprintf+0x14>
 80161c6:	69a3      	ldr	r3, [r4, #24]
 80161c8:	b913      	cbnz	r3, 80161d0 <iprintf+0x14>
 80161ca:	4620      	mov	r0, r4
 80161cc:	f000 fa70 	bl	80166b0 <__sinit>
 80161d0:	ab05      	add	r3, sp, #20
 80161d2:	9a04      	ldr	r2, [sp, #16]
 80161d4:	68a1      	ldr	r1, [r4, #8]
 80161d6:	9301      	str	r3, [sp, #4]
 80161d8:	4620      	mov	r0, r4
 80161da:	f000 fc4d 	bl	8016a78 <_vfiprintf_r>
 80161de:	b002      	add	sp, #8
 80161e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161e4:	b004      	add	sp, #16
 80161e6:	4770      	bx	lr
 80161e8:	2000001c 	.word	0x2000001c

080161ec <rand>:
 80161ec:	4b19      	ldr	r3, [pc, #100]	; (8016254 <rand+0x68>)
 80161ee:	b510      	push	{r4, lr}
 80161f0:	681c      	ldr	r4, [r3, #0]
 80161f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80161f4:	b9d3      	cbnz	r3, 801622c <rand+0x40>
 80161f6:	2018      	movs	r0, #24
 80161f8:	f000 fb60 	bl	80168bc <malloc>
 80161fc:	f243 330e 	movw	r3, #13070	; 0x330e
 8016200:	63a0      	str	r0, [r4, #56]	; 0x38
 8016202:	8003      	strh	r3, [r0, #0]
 8016204:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8016208:	8043      	strh	r3, [r0, #2]
 801620a:	f241 2334 	movw	r3, #4660	; 0x1234
 801620e:	8083      	strh	r3, [r0, #4]
 8016210:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8016214:	80c3      	strh	r3, [r0, #6]
 8016216:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 801621a:	8103      	strh	r3, [r0, #8]
 801621c:	2305      	movs	r3, #5
 801621e:	8143      	strh	r3, [r0, #10]
 8016220:	230b      	movs	r3, #11
 8016222:	8183      	strh	r3, [r0, #12]
 8016224:	2201      	movs	r2, #1
 8016226:	2300      	movs	r3, #0
 8016228:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801622c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801622e:	480a      	ldr	r0, [pc, #40]	; (8016258 <rand+0x6c>)
 8016230:	690a      	ldr	r2, [r1, #16]
 8016232:	694b      	ldr	r3, [r1, #20]
 8016234:	4c09      	ldr	r4, [pc, #36]	; (801625c <rand+0x70>)
 8016236:	4350      	muls	r0, r2
 8016238:	fb04 0003 	mla	r0, r4, r3, r0
 801623c:	fba2 2304 	umull	r2, r3, r2, r4
 8016240:	3201      	adds	r2, #1
 8016242:	4403      	add	r3, r0
 8016244:	f143 0300 	adc.w	r3, r3, #0
 8016248:	e9c1 2304 	strd	r2, r3, [r1, #16]
 801624c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8016250:	bd10      	pop	{r4, pc}
 8016252:	bf00      	nop
 8016254:	2000001c 	.word	0x2000001c
 8016258:	5851f42d 	.word	0x5851f42d
 801625c:	4c957f2d 	.word	0x4c957f2d

08016260 <_strerror_r>:
 8016260:	b510      	push	{r4, lr}
 8016262:	4604      	mov	r4, r0
 8016264:	4608      	mov	r0, r1
 8016266:	4611      	mov	r1, r2
 8016268:	288e      	cmp	r0, #142	; 0x8e
 801626a:	f200 812f 	bhi.w	80164cc <_strerror_r+0x26c>
 801626e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8016272:	0138      	.short	0x0138
 8016274:	0091008f 	.word	0x0091008f
 8016278:	00950093 	.word	0x00950093
 801627c:	00990097 	.word	0x00990097
 8016280:	009d009b 	.word	0x009d009b
 8016284:	00a300a1 	.word	0x00a300a1
 8016288:	00a900a7 	.word	0x00a900a7
 801628c:	00ad00ab 	.word	0x00ad00ab
 8016290:	00af012d 	.word	0x00af012d
 8016294:	00b300b1 	.word	0x00b300b1
 8016298:	00b700b5 	.word	0x00b700b5
 801629c:	00bf00bd 	.word	0x00bf00bd
 80162a0:	00c700c5 	.word	0x00c700c5
 80162a4:	00cb00c9 	.word	0x00cb00c9
 80162a8:	00d100cd 	.word	0x00d100cd
 80162ac:	00d700d5 	.word	0x00d700d5
 80162b0:	00db00d9 	.word	0x00db00d9
 80162b4:	00df00dd 	.word	0x00df00dd
 80162b8:	00e300e1 	.word	0x00e300e1
 80162bc:	012d012d 	.word	0x012d012d
 80162c0:	012d012d 	.word	0x012d012d
 80162c4:	012d012d 	.word	0x012d012d
 80162c8:	012d012d 	.word	0x012d012d
 80162cc:	00eb00e7 	.word	0x00eb00e7
 80162d0:	012d012d 	.word	0x012d012d
 80162d4:	012d012d 	.word	0x012d012d
 80162d8:	012d012d 	.word	0x012d012d
 80162dc:	012d012d 	.word	0x012d012d
 80162e0:	012d012d 	.word	0x012d012d
 80162e4:	012d012d 	.word	0x012d012d
 80162e8:	00ed012d 	.word	0x00ed012d
 80162ec:	00ef0107 	.word	0x00ef0107
 80162f0:	012d00f1 	.word	0x012d00f1
 80162f4:	012d012d 	.word	0x012d012d
 80162f8:	012d00f3 	.word	0x012d00f3
 80162fc:	012d012d 	.word	0x012d012d
 8016300:	012d00f5 	.word	0x012d00f5
 8016304:	00f9012d 	.word	0x00f9012d
 8016308:	012d012d 	.word	0x012d012d
 801630c:	012d00fb 	.word	0x012d00fb
 8016310:	012d012d 	.word	0x012d012d
 8016314:	012d012d 	.word	0x012d012d
 8016318:	012d012d 	.word	0x012d012d
 801631c:	012d012d 	.word	0x012d012d
 8016320:	00fd012d 	.word	0x00fd012d
 8016324:	00ff012d 	.word	0x00ff012d
 8016328:	01030101 	.word	0x01030101
 801632c:	012d012d 	.word	0x012d012d
 8016330:	012d0125 	.word	0x012d0125
 8016334:	012d012d 	.word	0x012d012d
 8016338:	012d012d 	.word	0x012d012d
 801633c:	012d012d 	.word	0x012d012d
 8016340:	0113012d 	.word	0x0113012d
 8016344:	01090105 	.word	0x01090105
 8016348:	010d010b 	.word	0x010d010b
 801634c:	012d010f 	.word	0x012d010f
 8016350:	01150111 	.word	0x01150111
 8016354:	00e90119 	.word	0x00e90119
 8016358:	012b00c1 	.word	0x012b00c1
 801635c:	00cf00b9 	.word	0x00cf00b9
 8016360:	009f00bb 	.word	0x009f00bb
 8016364:	012900a5 	.word	0x012900a5
 8016368:	012d00f7 	.word	0x012d00f7
 801636c:	00c30117 	.word	0x00c30117
 8016370:	011b011d 	.word	0x011b011d
 8016374:	012d012d 	.word	0x012d012d
 8016378:	012d012d 	.word	0x012d012d
 801637c:	00d3012d 	.word	0x00d3012d
 8016380:	012d012d 	.word	0x012d012d
 8016384:	00e5012d 	.word	0x00e5012d
 8016388:	011f0127 	.word	0x011f0127
 801638c:	01230121 	.word	0x01230121
 8016390:	4855      	ldr	r0, [pc, #340]	; (80164e8 <_strerror_r+0x288>)
 8016392:	bd10      	pop	{r4, pc}
 8016394:	4855      	ldr	r0, [pc, #340]	; (80164ec <_strerror_r+0x28c>)
 8016396:	bd10      	pop	{r4, pc}
 8016398:	4855      	ldr	r0, [pc, #340]	; (80164f0 <_strerror_r+0x290>)
 801639a:	bd10      	pop	{r4, pc}
 801639c:	4855      	ldr	r0, [pc, #340]	; (80164f4 <_strerror_r+0x294>)
 801639e:	bd10      	pop	{r4, pc}
 80163a0:	4855      	ldr	r0, [pc, #340]	; (80164f8 <_strerror_r+0x298>)
 80163a2:	bd10      	pop	{r4, pc}
 80163a4:	4855      	ldr	r0, [pc, #340]	; (80164fc <_strerror_r+0x29c>)
 80163a6:	bd10      	pop	{r4, pc}
 80163a8:	4855      	ldr	r0, [pc, #340]	; (8016500 <_strerror_r+0x2a0>)
 80163aa:	bd10      	pop	{r4, pc}
 80163ac:	4855      	ldr	r0, [pc, #340]	; (8016504 <_strerror_r+0x2a4>)
 80163ae:	bd10      	pop	{r4, pc}
 80163b0:	4855      	ldr	r0, [pc, #340]	; (8016508 <_strerror_r+0x2a8>)
 80163b2:	bd10      	pop	{r4, pc}
 80163b4:	4855      	ldr	r0, [pc, #340]	; (801650c <_strerror_r+0x2ac>)
 80163b6:	bd10      	pop	{r4, pc}
 80163b8:	4855      	ldr	r0, [pc, #340]	; (8016510 <_strerror_r+0x2b0>)
 80163ba:	bd10      	pop	{r4, pc}
 80163bc:	4855      	ldr	r0, [pc, #340]	; (8016514 <_strerror_r+0x2b4>)
 80163be:	bd10      	pop	{r4, pc}
 80163c0:	4855      	ldr	r0, [pc, #340]	; (8016518 <_strerror_r+0x2b8>)
 80163c2:	bd10      	pop	{r4, pc}
 80163c4:	4855      	ldr	r0, [pc, #340]	; (801651c <_strerror_r+0x2bc>)
 80163c6:	bd10      	pop	{r4, pc}
 80163c8:	4855      	ldr	r0, [pc, #340]	; (8016520 <_strerror_r+0x2c0>)
 80163ca:	bd10      	pop	{r4, pc}
 80163cc:	4855      	ldr	r0, [pc, #340]	; (8016524 <_strerror_r+0x2c4>)
 80163ce:	bd10      	pop	{r4, pc}
 80163d0:	4855      	ldr	r0, [pc, #340]	; (8016528 <_strerror_r+0x2c8>)
 80163d2:	bd10      	pop	{r4, pc}
 80163d4:	4855      	ldr	r0, [pc, #340]	; (801652c <_strerror_r+0x2cc>)
 80163d6:	bd10      	pop	{r4, pc}
 80163d8:	4855      	ldr	r0, [pc, #340]	; (8016530 <_strerror_r+0x2d0>)
 80163da:	bd10      	pop	{r4, pc}
 80163dc:	4855      	ldr	r0, [pc, #340]	; (8016534 <_strerror_r+0x2d4>)
 80163de:	bd10      	pop	{r4, pc}
 80163e0:	4855      	ldr	r0, [pc, #340]	; (8016538 <_strerror_r+0x2d8>)
 80163e2:	bd10      	pop	{r4, pc}
 80163e4:	4855      	ldr	r0, [pc, #340]	; (801653c <_strerror_r+0x2dc>)
 80163e6:	bd10      	pop	{r4, pc}
 80163e8:	4855      	ldr	r0, [pc, #340]	; (8016540 <_strerror_r+0x2e0>)
 80163ea:	bd10      	pop	{r4, pc}
 80163ec:	4855      	ldr	r0, [pc, #340]	; (8016544 <_strerror_r+0x2e4>)
 80163ee:	bd10      	pop	{r4, pc}
 80163f0:	4855      	ldr	r0, [pc, #340]	; (8016548 <_strerror_r+0x2e8>)
 80163f2:	bd10      	pop	{r4, pc}
 80163f4:	4855      	ldr	r0, [pc, #340]	; (801654c <_strerror_r+0x2ec>)
 80163f6:	bd10      	pop	{r4, pc}
 80163f8:	4855      	ldr	r0, [pc, #340]	; (8016550 <_strerror_r+0x2f0>)
 80163fa:	bd10      	pop	{r4, pc}
 80163fc:	4855      	ldr	r0, [pc, #340]	; (8016554 <_strerror_r+0x2f4>)
 80163fe:	bd10      	pop	{r4, pc}
 8016400:	4855      	ldr	r0, [pc, #340]	; (8016558 <_strerror_r+0x2f8>)
 8016402:	bd10      	pop	{r4, pc}
 8016404:	4855      	ldr	r0, [pc, #340]	; (801655c <_strerror_r+0x2fc>)
 8016406:	bd10      	pop	{r4, pc}
 8016408:	4855      	ldr	r0, [pc, #340]	; (8016560 <_strerror_r+0x300>)
 801640a:	bd10      	pop	{r4, pc}
 801640c:	4855      	ldr	r0, [pc, #340]	; (8016564 <_strerror_r+0x304>)
 801640e:	bd10      	pop	{r4, pc}
 8016410:	4855      	ldr	r0, [pc, #340]	; (8016568 <_strerror_r+0x308>)
 8016412:	bd10      	pop	{r4, pc}
 8016414:	4855      	ldr	r0, [pc, #340]	; (801656c <_strerror_r+0x30c>)
 8016416:	bd10      	pop	{r4, pc}
 8016418:	4855      	ldr	r0, [pc, #340]	; (8016570 <_strerror_r+0x310>)
 801641a:	bd10      	pop	{r4, pc}
 801641c:	4855      	ldr	r0, [pc, #340]	; (8016574 <_strerror_r+0x314>)
 801641e:	bd10      	pop	{r4, pc}
 8016420:	4855      	ldr	r0, [pc, #340]	; (8016578 <_strerror_r+0x318>)
 8016422:	bd10      	pop	{r4, pc}
 8016424:	4855      	ldr	r0, [pc, #340]	; (801657c <_strerror_r+0x31c>)
 8016426:	bd10      	pop	{r4, pc}
 8016428:	4855      	ldr	r0, [pc, #340]	; (8016580 <_strerror_r+0x320>)
 801642a:	bd10      	pop	{r4, pc}
 801642c:	4855      	ldr	r0, [pc, #340]	; (8016584 <_strerror_r+0x324>)
 801642e:	bd10      	pop	{r4, pc}
 8016430:	4855      	ldr	r0, [pc, #340]	; (8016588 <_strerror_r+0x328>)
 8016432:	bd10      	pop	{r4, pc}
 8016434:	4855      	ldr	r0, [pc, #340]	; (801658c <_strerror_r+0x32c>)
 8016436:	bd10      	pop	{r4, pc}
 8016438:	4855      	ldr	r0, [pc, #340]	; (8016590 <_strerror_r+0x330>)
 801643a:	bd10      	pop	{r4, pc}
 801643c:	4855      	ldr	r0, [pc, #340]	; (8016594 <_strerror_r+0x334>)
 801643e:	bd10      	pop	{r4, pc}
 8016440:	4855      	ldr	r0, [pc, #340]	; (8016598 <_strerror_r+0x338>)
 8016442:	bd10      	pop	{r4, pc}
 8016444:	4855      	ldr	r0, [pc, #340]	; (801659c <_strerror_r+0x33c>)
 8016446:	bd10      	pop	{r4, pc}
 8016448:	4855      	ldr	r0, [pc, #340]	; (80165a0 <_strerror_r+0x340>)
 801644a:	bd10      	pop	{r4, pc}
 801644c:	4855      	ldr	r0, [pc, #340]	; (80165a4 <_strerror_r+0x344>)
 801644e:	bd10      	pop	{r4, pc}
 8016450:	4855      	ldr	r0, [pc, #340]	; (80165a8 <_strerror_r+0x348>)
 8016452:	bd10      	pop	{r4, pc}
 8016454:	4855      	ldr	r0, [pc, #340]	; (80165ac <_strerror_r+0x34c>)
 8016456:	bd10      	pop	{r4, pc}
 8016458:	4855      	ldr	r0, [pc, #340]	; (80165b0 <_strerror_r+0x350>)
 801645a:	bd10      	pop	{r4, pc}
 801645c:	4855      	ldr	r0, [pc, #340]	; (80165b4 <_strerror_r+0x354>)
 801645e:	bd10      	pop	{r4, pc}
 8016460:	4855      	ldr	r0, [pc, #340]	; (80165b8 <_strerror_r+0x358>)
 8016462:	bd10      	pop	{r4, pc}
 8016464:	4855      	ldr	r0, [pc, #340]	; (80165bc <_strerror_r+0x35c>)
 8016466:	bd10      	pop	{r4, pc}
 8016468:	4855      	ldr	r0, [pc, #340]	; (80165c0 <_strerror_r+0x360>)
 801646a:	bd10      	pop	{r4, pc}
 801646c:	4855      	ldr	r0, [pc, #340]	; (80165c4 <_strerror_r+0x364>)
 801646e:	bd10      	pop	{r4, pc}
 8016470:	4855      	ldr	r0, [pc, #340]	; (80165c8 <_strerror_r+0x368>)
 8016472:	bd10      	pop	{r4, pc}
 8016474:	4855      	ldr	r0, [pc, #340]	; (80165cc <_strerror_r+0x36c>)
 8016476:	bd10      	pop	{r4, pc}
 8016478:	4855      	ldr	r0, [pc, #340]	; (80165d0 <_strerror_r+0x370>)
 801647a:	bd10      	pop	{r4, pc}
 801647c:	4855      	ldr	r0, [pc, #340]	; (80165d4 <_strerror_r+0x374>)
 801647e:	bd10      	pop	{r4, pc}
 8016480:	4855      	ldr	r0, [pc, #340]	; (80165d8 <_strerror_r+0x378>)
 8016482:	bd10      	pop	{r4, pc}
 8016484:	4855      	ldr	r0, [pc, #340]	; (80165dc <_strerror_r+0x37c>)
 8016486:	bd10      	pop	{r4, pc}
 8016488:	4855      	ldr	r0, [pc, #340]	; (80165e0 <_strerror_r+0x380>)
 801648a:	bd10      	pop	{r4, pc}
 801648c:	4855      	ldr	r0, [pc, #340]	; (80165e4 <_strerror_r+0x384>)
 801648e:	bd10      	pop	{r4, pc}
 8016490:	4855      	ldr	r0, [pc, #340]	; (80165e8 <_strerror_r+0x388>)
 8016492:	bd10      	pop	{r4, pc}
 8016494:	4855      	ldr	r0, [pc, #340]	; (80165ec <_strerror_r+0x38c>)
 8016496:	bd10      	pop	{r4, pc}
 8016498:	4855      	ldr	r0, [pc, #340]	; (80165f0 <_strerror_r+0x390>)
 801649a:	bd10      	pop	{r4, pc}
 801649c:	4855      	ldr	r0, [pc, #340]	; (80165f4 <_strerror_r+0x394>)
 801649e:	bd10      	pop	{r4, pc}
 80164a0:	4855      	ldr	r0, [pc, #340]	; (80165f8 <_strerror_r+0x398>)
 80164a2:	bd10      	pop	{r4, pc}
 80164a4:	4855      	ldr	r0, [pc, #340]	; (80165fc <_strerror_r+0x39c>)
 80164a6:	bd10      	pop	{r4, pc}
 80164a8:	4855      	ldr	r0, [pc, #340]	; (8016600 <_strerror_r+0x3a0>)
 80164aa:	bd10      	pop	{r4, pc}
 80164ac:	4855      	ldr	r0, [pc, #340]	; (8016604 <_strerror_r+0x3a4>)
 80164ae:	bd10      	pop	{r4, pc}
 80164b0:	4855      	ldr	r0, [pc, #340]	; (8016608 <_strerror_r+0x3a8>)
 80164b2:	bd10      	pop	{r4, pc}
 80164b4:	4855      	ldr	r0, [pc, #340]	; (801660c <_strerror_r+0x3ac>)
 80164b6:	bd10      	pop	{r4, pc}
 80164b8:	4855      	ldr	r0, [pc, #340]	; (8016610 <_strerror_r+0x3b0>)
 80164ba:	bd10      	pop	{r4, pc}
 80164bc:	4855      	ldr	r0, [pc, #340]	; (8016614 <_strerror_r+0x3b4>)
 80164be:	bd10      	pop	{r4, pc}
 80164c0:	4855      	ldr	r0, [pc, #340]	; (8016618 <_strerror_r+0x3b8>)
 80164c2:	bd10      	pop	{r4, pc}
 80164c4:	4855      	ldr	r0, [pc, #340]	; (801661c <_strerror_r+0x3bc>)
 80164c6:	bd10      	pop	{r4, pc}
 80164c8:	4855      	ldr	r0, [pc, #340]	; (8016620 <_strerror_r+0x3c0>)
 80164ca:	bd10      	pop	{r4, pc}
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	bf14      	ite	ne
 80164d0:	461a      	movne	r2, r3
 80164d2:	4622      	moveq	r2, r4
 80164d4:	f000 f8aa 	bl	801662c <_user_strerror>
 80164d8:	4b52      	ldr	r3, [pc, #328]	; (8016624 <_strerror_r+0x3c4>)
 80164da:	2800      	cmp	r0, #0
 80164dc:	bf08      	it	eq
 80164de:	4618      	moveq	r0, r3
 80164e0:	bd10      	pop	{r4, pc}
 80164e2:	4851      	ldr	r0, [pc, #324]	; (8016628 <_strerror_r+0x3c8>)
 80164e4:	bd10      	pop	{r4, pc}
 80164e6:	bf00      	nop
 80164e8:	0801b0af 	.word	0x0801b0af
 80164ec:	0801b0b9 	.word	0x0801b0b9
 80164f0:	0801b0d3 	.word	0x0801b0d3
 80164f4:	0801b0e3 	.word	0x0801b0e3
 80164f8:	0801b0fb 	.word	0x0801b0fb
 80164fc:	0801b105 	.word	0x0801b105
 8016500:	0801b11f 	.word	0x0801b11f
 8016504:	0801b131 	.word	0x0801b131
 8016508:	0801b143 	.word	0x0801b143
 801650c:	0801b15c 	.word	0x0801b15c
 8016510:	0801b16c 	.word	0x0801b16c
 8016514:	0801b178 	.word	0x0801b178
 8016518:	0801b195 	.word	0x0801b195
 801651c:	0801b1a7 	.word	0x0801b1a7
 8016520:	0801b1b8 	.word	0x0801b1b8
 8016524:	0801b1ca 	.word	0x0801b1ca
 8016528:	0801b1d6 	.word	0x0801b1d6
 801652c:	0801b1ee 	.word	0x0801b1ee
 8016530:	0801b1fa 	.word	0x0801b1fa
 8016534:	0801b20c 	.word	0x0801b20c
 8016538:	0801b21b 	.word	0x0801b21b
 801653c:	0801b22b 	.word	0x0801b22b
 8016540:	0801b238 	.word	0x0801b238
 8016544:	0801b257 	.word	0x0801b257
 8016548:	0801b266 	.word	0x0801b266
 801654c:	0801b277 	.word	0x0801b277
 8016550:	0801b29b 	.word	0x0801b29b
 8016554:	0801b2b9 	.word	0x0801b2b9
 8016558:	0801b2d7 	.word	0x0801b2d7
 801655c:	0801b2f7 	.word	0x0801b2f7
 8016560:	0801b30e 	.word	0x0801b30e
 8016564:	0801b31d 	.word	0x0801b31d
 8016568:	0801b32c 	.word	0x0801b32c
 801656c:	0801b340 	.word	0x0801b340
 8016570:	0801b358 	.word	0x0801b358
 8016574:	0801b366 	.word	0x0801b366
 8016578:	0801b373 	.word	0x0801b373
 801657c:	0801b389 	.word	0x0801b389
 8016580:	0801b398 	.word	0x0801b398
 8016584:	0801b3a4 	.word	0x0801b3a4
 8016588:	0801b3d3 	.word	0x0801b3d3
 801658c:	0801b3e4 	.word	0x0801b3e4
 8016590:	0801b3ff 	.word	0x0801b3ff
 8016594:	0801b412 	.word	0x0801b412
 8016598:	0801b428 	.word	0x0801b428
 801659c:	0801b431 	.word	0x0801b431
 80165a0:	0801b448 	.word	0x0801b448
 80165a4:	0801b450 	.word	0x0801b450
 80165a8:	0801b45d 	.word	0x0801b45d
 80165ac:	0801b472 	.word	0x0801b472
 80165b0:	0801b486 	.word	0x0801b486
 80165b4:	0801b49e 	.word	0x0801b49e
 80165b8:	0801b4ad 	.word	0x0801b4ad
 80165bc:	0801b4be 	.word	0x0801b4be
 80165c0:	0801b4d1 	.word	0x0801b4d1
 80165c4:	0801b4dd 	.word	0x0801b4dd
 80165c8:	0801b4f6 	.word	0x0801b4f6
 80165cc:	0801b50a 	.word	0x0801b50a
 80165d0:	0801b525 	.word	0x0801b525
 80165d4:	0801b53d 	.word	0x0801b53d
 80165d8:	0801b557 	.word	0x0801b557
 80165dc:	0801b55f 	.word	0x0801b55f
 80165e0:	0801b58f 	.word	0x0801b58f
 80165e4:	0801b5ae 	.word	0x0801b5ae
 80165e8:	0801b5cd 	.word	0x0801b5cd
 80165ec:	0801b5e4 	.word	0x0801b5e4
 80165f0:	0801b5f7 	.word	0x0801b5f7
 80165f4:	0801b610 	.word	0x0801b610
 80165f8:	0801b627 	.word	0x0801b627
 80165fc:	0801b63d 	.word	0x0801b63d
 8016600:	0801b65e 	.word	0x0801b65e
 8016604:	0801b676 	.word	0x0801b676
 8016608:	0801b692 	.word	0x0801b692
 801660c:	0801b6a5 	.word	0x0801b6a5
 8016610:	0801b6bb 	.word	0x0801b6bb
 8016614:	0801b6cf 	.word	0x0801b6cf
 8016618:	0801b6f1 	.word	0x0801b6f1
 801661c:	0801b717 	.word	0x0801b717
 8016620:	0801b728 	.word	0x0801b728
 8016624:	0801b7a9 	.word	0x0801b7a9
 8016628:	0801b0a7 	.word	0x0801b0a7

0801662c <_user_strerror>:
 801662c:	2000      	movs	r0, #0
 801662e:	4770      	bx	lr

08016630 <_cleanup_r>:
 8016630:	4901      	ldr	r1, [pc, #4]	; (8016638 <_cleanup_r+0x8>)
 8016632:	f000 b925 	b.w	8016880 <_fwalk_reent>
 8016636:	bf00      	nop
 8016638:	080173b9 	.word	0x080173b9

0801663c <std.isra.0>:
 801663c:	2300      	movs	r3, #0
 801663e:	b510      	push	{r4, lr}
 8016640:	4604      	mov	r4, r0
 8016642:	6003      	str	r3, [r0, #0]
 8016644:	6043      	str	r3, [r0, #4]
 8016646:	6083      	str	r3, [r0, #8]
 8016648:	8181      	strh	r1, [r0, #12]
 801664a:	6643      	str	r3, [r0, #100]	; 0x64
 801664c:	81c2      	strh	r2, [r0, #14]
 801664e:	6103      	str	r3, [r0, #16]
 8016650:	6143      	str	r3, [r0, #20]
 8016652:	6183      	str	r3, [r0, #24]
 8016654:	4619      	mov	r1, r3
 8016656:	2208      	movs	r2, #8
 8016658:	305c      	adds	r0, #92	; 0x5c
 801665a:	f7ff fd79 	bl	8016150 <memset>
 801665e:	4b05      	ldr	r3, [pc, #20]	; (8016674 <std.isra.0+0x38>)
 8016660:	6263      	str	r3, [r4, #36]	; 0x24
 8016662:	4b05      	ldr	r3, [pc, #20]	; (8016678 <std.isra.0+0x3c>)
 8016664:	62a3      	str	r3, [r4, #40]	; 0x28
 8016666:	4b05      	ldr	r3, [pc, #20]	; (801667c <std.isra.0+0x40>)
 8016668:	62e3      	str	r3, [r4, #44]	; 0x2c
 801666a:	4b05      	ldr	r3, [pc, #20]	; (8016680 <std.isra.0+0x44>)
 801666c:	6224      	str	r4, [r4, #32]
 801666e:	6323      	str	r3, [r4, #48]	; 0x30
 8016670:	bd10      	pop	{r4, pc}
 8016672:	bf00      	nop
 8016674:	0801705d 	.word	0x0801705d
 8016678:	0801707f 	.word	0x0801707f
 801667c:	080170b7 	.word	0x080170b7
 8016680:	080170db 	.word	0x080170db

08016684 <__sfmoreglue>:
 8016684:	b570      	push	{r4, r5, r6, lr}
 8016686:	1e4a      	subs	r2, r1, #1
 8016688:	2568      	movs	r5, #104	; 0x68
 801668a:	4355      	muls	r5, r2
 801668c:	460e      	mov	r6, r1
 801668e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016692:	f000 f969 	bl	8016968 <_malloc_r>
 8016696:	4604      	mov	r4, r0
 8016698:	b140      	cbz	r0, 80166ac <__sfmoreglue+0x28>
 801669a:	2100      	movs	r1, #0
 801669c:	e880 0042 	stmia.w	r0, {r1, r6}
 80166a0:	300c      	adds	r0, #12
 80166a2:	60a0      	str	r0, [r4, #8]
 80166a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80166a8:	f7ff fd52 	bl	8016150 <memset>
 80166ac:	4620      	mov	r0, r4
 80166ae:	bd70      	pop	{r4, r5, r6, pc}

080166b0 <__sinit>:
 80166b0:	6983      	ldr	r3, [r0, #24]
 80166b2:	b510      	push	{r4, lr}
 80166b4:	4604      	mov	r4, r0
 80166b6:	bb33      	cbnz	r3, 8016706 <__sinit+0x56>
 80166b8:	6483      	str	r3, [r0, #72]	; 0x48
 80166ba:	64c3      	str	r3, [r0, #76]	; 0x4c
 80166bc:	6503      	str	r3, [r0, #80]	; 0x50
 80166be:	4b12      	ldr	r3, [pc, #72]	; (8016708 <__sinit+0x58>)
 80166c0:	4a12      	ldr	r2, [pc, #72]	; (801670c <__sinit+0x5c>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	6282      	str	r2, [r0, #40]	; 0x28
 80166c6:	4298      	cmp	r0, r3
 80166c8:	bf04      	itt	eq
 80166ca:	2301      	moveq	r3, #1
 80166cc:	6183      	streq	r3, [r0, #24]
 80166ce:	f000 f81f 	bl	8016710 <__sfp>
 80166d2:	6060      	str	r0, [r4, #4]
 80166d4:	4620      	mov	r0, r4
 80166d6:	f000 f81b 	bl	8016710 <__sfp>
 80166da:	60a0      	str	r0, [r4, #8]
 80166dc:	4620      	mov	r0, r4
 80166de:	f000 f817 	bl	8016710 <__sfp>
 80166e2:	2200      	movs	r2, #0
 80166e4:	60e0      	str	r0, [r4, #12]
 80166e6:	2104      	movs	r1, #4
 80166e8:	6860      	ldr	r0, [r4, #4]
 80166ea:	f7ff ffa7 	bl	801663c <std.isra.0>
 80166ee:	2201      	movs	r2, #1
 80166f0:	2109      	movs	r1, #9
 80166f2:	68a0      	ldr	r0, [r4, #8]
 80166f4:	f7ff ffa2 	bl	801663c <std.isra.0>
 80166f8:	2202      	movs	r2, #2
 80166fa:	2112      	movs	r1, #18
 80166fc:	68e0      	ldr	r0, [r4, #12]
 80166fe:	f7ff ff9d 	bl	801663c <std.isra.0>
 8016702:	2301      	movs	r3, #1
 8016704:	61a3      	str	r3, [r4, #24]
 8016706:	bd10      	pop	{r4, pc}
 8016708:	0801b7a0 	.word	0x0801b7a0
 801670c:	08016631 	.word	0x08016631

08016710 <__sfp>:
 8016710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016712:	4b1c      	ldr	r3, [pc, #112]	; (8016784 <__sfp+0x74>)
 8016714:	681e      	ldr	r6, [r3, #0]
 8016716:	69b3      	ldr	r3, [r6, #24]
 8016718:	4607      	mov	r7, r0
 801671a:	b913      	cbnz	r3, 8016722 <__sfp+0x12>
 801671c:	4630      	mov	r0, r6
 801671e:	f7ff ffc7 	bl	80166b0 <__sinit>
 8016722:	3648      	adds	r6, #72	; 0x48
 8016724:	68b4      	ldr	r4, [r6, #8]
 8016726:	6873      	ldr	r3, [r6, #4]
 8016728:	3b01      	subs	r3, #1
 801672a:	d503      	bpl.n	8016734 <__sfp+0x24>
 801672c:	6833      	ldr	r3, [r6, #0]
 801672e:	b133      	cbz	r3, 801673e <__sfp+0x2e>
 8016730:	6836      	ldr	r6, [r6, #0]
 8016732:	e7f7      	b.n	8016724 <__sfp+0x14>
 8016734:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016738:	b16d      	cbz	r5, 8016756 <__sfp+0x46>
 801673a:	3468      	adds	r4, #104	; 0x68
 801673c:	e7f4      	b.n	8016728 <__sfp+0x18>
 801673e:	2104      	movs	r1, #4
 8016740:	4638      	mov	r0, r7
 8016742:	f7ff ff9f 	bl	8016684 <__sfmoreglue>
 8016746:	6030      	str	r0, [r6, #0]
 8016748:	2800      	cmp	r0, #0
 801674a:	d1f1      	bne.n	8016730 <__sfp+0x20>
 801674c:	230c      	movs	r3, #12
 801674e:	603b      	str	r3, [r7, #0]
 8016750:	4604      	mov	r4, r0
 8016752:	4620      	mov	r0, r4
 8016754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801675a:	81e3      	strh	r3, [r4, #14]
 801675c:	2301      	movs	r3, #1
 801675e:	81a3      	strh	r3, [r4, #12]
 8016760:	6665      	str	r5, [r4, #100]	; 0x64
 8016762:	6025      	str	r5, [r4, #0]
 8016764:	60a5      	str	r5, [r4, #8]
 8016766:	6065      	str	r5, [r4, #4]
 8016768:	6125      	str	r5, [r4, #16]
 801676a:	6165      	str	r5, [r4, #20]
 801676c:	61a5      	str	r5, [r4, #24]
 801676e:	2208      	movs	r2, #8
 8016770:	4629      	mov	r1, r5
 8016772:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016776:	f7ff fceb 	bl	8016150 <memset>
 801677a:	6365      	str	r5, [r4, #52]	; 0x34
 801677c:	63a5      	str	r5, [r4, #56]	; 0x38
 801677e:	64a5      	str	r5, [r4, #72]	; 0x48
 8016780:	64e5      	str	r5, [r4, #76]	; 0x4c
 8016782:	e7e6      	b.n	8016752 <__sfp+0x42>
 8016784:	0801b7a0 	.word	0x0801b7a0

08016788 <_fputc_r>:
 8016788:	b570      	push	{r4, r5, r6, lr}
 801678a:	460e      	mov	r6, r1
 801678c:	4614      	mov	r4, r2
 801678e:	4605      	mov	r5, r0
 8016790:	b118      	cbz	r0, 801679a <_fputc_r+0x12>
 8016792:	6983      	ldr	r3, [r0, #24]
 8016794:	b90b      	cbnz	r3, 801679a <_fputc_r+0x12>
 8016796:	f7ff ff8b 	bl	80166b0 <__sinit>
 801679a:	4b0a      	ldr	r3, [pc, #40]	; (80167c4 <_fputc_r+0x3c>)
 801679c:	429c      	cmp	r4, r3
 801679e:	d107      	bne.n	80167b0 <_fputc_r+0x28>
 80167a0:	686c      	ldr	r4, [r5, #4]
 80167a2:	4622      	mov	r2, r4
 80167a4:	4631      	mov	r1, r6
 80167a6:	4628      	mov	r0, r5
 80167a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167ac:	f000 bc10 	b.w	8016fd0 <_putc_r>
 80167b0:	4b05      	ldr	r3, [pc, #20]	; (80167c8 <_fputc_r+0x40>)
 80167b2:	429c      	cmp	r4, r3
 80167b4:	d101      	bne.n	80167ba <_fputc_r+0x32>
 80167b6:	68ac      	ldr	r4, [r5, #8]
 80167b8:	e7f3      	b.n	80167a2 <_fputc_r+0x1a>
 80167ba:	4b04      	ldr	r3, [pc, #16]	; (80167cc <_fputc_r+0x44>)
 80167bc:	429c      	cmp	r4, r3
 80167be:	bf08      	it	eq
 80167c0:	68ec      	ldreq	r4, [r5, #12]
 80167c2:	e7ee      	b.n	80167a2 <_fputc_r+0x1a>
 80167c4:	0801b760 	.word	0x0801b760
 80167c8:	0801b780 	.word	0x0801b780
 80167cc:	0801b740 	.word	0x0801b740

080167d0 <fputc>:
 80167d0:	4b02      	ldr	r3, [pc, #8]	; (80167dc <fputc+0xc>)
 80167d2:	460a      	mov	r2, r1
 80167d4:	4601      	mov	r1, r0
 80167d6:	6818      	ldr	r0, [r3, #0]
 80167d8:	f7ff bfd6 	b.w	8016788 <_fputc_r>
 80167dc:	2000001c 	.word	0x2000001c

080167e0 <_fputs_r>:
 80167e0:	b570      	push	{r4, r5, r6, lr}
 80167e2:	460e      	mov	r6, r1
 80167e4:	4614      	mov	r4, r2
 80167e6:	4605      	mov	r5, r0
 80167e8:	b118      	cbz	r0, 80167f2 <_fputs_r+0x12>
 80167ea:	6983      	ldr	r3, [r0, #24]
 80167ec:	b90b      	cbnz	r3, 80167f2 <_fputs_r+0x12>
 80167ee:	f7ff ff5f 	bl	80166b0 <__sinit>
 80167f2:	4b1c      	ldr	r3, [pc, #112]	; (8016864 <_fputs_r+0x84>)
 80167f4:	429c      	cmp	r4, r3
 80167f6:	d10b      	bne.n	8016810 <_fputs_r+0x30>
 80167f8:	686c      	ldr	r4, [r5, #4]
 80167fa:	89a3      	ldrh	r3, [r4, #12]
 80167fc:	071b      	lsls	r3, r3, #28
 80167fe:	d511      	bpl.n	8016824 <_fputs_r+0x44>
 8016800:	6923      	ldr	r3, [r4, #16]
 8016802:	b17b      	cbz	r3, 8016824 <_fputs_r+0x44>
 8016804:	3e01      	subs	r6, #1
 8016806:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801680a:	b9a1      	cbnz	r1, 8016836 <_fputs_r+0x56>
 801680c:	4608      	mov	r0, r1
 801680e:	bd70      	pop	{r4, r5, r6, pc}
 8016810:	4b15      	ldr	r3, [pc, #84]	; (8016868 <_fputs_r+0x88>)
 8016812:	429c      	cmp	r4, r3
 8016814:	d101      	bne.n	801681a <_fputs_r+0x3a>
 8016816:	68ac      	ldr	r4, [r5, #8]
 8016818:	e7ef      	b.n	80167fa <_fputs_r+0x1a>
 801681a:	4b14      	ldr	r3, [pc, #80]	; (801686c <_fputs_r+0x8c>)
 801681c:	429c      	cmp	r4, r3
 801681e:	bf08      	it	eq
 8016820:	68ec      	ldreq	r4, [r5, #12]
 8016822:	e7ea      	b.n	80167fa <_fputs_r+0x1a>
 8016824:	4621      	mov	r1, r4
 8016826:	4628      	mov	r0, r5
 8016828:	f000 fcc0 	bl	80171ac <__swsetup_r>
 801682c:	2800      	cmp	r0, #0
 801682e:	d0e9      	beq.n	8016804 <_fputs_r+0x24>
 8016830:	f04f 30ff 	mov.w	r0, #4294967295
 8016834:	bd70      	pop	{r4, r5, r6, pc}
 8016836:	68a3      	ldr	r3, [r4, #8]
 8016838:	3b01      	subs	r3, #1
 801683a:	2b00      	cmp	r3, #0
 801683c:	60a3      	str	r3, [r4, #8]
 801683e:	da04      	bge.n	801684a <_fputs_r+0x6a>
 8016840:	69a2      	ldr	r2, [r4, #24]
 8016842:	4293      	cmp	r3, r2
 8016844:	db06      	blt.n	8016854 <_fputs_r+0x74>
 8016846:	290a      	cmp	r1, #10
 8016848:	d004      	beq.n	8016854 <_fputs_r+0x74>
 801684a:	6823      	ldr	r3, [r4, #0]
 801684c:	1c5a      	adds	r2, r3, #1
 801684e:	6022      	str	r2, [r4, #0]
 8016850:	7019      	strb	r1, [r3, #0]
 8016852:	e7d8      	b.n	8016806 <_fputs_r+0x26>
 8016854:	4622      	mov	r2, r4
 8016856:	4628      	mov	r0, r5
 8016858:	f000 fc44 	bl	80170e4 <__swbuf_r>
 801685c:	3001      	adds	r0, #1
 801685e:	d1d2      	bne.n	8016806 <_fputs_r+0x26>
 8016860:	e7e6      	b.n	8016830 <_fputs_r+0x50>
 8016862:	bf00      	nop
 8016864:	0801b760 	.word	0x0801b760
 8016868:	0801b780 	.word	0x0801b780
 801686c:	0801b740 	.word	0x0801b740

08016870 <fputs>:
 8016870:	4b02      	ldr	r3, [pc, #8]	; (801687c <fputs+0xc>)
 8016872:	460a      	mov	r2, r1
 8016874:	4601      	mov	r1, r0
 8016876:	6818      	ldr	r0, [r3, #0]
 8016878:	f7ff bfb2 	b.w	80167e0 <_fputs_r>
 801687c:	2000001c 	.word	0x2000001c

08016880 <_fwalk_reent>:
 8016880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016884:	4680      	mov	r8, r0
 8016886:	4689      	mov	r9, r1
 8016888:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801688c:	2600      	movs	r6, #0
 801688e:	b914      	cbnz	r4, 8016896 <_fwalk_reent+0x16>
 8016890:	4630      	mov	r0, r6
 8016892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016896:	68a5      	ldr	r5, [r4, #8]
 8016898:	6867      	ldr	r7, [r4, #4]
 801689a:	3f01      	subs	r7, #1
 801689c:	d501      	bpl.n	80168a2 <_fwalk_reent+0x22>
 801689e:	6824      	ldr	r4, [r4, #0]
 80168a0:	e7f5      	b.n	801688e <_fwalk_reent+0xe>
 80168a2:	89ab      	ldrh	r3, [r5, #12]
 80168a4:	2b01      	cmp	r3, #1
 80168a6:	d907      	bls.n	80168b8 <_fwalk_reent+0x38>
 80168a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80168ac:	3301      	adds	r3, #1
 80168ae:	d003      	beq.n	80168b8 <_fwalk_reent+0x38>
 80168b0:	4629      	mov	r1, r5
 80168b2:	4640      	mov	r0, r8
 80168b4:	47c8      	blx	r9
 80168b6:	4306      	orrs	r6, r0
 80168b8:	3568      	adds	r5, #104	; 0x68
 80168ba:	e7ee      	b.n	801689a <_fwalk_reent+0x1a>

080168bc <malloc>:
 80168bc:	4b02      	ldr	r3, [pc, #8]	; (80168c8 <malloc+0xc>)
 80168be:	4601      	mov	r1, r0
 80168c0:	6818      	ldr	r0, [r3, #0]
 80168c2:	f000 b851 	b.w	8016968 <_malloc_r>
 80168c6:	bf00      	nop
 80168c8:	2000001c 	.word	0x2000001c

080168cc <_free_r>:
 80168cc:	b538      	push	{r3, r4, r5, lr}
 80168ce:	4605      	mov	r5, r0
 80168d0:	2900      	cmp	r1, #0
 80168d2:	d045      	beq.n	8016960 <_free_r+0x94>
 80168d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168d8:	1f0c      	subs	r4, r1, #4
 80168da:	2b00      	cmp	r3, #0
 80168dc:	bfb8      	it	lt
 80168de:	18e4      	addlt	r4, r4, r3
 80168e0:	f000 fe0a 	bl	80174f8 <__malloc_lock>
 80168e4:	4a1f      	ldr	r2, [pc, #124]	; (8016964 <_free_r+0x98>)
 80168e6:	6813      	ldr	r3, [r2, #0]
 80168e8:	4610      	mov	r0, r2
 80168ea:	b933      	cbnz	r3, 80168fa <_free_r+0x2e>
 80168ec:	6063      	str	r3, [r4, #4]
 80168ee:	6014      	str	r4, [r2, #0]
 80168f0:	4628      	mov	r0, r5
 80168f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80168f6:	f000 be00 	b.w	80174fa <__malloc_unlock>
 80168fa:	42a3      	cmp	r3, r4
 80168fc:	d90c      	bls.n	8016918 <_free_r+0x4c>
 80168fe:	6821      	ldr	r1, [r4, #0]
 8016900:	1862      	adds	r2, r4, r1
 8016902:	4293      	cmp	r3, r2
 8016904:	bf04      	itt	eq
 8016906:	681a      	ldreq	r2, [r3, #0]
 8016908:	685b      	ldreq	r3, [r3, #4]
 801690a:	6063      	str	r3, [r4, #4]
 801690c:	bf04      	itt	eq
 801690e:	1852      	addeq	r2, r2, r1
 8016910:	6022      	streq	r2, [r4, #0]
 8016912:	6004      	str	r4, [r0, #0]
 8016914:	e7ec      	b.n	80168f0 <_free_r+0x24>
 8016916:	4613      	mov	r3, r2
 8016918:	685a      	ldr	r2, [r3, #4]
 801691a:	b10a      	cbz	r2, 8016920 <_free_r+0x54>
 801691c:	42a2      	cmp	r2, r4
 801691e:	d9fa      	bls.n	8016916 <_free_r+0x4a>
 8016920:	6819      	ldr	r1, [r3, #0]
 8016922:	1858      	adds	r0, r3, r1
 8016924:	42a0      	cmp	r0, r4
 8016926:	d10b      	bne.n	8016940 <_free_r+0x74>
 8016928:	6820      	ldr	r0, [r4, #0]
 801692a:	4401      	add	r1, r0
 801692c:	1858      	adds	r0, r3, r1
 801692e:	4282      	cmp	r2, r0
 8016930:	6019      	str	r1, [r3, #0]
 8016932:	d1dd      	bne.n	80168f0 <_free_r+0x24>
 8016934:	6810      	ldr	r0, [r2, #0]
 8016936:	6852      	ldr	r2, [r2, #4]
 8016938:	605a      	str	r2, [r3, #4]
 801693a:	4401      	add	r1, r0
 801693c:	6019      	str	r1, [r3, #0]
 801693e:	e7d7      	b.n	80168f0 <_free_r+0x24>
 8016940:	d902      	bls.n	8016948 <_free_r+0x7c>
 8016942:	230c      	movs	r3, #12
 8016944:	602b      	str	r3, [r5, #0]
 8016946:	e7d3      	b.n	80168f0 <_free_r+0x24>
 8016948:	6820      	ldr	r0, [r4, #0]
 801694a:	1821      	adds	r1, r4, r0
 801694c:	428a      	cmp	r2, r1
 801694e:	bf04      	itt	eq
 8016950:	6811      	ldreq	r1, [r2, #0]
 8016952:	6852      	ldreq	r2, [r2, #4]
 8016954:	6062      	str	r2, [r4, #4]
 8016956:	bf04      	itt	eq
 8016958:	1809      	addeq	r1, r1, r0
 801695a:	6021      	streq	r1, [r4, #0]
 801695c:	605c      	str	r4, [r3, #4]
 801695e:	e7c7      	b.n	80168f0 <_free_r+0x24>
 8016960:	bd38      	pop	{r3, r4, r5, pc}
 8016962:	bf00      	nop
 8016964:	2000421c 	.word	0x2000421c

08016968 <_malloc_r>:
 8016968:	b570      	push	{r4, r5, r6, lr}
 801696a:	1ccd      	adds	r5, r1, #3
 801696c:	f025 0503 	bic.w	r5, r5, #3
 8016970:	3508      	adds	r5, #8
 8016972:	2d0c      	cmp	r5, #12
 8016974:	bf38      	it	cc
 8016976:	250c      	movcc	r5, #12
 8016978:	2d00      	cmp	r5, #0
 801697a:	4606      	mov	r6, r0
 801697c:	db01      	blt.n	8016982 <_malloc_r+0x1a>
 801697e:	42a9      	cmp	r1, r5
 8016980:	d903      	bls.n	801698a <_malloc_r+0x22>
 8016982:	230c      	movs	r3, #12
 8016984:	6033      	str	r3, [r6, #0]
 8016986:	2000      	movs	r0, #0
 8016988:	bd70      	pop	{r4, r5, r6, pc}
 801698a:	f000 fdb5 	bl	80174f8 <__malloc_lock>
 801698e:	4a23      	ldr	r2, [pc, #140]	; (8016a1c <_malloc_r+0xb4>)
 8016990:	6814      	ldr	r4, [r2, #0]
 8016992:	4621      	mov	r1, r4
 8016994:	b991      	cbnz	r1, 80169bc <_malloc_r+0x54>
 8016996:	4c22      	ldr	r4, [pc, #136]	; (8016a20 <_malloc_r+0xb8>)
 8016998:	6823      	ldr	r3, [r4, #0]
 801699a:	b91b      	cbnz	r3, 80169a4 <_malloc_r+0x3c>
 801699c:	4630      	mov	r0, r6
 801699e:	f000 fb4d 	bl	801703c <_sbrk_r>
 80169a2:	6020      	str	r0, [r4, #0]
 80169a4:	4629      	mov	r1, r5
 80169a6:	4630      	mov	r0, r6
 80169a8:	f000 fb48 	bl	801703c <_sbrk_r>
 80169ac:	1c43      	adds	r3, r0, #1
 80169ae:	d126      	bne.n	80169fe <_malloc_r+0x96>
 80169b0:	230c      	movs	r3, #12
 80169b2:	6033      	str	r3, [r6, #0]
 80169b4:	4630      	mov	r0, r6
 80169b6:	f000 fda0 	bl	80174fa <__malloc_unlock>
 80169ba:	e7e4      	b.n	8016986 <_malloc_r+0x1e>
 80169bc:	680b      	ldr	r3, [r1, #0]
 80169be:	1b5b      	subs	r3, r3, r5
 80169c0:	d41a      	bmi.n	80169f8 <_malloc_r+0x90>
 80169c2:	2b0b      	cmp	r3, #11
 80169c4:	d90f      	bls.n	80169e6 <_malloc_r+0x7e>
 80169c6:	600b      	str	r3, [r1, #0]
 80169c8:	50cd      	str	r5, [r1, r3]
 80169ca:	18cc      	adds	r4, r1, r3
 80169cc:	4630      	mov	r0, r6
 80169ce:	f000 fd94 	bl	80174fa <__malloc_unlock>
 80169d2:	f104 000b 	add.w	r0, r4, #11
 80169d6:	1d23      	adds	r3, r4, #4
 80169d8:	f020 0007 	bic.w	r0, r0, #7
 80169dc:	1ac3      	subs	r3, r0, r3
 80169de:	d01b      	beq.n	8016a18 <_malloc_r+0xb0>
 80169e0:	425a      	negs	r2, r3
 80169e2:	50e2      	str	r2, [r4, r3]
 80169e4:	bd70      	pop	{r4, r5, r6, pc}
 80169e6:	428c      	cmp	r4, r1
 80169e8:	bf0d      	iteet	eq
 80169ea:	6863      	ldreq	r3, [r4, #4]
 80169ec:	684b      	ldrne	r3, [r1, #4]
 80169ee:	6063      	strne	r3, [r4, #4]
 80169f0:	6013      	streq	r3, [r2, #0]
 80169f2:	bf18      	it	ne
 80169f4:	460c      	movne	r4, r1
 80169f6:	e7e9      	b.n	80169cc <_malloc_r+0x64>
 80169f8:	460c      	mov	r4, r1
 80169fa:	6849      	ldr	r1, [r1, #4]
 80169fc:	e7ca      	b.n	8016994 <_malloc_r+0x2c>
 80169fe:	1cc4      	adds	r4, r0, #3
 8016a00:	f024 0403 	bic.w	r4, r4, #3
 8016a04:	42a0      	cmp	r0, r4
 8016a06:	d005      	beq.n	8016a14 <_malloc_r+0xac>
 8016a08:	1a21      	subs	r1, r4, r0
 8016a0a:	4630      	mov	r0, r6
 8016a0c:	f000 fb16 	bl	801703c <_sbrk_r>
 8016a10:	3001      	adds	r0, #1
 8016a12:	d0cd      	beq.n	80169b0 <_malloc_r+0x48>
 8016a14:	6025      	str	r5, [r4, #0]
 8016a16:	e7d9      	b.n	80169cc <_malloc_r+0x64>
 8016a18:	bd70      	pop	{r4, r5, r6, pc}
 8016a1a:	bf00      	nop
 8016a1c:	2000421c 	.word	0x2000421c
 8016a20:	20004220 	.word	0x20004220

08016a24 <__sfputc_r>:
 8016a24:	6893      	ldr	r3, [r2, #8]
 8016a26:	3b01      	subs	r3, #1
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	b410      	push	{r4}
 8016a2c:	6093      	str	r3, [r2, #8]
 8016a2e:	da09      	bge.n	8016a44 <__sfputc_r+0x20>
 8016a30:	6994      	ldr	r4, [r2, #24]
 8016a32:	42a3      	cmp	r3, r4
 8016a34:	db02      	blt.n	8016a3c <__sfputc_r+0x18>
 8016a36:	b2cb      	uxtb	r3, r1
 8016a38:	2b0a      	cmp	r3, #10
 8016a3a:	d103      	bne.n	8016a44 <__sfputc_r+0x20>
 8016a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a40:	f000 bb50 	b.w	80170e4 <__swbuf_r>
 8016a44:	6813      	ldr	r3, [r2, #0]
 8016a46:	1c58      	adds	r0, r3, #1
 8016a48:	6010      	str	r0, [r2, #0]
 8016a4a:	7019      	strb	r1, [r3, #0]
 8016a4c:	b2c8      	uxtb	r0, r1
 8016a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a52:	4770      	bx	lr

08016a54 <__sfputs_r>:
 8016a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a56:	4606      	mov	r6, r0
 8016a58:	460f      	mov	r7, r1
 8016a5a:	4614      	mov	r4, r2
 8016a5c:	18d5      	adds	r5, r2, r3
 8016a5e:	42ac      	cmp	r4, r5
 8016a60:	d101      	bne.n	8016a66 <__sfputs_r+0x12>
 8016a62:	2000      	movs	r0, #0
 8016a64:	e007      	b.n	8016a76 <__sfputs_r+0x22>
 8016a66:	463a      	mov	r2, r7
 8016a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a6c:	4630      	mov	r0, r6
 8016a6e:	f7ff ffd9 	bl	8016a24 <__sfputc_r>
 8016a72:	1c43      	adds	r3, r0, #1
 8016a74:	d1f3      	bne.n	8016a5e <__sfputs_r+0xa>
 8016a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016a78 <_vfiprintf_r>:
 8016a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a7c:	b09d      	sub	sp, #116	; 0x74
 8016a7e:	460c      	mov	r4, r1
 8016a80:	4617      	mov	r7, r2
 8016a82:	9303      	str	r3, [sp, #12]
 8016a84:	4606      	mov	r6, r0
 8016a86:	b118      	cbz	r0, 8016a90 <_vfiprintf_r+0x18>
 8016a88:	6983      	ldr	r3, [r0, #24]
 8016a8a:	b90b      	cbnz	r3, 8016a90 <_vfiprintf_r+0x18>
 8016a8c:	f7ff fe10 	bl	80166b0 <__sinit>
 8016a90:	4b7c      	ldr	r3, [pc, #496]	; (8016c84 <_vfiprintf_r+0x20c>)
 8016a92:	429c      	cmp	r4, r3
 8016a94:	d157      	bne.n	8016b46 <_vfiprintf_r+0xce>
 8016a96:	6874      	ldr	r4, [r6, #4]
 8016a98:	89a3      	ldrh	r3, [r4, #12]
 8016a9a:	0718      	lsls	r0, r3, #28
 8016a9c:	d55d      	bpl.n	8016b5a <_vfiprintf_r+0xe2>
 8016a9e:	6923      	ldr	r3, [r4, #16]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d05a      	beq.n	8016b5a <_vfiprintf_r+0xe2>
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8016aa8:	2320      	movs	r3, #32
 8016aaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016aae:	2330      	movs	r3, #48	; 0x30
 8016ab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016ab4:	f04f 0b01 	mov.w	fp, #1
 8016ab8:	46b8      	mov	r8, r7
 8016aba:	4645      	mov	r5, r8
 8016abc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d155      	bne.n	8016b70 <_vfiprintf_r+0xf8>
 8016ac4:	ebb8 0a07 	subs.w	sl, r8, r7
 8016ac8:	d00b      	beq.n	8016ae2 <_vfiprintf_r+0x6a>
 8016aca:	4653      	mov	r3, sl
 8016acc:	463a      	mov	r2, r7
 8016ace:	4621      	mov	r1, r4
 8016ad0:	4630      	mov	r0, r6
 8016ad2:	f7ff ffbf 	bl	8016a54 <__sfputs_r>
 8016ad6:	3001      	adds	r0, #1
 8016ad8:	f000 80c4 	beq.w	8016c64 <_vfiprintf_r+0x1ec>
 8016adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ade:	4453      	add	r3, sl
 8016ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8016ae2:	f898 3000 	ldrb.w	r3, [r8]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	f000 80bc 	beq.w	8016c64 <_vfiprintf_r+0x1ec>
 8016aec:	2300      	movs	r3, #0
 8016aee:	f04f 32ff 	mov.w	r2, #4294967295
 8016af2:	9304      	str	r3, [sp, #16]
 8016af4:	9307      	str	r3, [sp, #28]
 8016af6:	9205      	str	r2, [sp, #20]
 8016af8:	9306      	str	r3, [sp, #24]
 8016afa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016afe:	931a      	str	r3, [sp, #104]	; 0x68
 8016b00:	2205      	movs	r2, #5
 8016b02:	7829      	ldrb	r1, [r5, #0]
 8016b04:	4860      	ldr	r0, [pc, #384]	; (8016c88 <_vfiprintf_r+0x210>)
 8016b06:	f7e9 fb9b 	bl	8000240 <memchr>
 8016b0a:	f105 0801 	add.w	r8, r5, #1
 8016b0e:	9b04      	ldr	r3, [sp, #16]
 8016b10:	2800      	cmp	r0, #0
 8016b12:	d131      	bne.n	8016b78 <_vfiprintf_r+0x100>
 8016b14:	06d9      	lsls	r1, r3, #27
 8016b16:	bf44      	itt	mi
 8016b18:	2220      	movmi	r2, #32
 8016b1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016b1e:	071a      	lsls	r2, r3, #28
 8016b20:	bf44      	itt	mi
 8016b22:	222b      	movmi	r2, #43	; 0x2b
 8016b24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016b28:	782a      	ldrb	r2, [r5, #0]
 8016b2a:	2a2a      	cmp	r2, #42	; 0x2a
 8016b2c:	d02c      	beq.n	8016b88 <_vfiprintf_r+0x110>
 8016b2e:	9a07      	ldr	r2, [sp, #28]
 8016b30:	2100      	movs	r1, #0
 8016b32:	200a      	movs	r0, #10
 8016b34:	46a8      	mov	r8, r5
 8016b36:	3501      	adds	r5, #1
 8016b38:	f898 3000 	ldrb.w	r3, [r8]
 8016b3c:	3b30      	subs	r3, #48	; 0x30
 8016b3e:	2b09      	cmp	r3, #9
 8016b40:	d96d      	bls.n	8016c1e <_vfiprintf_r+0x1a6>
 8016b42:	b371      	cbz	r1, 8016ba2 <_vfiprintf_r+0x12a>
 8016b44:	e026      	b.n	8016b94 <_vfiprintf_r+0x11c>
 8016b46:	4b51      	ldr	r3, [pc, #324]	; (8016c8c <_vfiprintf_r+0x214>)
 8016b48:	429c      	cmp	r4, r3
 8016b4a:	d101      	bne.n	8016b50 <_vfiprintf_r+0xd8>
 8016b4c:	68b4      	ldr	r4, [r6, #8]
 8016b4e:	e7a3      	b.n	8016a98 <_vfiprintf_r+0x20>
 8016b50:	4b4f      	ldr	r3, [pc, #316]	; (8016c90 <_vfiprintf_r+0x218>)
 8016b52:	429c      	cmp	r4, r3
 8016b54:	bf08      	it	eq
 8016b56:	68f4      	ldreq	r4, [r6, #12]
 8016b58:	e79e      	b.n	8016a98 <_vfiprintf_r+0x20>
 8016b5a:	4621      	mov	r1, r4
 8016b5c:	4630      	mov	r0, r6
 8016b5e:	f000 fb25 	bl	80171ac <__swsetup_r>
 8016b62:	2800      	cmp	r0, #0
 8016b64:	d09e      	beq.n	8016aa4 <_vfiprintf_r+0x2c>
 8016b66:	f04f 30ff 	mov.w	r0, #4294967295
 8016b6a:	b01d      	add	sp, #116	; 0x74
 8016b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b70:	2b25      	cmp	r3, #37	; 0x25
 8016b72:	d0a7      	beq.n	8016ac4 <_vfiprintf_r+0x4c>
 8016b74:	46a8      	mov	r8, r5
 8016b76:	e7a0      	b.n	8016aba <_vfiprintf_r+0x42>
 8016b78:	4a43      	ldr	r2, [pc, #268]	; (8016c88 <_vfiprintf_r+0x210>)
 8016b7a:	1a80      	subs	r0, r0, r2
 8016b7c:	fa0b f000 	lsl.w	r0, fp, r0
 8016b80:	4318      	orrs	r0, r3
 8016b82:	9004      	str	r0, [sp, #16]
 8016b84:	4645      	mov	r5, r8
 8016b86:	e7bb      	b.n	8016b00 <_vfiprintf_r+0x88>
 8016b88:	9a03      	ldr	r2, [sp, #12]
 8016b8a:	1d11      	adds	r1, r2, #4
 8016b8c:	6812      	ldr	r2, [r2, #0]
 8016b8e:	9103      	str	r1, [sp, #12]
 8016b90:	2a00      	cmp	r2, #0
 8016b92:	db01      	blt.n	8016b98 <_vfiprintf_r+0x120>
 8016b94:	9207      	str	r2, [sp, #28]
 8016b96:	e004      	b.n	8016ba2 <_vfiprintf_r+0x12a>
 8016b98:	4252      	negs	r2, r2
 8016b9a:	f043 0302 	orr.w	r3, r3, #2
 8016b9e:	9207      	str	r2, [sp, #28]
 8016ba0:	9304      	str	r3, [sp, #16]
 8016ba2:	f898 3000 	ldrb.w	r3, [r8]
 8016ba6:	2b2e      	cmp	r3, #46	; 0x2e
 8016ba8:	d110      	bne.n	8016bcc <_vfiprintf_r+0x154>
 8016baa:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016bae:	2b2a      	cmp	r3, #42	; 0x2a
 8016bb0:	f108 0101 	add.w	r1, r8, #1
 8016bb4:	d137      	bne.n	8016c26 <_vfiprintf_r+0x1ae>
 8016bb6:	9b03      	ldr	r3, [sp, #12]
 8016bb8:	1d1a      	adds	r2, r3, #4
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	9203      	str	r2, [sp, #12]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	bfb8      	it	lt
 8016bc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8016bc6:	f108 0802 	add.w	r8, r8, #2
 8016bca:	9305      	str	r3, [sp, #20]
 8016bcc:	4d31      	ldr	r5, [pc, #196]	; (8016c94 <_vfiprintf_r+0x21c>)
 8016bce:	f898 1000 	ldrb.w	r1, [r8]
 8016bd2:	2203      	movs	r2, #3
 8016bd4:	4628      	mov	r0, r5
 8016bd6:	f7e9 fb33 	bl	8000240 <memchr>
 8016bda:	b140      	cbz	r0, 8016bee <_vfiprintf_r+0x176>
 8016bdc:	2340      	movs	r3, #64	; 0x40
 8016bde:	1b40      	subs	r0, r0, r5
 8016be0:	fa03 f000 	lsl.w	r0, r3, r0
 8016be4:	9b04      	ldr	r3, [sp, #16]
 8016be6:	4303      	orrs	r3, r0
 8016be8:	9304      	str	r3, [sp, #16]
 8016bea:	f108 0801 	add.w	r8, r8, #1
 8016bee:	f898 1000 	ldrb.w	r1, [r8]
 8016bf2:	4829      	ldr	r0, [pc, #164]	; (8016c98 <_vfiprintf_r+0x220>)
 8016bf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016bf8:	2206      	movs	r2, #6
 8016bfa:	f108 0701 	add.w	r7, r8, #1
 8016bfe:	f7e9 fb1f 	bl	8000240 <memchr>
 8016c02:	2800      	cmp	r0, #0
 8016c04:	d034      	beq.n	8016c70 <_vfiprintf_r+0x1f8>
 8016c06:	4b25      	ldr	r3, [pc, #148]	; (8016c9c <_vfiprintf_r+0x224>)
 8016c08:	bb03      	cbnz	r3, 8016c4c <_vfiprintf_r+0x1d4>
 8016c0a:	9b03      	ldr	r3, [sp, #12]
 8016c0c:	3307      	adds	r3, #7
 8016c0e:	f023 0307 	bic.w	r3, r3, #7
 8016c12:	3308      	adds	r3, #8
 8016c14:	9303      	str	r3, [sp, #12]
 8016c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c18:	444b      	add	r3, r9
 8016c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8016c1c:	e74c      	b.n	8016ab8 <_vfiprintf_r+0x40>
 8016c1e:	fb00 3202 	mla	r2, r0, r2, r3
 8016c22:	2101      	movs	r1, #1
 8016c24:	e786      	b.n	8016b34 <_vfiprintf_r+0xbc>
 8016c26:	2300      	movs	r3, #0
 8016c28:	9305      	str	r3, [sp, #20]
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	250a      	movs	r5, #10
 8016c2e:	4688      	mov	r8, r1
 8016c30:	3101      	adds	r1, #1
 8016c32:	f898 2000 	ldrb.w	r2, [r8]
 8016c36:	3a30      	subs	r2, #48	; 0x30
 8016c38:	2a09      	cmp	r2, #9
 8016c3a:	d903      	bls.n	8016c44 <_vfiprintf_r+0x1cc>
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d0c5      	beq.n	8016bcc <_vfiprintf_r+0x154>
 8016c40:	9005      	str	r0, [sp, #20]
 8016c42:	e7c3      	b.n	8016bcc <_vfiprintf_r+0x154>
 8016c44:	fb05 2000 	mla	r0, r5, r0, r2
 8016c48:	2301      	movs	r3, #1
 8016c4a:	e7f0      	b.n	8016c2e <_vfiprintf_r+0x1b6>
 8016c4c:	ab03      	add	r3, sp, #12
 8016c4e:	9300      	str	r3, [sp, #0]
 8016c50:	4622      	mov	r2, r4
 8016c52:	4b13      	ldr	r3, [pc, #76]	; (8016ca0 <_vfiprintf_r+0x228>)
 8016c54:	a904      	add	r1, sp, #16
 8016c56:	4630      	mov	r0, r6
 8016c58:	f3af 8000 	nop.w
 8016c5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016c60:	4681      	mov	r9, r0
 8016c62:	d1d8      	bne.n	8016c16 <_vfiprintf_r+0x19e>
 8016c64:	89a3      	ldrh	r3, [r4, #12]
 8016c66:	065b      	lsls	r3, r3, #25
 8016c68:	f53f af7d 	bmi.w	8016b66 <_vfiprintf_r+0xee>
 8016c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c6e:	e77c      	b.n	8016b6a <_vfiprintf_r+0xf2>
 8016c70:	ab03      	add	r3, sp, #12
 8016c72:	9300      	str	r3, [sp, #0]
 8016c74:	4622      	mov	r2, r4
 8016c76:	4b0a      	ldr	r3, [pc, #40]	; (8016ca0 <_vfiprintf_r+0x228>)
 8016c78:	a904      	add	r1, sp, #16
 8016c7a:	4630      	mov	r0, r6
 8016c7c:	f000 f888 	bl	8016d90 <_printf_i>
 8016c80:	e7ec      	b.n	8016c5c <_vfiprintf_r+0x1e4>
 8016c82:	bf00      	nop
 8016c84:	0801b760 	.word	0x0801b760
 8016c88:	0801b7a4 	.word	0x0801b7a4
 8016c8c:	0801b780 	.word	0x0801b780
 8016c90:	0801b740 	.word	0x0801b740
 8016c94:	0801b7aa 	.word	0x0801b7aa
 8016c98:	0801b7ae 	.word	0x0801b7ae
 8016c9c:	00000000 	.word	0x00000000
 8016ca0:	08016a55 	.word	0x08016a55

08016ca4 <_printf_common>:
 8016ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ca8:	4691      	mov	r9, r2
 8016caa:	461f      	mov	r7, r3
 8016cac:	688a      	ldr	r2, [r1, #8]
 8016cae:	690b      	ldr	r3, [r1, #16]
 8016cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016cb4:	4293      	cmp	r3, r2
 8016cb6:	bfb8      	it	lt
 8016cb8:	4613      	movlt	r3, r2
 8016cba:	f8c9 3000 	str.w	r3, [r9]
 8016cbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016cc2:	4606      	mov	r6, r0
 8016cc4:	460c      	mov	r4, r1
 8016cc6:	b112      	cbz	r2, 8016cce <_printf_common+0x2a>
 8016cc8:	3301      	adds	r3, #1
 8016cca:	f8c9 3000 	str.w	r3, [r9]
 8016cce:	6823      	ldr	r3, [r4, #0]
 8016cd0:	0699      	lsls	r1, r3, #26
 8016cd2:	bf42      	ittt	mi
 8016cd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016cd8:	3302      	addmi	r3, #2
 8016cda:	f8c9 3000 	strmi.w	r3, [r9]
 8016cde:	6825      	ldr	r5, [r4, #0]
 8016ce0:	f015 0506 	ands.w	r5, r5, #6
 8016ce4:	d107      	bne.n	8016cf6 <_printf_common+0x52>
 8016ce6:	f104 0a19 	add.w	sl, r4, #25
 8016cea:	68e3      	ldr	r3, [r4, #12]
 8016cec:	f8d9 2000 	ldr.w	r2, [r9]
 8016cf0:	1a9b      	subs	r3, r3, r2
 8016cf2:	429d      	cmp	r5, r3
 8016cf4:	db29      	blt.n	8016d4a <_printf_common+0xa6>
 8016cf6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016cfa:	6822      	ldr	r2, [r4, #0]
 8016cfc:	3300      	adds	r3, #0
 8016cfe:	bf18      	it	ne
 8016d00:	2301      	movne	r3, #1
 8016d02:	0692      	lsls	r2, r2, #26
 8016d04:	d42e      	bmi.n	8016d64 <_printf_common+0xc0>
 8016d06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016d0a:	4639      	mov	r1, r7
 8016d0c:	4630      	mov	r0, r6
 8016d0e:	47c0      	blx	r8
 8016d10:	3001      	adds	r0, #1
 8016d12:	d021      	beq.n	8016d58 <_printf_common+0xb4>
 8016d14:	6823      	ldr	r3, [r4, #0]
 8016d16:	68e5      	ldr	r5, [r4, #12]
 8016d18:	f8d9 2000 	ldr.w	r2, [r9]
 8016d1c:	f003 0306 	and.w	r3, r3, #6
 8016d20:	2b04      	cmp	r3, #4
 8016d22:	bf08      	it	eq
 8016d24:	1aad      	subeq	r5, r5, r2
 8016d26:	68a3      	ldr	r3, [r4, #8]
 8016d28:	6922      	ldr	r2, [r4, #16]
 8016d2a:	bf0c      	ite	eq
 8016d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016d30:	2500      	movne	r5, #0
 8016d32:	4293      	cmp	r3, r2
 8016d34:	bfc4      	itt	gt
 8016d36:	1a9b      	subgt	r3, r3, r2
 8016d38:	18ed      	addgt	r5, r5, r3
 8016d3a:	f04f 0900 	mov.w	r9, #0
 8016d3e:	341a      	adds	r4, #26
 8016d40:	454d      	cmp	r5, r9
 8016d42:	d11b      	bne.n	8016d7c <_printf_common+0xd8>
 8016d44:	2000      	movs	r0, #0
 8016d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d4a:	2301      	movs	r3, #1
 8016d4c:	4652      	mov	r2, sl
 8016d4e:	4639      	mov	r1, r7
 8016d50:	4630      	mov	r0, r6
 8016d52:	47c0      	blx	r8
 8016d54:	3001      	adds	r0, #1
 8016d56:	d103      	bne.n	8016d60 <_printf_common+0xbc>
 8016d58:	f04f 30ff 	mov.w	r0, #4294967295
 8016d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d60:	3501      	adds	r5, #1
 8016d62:	e7c2      	b.n	8016cea <_printf_common+0x46>
 8016d64:	18e1      	adds	r1, r4, r3
 8016d66:	1c5a      	adds	r2, r3, #1
 8016d68:	2030      	movs	r0, #48	; 0x30
 8016d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016d6e:	4422      	add	r2, r4
 8016d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016d78:	3302      	adds	r3, #2
 8016d7a:	e7c4      	b.n	8016d06 <_printf_common+0x62>
 8016d7c:	2301      	movs	r3, #1
 8016d7e:	4622      	mov	r2, r4
 8016d80:	4639      	mov	r1, r7
 8016d82:	4630      	mov	r0, r6
 8016d84:	47c0      	blx	r8
 8016d86:	3001      	adds	r0, #1
 8016d88:	d0e6      	beq.n	8016d58 <_printf_common+0xb4>
 8016d8a:	f109 0901 	add.w	r9, r9, #1
 8016d8e:	e7d7      	b.n	8016d40 <_printf_common+0x9c>

08016d90 <_printf_i>:
 8016d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d94:	4617      	mov	r7, r2
 8016d96:	7e0a      	ldrb	r2, [r1, #24]
 8016d98:	b085      	sub	sp, #20
 8016d9a:	2a6e      	cmp	r2, #110	; 0x6e
 8016d9c:	4698      	mov	r8, r3
 8016d9e:	4606      	mov	r6, r0
 8016da0:	460c      	mov	r4, r1
 8016da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016da4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8016da8:	f000 80bc 	beq.w	8016f24 <_printf_i+0x194>
 8016dac:	d81a      	bhi.n	8016de4 <_printf_i+0x54>
 8016dae:	2a63      	cmp	r2, #99	; 0x63
 8016db0:	d02e      	beq.n	8016e10 <_printf_i+0x80>
 8016db2:	d80a      	bhi.n	8016dca <_printf_i+0x3a>
 8016db4:	2a00      	cmp	r2, #0
 8016db6:	f000 80c8 	beq.w	8016f4a <_printf_i+0x1ba>
 8016dba:	2a58      	cmp	r2, #88	; 0x58
 8016dbc:	f000 808a 	beq.w	8016ed4 <_printf_i+0x144>
 8016dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016dc4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8016dc8:	e02a      	b.n	8016e20 <_printf_i+0x90>
 8016dca:	2a64      	cmp	r2, #100	; 0x64
 8016dcc:	d001      	beq.n	8016dd2 <_printf_i+0x42>
 8016dce:	2a69      	cmp	r2, #105	; 0x69
 8016dd0:	d1f6      	bne.n	8016dc0 <_printf_i+0x30>
 8016dd2:	6821      	ldr	r1, [r4, #0]
 8016dd4:	681a      	ldr	r2, [r3, #0]
 8016dd6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8016dda:	d023      	beq.n	8016e24 <_printf_i+0x94>
 8016ddc:	1d11      	adds	r1, r2, #4
 8016dde:	6019      	str	r1, [r3, #0]
 8016de0:	6813      	ldr	r3, [r2, #0]
 8016de2:	e027      	b.n	8016e34 <_printf_i+0xa4>
 8016de4:	2a73      	cmp	r2, #115	; 0x73
 8016de6:	f000 80b4 	beq.w	8016f52 <_printf_i+0x1c2>
 8016dea:	d808      	bhi.n	8016dfe <_printf_i+0x6e>
 8016dec:	2a6f      	cmp	r2, #111	; 0x6f
 8016dee:	d02a      	beq.n	8016e46 <_printf_i+0xb6>
 8016df0:	2a70      	cmp	r2, #112	; 0x70
 8016df2:	d1e5      	bne.n	8016dc0 <_printf_i+0x30>
 8016df4:	680a      	ldr	r2, [r1, #0]
 8016df6:	f042 0220 	orr.w	r2, r2, #32
 8016dfa:	600a      	str	r2, [r1, #0]
 8016dfc:	e003      	b.n	8016e06 <_printf_i+0x76>
 8016dfe:	2a75      	cmp	r2, #117	; 0x75
 8016e00:	d021      	beq.n	8016e46 <_printf_i+0xb6>
 8016e02:	2a78      	cmp	r2, #120	; 0x78
 8016e04:	d1dc      	bne.n	8016dc0 <_printf_i+0x30>
 8016e06:	2278      	movs	r2, #120	; 0x78
 8016e08:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8016e0c:	496e      	ldr	r1, [pc, #440]	; (8016fc8 <_printf_i+0x238>)
 8016e0e:	e064      	b.n	8016eda <_printf_i+0x14a>
 8016e10:	681a      	ldr	r2, [r3, #0]
 8016e12:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8016e16:	1d11      	adds	r1, r2, #4
 8016e18:	6019      	str	r1, [r3, #0]
 8016e1a:	6813      	ldr	r3, [r2, #0]
 8016e1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016e20:	2301      	movs	r3, #1
 8016e22:	e0a3      	b.n	8016f6c <_printf_i+0x1dc>
 8016e24:	f011 0f40 	tst.w	r1, #64	; 0x40
 8016e28:	f102 0104 	add.w	r1, r2, #4
 8016e2c:	6019      	str	r1, [r3, #0]
 8016e2e:	d0d7      	beq.n	8016de0 <_printf_i+0x50>
 8016e30:	f9b2 3000 	ldrsh.w	r3, [r2]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	da03      	bge.n	8016e40 <_printf_i+0xb0>
 8016e38:	222d      	movs	r2, #45	; 0x2d
 8016e3a:	425b      	negs	r3, r3
 8016e3c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016e40:	4962      	ldr	r1, [pc, #392]	; (8016fcc <_printf_i+0x23c>)
 8016e42:	220a      	movs	r2, #10
 8016e44:	e017      	b.n	8016e76 <_printf_i+0xe6>
 8016e46:	6820      	ldr	r0, [r4, #0]
 8016e48:	6819      	ldr	r1, [r3, #0]
 8016e4a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8016e4e:	d003      	beq.n	8016e58 <_printf_i+0xc8>
 8016e50:	1d08      	adds	r0, r1, #4
 8016e52:	6018      	str	r0, [r3, #0]
 8016e54:	680b      	ldr	r3, [r1, #0]
 8016e56:	e006      	b.n	8016e66 <_printf_i+0xd6>
 8016e58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016e5c:	f101 0004 	add.w	r0, r1, #4
 8016e60:	6018      	str	r0, [r3, #0]
 8016e62:	d0f7      	beq.n	8016e54 <_printf_i+0xc4>
 8016e64:	880b      	ldrh	r3, [r1, #0]
 8016e66:	4959      	ldr	r1, [pc, #356]	; (8016fcc <_printf_i+0x23c>)
 8016e68:	2a6f      	cmp	r2, #111	; 0x6f
 8016e6a:	bf14      	ite	ne
 8016e6c:	220a      	movne	r2, #10
 8016e6e:	2208      	moveq	r2, #8
 8016e70:	2000      	movs	r0, #0
 8016e72:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8016e76:	6865      	ldr	r5, [r4, #4]
 8016e78:	60a5      	str	r5, [r4, #8]
 8016e7a:	2d00      	cmp	r5, #0
 8016e7c:	f2c0 809c 	blt.w	8016fb8 <_printf_i+0x228>
 8016e80:	6820      	ldr	r0, [r4, #0]
 8016e82:	f020 0004 	bic.w	r0, r0, #4
 8016e86:	6020      	str	r0, [r4, #0]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d13f      	bne.n	8016f0c <_printf_i+0x17c>
 8016e8c:	2d00      	cmp	r5, #0
 8016e8e:	f040 8095 	bne.w	8016fbc <_printf_i+0x22c>
 8016e92:	4675      	mov	r5, lr
 8016e94:	2a08      	cmp	r2, #8
 8016e96:	d10b      	bne.n	8016eb0 <_printf_i+0x120>
 8016e98:	6823      	ldr	r3, [r4, #0]
 8016e9a:	07da      	lsls	r2, r3, #31
 8016e9c:	d508      	bpl.n	8016eb0 <_printf_i+0x120>
 8016e9e:	6923      	ldr	r3, [r4, #16]
 8016ea0:	6862      	ldr	r2, [r4, #4]
 8016ea2:	429a      	cmp	r2, r3
 8016ea4:	bfde      	ittt	le
 8016ea6:	2330      	movle	r3, #48	; 0x30
 8016ea8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016eac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016eb0:	ebae 0305 	sub.w	r3, lr, r5
 8016eb4:	6123      	str	r3, [r4, #16]
 8016eb6:	f8cd 8000 	str.w	r8, [sp]
 8016eba:	463b      	mov	r3, r7
 8016ebc:	aa03      	add	r2, sp, #12
 8016ebe:	4621      	mov	r1, r4
 8016ec0:	4630      	mov	r0, r6
 8016ec2:	f7ff feef 	bl	8016ca4 <_printf_common>
 8016ec6:	3001      	adds	r0, #1
 8016ec8:	d155      	bne.n	8016f76 <_printf_i+0x1e6>
 8016eca:	f04f 30ff 	mov.w	r0, #4294967295
 8016ece:	b005      	add	sp, #20
 8016ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ed4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8016ed8:	493c      	ldr	r1, [pc, #240]	; (8016fcc <_printf_i+0x23c>)
 8016eda:	6822      	ldr	r2, [r4, #0]
 8016edc:	6818      	ldr	r0, [r3, #0]
 8016ede:	f012 0f80 	tst.w	r2, #128	; 0x80
 8016ee2:	f100 0504 	add.w	r5, r0, #4
 8016ee6:	601d      	str	r5, [r3, #0]
 8016ee8:	d001      	beq.n	8016eee <_printf_i+0x15e>
 8016eea:	6803      	ldr	r3, [r0, #0]
 8016eec:	e002      	b.n	8016ef4 <_printf_i+0x164>
 8016eee:	0655      	lsls	r5, r2, #25
 8016ef0:	d5fb      	bpl.n	8016eea <_printf_i+0x15a>
 8016ef2:	8803      	ldrh	r3, [r0, #0]
 8016ef4:	07d0      	lsls	r0, r2, #31
 8016ef6:	bf44      	itt	mi
 8016ef8:	f042 0220 	orrmi.w	r2, r2, #32
 8016efc:	6022      	strmi	r2, [r4, #0]
 8016efe:	b91b      	cbnz	r3, 8016f08 <_printf_i+0x178>
 8016f00:	6822      	ldr	r2, [r4, #0]
 8016f02:	f022 0220 	bic.w	r2, r2, #32
 8016f06:	6022      	str	r2, [r4, #0]
 8016f08:	2210      	movs	r2, #16
 8016f0a:	e7b1      	b.n	8016e70 <_printf_i+0xe0>
 8016f0c:	4675      	mov	r5, lr
 8016f0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8016f12:	fb02 3310 	mls	r3, r2, r0, r3
 8016f16:	5ccb      	ldrb	r3, [r1, r3]
 8016f18:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	2800      	cmp	r0, #0
 8016f20:	d1f5      	bne.n	8016f0e <_printf_i+0x17e>
 8016f22:	e7b7      	b.n	8016e94 <_printf_i+0x104>
 8016f24:	6808      	ldr	r0, [r1, #0]
 8016f26:	681a      	ldr	r2, [r3, #0]
 8016f28:	6949      	ldr	r1, [r1, #20]
 8016f2a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8016f2e:	d004      	beq.n	8016f3a <_printf_i+0x1aa>
 8016f30:	1d10      	adds	r0, r2, #4
 8016f32:	6018      	str	r0, [r3, #0]
 8016f34:	6813      	ldr	r3, [r2, #0]
 8016f36:	6019      	str	r1, [r3, #0]
 8016f38:	e007      	b.n	8016f4a <_printf_i+0x1ba>
 8016f3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016f3e:	f102 0004 	add.w	r0, r2, #4
 8016f42:	6018      	str	r0, [r3, #0]
 8016f44:	6813      	ldr	r3, [r2, #0]
 8016f46:	d0f6      	beq.n	8016f36 <_printf_i+0x1a6>
 8016f48:	8019      	strh	r1, [r3, #0]
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	6123      	str	r3, [r4, #16]
 8016f4e:	4675      	mov	r5, lr
 8016f50:	e7b1      	b.n	8016eb6 <_printf_i+0x126>
 8016f52:	681a      	ldr	r2, [r3, #0]
 8016f54:	1d11      	adds	r1, r2, #4
 8016f56:	6019      	str	r1, [r3, #0]
 8016f58:	6815      	ldr	r5, [r2, #0]
 8016f5a:	6862      	ldr	r2, [r4, #4]
 8016f5c:	2100      	movs	r1, #0
 8016f5e:	4628      	mov	r0, r5
 8016f60:	f7e9 f96e 	bl	8000240 <memchr>
 8016f64:	b108      	cbz	r0, 8016f6a <_printf_i+0x1da>
 8016f66:	1b40      	subs	r0, r0, r5
 8016f68:	6060      	str	r0, [r4, #4]
 8016f6a:	6863      	ldr	r3, [r4, #4]
 8016f6c:	6123      	str	r3, [r4, #16]
 8016f6e:	2300      	movs	r3, #0
 8016f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016f74:	e79f      	b.n	8016eb6 <_printf_i+0x126>
 8016f76:	6923      	ldr	r3, [r4, #16]
 8016f78:	462a      	mov	r2, r5
 8016f7a:	4639      	mov	r1, r7
 8016f7c:	4630      	mov	r0, r6
 8016f7e:	47c0      	blx	r8
 8016f80:	3001      	adds	r0, #1
 8016f82:	d0a2      	beq.n	8016eca <_printf_i+0x13a>
 8016f84:	6823      	ldr	r3, [r4, #0]
 8016f86:	079b      	lsls	r3, r3, #30
 8016f88:	d507      	bpl.n	8016f9a <_printf_i+0x20a>
 8016f8a:	2500      	movs	r5, #0
 8016f8c:	f104 0919 	add.w	r9, r4, #25
 8016f90:	68e3      	ldr	r3, [r4, #12]
 8016f92:	9a03      	ldr	r2, [sp, #12]
 8016f94:	1a9b      	subs	r3, r3, r2
 8016f96:	429d      	cmp	r5, r3
 8016f98:	db05      	blt.n	8016fa6 <_printf_i+0x216>
 8016f9a:	68e0      	ldr	r0, [r4, #12]
 8016f9c:	9b03      	ldr	r3, [sp, #12]
 8016f9e:	4298      	cmp	r0, r3
 8016fa0:	bfb8      	it	lt
 8016fa2:	4618      	movlt	r0, r3
 8016fa4:	e793      	b.n	8016ece <_printf_i+0x13e>
 8016fa6:	2301      	movs	r3, #1
 8016fa8:	464a      	mov	r2, r9
 8016faa:	4639      	mov	r1, r7
 8016fac:	4630      	mov	r0, r6
 8016fae:	47c0      	blx	r8
 8016fb0:	3001      	adds	r0, #1
 8016fb2:	d08a      	beq.n	8016eca <_printf_i+0x13a>
 8016fb4:	3501      	adds	r5, #1
 8016fb6:	e7eb      	b.n	8016f90 <_printf_i+0x200>
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d1a7      	bne.n	8016f0c <_printf_i+0x17c>
 8016fbc:	780b      	ldrb	r3, [r1, #0]
 8016fbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016fc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016fc6:	e765      	b.n	8016e94 <_printf_i+0x104>
 8016fc8:	0801b7c6 	.word	0x0801b7c6
 8016fcc:	0801b7b5 	.word	0x0801b7b5

08016fd0 <_putc_r>:
 8016fd0:	b570      	push	{r4, r5, r6, lr}
 8016fd2:	460d      	mov	r5, r1
 8016fd4:	4614      	mov	r4, r2
 8016fd6:	4606      	mov	r6, r0
 8016fd8:	b118      	cbz	r0, 8016fe2 <_putc_r+0x12>
 8016fda:	6983      	ldr	r3, [r0, #24]
 8016fdc:	b90b      	cbnz	r3, 8016fe2 <_putc_r+0x12>
 8016fde:	f7ff fb67 	bl	80166b0 <__sinit>
 8016fe2:	4b13      	ldr	r3, [pc, #76]	; (8017030 <_putc_r+0x60>)
 8016fe4:	429c      	cmp	r4, r3
 8016fe6:	d112      	bne.n	801700e <_putc_r+0x3e>
 8016fe8:	6874      	ldr	r4, [r6, #4]
 8016fea:	68a3      	ldr	r3, [r4, #8]
 8016fec:	3b01      	subs	r3, #1
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	60a3      	str	r3, [r4, #8]
 8016ff2:	da16      	bge.n	8017022 <_putc_r+0x52>
 8016ff4:	69a2      	ldr	r2, [r4, #24]
 8016ff6:	4293      	cmp	r3, r2
 8016ff8:	db02      	blt.n	8017000 <_putc_r+0x30>
 8016ffa:	b2eb      	uxtb	r3, r5
 8016ffc:	2b0a      	cmp	r3, #10
 8016ffe:	d110      	bne.n	8017022 <_putc_r+0x52>
 8017000:	4622      	mov	r2, r4
 8017002:	4629      	mov	r1, r5
 8017004:	4630      	mov	r0, r6
 8017006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801700a:	f000 b86b 	b.w	80170e4 <__swbuf_r>
 801700e:	4b09      	ldr	r3, [pc, #36]	; (8017034 <_putc_r+0x64>)
 8017010:	429c      	cmp	r4, r3
 8017012:	d101      	bne.n	8017018 <_putc_r+0x48>
 8017014:	68b4      	ldr	r4, [r6, #8]
 8017016:	e7e8      	b.n	8016fea <_putc_r+0x1a>
 8017018:	4b07      	ldr	r3, [pc, #28]	; (8017038 <_putc_r+0x68>)
 801701a:	429c      	cmp	r4, r3
 801701c:	bf08      	it	eq
 801701e:	68f4      	ldreq	r4, [r6, #12]
 8017020:	e7e3      	b.n	8016fea <_putc_r+0x1a>
 8017022:	6823      	ldr	r3, [r4, #0]
 8017024:	1c5a      	adds	r2, r3, #1
 8017026:	6022      	str	r2, [r4, #0]
 8017028:	701d      	strb	r5, [r3, #0]
 801702a:	b2e8      	uxtb	r0, r5
 801702c:	bd70      	pop	{r4, r5, r6, pc}
 801702e:	bf00      	nop
 8017030:	0801b760 	.word	0x0801b760
 8017034:	0801b780 	.word	0x0801b780
 8017038:	0801b740 	.word	0x0801b740

0801703c <_sbrk_r>:
 801703c:	b538      	push	{r3, r4, r5, lr}
 801703e:	4c06      	ldr	r4, [pc, #24]	; (8017058 <_sbrk_r+0x1c>)
 8017040:	2300      	movs	r3, #0
 8017042:	4605      	mov	r5, r0
 8017044:	4608      	mov	r0, r1
 8017046:	6023      	str	r3, [r4, #0]
 8017048:	f7e9 fe1a 	bl	8000c80 <_sbrk>
 801704c:	1c43      	adds	r3, r0, #1
 801704e:	d102      	bne.n	8017056 <_sbrk_r+0x1a>
 8017050:	6823      	ldr	r3, [r4, #0]
 8017052:	b103      	cbz	r3, 8017056 <_sbrk_r+0x1a>
 8017054:	602b      	str	r3, [r5, #0]
 8017056:	bd38      	pop	{r3, r4, r5, pc}
 8017058:	2000e508 	.word	0x2000e508

0801705c <__sread>:
 801705c:	b510      	push	{r4, lr}
 801705e:	460c      	mov	r4, r1
 8017060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017064:	f000 fa4a 	bl	80174fc <_read_r>
 8017068:	2800      	cmp	r0, #0
 801706a:	bfab      	itete	ge
 801706c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801706e:	89a3      	ldrhlt	r3, [r4, #12]
 8017070:	181b      	addge	r3, r3, r0
 8017072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017076:	bfac      	ite	ge
 8017078:	6563      	strge	r3, [r4, #84]	; 0x54
 801707a:	81a3      	strhlt	r3, [r4, #12]
 801707c:	bd10      	pop	{r4, pc}

0801707e <__swrite>:
 801707e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017082:	461f      	mov	r7, r3
 8017084:	898b      	ldrh	r3, [r1, #12]
 8017086:	05db      	lsls	r3, r3, #23
 8017088:	4605      	mov	r5, r0
 801708a:	460c      	mov	r4, r1
 801708c:	4616      	mov	r6, r2
 801708e:	d505      	bpl.n	801709c <__swrite+0x1e>
 8017090:	2302      	movs	r3, #2
 8017092:	2200      	movs	r2, #0
 8017094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017098:	f000 f9b8 	bl	801740c <_lseek_r>
 801709c:	89a3      	ldrh	r3, [r4, #12]
 801709e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80170a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80170a6:	81a3      	strh	r3, [r4, #12]
 80170a8:	4632      	mov	r2, r6
 80170aa:	463b      	mov	r3, r7
 80170ac:	4628      	mov	r0, r5
 80170ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170b2:	f000 b869 	b.w	8017188 <_write_r>

080170b6 <__sseek>:
 80170b6:	b510      	push	{r4, lr}
 80170b8:	460c      	mov	r4, r1
 80170ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170be:	f000 f9a5 	bl	801740c <_lseek_r>
 80170c2:	1c43      	adds	r3, r0, #1
 80170c4:	89a3      	ldrh	r3, [r4, #12]
 80170c6:	bf15      	itete	ne
 80170c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80170ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80170ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80170d2:	81a3      	strheq	r3, [r4, #12]
 80170d4:	bf18      	it	ne
 80170d6:	81a3      	strhne	r3, [r4, #12]
 80170d8:	bd10      	pop	{r4, pc}

080170da <__sclose>:
 80170da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170de:	f000 b8d3 	b.w	8017288 <_close_r>
	...

080170e4 <__swbuf_r>:
 80170e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170e6:	460e      	mov	r6, r1
 80170e8:	4614      	mov	r4, r2
 80170ea:	4605      	mov	r5, r0
 80170ec:	b118      	cbz	r0, 80170f6 <__swbuf_r+0x12>
 80170ee:	6983      	ldr	r3, [r0, #24]
 80170f0:	b90b      	cbnz	r3, 80170f6 <__swbuf_r+0x12>
 80170f2:	f7ff fadd 	bl	80166b0 <__sinit>
 80170f6:	4b21      	ldr	r3, [pc, #132]	; (801717c <__swbuf_r+0x98>)
 80170f8:	429c      	cmp	r4, r3
 80170fa:	d12a      	bne.n	8017152 <__swbuf_r+0x6e>
 80170fc:	686c      	ldr	r4, [r5, #4]
 80170fe:	69a3      	ldr	r3, [r4, #24]
 8017100:	60a3      	str	r3, [r4, #8]
 8017102:	89a3      	ldrh	r3, [r4, #12]
 8017104:	071a      	lsls	r2, r3, #28
 8017106:	d52e      	bpl.n	8017166 <__swbuf_r+0x82>
 8017108:	6923      	ldr	r3, [r4, #16]
 801710a:	b363      	cbz	r3, 8017166 <__swbuf_r+0x82>
 801710c:	6923      	ldr	r3, [r4, #16]
 801710e:	6820      	ldr	r0, [r4, #0]
 8017110:	1ac0      	subs	r0, r0, r3
 8017112:	6963      	ldr	r3, [r4, #20]
 8017114:	b2f6      	uxtb	r6, r6
 8017116:	4298      	cmp	r0, r3
 8017118:	4637      	mov	r7, r6
 801711a:	db04      	blt.n	8017126 <__swbuf_r+0x42>
 801711c:	4621      	mov	r1, r4
 801711e:	4628      	mov	r0, r5
 8017120:	f000 f94a 	bl	80173b8 <_fflush_r>
 8017124:	bb28      	cbnz	r0, 8017172 <__swbuf_r+0x8e>
 8017126:	68a3      	ldr	r3, [r4, #8]
 8017128:	3b01      	subs	r3, #1
 801712a:	60a3      	str	r3, [r4, #8]
 801712c:	6823      	ldr	r3, [r4, #0]
 801712e:	1c5a      	adds	r2, r3, #1
 8017130:	6022      	str	r2, [r4, #0]
 8017132:	701e      	strb	r6, [r3, #0]
 8017134:	6963      	ldr	r3, [r4, #20]
 8017136:	3001      	adds	r0, #1
 8017138:	4298      	cmp	r0, r3
 801713a:	d004      	beq.n	8017146 <__swbuf_r+0x62>
 801713c:	89a3      	ldrh	r3, [r4, #12]
 801713e:	07db      	lsls	r3, r3, #31
 8017140:	d519      	bpl.n	8017176 <__swbuf_r+0x92>
 8017142:	2e0a      	cmp	r6, #10
 8017144:	d117      	bne.n	8017176 <__swbuf_r+0x92>
 8017146:	4621      	mov	r1, r4
 8017148:	4628      	mov	r0, r5
 801714a:	f000 f935 	bl	80173b8 <_fflush_r>
 801714e:	b190      	cbz	r0, 8017176 <__swbuf_r+0x92>
 8017150:	e00f      	b.n	8017172 <__swbuf_r+0x8e>
 8017152:	4b0b      	ldr	r3, [pc, #44]	; (8017180 <__swbuf_r+0x9c>)
 8017154:	429c      	cmp	r4, r3
 8017156:	d101      	bne.n	801715c <__swbuf_r+0x78>
 8017158:	68ac      	ldr	r4, [r5, #8]
 801715a:	e7d0      	b.n	80170fe <__swbuf_r+0x1a>
 801715c:	4b09      	ldr	r3, [pc, #36]	; (8017184 <__swbuf_r+0xa0>)
 801715e:	429c      	cmp	r4, r3
 8017160:	bf08      	it	eq
 8017162:	68ec      	ldreq	r4, [r5, #12]
 8017164:	e7cb      	b.n	80170fe <__swbuf_r+0x1a>
 8017166:	4621      	mov	r1, r4
 8017168:	4628      	mov	r0, r5
 801716a:	f000 f81f 	bl	80171ac <__swsetup_r>
 801716e:	2800      	cmp	r0, #0
 8017170:	d0cc      	beq.n	801710c <__swbuf_r+0x28>
 8017172:	f04f 37ff 	mov.w	r7, #4294967295
 8017176:	4638      	mov	r0, r7
 8017178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801717a:	bf00      	nop
 801717c:	0801b760 	.word	0x0801b760
 8017180:	0801b780 	.word	0x0801b780
 8017184:	0801b740 	.word	0x0801b740

08017188 <_write_r>:
 8017188:	b538      	push	{r3, r4, r5, lr}
 801718a:	4c07      	ldr	r4, [pc, #28]	; (80171a8 <_write_r+0x20>)
 801718c:	4605      	mov	r5, r0
 801718e:	4608      	mov	r0, r1
 8017190:	4611      	mov	r1, r2
 8017192:	2200      	movs	r2, #0
 8017194:	6022      	str	r2, [r4, #0]
 8017196:	461a      	mov	r2, r3
 8017198:	f7e9 fd55 	bl	8000c46 <_write>
 801719c:	1c43      	adds	r3, r0, #1
 801719e:	d102      	bne.n	80171a6 <_write_r+0x1e>
 80171a0:	6823      	ldr	r3, [r4, #0]
 80171a2:	b103      	cbz	r3, 80171a6 <_write_r+0x1e>
 80171a4:	602b      	str	r3, [r5, #0]
 80171a6:	bd38      	pop	{r3, r4, r5, pc}
 80171a8:	2000e508 	.word	0x2000e508

080171ac <__swsetup_r>:
 80171ac:	4b32      	ldr	r3, [pc, #200]	; (8017278 <__swsetup_r+0xcc>)
 80171ae:	b570      	push	{r4, r5, r6, lr}
 80171b0:	681d      	ldr	r5, [r3, #0]
 80171b2:	4606      	mov	r6, r0
 80171b4:	460c      	mov	r4, r1
 80171b6:	b125      	cbz	r5, 80171c2 <__swsetup_r+0x16>
 80171b8:	69ab      	ldr	r3, [r5, #24]
 80171ba:	b913      	cbnz	r3, 80171c2 <__swsetup_r+0x16>
 80171bc:	4628      	mov	r0, r5
 80171be:	f7ff fa77 	bl	80166b0 <__sinit>
 80171c2:	4b2e      	ldr	r3, [pc, #184]	; (801727c <__swsetup_r+0xd0>)
 80171c4:	429c      	cmp	r4, r3
 80171c6:	d10f      	bne.n	80171e8 <__swsetup_r+0x3c>
 80171c8:	686c      	ldr	r4, [r5, #4]
 80171ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171ce:	b29a      	uxth	r2, r3
 80171d0:	0715      	lsls	r5, r2, #28
 80171d2:	d42c      	bmi.n	801722e <__swsetup_r+0x82>
 80171d4:	06d0      	lsls	r0, r2, #27
 80171d6:	d411      	bmi.n	80171fc <__swsetup_r+0x50>
 80171d8:	2209      	movs	r2, #9
 80171da:	6032      	str	r2, [r6, #0]
 80171dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171e0:	81a3      	strh	r3, [r4, #12]
 80171e2:	f04f 30ff 	mov.w	r0, #4294967295
 80171e6:	bd70      	pop	{r4, r5, r6, pc}
 80171e8:	4b25      	ldr	r3, [pc, #148]	; (8017280 <__swsetup_r+0xd4>)
 80171ea:	429c      	cmp	r4, r3
 80171ec:	d101      	bne.n	80171f2 <__swsetup_r+0x46>
 80171ee:	68ac      	ldr	r4, [r5, #8]
 80171f0:	e7eb      	b.n	80171ca <__swsetup_r+0x1e>
 80171f2:	4b24      	ldr	r3, [pc, #144]	; (8017284 <__swsetup_r+0xd8>)
 80171f4:	429c      	cmp	r4, r3
 80171f6:	bf08      	it	eq
 80171f8:	68ec      	ldreq	r4, [r5, #12]
 80171fa:	e7e6      	b.n	80171ca <__swsetup_r+0x1e>
 80171fc:	0751      	lsls	r1, r2, #29
 80171fe:	d512      	bpl.n	8017226 <__swsetup_r+0x7a>
 8017200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017202:	b141      	cbz	r1, 8017216 <__swsetup_r+0x6a>
 8017204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017208:	4299      	cmp	r1, r3
 801720a:	d002      	beq.n	8017212 <__swsetup_r+0x66>
 801720c:	4630      	mov	r0, r6
 801720e:	f7ff fb5d 	bl	80168cc <_free_r>
 8017212:	2300      	movs	r3, #0
 8017214:	6363      	str	r3, [r4, #52]	; 0x34
 8017216:	89a3      	ldrh	r3, [r4, #12]
 8017218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801721c:	81a3      	strh	r3, [r4, #12]
 801721e:	2300      	movs	r3, #0
 8017220:	6063      	str	r3, [r4, #4]
 8017222:	6923      	ldr	r3, [r4, #16]
 8017224:	6023      	str	r3, [r4, #0]
 8017226:	89a3      	ldrh	r3, [r4, #12]
 8017228:	f043 0308 	orr.w	r3, r3, #8
 801722c:	81a3      	strh	r3, [r4, #12]
 801722e:	6923      	ldr	r3, [r4, #16]
 8017230:	b94b      	cbnz	r3, 8017246 <__swsetup_r+0x9a>
 8017232:	89a3      	ldrh	r3, [r4, #12]
 8017234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801723c:	d003      	beq.n	8017246 <__swsetup_r+0x9a>
 801723e:	4621      	mov	r1, r4
 8017240:	4630      	mov	r0, r6
 8017242:	f000 f919 	bl	8017478 <__smakebuf_r>
 8017246:	89a2      	ldrh	r2, [r4, #12]
 8017248:	f012 0301 	ands.w	r3, r2, #1
 801724c:	d00c      	beq.n	8017268 <__swsetup_r+0xbc>
 801724e:	2300      	movs	r3, #0
 8017250:	60a3      	str	r3, [r4, #8]
 8017252:	6963      	ldr	r3, [r4, #20]
 8017254:	425b      	negs	r3, r3
 8017256:	61a3      	str	r3, [r4, #24]
 8017258:	6923      	ldr	r3, [r4, #16]
 801725a:	b953      	cbnz	r3, 8017272 <__swsetup_r+0xc6>
 801725c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017260:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017264:	d1ba      	bne.n	80171dc <__swsetup_r+0x30>
 8017266:	bd70      	pop	{r4, r5, r6, pc}
 8017268:	0792      	lsls	r2, r2, #30
 801726a:	bf58      	it	pl
 801726c:	6963      	ldrpl	r3, [r4, #20]
 801726e:	60a3      	str	r3, [r4, #8]
 8017270:	e7f2      	b.n	8017258 <__swsetup_r+0xac>
 8017272:	2000      	movs	r0, #0
 8017274:	e7f7      	b.n	8017266 <__swsetup_r+0xba>
 8017276:	bf00      	nop
 8017278:	2000001c 	.word	0x2000001c
 801727c:	0801b760 	.word	0x0801b760
 8017280:	0801b780 	.word	0x0801b780
 8017284:	0801b740 	.word	0x0801b740

08017288 <_close_r>:
 8017288:	b538      	push	{r3, r4, r5, lr}
 801728a:	4c06      	ldr	r4, [pc, #24]	; (80172a4 <_close_r+0x1c>)
 801728c:	2300      	movs	r3, #0
 801728e:	4605      	mov	r5, r0
 8017290:	4608      	mov	r0, r1
 8017292:	6023      	str	r3, [r4, #0]
 8017294:	f7e9 fd22 	bl	8000cdc <_close>
 8017298:	1c43      	adds	r3, r0, #1
 801729a:	d102      	bne.n	80172a2 <_close_r+0x1a>
 801729c:	6823      	ldr	r3, [r4, #0]
 801729e:	b103      	cbz	r3, 80172a2 <_close_r+0x1a>
 80172a0:	602b      	str	r3, [r5, #0]
 80172a2:	bd38      	pop	{r3, r4, r5, pc}
 80172a4:	2000e508 	.word	0x2000e508

080172a8 <__sflush_r>:
 80172a8:	898a      	ldrh	r2, [r1, #12]
 80172aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172ae:	4605      	mov	r5, r0
 80172b0:	0710      	lsls	r0, r2, #28
 80172b2:	460c      	mov	r4, r1
 80172b4:	d45a      	bmi.n	801736c <__sflush_r+0xc4>
 80172b6:	684b      	ldr	r3, [r1, #4]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	dc05      	bgt.n	80172c8 <__sflush_r+0x20>
 80172bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80172be:	2b00      	cmp	r3, #0
 80172c0:	dc02      	bgt.n	80172c8 <__sflush_r+0x20>
 80172c2:	2000      	movs	r0, #0
 80172c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80172ca:	2e00      	cmp	r6, #0
 80172cc:	d0f9      	beq.n	80172c2 <__sflush_r+0x1a>
 80172ce:	2300      	movs	r3, #0
 80172d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80172d4:	682f      	ldr	r7, [r5, #0]
 80172d6:	602b      	str	r3, [r5, #0]
 80172d8:	d033      	beq.n	8017342 <__sflush_r+0x9a>
 80172da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80172dc:	89a3      	ldrh	r3, [r4, #12]
 80172de:	075a      	lsls	r2, r3, #29
 80172e0:	d505      	bpl.n	80172ee <__sflush_r+0x46>
 80172e2:	6863      	ldr	r3, [r4, #4]
 80172e4:	1ac0      	subs	r0, r0, r3
 80172e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80172e8:	b10b      	cbz	r3, 80172ee <__sflush_r+0x46>
 80172ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80172ec:	1ac0      	subs	r0, r0, r3
 80172ee:	2300      	movs	r3, #0
 80172f0:	4602      	mov	r2, r0
 80172f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80172f4:	6a21      	ldr	r1, [r4, #32]
 80172f6:	4628      	mov	r0, r5
 80172f8:	47b0      	blx	r6
 80172fa:	1c43      	adds	r3, r0, #1
 80172fc:	89a3      	ldrh	r3, [r4, #12]
 80172fe:	d106      	bne.n	801730e <__sflush_r+0x66>
 8017300:	6829      	ldr	r1, [r5, #0]
 8017302:	291d      	cmp	r1, #29
 8017304:	d84b      	bhi.n	801739e <__sflush_r+0xf6>
 8017306:	4a2b      	ldr	r2, [pc, #172]	; (80173b4 <__sflush_r+0x10c>)
 8017308:	40ca      	lsrs	r2, r1
 801730a:	07d6      	lsls	r6, r2, #31
 801730c:	d547      	bpl.n	801739e <__sflush_r+0xf6>
 801730e:	2200      	movs	r2, #0
 8017310:	6062      	str	r2, [r4, #4]
 8017312:	04d9      	lsls	r1, r3, #19
 8017314:	6922      	ldr	r2, [r4, #16]
 8017316:	6022      	str	r2, [r4, #0]
 8017318:	d504      	bpl.n	8017324 <__sflush_r+0x7c>
 801731a:	1c42      	adds	r2, r0, #1
 801731c:	d101      	bne.n	8017322 <__sflush_r+0x7a>
 801731e:	682b      	ldr	r3, [r5, #0]
 8017320:	b903      	cbnz	r3, 8017324 <__sflush_r+0x7c>
 8017322:	6560      	str	r0, [r4, #84]	; 0x54
 8017324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017326:	602f      	str	r7, [r5, #0]
 8017328:	2900      	cmp	r1, #0
 801732a:	d0ca      	beq.n	80172c2 <__sflush_r+0x1a>
 801732c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017330:	4299      	cmp	r1, r3
 8017332:	d002      	beq.n	801733a <__sflush_r+0x92>
 8017334:	4628      	mov	r0, r5
 8017336:	f7ff fac9 	bl	80168cc <_free_r>
 801733a:	2000      	movs	r0, #0
 801733c:	6360      	str	r0, [r4, #52]	; 0x34
 801733e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017342:	6a21      	ldr	r1, [r4, #32]
 8017344:	2301      	movs	r3, #1
 8017346:	4628      	mov	r0, r5
 8017348:	47b0      	blx	r6
 801734a:	1c41      	adds	r1, r0, #1
 801734c:	d1c6      	bne.n	80172dc <__sflush_r+0x34>
 801734e:	682b      	ldr	r3, [r5, #0]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d0c3      	beq.n	80172dc <__sflush_r+0x34>
 8017354:	2b1d      	cmp	r3, #29
 8017356:	d001      	beq.n	801735c <__sflush_r+0xb4>
 8017358:	2b16      	cmp	r3, #22
 801735a:	d101      	bne.n	8017360 <__sflush_r+0xb8>
 801735c:	602f      	str	r7, [r5, #0]
 801735e:	e7b0      	b.n	80172c2 <__sflush_r+0x1a>
 8017360:	89a3      	ldrh	r3, [r4, #12]
 8017362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017366:	81a3      	strh	r3, [r4, #12]
 8017368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801736c:	690f      	ldr	r7, [r1, #16]
 801736e:	2f00      	cmp	r7, #0
 8017370:	d0a7      	beq.n	80172c2 <__sflush_r+0x1a>
 8017372:	0793      	lsls	r3, r2, #30
 8017374:	680e      	ldr	r6, [r1, #0]
 8017376:	bf08      	it	eq
 8017378:	694b      	ldreq	r3, [r1, #20]
 801737a:	600f      	str	r7, [r1, #0]
 801737c:	bf18      	it	ne
 801737e:	2300      	movne	r3, #0
 8017380:	eba6 0807 	sub.w	r8, r6, r7
 8017384:	608b      	str	r3, [r1, #8]
 8017386:	f1b8 0f00 	cmp.w	r8, #0
 801738a:	dd9a      	ble.n	80172c2 <__sflush_r+0x1a>
 801738c:	4643      	mov	r3, r8
 801738e:	463a      	mov	r2, r7
 8017390:	6a21      	ldr	r1, [r4, #32]
 8017392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017394:	4628      	mov	r0, r5
 8017396:	47b0      	blx	r6
 8017398:	2800      	cmp	r0, #0
 801739a:	dc07      	bgt.n	80173ac <__sflush_r+0x104>
 801739c:	89a3      	ldrh	r3, [r4, #12]
 801739e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173a2:	81a3      	strh	r3, [r4, #12]
 80173a4:	f04f 30ff 	mov.w	r0, #4294967295
 80173a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173ac:	4407      	add	r7, r0
 80173ae:	eba8 0800 	sub.w	r8, r8, r0
 80173b2:	e7e8      	b.n	8017386 <__sflush_r+0xde>
 80173b4:	20400001 	.word	0x20400001

080173b8 <_fflush_r>:
 80173b8:	b538      	push	{r3, r4, r5, lr}
 80173ba:	690b      	ldr	r3, [r1, #16]
 80173bc:	4605      	mov	r5, r0
 80173be:	460c      	mov	r4, r1
 80173c0:	b1db      	cbz	r3, 80173fa <_fflush_r+0x42>
 80173c2:	b118      	cbz	r0, 80173cc <_fflush_r+0x14>
 80173c4:	6983      	ldr	r3, [r0, #24]
 80173c6:	b90b      	cbnz	r3, 80173cc <_fflush_r+0x14>
 80173c8:	f7ff f972 	bl	80166b0 <__sinit>
 80173cc:	4b0c      	ldr	r3, [pc, #48]	; (8017400 <_fflush_r+0x48>)
 80173ce:	429c      	cmp	r4, r3
 80173d0:	d109      	bne.n	80173e6 <_fflush_r+0x2e>
 80173d2:	686c      	ldr	r4, [r5, #4]
 80173d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173d8:	b17b      	cbz	r3, 80173fa <_fflush_r+0x42>
 80173da:	4621      	mov	r1, r4
 80173dc:	4628      	mov	r0, r5
 80173de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173e2:	f7ff bf61 	b.w	80172a8 <__sflush_r>
 80173e6:	4b07      	ldr	r3, [pc, #28]	; (8017404 <_fflush_r+0x4c>)
 80173e8:	429c      	cmp	r4, r3
 80173ea:	d101      	bne.n	80173f0 <_fflush_r+0x38>
 80173ec:	68ac      	ldr	r4, [r5, #8]
 80173ee:	e7f1      	b.n	80173d4 <_fflush_r+0x1c>
 80173f0:	4b05      	ldr	r3, [pc, #20]	; (8017408 <_fflush_r+0x50>)
 80173f2:	429c      	cmp	r4, r3
 80173f4:	bf08      	it	eq
 80173f6:	68ec      	ldreq	r4, [r5, #12]
 80173f8:	e7ec      	b.n	80173d4 <_fflush_r+0x1c>
 80173fa:	2000      	movs	r0, #0
 80173fc:	bd38      	pop	{r3, r4, r5, pc}
 80173fe:	bf00      	nop
 8017400:	0801b760 	.word	0x0801b760
 8017404:	0801b780 	.word	0x0801b780
 8017408:	0801b740 	.word	0x0801b740

0801740c <_lseek_r>:
 801740c:	b538      	push	{r3, r4, r5, lr}
 801740e:	4c07      	ldr	r4, [pc, #28]	; (801742c <_lseek_r+0x20>)
 8017410:	4605      	mov	r5, r0
 8017412:	4608      	mov	r0, r1
 8017414:	4611      	mov	r1, r2
 8017416:	2200      	movs	r2, #0
 8017418:	6022      	str	r2, [r4, #0]
 801741a:	461a      	mov	r2, r3
 801741c:	f7e9 fc85 	bl	8000d2a <_lseek>
 8017420:	1c43      	adds	r3, r0, #1
 8017422:	d102      	bne.n	801742a <_lseek_r+0x1e>
 8017424:	6823      	ldr	r3, [r4, #0]
 8017426:	b103      	cbz	r3, 801742a <_lseek_r+0x1e>
 8017428:	602b      	str	r3, [r5, #0]
 801742a:	bd38      	pop	{r3, r4, r5, pc}
 801742c:	2000e508 	.word	0x2000e508

08017430 <__swhatbuf_r>:
 8017430:	b570      	push	{r4, r5, r6, lr}
 8017432:	460e      	mov	r6, r1
 8017434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017438:	2900      	cmp	r1, #0
 801743a:	b090      	sub	sp, #64	; 0x40
 801743c:	4614      	mov	r4, r2
 801743e:	461d      	mov	r5, r3
 8017440:	da07      	bge.n	8017452 <__swhatbuf_r+0x22>
 8017442:	2300      	movs	r3, #0
 8017444:	602b      	str	r3, [r5, #0]
 8017446:	89b3      	ldrh	r3, [r6, #12]
 8017448:	061a      	lsls	r2, r3, #24
 801744a:	d410      	bmi.n	801746e <__swhatbuf_r+0x3e>
 801744c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017450:	e00e      	b.n	8017470 <__swhatbuf_r+0x40>
 8017452:	aa01      	add	r2, sp, #4
 8017454:	f000 f864 	bl	8017520 <_fstat_r>
 8017458:	2800      	cmp	r0, #0
 801745a:	dbf2      	blt.n	8017442 <__swhatbuf_r+0x12>
 801745c:	9a02      	ldr	r2, [sp, #8]
 801745e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017462:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017466:	425a      	negs	r2, r3
 8017468:	415a      	adcs	r2, r3
 801746a:	602a      	str	r2, [r5, #0]
 801746c:	e7ee      	b.n	801744c <__swhatbuf_r+0x1c>
 801746e:	2340      	movs	r3, #64	; 0x40
 8017470:	2000      	movs	r0, #0
 8017472:	6023      	str	r3, [r4, #0]
 8017474:	b010      	add	sp, #64	; 0x40
 8017476:	bd70      	pop	{r4, r5, r6, pc}

08017478 <__smakebuf_r>:
 8017478:	898b      	ldrh	r3, [r1, #12]
 801747a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801747c:	079d      	lsls	r5, r3, #30
 801747e:	4606      	mov	r6, r0
 8017480:	460c      	mov	r4, r1
 8017482:	d507      	bpl.n	8017494 <__smakebuf_r+0x1c>
 8017484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017488:	6023      	str	r3, [r4, #0]
 801748a:	6123      	str	r3, [r4, #16]
 801748c:	2301      	movs	r3, #1
 801748e:	6163      	str	r3, [r4, #20]
 8017490:	b002      	add	sp, #8
 8017492:	bd70      	pop	{r4, r5, r6, pc}
 8017494:	ab01      	add	r3, sp, #4
 8017496:	466a      	mov	r2, sp
 8017498:	f7ff ffca 	bl	8017430 <__swhatbuf_r>
 801749c:	9900      	ldr	r1, [sp, #0]
 801749e:	4605      	mov	r5, r0
 80174a0:	4630      	mov	r0, r6
 80174a2:	f7ff fa61 	bl	8016968 <_malloc_r>
 80174a6:	b948      	cbnz	r0, 80174bc <__smakebuf_r+0x44>
 80174a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174ac:	059a      	lsls	r2, r3, #22
 80174ae:	d4ef      	bmi.n	8017490 <__smakebuf_r+0x18>
 80174b0:	f023 0303 	bic.w	r3, r3, #3
 80174b4:	f043 0302 	orr.w	r3, r3, #2
 80174b8:	81a3      	strh	r3, [r4, #12]
 80174ba:	e7e3      	b.n	8017484 <__smakebuf_r+0xc>
 80174bc:	4b0d      	ldr	r3, [pc, #52]	; (80174f4 <__smakebuf_r+0x7c>)
 80174be:	62b3      	str	r3, [r6, #40]	; 0x28
 80174c0:	89a3      	ldrh	r3, [r4, #12]
 80174c2:	6020      	str	r0, [r4, #0]
 80174c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174c8:	81a3      	strh	r3, [r4, #12]
 80174ca:	9b00      	ldr	r3, [sp, #0]
 80174cc:	6163      	str	r3, [r4, #20]
 80174ce:	9b01      	ldr	r3, [sp, #4]
 80174d0:	6120      	str	r0, [r4, #16]
 80174d2:	b15b      	cbz	r3, 80174ec <__smakebuf_r+0x74>
 80174d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174d8:	4630      	mov	r0, r6
 80174da:	f000 f833 	bl	8017544 <_isatty_r>
 80174de:	b128      	cbz	r0, 80174ec <__smakebuf_r+0x74>
 80174e0:	89a3      	ldrh	r3, [r4, #12]
 80174e2:	f023 0303 	bic.w	r3, r3, #3
 80174e6:	f043 0301 	orr.w	r3, r3, #1
 80174ea:	81a3      	strh	r3, [r4, #12]
 80174ec:	89a3      	ldrh	r3, [r4, #12]
 80174ee:	431d      	orrs	r5, r3
 80174f0:	81a5      	strh	r5, [r4, #12]
 80174f2:	e7cd      	b.n	8017490 <__smakebuf_r+0x18>
 80174f4:	08016631 	.word	0x08016631

080174f8 <__malloc_lock>:
 80174f8:	4770      	bx	lr

080174fa <__malloc_unlock>:
 80174fa:	4770      	bx	lr

080174fc <_read_r>:
 80174fc:	b538      	push	{r3, r4, r5, lr}
 80174fe:	4c07      	ldr	r4, [pc, #28]	; (801751c <_read_r+0x20>)
 8017500:	4605      	mov	r5, r0
 8017502:	4608      	mov	r0, r1
 8017504:	4611      	mov	r1, r2
 8017506:	2200      	movs	r2, #0
 8017508:	6022      	str	r2, [r4, #0]
 801750a:	461a      	mov	r2, r3
 801750c:	f7e9 fb7e 	bl	8000c0c <_read>
 8017510:	1c43      	adds	r3, r0, #1
 8017512:	d102      	bne.n	801751a <_read_r+0x1e>
 8017514:	6823      	ldr	r3, [r4, #0]
 8017516:	b103      	cbz	r3, 801751a <_read_r+0x1e>
 8017518:	602b      	str	r3, [r5, #0]
 801751a:	bd38      	pop	{r3, r4, r5, pc}
 801751c:	2000e508 	.word	0x2000e508

08017520 <_fstat_r>:
 8017520:	b538      	push	{r3, r4, r5, lr}
 8017522:	4c07      	ldr	r4, [pc, #28]	; (8017540 <_fstat_r+0x20>)
 8017524:	2300      	movs	r3, #0
 8017526:	4605      	mov	r5, r0
 8017528:	4608      	mov	r0, r1
 801752a:	4611      	mov	r1, r2
 801752c:	6023      	str	r3, [r4, #0]
 801752e:	f7e9 fbe1 	bl	8000cf4 <_fstat>
 8017532:	1c43      	adds	r3, r0, #1
 8017534:	d102      	bne.n	801753c <_fstat_r+0x1c>
 8017536:	6823      	ldr	r3, [r4, #0]
 8017538:	b103      	cbz	r3, 801753c <_fstat_r+0x1c>
 801753a:	602b      	str	r3, [r5, #0]
 801753c:	bd38      	pop	{r3, r4, r5, pc}
 801753e:	bf00      	nop
 8017540:	2000e508 	.word	0x2000e508

08017544 <_isatty_r>:
 8017544:	b538      	push	{r3, r4, r5, lr}
 8017546:	4c06      	ldr	r4, [pc, #24]	; (8017560 <_isatty_r+0x1c>)
 8017548:	2300      	movs	r3, #0
 801754a:	4605      	mov	r5, r0
 801754c:	4608      	mov	r0, r1
 801754e:	6023      	str	r3, [r4, #0]
 8017550:	f7e9 fbe0 	bl	8000d14 <_isatty>
 8017554:	1c43      	adds	r3, r0, #1
 8017556:	d102      	bne.n	801755e <_isatty_r+0x1a>
 8017558:	6823      	ldr	r3, [r4, #0]
 801755a:	b103      	cbz	r3, 801755e <_isatty_r+0x1a>
 801755c:	602b      	str	r3, [r5, #0]
 801755e:	bd38      	pop	{r3, r4, r5, pc}
 8017560:	2000e508 	.word	0x2000e508

08017564 <_init>:
 8017564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017566:	bf00      	nop
 8017568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801756a:	bc08      	pop	{r3}
 801756c:	469e      	mov	lr, r3
 801756e:	4770      	bx	lr

08017570 <_fini>:
 8017570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017572:	bf00      	nop
 8017574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017576:	bc08      	pop	{r3}
 8017578:	469e      	mov	lr, r3
 801757a:	4770      	bx	lr
